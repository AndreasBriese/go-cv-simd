//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x4530000043300000
DATA LCDATA1<>+0x008(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x010(SB)/8, $0x4330000000000000
DATA LCDATA1<>+0x018(SB)/8, $0x4530000000000000
DATA LCDATA1<>+0x020(SB)/8, $0x3fe0000000000000
DATA LCDATA1<>+0x028(SB)/8, $0xbfe0000000000000
DATA LCDATA1<>+0x030(SB)/8, $0x0000000041800000
GLOBL LCDATA1<>(SB), 8, $56

TEXT ·_SimdSse2EstimateAlphaIndexX(SB), 7, $96-32

	MOVQ SP, BP
	ANDQ $-16, BP
	SUBQ $32, BP
	MOVQ SP, -48(BP)
	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	LEAQ LCDATA1<>(SB), BP
	ANDQ $-16, SP
	SUBQ $32, SP

	WORD $0x8949; BYTE $0xcc     // mov    r12, rcx
	WORD $0x8949; BYTE $0xd6     // mov    r14, rdx
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi
	WORD $0x8948; BYTE $0xfb     // mov    rbx, rdi
	WORD $0x854d; BYTE $0xff     // test    r15, r15
	JE   LBB0_9
	WORD $0xd889                 // mov    eax, ebx
	WORD $0xe083; BYTE $0x01     // and    eax, 1
	WORD $0x8548; BYTE $0xdb     // test    rbx, rbx
	JS   LBB0_2
	LONG $0x2a0f48f3; BYTE $0xc3 // cvtsi2ss    xmm0, rbx
	JMP  LBB0_4

LBB0_2:
	WORD $0x8948; BYTE $0xd9     // mov    rcx, rbx
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x2a0f48f3; BYTE $0xc0 // cvtsi2ss    xmm0, rax
	LONG $0xc0580ff3             // addss    xmm0, xmm0

LBB0_4:
	WORD $0x8944; BYTE $0xf8     // mov    eax, r15d
	WORD $0xe083; BYTE $0x01     // and    eax, 1
	WORD $0x854d; BYTE $0xff     // test    r15, r15
	JS   LBB0_5
	LONG $0x2a0f49f3; BYTE $0xcf // cvtsi2ss    xmm1, r15
	JMP  LBB0_7

LBB0_5:
	WORD $0x894c; BYTE $0xf9     // mov    rcx, r15
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x2a0f48f3; BYTE $0xc8 // cvtsi2ss    xmm1, rax
	LONG $0xc9580ff3             // addss    xmm1, xmm1

LBB0_7:
	LONG $0xc15e0ff3               // divss    xmm0, xmm1
	LONG $0xc05a0ff3               // cvtss2sd    xmm0, xmm0
	LONG $0x44110ff2; WORD $0x1024 // movsd    qword [rsp + 16], xmm0
	LONG $0xfec38348               // add    rbx, -2
	WORD $0x3145; BYTE $0xed       // xor    r13d, r13d

LBB0_8:
	LONG $0x6e0f4966; BYTE $0xc5   // movq    xmm0, r13
	LONG $0x45620f66; BYTE $0x00   // punpckldq    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x455c0f66; BYTE $0x10   // subpd    xmm0, oword 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0xc8700f66; BYTE $0x4e   // pshufd    xmm1, xmm0, 78
	LONG $0xc8580f66               // addpd    xmm1, xmm0
	LONG $0x45100ff2; BYTE $0x20   // movsd    xmm0, qword 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0xc8580ff2               // addsd    xmm1, xmm0
	LONG $0x4c590ff2; WORD $0x1024 // mulsd    xmm1, qword [rsp + 16]
	LONG $0x4d580ff2; BYTE $0x28   // addsd    xmm1, qword 40[rbp] /* [rip + .LCPI0_3] */
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc15a0ff2               // cvtsd2ss    xmm0, xmm1
	LONG $0x44110ff3; WORD $0x0c24 // movss    dword [rsp + 12], xmm0
	LONG $0xc05a0ff3               // cvtss2sd    xmm0, xmm0
	CALL clib·_floor(SB)
	LONG $0x2c0f48f2; BYTE $0xc0   // cvttsd2si    rax, xmm0
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0   // cvtsi2ss    xmm0, rax
	LONG $0x4c100ff3; WORD $0x0c24 // movss    xmm1, dword [rsp + 12]
	LONG $0xc85c0ff3               // subss    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0       // test    rax, rax
	LONG $0x000000b9; BYTE $0x00   // mov    ecx, 0
	LONG $0xc8490f48               // cmovns    rcx, rax
	LONG $0x000000ba; BYTE $0x00   // mov    edx, 0
	WORD $0x480f; BYTE $0xc2       // cmovs    eax, edx
	LONG $0x4d590ff3; BYTE $0x30   // mulss    xmm1, dword 48[rbp] /* [rip + .LCPI0_4] */
	WORD $0x570f; BYTE $0xc0       // xorps    xmm0, xmm0
	LONG $0xc15a0ff3               // cvtss2sd    xmm0, xmm1
	LONG $0x45580ff2; BYTE $0x20   // addsd    xmm0, qword 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0xd02c0ff2               // cvttsd2si    edx, xmm0
	LONG $0x000000be; BYTE $0x00   // mov    esi, 0
	LONG $0xf2490f66               // cmovns    si, dx
	WORD $0x3948; BYTE $0xd9       // cmp    rcx, rbx
	WORD $0xd989                   // mov    ecx, ebx
	WORD $0x4e0f; BYTE $0xc8       // cmovle    ecx, eax
	LONG $0xae0c8943               // mov    dword [r14 + 4*r13], ecx
	LONG $0x0010b866               // mov    ax, 16
	LONG $0xf04f0f66               // cmovg    si, ax
	LONG $0x74894366; WORD $0x02ac // mov    word [r12 + 4*r13 + 2], si
	LONG $0x000010b8; BYTE $0x00   // mov    eax, 16
	WORD $0xf029                   // sub    eax, esi
	LONG $0x04894366; BYTE $0xac   // mov    word [r12 + 4*r13], ax
	WORD $0xff49; BYTE $0xc5       // inc    r13
	WORD $0x394d; BYTE $0xef       // cmp    r15, r13
	JNE  LBB0_8

LBB0_9:
	MOVQ -48(SP), SP
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x4530000043300000
DATA LCDATA2<>+0x008(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x010(SB)/8, $0x4330000000000000
DATA LCDATA2<>+0x018(SB)/8, $0x4530000000000000
DATA LCDATA2<>+0x020(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x028(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA2<>+0x030(SB)/8, $0x0080008000800080
DATA LCDATA2<>+0x038(SB)/8, $0x0080008000800080
DATA LCDATA2<>+0x040(SB)/8, $0x0000000000000002
DATA LCDATA2<>+0x048(SB)/8, $0x0000000000000003
DATA LCDATA2<>+0x050(SB)/8, $0x0000000000000004
DATA LCDATA2<>+0x058(SB)/8, $0x0000000000000004
DATA LCDATA2<>+0x060(SB)/8, $0x0000000000000008
DATA LCDATA2<>+0x068(SB)/8, $0x0000000000000008
DATA LCDATA2<>+0x070(SB)/8, $0x3fe0000000000000
DATA LCDATA2<>+0x078(SB)/8, $0xbfe0000000000000
DATA LCDATA2<>+0x080(SB)/8, $0x0000000041800000
GLOBL LCDATA2<>(SB), 8, $136

TEXT ·_SimdSse2ResizeBilinear(SB), 7, $368-80

	MOVQ SP, BP
	ANDQ $-16, BP
	SUBQ $272, BP
	MOVQ SP, -48(BP)
	MOVQ arg10+72(FP), DI
	MOVQ DI, -56(BP)
	MOVQ arg9+64(FP), DI
	MOVQ DI, -64(BP)
	MOVQ arg8+56(FP), DI
	MOVQ DI, -72(BP)
	MOVQ arg7+48(FP), DI
	MOVQ DI, -80(BP)
	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	LEAQ LCDATA2<>(SB), BP
	ANDQ $-16, SP
	SUBQ $272, SP

	LONG $0x244c894c; BYTE $0x08       // mov    qword [rsp + 8], r9
	LONG $0x2444894c; BYTE $0x70       // mov    qword [rsp + 112], r8
	LONG $0x248c8948; LONG $0x00000098 // mov    qword [rsp + 152], rcx
	WORD $0x8948; BYTE $0xd3           // mov    rbx, rdx
	LONG $0x24b48948; LONG $0x00000080 // mov    qword [rsp + 128], rsi
	LONG $0x24bc8948; LONG $0x00000090 // mov    qword [rsp + 144], rdi
	LONG $0x24748b48; BYTE $0xc8       // mov    rsi, qword -56[rsp] /* [rbp + 40] */
	LONG $0x24648b4c; BYTE $0xc0       // mov    r12, qword -64[rsp] /* [rbp + 32] */
	LONG $0x246c8b4c; BYTE $0xb0       // mov    r13, qword -80[rsp] /* [rbp + 16] */
	LONG $0x02fc8349                   // cmp    r12, 2
	JE   LBB1_52
	LONG $0x01fc8349                   // cmp    r12, 1
	JNE  LBB1_102
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x0f798d4c                   // lea    r15, [rcx + 15]
	LONG $0x247c894c; BYTE $0x18       // mov    qword [rsp + 24], r15
	LONG $0xf0e78349                   // and    r15, -16
	LONG $0x24748948; BYTE $0x60       // mov    qword [rsp + 96], rsi
	LONG $0x24748948; BYTE $0x30       // mov    qword [rsp + 48], rsi
	LONG $0x7e048d4a                   // lea    rax, [rsi + 2*r15]
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	LONG $0x78048d4a                   // lea    rax, [rax + 2*r15]
	LONG $0x24448948; BYTE $0x40       // mov    qword [rsp + 64], rax
	LONG $0x88048d48                   // lea    rax, [rax + 4*rcx]
	LONG $0x24448948; BYTE $0x48       // mov    qword [rsp + 72], rax
	LONG $0x88048d48                   // lea    rax, [rax + 4*rcx]
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24448948; BYTE $0x78       // mov    qword [rsp + 120], rax
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x854d; BYTE $0xed           // test    r13, r13
	JE   LBB1_11
	WORD $0x894c; BYTE $0xef           // mov    rdi, r13
	WORD $0xd889                       // mov    eax, ebx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	WORD $0x8548; BYTE $0xdb           // test    rbx, rbx
	JS   LBB1_4
	LONG $0x2a0f48f3; BYTE $0xc3       // cvtsi2ss    xmm0, rbx
	JMP  LBB1_6

LBB1_52:
	LONG $0x24548b48; BYTE $0x08       // mov    rdx, qword [rsp + 8]
	LONG $0x95048d48; LONG $0x0000003c // lea    rax, [4*rdx + 60]
	LONG $0x24448948; BYTE $0x18       // mov    qword [rsp + 24], rax
	LONG $0xc0e08348                   // and    rax, -64
	LONG $0x24748948; BYTE $0x60       // mov    qword [rsp + 96], rsi
	LONG $0x24748948; BYTE $0x30       // mov    qword [rsp + 48], rsi
	LONG $0x060c8d48                   // lea    rcx, [rsi + rax]
	LONG $0x244c8948; BYTE $0x38       // mov    qword [rsp + 56], rcx
	WORD $0x0148; BYTE $0xc8           // add    rax, rcx
	LONG $0x24448948; BYTE $0x40       // mov    qword [rsp + 64], rax
	LONG $0x90048d48                   // lea    rax, [rax + 4*rdx]
	LONG $0x24448948; BYTE $0x48       // mov    qword [rsp + 72], rax
	LONG $0x90048d48                   // lea    rax, [rax + 4*rdx]
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	LONG $0x24448948; BYTE $0x28       // mov    qword [rsp + 40], rax
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24448948; BYTE $0x78       // mov    qword [rsp + 120], rax
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x854d; BYTE $0xed           // test    r13, r13
	JE   LBB1_61
	WORD $0xd889                       // mov    eax, ebx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	WORD $0x8548; BYTE $0xdb           // test    rbx, rbx
	JS   LBB1_54
	LONG $0x2a0f48f3; BYTE $0xc3       // cvtsi2ss    xmm0, rbx
	JMP  LBB1_56

LBB1_102:
	WORD $0x894c; BYTE $0xe0           // mov    rax, r12
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x24748948; BYTE $0x60       // mov    qword [rsp + 96], rsi
	LONG $0x24748948; BYTE $0x30       // mov    qword [rsp + 48], rsi
	LONG $0x860c8d48                   // lea    rcx, [rsi + 4*rax]
	LONG $0x244c8948; BYTE $0x38       // mov    qword [rsp + 56], rcx
	LONG $0x248c8948; LONG $0x000000e0 // mov    qword [rsp + 224], rcx
	LONG $0x810c8d48                   // lea    rcx, [rcx + 4*rax]
	LONG $0x244c8948; BYTE $0x40       // mov    qword [rsp + 64], rcx
	LONG $0x248c8948; LONG $0x000000b0 // mov    qword [rsp + 176], rcx
	LONG $0xa90c8d4a                   // lea    rcx, [rcx + 4*r13]
	LONG $0x244c8948; BYTE $0x48       // mov    qword [rsp + 72], rcx
	LONG $0x248c8948; LONG $0x000000c0 // mov    qword [rsp + 192], rcx
	LONG $0xa90c8d4a                   // lea    rcx, [rcx + 4*r13]
	LONG $0x244c8948; BYTE $0x50       // mov    qword [rsp + 80], rcx
	LONG $0x24448948; BYTE $0x20       // mov    qword [rsp + 32], rax
	LONG $0x248c8948; LONG $0x000000a8 // mov    qword [rsp + 168], rcx
	LONG $0x81048d48                   // lea    rax, [rcx + 4*rax]
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	WORD $0x854d; BYTE $0xed           // test    r13, r13
	JE   LBB1_111
	WORD $0xd889                       // mov    eax, ebx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	WORD $0x8548; BYTE $0xdb           // test    rbx, rbx
	JS   LBB1_104
	LONG $0x2a0f48f3; BYTE $0xc3       // cvtsi2ss    xmm0, rbx
	JMP  LBB1_106

LBB1_4:
	WORD $0x8948; BYTE $0xd9     // mov    rcx, rbx
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x2a0f48f3; BYTE $0xc0 // cvtsi2ss    xmm0, rax
	LONG $0xc0580ff3             // addss    xmm0, xmm0

LBB1_6:
	LONG $0x24548b48; BYTE $0x08 // mov    rdx, qword [rsp + 8]
	LONG $0x24748b48; BYTE $0xc8 // mov    rsi, qword -56[rsp] /* [rbp + 40] */
	WORD $0xf889                 // mov    eax, edi
	WORD $0xe083; BYTE $0x01     // and    eax, 1
	WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JS   LBB1_7
	LONG $0x2a0f48f3; BYTE $0xcf // cvtsi2ss    xmm1, rdi
	JMP  LBB1_9

LBB1_54:
	WORD $0x8948; BYTE $0xd9     // mov    rcx, rbx
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x2a0f48f3; BYTE $0xc0 // cvtsi2ss    xmm0, rax
	LONG $0xc0580ff3             // addss    xmm0, xmm0

LBB1_56:
	LONG $0x24548b48; BYTE $0x08 // mov    rdx, qword [rsp + 8]
	LONG $0x24748b48; BYTE $0xc8 // mov    rsi, qword -56[rsp] /* [rbp + 40] */
	WORD $0x8944; BYTE $0xe8     // mov    eax, r13d
	WORD $0xe083; BYTE $0x01     // and    eax, 1
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	JS   LBB1_57
	LONG $0x2a0f49f3; BYTE $0xcd // cvtsi2ss    xmm1, r13
	JMP  LBB1_59

LBB1_104:
	WORD $0x8948; BYTE $0xd9     // mov    rcx, rbx
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x2a0f48f3; BYTE $0xc0 // cvtsi2ss    xmm0, rax
	LONG $0xc0580ff3             // addss    xmm0, xmm0

LBB1_106:
	LONG $0x24548b48; BYTE $0x08 // mov    rdx, qword [rsp + 8]
	LONG $0x24748b48; BYTE $0xc8 // mov    rsi, qword -56[rsp] /* [rbp + 40] */
	WORD $0x8944; BYTE $0xe8     // mov    eax, r13d
	WORD $0xe083; BYTE $0x01     // and    eax, 1
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	JS   LBB1_107
	LONG $0x2a0f49f3; BYTE $0xcd // cvtsi2ss    xmm1, r13
	JMP  LBB1_109

LBB1_7:
	WORD $0x8948; BYTE $0xf9     // mov    rcx, rdi
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x2a0f48f3; BYTE $0xc8 // cvtsi2ss    xmm1, rax
	LONG $0xc9580ff3             // addss    xmm1, xmm1

LBB1_9:
	LONG $0xc15e0ff3                                 // divss    xmm0, xmm1
	LONG $0xc05a0ff3                                 // cvtss2sd    xmm0, xmm0
	LONG $0x44110ff2; WORD $0x1024                   // movsd    qword [rsp + 16], xmm0
	LONG $0xfec38348                                 // add    rbx, -2
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x3fff // mov    rax, 4611686018427387888
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0xd50c8d48; LONG $0x00000000               // lea    rcx, [8*rdx]
	LONG $0x81248d4c                                 // lea    r12, [rcx + 4*rax]
	LONG $0xbc2c8d4d                                 // lea    r13, [r12 + 4*rdi]
	WORD $0x0149; BYTE $0xf5                         // add    r13, rsi
	WORD $0x0149; BYTE $0xf4                         // add    r12, rsi
	WORD $0x3145; BYTE $0xf6                         // xor    r14d, r14d

LBB1_10:
	LONG $0x6e0f4966; BYTE $0xc6       // movq    xmm0, r14
	LONG $0x45620f66; BYTE $0x00       // punpckldq    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x455c0f66; BYTE $0x10       // subpd    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */
	LONG $0xc8700f66; BYTE $0x4e       // pshufd    xmm1, xmm0, 78
	LONG $0xc8580f66                   // addpd    xmm1, xmm0
	LONG $0x45100ff2; BYTE $0x70       // movsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xc8580ff2                   // addsd    xmm1, xmm0
	LONG $0x4c590ff2; WORD $0x1024     // mulsd    xmm1, qword [rsp + 16]
	LONG $0x4d580ff2; BYTE $0x78       // addsd    xmm1, qword 120[rbp] /* [rip + .LCPI1_3] */
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0xc15a0ff2                   // cvtsd2ss    xmm0, xmm1
	LONG $0x44110ff3; WORD $0x2024     // movss    dword [rsp + 32], xmm0
	LONG $0xc05a0ff3                   // cvtss2sd    xmm0, xmm0
	CALL clib·_floor(SB)
	LONG $0x2c0f48f2; BYTE $0xc0       // cvttsd2si    rax, xmm0
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0       // cvtsi2ss    xmm0, rax
	LONG $0x4c100ff3; WORD $0x2024     // movss    xmm1, dword [rsp + 32]
	LONG $0xc85c0ff3                   // subss    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0           // test    rax, rax
	LONG $0x000000b9; BYTE $0x00       // mov    ecx, 0
	LONG $0xc8490f48                   // cmovns    rcx, rax
	LONG $0x000000be; BYTE $0x00       // mov    esi, 0
	WORD $0x480f; BYTE $0xc6           // cmovs    eax, esi
	LONG $0x8d590ff3; LONG $0x00000080 // mulss    xmm1, dword 128[rbp] /* [rip + .LCPI1_4] */
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0xc15a0ff3                   // cvtss2sd    xmm0, xmm1
	LONG $0x45580ff2; BYTE $0x70       // addsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xd02c0ff2                   // cvttsd2si    edx, xmm0
	WORD $0x480f; BYTE $0xd6           // cmovs    edx, esi
	WORD $0x3948; BYTE $0xd9           // cmp    rcx, rbx
	LONG $0x000010b9; BYTE $0x00       // mov    ecx, 16
	WORD $0x4f0f; BYTE $0xd1           // cmovg    edx, ecx
	WORD $0xd989                       // mov    ecx, ebx
	WORD $0x4e0f; BYTE $0xc8           // cmovle    ecx, eax
	LONG $0xb40c8943                   // mov    dword [r12 + 4*r14], ecx
	LONG $0xb5548943; BYTE $0x00       // mov    dword [r13 + 4*r14], edx
	WORD $0xff49; BYTE $0xc6           // inc    r14
	LONG $0x1075394c                   // cmp    qword [rbp + 16], r14
	JNE  LBB1_10

LBB1_11:
	LONG $0x24548b48; BYTE $0x08       // mov    rdx, qword [rsp + 8]
	WORD $0x8548; BYTE $0xd2           // test    rdx, rdx
	LONG $0x24ac8b4c; LONG $0x00000080 // mov    r13, qword [rsp + 128]
	JE   LBB1_20
	WORD $0x8944; BYTE $0xe8           // mov    eax, r13d
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	WORD $0x854d; BYTE $0xed           // test    r13, r13
	JS   LBB1_13
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0x2a0f49f3; BYTE $0xc5       // cvtsi2ss    xmm0, r13
	JMP  LBB1_15

LBB1_57:
	WORD $0x894c; BYTE $0xe9     // mov    rcx, r13
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x2a0f48f3; BYTE $0xc8 // cvtsi2ss    xmm1, rax
	LONG $0xc9580ff3             // addss    xmm1, xmm1

LBB1_59:
	LONG $0xc15e0ff3                                 // divss    xmm0, xmm1
	LONG $0xc05a0ff3                                 // cvtss2sd    xmm0, xmm0
	LONG $0x44110ff2; WORD $0x1024                   // movsd    qword [rsp + 16], xmm0
	LONG $0xfec38348                                 // add    rbx, -2
	LONG $0xffc0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775744
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0xd50c8d48; LONG $0x00000000               // lea    rcx, [8*rdx]
	LONG $0x413c8d4c                                 // lea    r15, [rcx + 2*rax]
	LONG $0xaf248d4f                                 // lea    r12, [r15 + 4*r13]
	WORD $0x0149; BYTE $0xf4                         // add    r12, rsi
	WORD $0x0149; BYTE $0xf7                         // add    r15, rsi
	WORD $0x3145; BYTE $0xf6                         // xor    r14d, r14d

LBB1_60:
	LONG $0x6e0f4966; BYTE $0xc6       // movq    xmm0, r14
	LONG $0x45620f66; BYTE $0x00       // punpckldq    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x455c0f66; BYTE $0x10       // subpd    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */
	LONG $0xc8700f66; BYTE $0x4e       // pshufd    xmm1, xmm0, 78
	LONG $0xc8580f66                   // addpd    xmm1, xmm0
	LONG $0x45100ff2; BYTE $0x70       // movsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xc8580ff2                   // addsd    xmm1, xmm0
	LONG $0x4c590ff2; WORD $0x1024     // mulsd    xmm1, qword [rsp + 16]
	LONG $0x4d580ff2; BYTE $0x78       // addsd    xmm1, qword 120[rbp] /* [rip + .LCPI1_3] */
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0xc15a0ff2                   // cvtsd2ss    xmm0, xmm1
	LONG $0x44110ff3; WORD $0x2024     // movss    dword [rsp + 32], xmm0
	LONG $0xc05a0ff3                   // cvtss2sd    xmm0, xmm0
	CALL clib·_floor(SB)
	LONG $0x2c0f48f2; BYTE $0xc0       // cvttsd2si    rax, xmm0
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0       // cvtsi2ss    xmm0, rax
	LONG $0x4c100ff3; WORD $0x2024     // movss    xmm1, dword [rsp + 32]
	LONG $0xc85c0ff3                   // subss    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0           // test    rax, rax
	LONG $0x000000b9; BYTE $0x00       // mov    ecx, 0
	LONG $0xc8490f48                   // cmovns    rcx, rax
	LONG $0x000000be; BYTE $0x00       // mov    esi, 0
	WORD $0x480f; BYTE $0xc6           // cmovs    eax, esi
	LONG $0x8d590ff3; LONG $0x00000080 // mulss    xmm1, dword 128[rbp] /* [rip + .LCPI1_4] */
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0xc15a0ff3                   // cvtss2sd    xmm0, xmm1
	LONG $0x45580ff2; BYTE $0x70       // addsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xd02c0ff2                   // cvttsd2si    edx, xmm0
	WORD $0x480f; BYTE $0xd6           // cmovs    edx, esi
	WORD $0x3948; BYTE $0xd9           // cmp    rcx, rbx
	LONG $0x000010b9; BYTE $0x00       // mov    ecx, 16
	WORD $0x4f0f; BYTE $0xd1           // cmovg    edx, ecx
	WORD $0xd989                       // mov    ecx, ebx
	WORD $0x4e0f; BYTE $0xc8           // cmovle    ecx, eax
	LONG $0xb70c8943                   // mov    dword [r15 + 4*r14], ecx
	LONG $0xb4148943                   // mov    dword [r12 + 4*r14], edx
	WORD $0xff49; BYTE $0xc6           // inc    r14
	WORD $0x394d; BYTE $0xf5           // cmp    r13, r14
	JNE  LBB1_60

LBB1_61:
	LONG $0x24548b48; BYTE $0x08       // mov    rdx, qword [rsp + 8]
	LONG $0x95048d48; LONG $0x00000000 // lea    rax, [4*rdx]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	WORD $0x8548; BYTE $0xd2           // test    rdx, rdx
	LONG $0x248c8b48; LONG $0x00000080 // mov    rcx, qword [rsp + 128]
	JE   LBB1_70
	WORD $0xc889                       // mov    eax, ecx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	WORD $0x8548; BYTE $0xc9           // test    rcx, rcx
	WORD $0x8948; BYTE $0xce           // mov    rsi, rcx
	JS   LBB1_63
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc6       // cvtsi2ss    xmm0, rsi
	JMP  LBB1_65

LBB1_107:
	WORD $0x894c; BYTE $0xe9     // mov    rcx, r13
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	LONG $0x2a0f48f3; BYTE $0xc8 // cvtsi2ss    xmm1, rax
	LONG $0xc9580ff3             // addss    xmm1, xmm1

LBB1_109:
	LONG $0xc15e0ff3                   // divss    xmm0, xmm1
	LONG $0xc05a0ff3                   // cvtss2sd    xmm0, xmm0
	LONG $0x44110ff2; WORD $0x1824     // movsd    qword [rsp + 24], xmm0
	LONG $0xfec38348                   // add    rbx, -2
	WORD $0x894c; BYTE $0xe0           // mov    rax, r12
	LONG $0xc2af0f48                   // imul    rax, rdx
	LONG $0xad0c8d4a; LONG $0x00000000 // lea    rcx, [4*r13]
	LONG $0xc13c8d4c                   // lea    r15, [rcx + 8*rax]
	WORD $0x0149; BYTE $0xf7           // add    r15, rsi
	LONG $0xc6048d48                   // lea    rax, [rsi + 8*rax]
	LONG $0x24448948; BYTE $0x28       // mov    qword [rsp + 40], rax
	WORD $0x3145; BYTE $0xf6           // xor    r14d, r14d

LBB1_110:
	LONG $0x6e0f4966; BYTE $0xc6       // movq    xmm0, r14
	LONG $0x45620f66; BYTE $0x00       // punpckldq    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x455c0f66; BYTE $0x10       // subpd    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */
	LONG $0xc8700f66; BYTE $0x4e       // pshufd    xmm1, xmm0, 78
	LONG $0xc8580f66                   // addpd    xmm1, xmm0
	LONG $0x45100ff2; BYTE $0x70       // movsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xc8580ff2                   // addsd    xmm1, xmm0
	LONG $0x4c590ff2; WORD $0x1824     // mulsd    xmm1, qword [rsp + 24]
	LONG $0x4d580ff2; BYTE $0x78       // addsd    xmm1, qword 120[rbp] /* [rip + .LCPI1_3] */
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0xc15a0ff2                   // cvtsd2ss    xmm0, xmm1
	LONG $0x44110ff3; WORD $0x1024     // movss    dword [rsp + 16], xmm0
	LONG $0xc05a0ff3                   // cvtss2sd    xmm0, xmm0
	CALL clib·_floor(SB)
	LONG $0x2c0f48f2; BYTE $0xc0       // cvttsd2si    rax, xmm0
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0       // cvtsi2ss    xmm0, rax
	LONG $0x4c100ff3; WORD $0x1024     // movss    xmm1, dword [rsp + 16]
	LONG $0xc85c0ff3                   // subss    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0           // test    rax, rax
	LONG $0x000000b9; BYTE $0x00       // mov    ecx, 0
	LONG $0xc8490f48                   // cmovns    rcx, rax
	LONG $0x000000be; BYTE $0x00       // mov    esi, 0
	WORD $0x480f; BYTE $0xc6           // cmovs    eax, esi
	LONG $0x8d590ff3; LONG $0x00000080 // mulss    xmm1, dword 128[rbp] /* [rip + .LCPI1_4] */
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0xc15a0ff3                   // cvtss2sd    xmm0, xmm1
	LONG $0x45580ff2; BYTE $0x70       // addsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xd02c0ff2                   // cvttsd2si    edx, xmm0
	WORD $0x480f; BYTE $0xd6           // cmovs    edx, esi
	WORD $0x3948; BYTE $0xd9           // cmp    rcx, rbx
	LONG $0x000010b9; BYTE $0x00       // mov    ecx, 16
	WORD $0x4f0f; BYTE $0xd1           // cmovg    edx, ecx
	WORD $0xd989                       // mov    ecx, ebx
	WORD $0x4e0f; BYTE $0xc8           // cmovle    ecx, eax
	LONG $0x24448b48; BYTE $0x28       // mov    rax, qword [rsp + 40]
	LONG $0xb00c8942                   // mov    dword [rax + 4*r14], ecx
	LONG $0xb7148943                   // mov    dword [r15 + 4*r14], edx
	WORD $0xff49; BYTE $0xc6           // inc    r14
	WORD $0x394d; BYTE $0xf5           // cmp    r13, r14
	JNE  LBB1_110

LBB1_111:
	LONG $0x24548b48; BYTE $0x08       // mov    rdx, qword [rsp + 8]
	WORD $0x8548; BYTE $0xd2           // test    rdx, rdx
	LONG $0x249c8b48; LONG $0x00000080 // mov    rbx, qword [rsp + 128]
	LONG $0x247c8b48; BYTE $0xc8       // mov    rdi, qword -56[rsp] /* [rbp + 40] */
	JE   LBB1_138
	WORD $0xd889                       // mov    eax, ebx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	WORD $0x8548; BYTE $0xdb           // test    rbx, rbx
	JS   LBB1_113
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc3       // cvtsi2ss    xmm0, rbx
	JMP  LBB1_115

LBB1_13:
	WORD $0x894c; BYTE $0xe9     // mov    rcx, r13
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0 // cvtsi2ss    xmm0, rax
	LONG $0xc0580ff3             // addss    xmm0, xmm0

LBB1_15:
	LONG $0x247c8b48; BYTE $0xc8 // mov    rdi, qword -56[rsp] /* [rbp + 40] */
	WORD $0xd089                 // mov    eax, edx
	WORD $0xe083; BYTE $0x01     // and    eax, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JS   LBB1_16
	WORD $0x570f; BYTE $0xc9     // xorps    xmm1, xmm1
	LONG $0x2a0f48f3; BYTE $0xca // cvtsi2ss    xmm1, rdx
	JMP  LBB1_18

LBB1_63:
	WORD $0x8948; BYTE $0xf1     // mov    rcx, rsi
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0 // cvtsi2ss    xmm0, rax
	LONG $0xc0580ff3             // addss    xmm0, xmm0

LBB1_65:
	LONG $0x247c8b48; BYTE $0xc8 // mov    rdi, qword -56[rsp] /* [rbp + 40] */
	WORD $0xd089                 // mov    eax, edx
	WORD $0xe083; BYTE $0x01     // and    eax, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JS   LBB1_66
	WORD $0x570f; BYTE $0xc9     // xorps    xmm1, xmm1
	LONG $0x2a0f48f3; BYTE $0xca // cvtsi2ss    xmm1, rdx
	JMP  LBB1_68

LBB1_113:
	WORD $0x8948; BYTE $0xd9     // mov    rcx, rbx
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0 // cvtsi2ss    xmm0, rax
	LONG $0xc0580ff3             // addss    xmm0, xmm0

LBB1_115:
	WORD $0xd089                 // mov    eax, edx
	WORD $0xe083; BYTE $0x01     // and    eax, 1
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JS   LBB1_116
	WORD $0x570f; BYTE $0xc9     // xorps    xmm1, xmm1
	LONG $0x2a0f48f3; BYTE $0xca // cvtsi2ss    xmm1, rdx
	JMP  LBB1_118

LBB1_16:
	WORD $0x8948; BYTE $0xd1     // mov    rcx, rdx
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x570f; BYTE $0xc9     // xorps    xmm1, xmm1
	LONG $0x2a0f48f3; BYTE $0xc8 // cvtsi2ss    xmm1, rax
	LONG $0xc9580ff3             // addss    xmm1, xmm1

LBB1_18:
	LONG $0xc15e0ff3               // divss    xmm0, xmm1
	LONG $0xc05a0ff3               // cvtss2sd    xmm0, xmm0
	LONG $0x44110ff2; WORD $0x1024 // movsd    qword [rsp + 16], xmm0
	LONG $0xfec58349               // add    r13, -2
	LONG $0x24448b48; BYTE $0x18   // mov    rax, qword [rsp + 24]
	LONG $0x02e0c148               // shl    rax, 2
	LONG $0xc0e08348               // and    rax, -64
	LONG $0x901c8d48               // lea    rbx, [rax + 4*rdx]
	WORD $0x0148; BYTE $0xfb       // add    rbx, rdi
	LONG $0x07748d4c; BYTE $0x02   // lea    r14, [rdi + rax + 2]
	WORD $0x3145; BYTE $0xe4       // xor    r12d, r12d

LBB1_19:
	LONG $0x6e0f4966; BYTE $0xc4       // movq    xmm0, r12
	LONG $0x45620f66; BYTE $0x00       // punpckldq    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x455c0f66; BYTE $0x10       // subpd    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */
	LONG $0xc8700f66; BYTE $0x4e       // pshufd    xmm1, xmm0, 78
	LONG $0xc8580f66                   // addpd    xmm1, xmm0
	LONG $0x45100ff2; BYTE $0x70       // movsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xc8580ff2                   // addsd    xmm1, xmm0
	LONG $0x4c590ff2; WORD $0x1024     // mulsd    xmm1, qword [rsp + 16]
	LONG $0x4d580ff2; BYTE $0x78       // addsd    xmm1, qword 120[rbp] /* [rip + .LCPI1_3] */
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0xc15a0ff2                   // cvtsd2ss    xmm0, xmm1
	LONG $0x44110ff3; WORD $0x2024     // movss    dword [rsp + 32], xmm0
	LONG $0xc05a0ff3                   // cvtss2sd    xmm0, xmm0
	CALL clib·_floor(SB)
	LONG $0x2c0f48f2; BYTE $0xc0       // cvttsd2si    rax, xmm0
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0       // cvtsi2ss    xmm0, rax
	LONG $0x4c100ff3; WORD $0x2024     // movss    xmm1, dword [rsp + 32]
	LONG $0xc85c0ff3                   // subss    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0           // test    rax, rax
	LONG $0x000000b9; BYTE $0x00       // mov    ecx, 0
	LONG $0xc8490f48                   // cmovns    rcx, rax
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	WORD $0x480f; BYTE $0xc2           // cmovs    eax, edx
	LONG $0x8d590ff3; LONG $0x00000080 // mulss    xmm1, dword 128[rbp] /* [rip + .LCPI1_4] */
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0xc15a0ff3                   // cvtss2sd    xmm0, xmm1
	LONG $0x45580ff2; BYTE $0x70       // addsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xd02c0ff2                   // cvttsd2si    edx, xmm0
	LONG $0x000000be; BYTE $0x00       // mov    esi, 0
	LONG $0xf2490f66                   // cmovns    si, dx
	WORD $0x394c; BYTE $0xe9           // cmp    rcx, r13
	WORD $0x8944; BYTE $0xe9           // mov    ecx, r13d
	WORD $0x4e0f; BYTE $0xc8           // cmovle    ecx, eax
	LONG $0xa30c8942                   // mov    dword [rbx + 4*r12], ecx
	LONG $0x0010b866                   // mov    ax, 16
	LONG $0xf04f0f66                   // cmovg    si, ax
	LONG $0x34894366; BYTE $0xa6       // mov    word [r14 + 4*r12], si
	LONG $0x000010b8; BYTE $0x00       // mov    eax, 16
	WORD $0xf029                       // sub    eax, esi
	LONG $0x44894366; WORD $0xfea6     // mov    word [r14 + 4*r12 - 2], ax
	WORD $0xff49; BYTE $0xc4           // inc    r12
	LONG $0x2464394c; BYTE $0x08       // cmp    qword [rsp + 8], r12
	JNE  LBB1_19

LBB1_20:
	LONG $0x107d8348; BYTE $0x00               // cmp    qword [rbp + 16], 0
	JE   LBB1_162
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x00648d4c; BYTE $0xff               // lea    r12, [rax + rax - 1]
	LONG $0x000c8d48                           // lea    rcx, [rax + rax]
	LONG $0xe0e48349                           // and    r12, -32
	LONG $0xe0c18348                           // add    rcx, -32
	LONG $0x244c8948; BYTE $0x28               // mov    qword [rsp + 40], rcx
	WORD $0xd148; BYTE $0xe9                   // shr    rcx, 1
	LONG $0x244c8948; BYTE $0x68               // mov    qword [rsp + 104], rcx
	LONG $0xff588d48                           // lea    rbx, [rax - 1]
	WORD $0xc189                               // mov    ecx, eax
	WORD $0xe183; BYTE $0x03                   // and    ecx, 3
	WORD $0x8949; BYTE $0xc5                   // mov    r13, rax
	WORD $0x2949; BYTE $0xcd                   // sub    r13, rcx
	LONG $0x244c8948; BYTE $0x20               // mov    qword [rsp + 32], rcx
	WORD $0xf748; BYTE $0xd9                   // neg    rcx
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // mov    rax, -2
	WORD $0xf631                               // xor    esi, esi
	LONG $0x456f0f66; BYTE $0x30               // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI1_6] */
	WORD $0x570f; BYTE $0xc9                   // xorps    xmm1, xmm1
	LONG $0x24bc8b48; LONG $0x00000088         // mov    rdi, qword [rsp + 136]
	LONG $0x244c8b48; BYTE $0x78               // mov    rcx, qword [rsp + 120]
	JMP  LBB1_22

LBB1_51:
	LONG $0x247c0348; BYTE $0xb8 // add    rdi, qword -72[rsp] /* [rbp + 24] */
	LONG $0x247c8948; BYTE $0x70 // mov    qword [rsp + 112], rdi
	LONG $0x244c8b48; BYTE $0x50 // mov    rcx, qword [rsp + 80]
	LONG $0x247c8b48; BYTE $0x58 // mov    rdi, qword [rsp + 88]
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8

LBB1_22:
	WORD $0x0c8b; BYTE $0xb1       // mov    ecx, dword [rcx + 4*rsi]
	LONG $0x000010ba; BYTE $0x00   // mov    edx, 16
	WORD $0xca29                   // sub    edx, ecx
	LONG $0xd26e0f66               // movd    xmm2, edx
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd96e0f66               // movd    xmm3, ecx
	LONG $0xdb700ff2; BYTE $0x00   // pshuflw    xmm3, xmm3, 0
	LONG $0x24748948; BYTE $0x18   // mov    qword [rsp + 24], rsi
	LONG $0xb704634c               // movsxd    r8, dword [rdi + 4*rsi]
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JE   LBB1_47
	WORD $0xff48; BYTE $0xc0       // inc    rax
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	LONG $0x0000be41; WORD $0x0000 // mov    r14d, 0
	JNE  LBB1_25
	LONG $0x24448b48; BYTE $0x30   // mov    rax, qword [rsp + 48]
	LONG $0x244c8b48; BYTE $0x38   // mov    rcx, qword [rsp + 56]
	LONG $0x244c8948; BYTE $0x30   // mov    qword [rsp + 48], rcx
	LONG $0x24448948; BYTE $0x38   // mov    qword [rsp + 56], rax
	LONG $0x0001be41; WORD $0x0000 // mov    r14d, 1

LBB1_25:
	LONG $0x247c8348; WORD $0x0008 // cmp    qword [rsp + 8], 0
	LONG $0x244c8b48; BYTE $0x40   // mov    rcx, qword [rsp + 64]
	JE   LBB1_43
	LONG $0x247c8b48; BYTE $0x48   // mov    rdi, qword [rsp + 72]
	WORD $0x854d; BYTE $0xff       // test    r15, r15
	JE   LBB1_36

LBB1_27:
	LONG $0x060c8d4f                               // lea    r9, [r14 + r8]
	LONG $0x8caf0f4c; LONG $0x00009824; BYTE $0x00 // imul    r9, qword [rsp + 152]
	LONG $0x248c034c; LONG $0x00000090             // add    r9, qword [rsp + 144]
	LONG $0x03fb8348                               // cmp    rbx, 3
	LONG $0xf4448b4a; BYTE $0x30                   // mov    rax, qword [rsp + 8*r14 + 48]
	LONG $0x000000ba; BYTE $0x00                   // mov    edx, 0
	JB   LBB1_30
	WORD $0xd231                                   // xor    edx, edx

LBB1_29:
	LONG $0x97346348             // movsxd    rsi, dword [rdi + 4*rdx]
	LONG $0x34b70f41; BYTE $0x31 // movzx    esi, word [r9 + rsi]
	LONG $0x50348966             // mov    word [rax + 2*rdx], si
	LONG $0x97746348; BYTE $0x04 // movsxd    rsi, dword [rdi + 4*rdx + 4]
	LONG $0x34b70f41; BYTE $0x31 // movzx    esi, word [r9 + rsi]
	LONG $0x50748966; BYTE $0x02 // mov    word [rax + 2*rdx + 2], si
	LONG $0x97746348; BYTE $0x08 // movsxd    rsi, dword [rdi + 4*rdx + 8]
	LONG $0x34b70f41; BYTE $0x31 // movzx    esi, word [r9 + rsi]
	LONG $0x50748966; BYTE $0x04 // mov    word [rax + 2*rdx + 4], si
	LONG $0x97746348; BYTE $0x0c // movsxd    rsi, dword [rdi + 4*rdx + 12]
	LONG $0x34b70f41; BYTE $0x31 // movzx    esi, word [r9 + rsi]
	LONG $0x50748966; BYTE $0x06 // mov    word [rax + 2*rdx + 6], si
	LONG $0x04c28348             // add    rdx, 4
	WORD $0x3949; BYTE $0xd5     // cmp    r13, rdx
	JNE  LBB1_29

LBB1_30:
	LONG $0x247c8348; WORD $0x0020 // cmp    qword [rsp + 32], 0
	JE   LBB1_33
	LONG $0x50148d4c               // lea    r10, [rax + 2*rdx]
	LONG $0x97148d48               // lea    rdx, [rdi + 4*rdx]
	LONG $0x245c8b4c; BYTE $0x10   // mov    r11, qword [rsp + 16]

LBB1_32:
	WORD $0x6348; BYTE $0x32     // movsxd    rsi, dword [rdx]
	LONG $0x34b70f41; BYTE $0x31 // movzx    esi, word [r9 + rsi]
	LONG $0x32894166             // mov    word [r10], si
	LONG $0x02c28349             // add    r10, 2
	LONG $0x04c28348             // add    rdx, 4
	WORD $0xff49; BYTE $0xc3     // inc    r11
	JNE  LBB1_32

LBB1_33:
	WORD $0xd231 // xor    edx, edx

LBB1_34:
	LONG $0x246f0f66; BYTE $0x50   // movdqa    xmm4, oword [rax + 2*rdx]
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xe9600f66               // punpcklbw    xmm5, xmm1
	LONG $0x2cf50f66; BYTE $0x91   // pmaddwd    xmm5, oword [rcx + 4*rdx]
	LONG $0xe1680f66               // punpckhbw    xmm4, xmm1
	LONG $0x64f50f66; WORD $0x1091 // pmaddwd    xmm4, oword [rcx + 4*rdx + 16]
	LONG $0xec6b0f66               // packssdw    xmm5, xmm4
	LONG $0x2c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm5
	LONG $0x646f0f66; WORD $0x1050 // movdqa    xmm4, oword [rax + 2*rdx + 16]
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xe9600f66               // punpcklbw    xmm5, xmm1
	LONG $0x6cf50f66; WORD $0x2091 // pmaddwd    xmm5, oword [rcx + 4*rdx + 32]
	LONG $0xe1680f66               // punpckhbw    xmm4, xmm1
	LONG $0x64f50f66; WORD $0x3091 // pmaddwd    xmm4, oword [rcx + 4*rdx + 48]
	LONG $0xec6b0f66               // packssdw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x10c28348               // add    rdx, 16
	WORD $0x394c; BYTE $0xfa       // cmp    rdx, r15
	JB   LBB1_34
	WORD $0xff49; BYTE $0xc6       // inc    r14
	LONG $0x02fe8349               // cmp    r14, 2
	JNE  LBB1_27
	JMP  LBB1_47

LBB1_36:
	LONG $0x06048d4b                               // lea    rax, [r14 + r8]
	LONG $0x84af0f48; LONG $0x00009824; BYTE $0x00 // imul    rax, qword [rsp + 152]
	LONG $0x24840348; LONG $0x00000090             // add    rax, qword [rsp + 144]
	WORD $0x8949; BYTE $0xd9                       // mov    r9, rbx
	LONG $0x03fb8348                               // cmp    rbx, 3
	LONG $0xf44c8b4a; BYTE $0x30                   // mov    rcx, qword [rsp + 8*r14 + 48]
	LONG $0x000000ba; BYTE $0x00                   // mov    edx, 0
	JB   LBB1_39
	WORD $0xd231                                   // xor    edx, edx

LBB1_38:
	LONG $0x97346348             // movsxd    rsi, dword [rdi + 4*rdx]
	LONG $0x3034b70f             // movzx    esi, word [rax + rsi]
	LONG $0x51348966             // mov    word [rcx + 2*rdx], si
	LONG $0x97746348; BYTE $0x04 // movsxd    rsi, dword [rdi + 4*rdx + 4]
	LONG $0x3034b70f             // movzx    esi, word [rax + rsi]
	LONG $0x51748966; BYTE $0x02 // mov    word [rcx + 2*rdx + 2], si
	LONG $0x97746348; BYTE $0x08 // movsxd    rsi, dword [rdi + 4*rdx + 8]
	LONG $0x3034b70f             // movzx    esi, word [rax + rsi]
	LONG $0x51748966; BYTE $0x04 // mov    word [rcx + 2*rdx + 4], si
	LONG $0x97746348; BYTE $0x0c // movsxd    rsi, dword [rdi + 4*rdx + 12]
	LONG $0x3034b70f             // movzx    esi, word [rax + rsi]
	LONG $0x51748966; BYTE $0x06 // mov    word [rcx + 2*rdx + 6], si
	LONG $0x04c28348             // add    rdx, 4
	WORD $0x3949; BYTE $0xd5     // cmp    r13, rdx
	JNE  LBB1_38

LBB1_39:
	LONG $0x247c8348; WORD $0x0020 // cmp    qword [rsp + 32], 0
	JE   LBB1_42
	LONG $0x510c8d48               // lea    rcx, [rcx + 2*rdx]
	LONG $0x97148d48               // lea    rdx, [rdi + 4*rdx]
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]

LBB1_41:
	WORD $0x6348; BYTE $0x1a // movsxd    rbx, dword [rdx]
	LONG $0x181cb70f         // movzx    ebx, word [rax + rbx]
	WORD $0x8966; BYTE $0x19 // mov    word [rcx], bx
	LONG $0x02c18348         // add    rcx, 2
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB1_41

LBB1_42:
	WORD $0xff49; BYTE $0xc6 // inc    r14
	LONG $0x02fe8349         // cmp    r14, 2
	WORD $0x894c; BYTE $0xcb // mov    rbx, r9
	JNE  LBB1_36
	JMP  LBB1_47

LBB1_43:
	WORD $0x854d; BYTE $0xff // test    r15, r15
	JE   LBB1_47

LBB1_44:
	LONG $0xf4448b4a; BYTE $0x30 // mov    rax, qword [rsp + 8*r14 + 48]
	WORD $0xd231                 // xor    edx, edx

LBB1_45:
	LONG $0x246f0f66; BYTE $0x50   // movdqa    xmm4, oword [rax + 2*rdx]
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xe9600f66               // punpcklbw    xmm5, xmm1
	LONG $0x2cf50f66; BYTE $0x91   // pmaddwd    xmm5, oword [rcx + 4*rdx]
	LONG $0xe1680f66               // punpckhbw    xmm4, xmm1
	LONG $0x64f50f66; WORD $0x1091 // pmaddwd    xmm4, oword [rcx + 4*rdx + 16]
	LONG $0xec6b0f66               // packssdw    xmm5, xmm4
	LONG $0x2c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm5
	LONG $0x646f0f66; WORD $0x1050 // movdqa    xmm4, oword [rax + 2*rdx + 16]
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xe9600f66               // punpcklbw    xmm5, xmm1
	LONG $0x6cf50f66; WORD $0x2091 // pmaddwd    xmm5, oword [rcx + 4*rdx + 32]
	LONG $0xe1680f66               // punpckhbw    xmm4, xmm1
	LONG $0x64f50f66; WORD $0x3091 // pmaddwd    xmm4, oword [rcx + 4*rdx + 48]
	LONG $0xec6b0f66               // packssdw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x10c28348               // add    rdx, 16
	WORD $0x394c; BYTE $0xfa       // cmp    rdx, r15
	JB   LBB1_45
	WORD $0xff49; BYTE $0xc6       // inc    r14
	LONG $0x02fe8349               // cmp    r14, 2
	JNE  LBB1_44

LBB1_47:
	LONG $0xe2700f66; BYTE $0x50 // pshufd    xmm4, xmm2, 80
	LONG $0xd3700f66; BYTE $0x50 // pshufd    xmm2, xmm3, 80
	WORD $0x854d; BYTE $0xe4     // test    r12, r12
	LONG $0x247c8b48; BYTE $0x70 // mov    rdi, qword [rsp + 112]
	JE   LBB1_50
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	WORD $0xc931                 // xor    ecx, ecx

LBB1_49:
	LONG $0x24548b48; BYTE $0x30   // mov    rdx, qword [rsp + 48]
	LONG $0x24748b48; BYTE $0x38   // mov    rsi, qword [rsp + 56]
	LONG $0x1c6f0f66; BYTE $0x0a   // movdqa    xmm3, oword [rdx + rcx]
	LONG $0xdcd50f66               // pmullw    xmm3, xmm4
	LONG $0x2c6f0f66; BYTE $0x0e   // movdqa    xmm5, oword [rsi + rcx]
	LONG $0xead50f66               // pmullw    xmm5, xmm2
	LONG $0xebfd0f66               // paddw    xmm5, xmm3
	LONG $0xe8fd0f66               // paddw    xmm5, xmm0
	LONG $0xd5710f66; BYTE $0x08   // psrlw    xmm5, 8
	LONG $0x5c6f0f66; WORD $0x100a // movdqa    xmm3, oword [rdx + rcx + 16]
	LONG $0xdcd50f66               // pmullw    xmm3, xmm4
	LONG $0x746f0f66; WORD $0x100e // movdqa    xmm6, oword [rsi + rcx + 16]
	LONG $0xf2d50f66               // pmullw    xmm6, xmm2
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xf0fd0f66               // paddw    xmm6, xmm0
	LONG $0xd6710f66; BYTE $0x08   // psrlw    xmm6, 8
	LONG $0xee670f66               // packuswb    xmm5, xmm6
	LONG $0x287f0ff3               // movdqu    oword [rax], xmm5
	LONG $0x20c18348               // add    rcx, 32
	LONG $0x10c08348               // add    rax, 16
	WORD $0x394c; BYTE $0xe1       // cmp    rcx, r12
	JB   LBB1_49

LBB1_50:
	LONG $0x24448b48; BYTE $0x30   // mov    rax, qword [rsp + 48]
	LONG $0x244c8b48; BYTE $0x38   // mov    rcx, qword [rsp + 56]
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	LONG $0x1c6f0ff3; BYTE $0x10   // movdqu    xmm3, oword [rax + rdx]
	LONG $0x6c6f0ff3; WORD $0x1010 // movdqu    xmm5, oword [rax + rdx + 16]
	LONG $0xdcd50f66               // pmullw    xmm3, xmm4
	LONG $0x346f0ff3; BYTE $0x11   // movdqu    xmm6, oword [rcx + rdx]
	LONG $0x7c6f0ff3; WORD $0x1011 // movdqu    xmm7, oword [rcx + rdx + 16]
	LONG $0xf2d50f66               // pmullw    xmm6, xmm2
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xf0fd0f66               // paddw    xmm6, xmm0
	LONG $0xd6710f66; BYTE $0x08   // psrlw    xmm6, 8
	LONG $0xecd50f66               // pmullw    xmm5, xmm4
	LONG $0xfad50f66               // pmullw    xmm7, xmm2
	LONG $0xfdfd0f66               // paddw    xmm7, xmm5
	LONG $0xf8fd0f66               // paddw    xmm7, xmm0
	LONG $0xd7710f66; BYTE $0x08   // psrlw    xmm7, 8
	LONG $0xf7670f66               // packuswb    xmm6, xmm7
	LONG $0x24448b48; BYTE $0x68   // mov    rax, qword [rsp + 104]
	LONG $0x347f0ff3; BYTE $0x07   // movdqu    oword [rdi + rax], xmm6
	LONG $0x24748b48; BYTE $0x18   // mov    rsi, qword [rsp + 24]
	WORD $0xff48; BYTE $0xc6       // inc    rsi
	LONG $0x24743b48; BYTE $0xb0   // cmp    rsi, qword -80[rsp] /* [rbp + 16] */
	JNE  LBB1_51
	JMP  LBB1_162

LBB1_66:
	WORD $0x8948; BYTE $0xd1     // mov    rcx, rdx
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x570f; BYTE $0xc9     // xorps    xmm1, xmm1
	LONG $0x2a0f48f3; BYTE $0xc8 // cvtsi2ss    xmm1, rax
	LONG $0xc9580ff3             // addss    xmm1, xmm1

LBB1_68:
	LONG $0xc15e0ff3               // divss    xmm0, xmm1
	LONG $0xc05a0ff3               // cvtss2sd    xmm0, xmm0
	LONG $0x44110ff2; WORD $0x1024 // movsd    qword [rsp + 16], xmm0
	LONG $0xfec68348               // add    rsi, -2
	LONG $0x244c8b48; BYTE $0x18   // mov    rcx, qword [rsp + 24]
	WORD $0x0148; BYTE $0xc9       // add    rcx, rcx
	LONG $0x80e18348               // and    rcx, -128
	LONG $0x24448b48; BYTE $0x68   // mov    rax, qword [rsp + 104]
	LONG $0x01248d4c               // lea    r12, [rcx + rax]
	WORD $0x0149; BYTE $0xfc       // add    r12, rdi
	LONG $0x0f7c8d4c; BYTE $0x02   // lea    r15, [rdi + rcx + 2]
	LONG $0x10be4166; BYTE $0x00   // mov    r14w, 16
	WORD $0x8949; BYTE $0xf5       // mov    r13, rsi
	WORD $0xdb31                   // xor    ebx, ebx

LBB1_69:
	LONG $0x6e0f4866; BYTE $0xc3       // movq    xmm0, rbx
	LONG $0x45620f66; BYTE $0x00       // punpckldq    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x455c0f66; BYTE $0x10       // subpd    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */
	LONG $0xc8700f66; BYTE $0x4e       // pshufd    xmm1, xmm0, 78
	LONG $0xc8580f66                   // addpd    xmm1, xmm0
	LONG $0x45100ff2; BYTE $0x70       // movsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xc8580ff2                   // addsd    xmm1, xmm0
	LONG $0x4c590ff2; WORD $0x1024     // mulsd    xmm1, qword [rsp + 16]
	LONG $0x4d580ff2; BYTE $0x78       // addsd    xmm1, qword 120[rbp] /* [rip + .LCPI1_3] */
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0xc15a0ff2                   // cvtsd2ss    xmm0, xmm1
	LONG $0x44110ff3; WORD $0x2024     // movss    dword [rsp + 32], xmm0
	LONG $0xc05a0ff3                   // cvtss2sd    xmm0, xmm0
	CALL clib·_floor(SB)
	LONG $0x2c0f48f2; BYTE $0xc0       // cvttsd2si    rax, xmm0
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0x2a0f48f3; BYTE $0xc0       // cvtsi2ss    xmm0, rax
	LONG $0x4c100ff3; WORD $0x2024     // movss    xmm1, dword [rsp + 32]
	LONG $0xc85c0ff3                   // subss    xmm1, xmm0
	WORD $0x8548; BYTE $0xc0           // test    rax, rax
	LONG $0x000000b9; BYTE $0x00       // mov    ecx, 0
	LONG $0xc8490f48                   // cmovns    rcx, rax
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	WORD $0x480f; BYTE $0xc2           // cmovs    eax, edx
	LONG $0x8d590ff3; LONG $0x00000080 // mulss    xmm1, dword 128[rbp] /* [rip + .LCPI1_4] */
	WORD $0x570f; BYTE $0xc0           // xorps    xmm0, xmm0
	LONG $0xc15a0ff3                   // cvtss2sd    xmm0, xmm1
	LONG $0x45580ff2; BYTE $0x70       // addsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xd02c0ff2                   // cvttsd2si    edx, xmm0
	LONG $0x000000be; BYTE $0x00       // mov    esi, 0
	LONG $0xf2490f66                   // cmovns    si, dx
	WORD $0x394c; BYTE $0xe9           // cmp    rcx, r13
	WORD $0x8944; BYTE $0xe9           // mov    ecx, r13d
	WORD $0x4e0f; BYTE $0xc8           // cmovle    ecx, eax
	LONG $0x9c0c8941                   // mov    dword [r12 + 4*rbx], ecx
	LONG $0x4f0f4166; BYTE $0xf6       // cmovg    si, r14w
	LONG $0x34894166; BYTE $0x9f       // mov    word [r15 + 4*rbx], si
	LONG $0x000010b8; BYTE $0x00       // mov    eax, 16
	WORD $0xf029                       // sub    eax, esi
	LONG $0x44894166; WORD $0xfe9f     // mov    word [r15 + 4*rbx - 2], ax
	WORD $0xff48; BYTE $0xc3           // inc    rbx
	LONG $0x245c3948; BYTE $0x08       // cmp    qword [rsp + 8], rbx
	JNE  LBB1_69

LBB1_70:
	LONG $0x107d8348; BYTE $0x00               // cmp    qword [rbp + 16], 0
	JE   LBB1_162
	LONG $0x246c8b4c; BYTE $0x08               // mov    r13, qword [rsp + 8]
	LONG $0xad248d4e; LONG $0xffffffff         // lea    r12, [4*r13 - 1]
	LONG $0x07758d4d                           // lea    r14, [r13 + 7]
	LONG $0xe0e48349                           // and    r12, -32
	LONG $0xf8e68349                           // and    r14, -8
	LONG $0x244c8b48; BYTE $0x68               // mov    rcx, qword [rsp + 104]
	LONG $0xe0c18348                           // add    rcx, -32
	LONG $0x244c8948; BYTE $0x68               // mov    qword [rsp + 104], rcx
	WORD $0xd148; BYTE $0xe9                   // shr    rcx, 1
	LONG $0x248c8948; LONG $0x00000088         // mov    qword [rsp + 136], rcx
	LONG $0xff4d8d49                           // lea    rcx, [r13 - 1]
	WORD $0x8944; BYTE $0xea                   // mov    edx, r13d
	WORD $0xe283; BYTE $0x03                   // and    edx, 3
	WORD $0x2949; BYTE $0xd5                   // sub    r13, rdx
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	WORD $0xf748; BYTE $0xda                   // neg    rdx
	LONG $0x24548948; BYTE $0x10               // mov    qword [rsp + 16], rdx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // mov    rax, -2
	WORD $0xdb31                               // xor    ebx, ebx
	LONG $0x456f0f66; BYTE $0x30               // movdqa    xmm0, oword 48[rbp] /* [rip + .LCPI1_6] */
	LONG $0x4d6f0f66; BYTE $0x20               // movdqa    xmm1, oword 32[rbp] /* [rip + .LCPI1_5] */
	LONG $0x244c8948; BYTE $0x18               // mov    qword [rsp + 24], rcx
	LONG $0x247c8b48; BYTE $0x28               // mov    rdi, qword [rsp + 40]
	LONG $0x24548b48; BYTE $0x78               // mov    rdx, qword [rsp + 120]
	JMP  LBB1_72

LBB1_101:
	LONG $0x247c0348; BYTE $0xb8 // add    rdi, qword -72[rsp] /* [rbp + 24] */
	LONG $0x247c8948; BYTE $0x70 // mov    qword [rsp + 112], rdi
	LONG $0x24548b48; BYTE $0x50 // mov    rdx, qword [rsp + 80]
	LONG $0x247c8b48; BYTE $0x58 // mov    rdi, qword [rsp + 88]
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]

LBB1_72:
	WORD $0x148b; BYTE $0x9a       // mov    edx, dword [rdx + 4*rbx]
	LONG $0x000010be; BYTE $0x00   // mov    esi, 16
	WORD $0xd629                   // sub    esi, edx
	LONG $0xd66e0f66               // movd    xmm2, esi
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xda6e0f66               // movd    xmm3, edx
	LONG $0xdb700ff2; BYTE $0x00   // pshuflw    xmm3, xmm3, 0
	LONG $0x245c8948; BYTE $0x28   // mov    qword [rsp + 40], rbx
	LONG $0x9f04634c               // movsxd    r8, dword [rdi + 4*rbx]
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	JE   LBB1_97
	WORD $0xff48; BYTE $0xc0       // inc    rax
	WORD $0x3949; BYTE $0xc0       // cmp    r8, rax
	LONG $0x0000bb41; WORD $0x0000 // mov    r11d, 0
	JNE  LBB1_75
	LONG $0x24448b48; BYTE $0x30   // mov    rax, qword [rsp + 48]
	LONG $0x24548b48; BYTE $0x38   // mov    rdx, qword [rsp + 56]
	LONG $0x24548948; BYTE $0x30   // mov    qword [rsp + 48], rdx
	LONG $0x24448948; BYTE $0x38   // mov    qword [rsp + 56], rax
	LONG $0x0001bb41; WORD $0x0000 // mov    r11d, 1

LBB1_75:
	LONG $0x247c8348; WORD $0x0008 // cmp    qword [rsp + 8], 0
	LONG $0x245c8b48; BYTE $0x40   // mov    rbx, qword [rsp + 64]
	JE   LBB1_86
	LONG $0x247c8b48; BYTE $0x48   // mov    rdi, qword [rsp + 72]
	WORD $0x854d; BYTE $0xf6       // test    r14, r14
	JE   LBB1_90

LBB1_77:
	LONG $0x033c8d4f                               // lea    r15, [r11 + r8]
	LONG $0xbcaf0f4c; LONG $0x00009824; BYTE $0x00 // imul    r15, qword [rsp + 152]
	LONG $0x24bc034c; LONG $0x00000090             // add    r15, qword [rsp + 144]
	LONG $0x03f98348                               // cmp    rcx, 3
	LONG $0xdc448b4a; BYTE $0x30                   // mov    rax, qword [rsp + 8*r11 + 48]
	LONG $0x000000ba; BYTE $0x00                   // mov    edx, 0
	JB   LBB1_80
	WORD $0xd231                                   // xor    edx, edx

LBB1_79:
	LONG $0x97346348             // movsxd    rsi, dword [rdi + 4*rdx]
	LONG $0x77348b41             // mov    esi, dword [r15 + 2*rsi]
	WORD $0x3489; BYTE $0x90     // mov    dword [rax + 4*rdx], esi
	LONG $0x97746348; BYTE $0x04 // movsxd    rsi, dword [rdi + 4*rdx + 4]
	LONG $0x77348b41             // mov    esi, dword [r15 + 2*rsi]
	LONG $0x04907489             // mov    dword [rax + 4*rdx + 4], esi
	LONG $0x97746348; BYTE $0x08 // movsxd    rsi, dword [rdi + 4*rdx + 8]
	LONG $0x77348b41             // mov    esi, dword [r15 + 2*rsi]
	LONG $0x08907489             // mov    dword [rax + 4*rdx + 8], esi
	LONG $0x97746348; BYTE $0x0c // movsxd    rsi, dword [rdi + 4*rdx + 12]
	LONG $0x77348b41             // mov    esi, dword [r15 + 2*rsi]
	LONG $0x0c907489             // mov    dword [rax + 4*rdx + 12], esi
	LONG $0x04c28348             // add    rdx, 4
	WORD $0x3949; BYTE $0xd5     // cmp    r13, rdx
	JNE  LBB1_79

LBB1_80:
	LONG $0x247c8348; WORD $0x0020 // cmp    qword [rsp + 32], 0
	JE   LBB1_83
	LONG $0x900c8d4c               // lea    r9, [rax + 4*rdx]
	LONG $0x97148d48               // lea    rdx, [rdi + 4*rdx]
	LONG $0x24548b4c; BYTE $0x10   // mov    r10, qword [rsp + 16]

LBB1_82:
	WORD $0x6348; BYTE $0x32 // movsxd    rsi, dword [rdx]
	LONG $0x77348b41         // mov    esi, dword [r15 + 2*rsi]
	WORD $0x8941; BYTE $0x31 // mov    dword [r9], esi
	LONG $0x04c18349         // add    r9, 4
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff49; BYTE $0xc2 // inc    r10
	JNE  LBB1_82

LBB1_83:
	WORD $0xd231 // xor    edx, edx

LBB1_84:
	LONG $0x246f0f66; BYTE $0x93   // movdqa    xmm4, oword [rbx + 4*rdx]
	LONG $0x2c6f0f66; BYTE $0x90   // movdqa    xmm5, oword [rax + 4*rdx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf1db0f66               // pand    xmm6, xmm1
	LONG $0xf4f50f66               // pmaddwd    xmm6, xmm4
	LONG $0xd5710f66; BYTE $0x08   // psrlw    xmm5, 8
	LONG $0xecf50f66               // pmaddwd    xmm5, xmm4
	LONG $0xfd730f66; BYTE $0x02   // pslldq    xmm5, 2
	LONG $0xeeeb0f66               // por    xmm5, xmm6
	LONG $0x2c7f0f66; BYTE $0x90   // movdqa    oword [rax + 4*rdx], xmm5
	LONG $0x646f0f66; WORD $0x1093 // movdqa    xmm4, oword [rbx + 4*rdx + 16]
	LONG $0x6c6f0f66; WORD $0x1090 // movdqa    xmm5, oword [rax + 4*rdx + 16]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf1db0f66               // pand    xmm6, xmm1
	LONG $0xf4f50f66               // pmaddwd    xmm6, xmm4
	LONG $0xd5710f66; BYTE $0x08   // psrlw    xmm5, 8
	LONG $0xecf50f66               // pmaddwd    xmm5, xmm4
	LONG $0xfd730f66; BYTE $0x02   // pslldq    xmm5, 2
	LONG $0xeeeb0f66               // por    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x1090 // movdqa    oword [rax + 4*rdx + 16], xmm5
	LONG $0x08c28348               // add    rdx, 8
	WORD $0x394c; BYTE $0xf2       // cmp    rdx, r14
	JB   LBB1_84
	WORD $0xff49; BYTE $0xc3       // inc    r11
	LONG $0x02fb8349               // cmp    r11, 2
	JNE  LBB1_77
	JMP  LBB1_97

LBB1_90:
	LONG $0x03048d4b                               // lea    rax, [r11 + r8]
	LONG $0x84af0f48; LONG $0x00009824; BYTE $0x00 // imul    rax, qword [rsp + 152]
	LONG $0x24840348; LONG $0x00000090             // add    rax, qword [rsp + 144]
	LONG $0x03f98348                               // cmp    rcx, 3
	LONG $0xdc548b4a; BYTE $0x30                   // mov    rdx, qword [rsp + 8*r11 + 48]
	LONG $0x000000bb; BYTE $0x00                   // mov    ebx, 0
	JB   LBB1_93
	WORD $0xdb31                                   // xor    ebx, ebx

LBB1_92:
	LONG $0x9f346348             // movsxd    rsi, dword [rdi + 4*rbx]
	WORD $0x348b; BYTE $0x70     // mov    esi, dword [rax + 2*rsi]
	WORD $0x3489; BYTE $0x9a     // mov    dword [rdx + 4*rbx], esi
	LONG $0x9f746348; BYTE $0x04 // movsxd    rsi, dword [rdi + 4*rbx + 4]
	WORD $0x348b; BYTE $0x70     // mov    esi, dword [rax + 2*rsi]
	LONG $0x049a7489             // mov    dword [rdx + 4*rbx + 4], esi
	LONG $0x9f746348; BYTE $0x08 // movsxd    rsi, dword [rdi + 4*rbx + 8]
	WORD $0x348b; BYTE $0x70     // mov    esi, dword [rax + 2*rsi]
	LONG $0x089a7489             // mov    dword [rdx + 4*rbx + 8], esi
	LONG $0x9f746348; BYTE $0x0c // movsxd    rsi, dword [rdi + 4*rbx + 12]
	WORD $0x348b; BYTE $0x70     // mov    esi, dword [rax + 2*rsi]
	LONG $0x0c9a7489             // mov    dword [rdx + 4*rbx + 12], esi
	LONG $0x04c38348             // add    rbx, 4
	WORD $0x3949; BYTE $0xdd     // cmp    r13, rbx
	JNE  LBB1_92

LBB1_93:
	LONG $0x247c8348; WORD $0x0020 // cmp    qword [rsp + 32], 0
	JE   LBB1_96
	LONG $0x9a148d48               // lea    rdx, [rdx + 4*rbx]
	LONG $0x9f1c8d48               // lea    rbx, [rdi + 4*rbx]
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]

LBB1_95:
	WORD $0x6348; BYTE $0x0b // movsxd    rcx, dword [rbx]
	WORD $0x0c8b; BYTE $0x48 // mov    ecx, dword [rax + 2*rcx]
	WORD $0x0a89             // mov    dword [rdx], ecx
	LONG $0x04c28348         // add    rdx, 4
	LONG $0x04c38348         // add    rbx, 4
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB1_95

LBB1_96:
	WORD $0xff49; BYTE $0xc3     // inc    r11
	LONG $0x02fb8349             // cmp    r11, 2
	LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
	JNE  LBB1_90
	JMP  LBB1_97

LBB1_86:
	WORD $0x854d; BYTE $0xf6 // test    r14, r14
	JE   LBB1_97

LBB1_87:
	LONG $0xdc448b4a; BYTE $0x30 // mov    rax, qword [rsp + 8*r11 + 48]
	WORD $0xd231                 // xor    edx, edx

LBB1_88:
	LONG $0x246f0f66; BYTE $0x93   // movdqa    xmm4, oword [rbx + 4*rdx]
	LONG $0x2c6f0f66; BYTE $0x90   // movdqa    xmm5, oword [rax + 4*rdx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf1db0f66               // pand    xmm6, xmm1
	LONG $0xf4f50f66               // pmaddwd    xmm6, xmm4
	LONG $0xd5710f66; BYTE $0x08   // psrlw    xmm5, 8
	LONG $0xecf50f66               // pmaddwd    xmm5, xmm4
	LONG $0xfd730f66; BYTE $0x02   // pslldq    xmm5, 2
	LONG $0xeeeb0f66               // por    xmm5, xmm6
	LONG $0x2c7f0f66; BYTE $0x90   // movdqa    oword [rax + 4*rdx], xmm5
	LONG $0x646f0f66; WORD $0x1093 // movdqa    xmm4, oword [rbx + 4*rdx + 16]
	LONG $0x6c6f0f66; WORD $0x1090 // movdqa    xmm5, oword [rax + 4*rdx + 16]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf1db0f66               // pand    xmm6, xmm1
	LONG $0xf4f50f66               // pmaddwd    xmm6, xmm4
	LONG $0xd5710f66; BYTE $0x08   // psrlw    xmm5, 8
	LONG $0xecf50f66               // pmaddwd    xmm5, xmm4
	LONG $0xfd730f66; BYTE $0x02   // pslldq    xmm5, 2
	LONG $0xeeeb0f66               // por    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x1090 // movdqa    oword [rax + 4*rdx + 16], xmm5
	LONG $0x08c28348               // add    rdx, 8
	WORD $0x394c; BYTE $0xf2       // cmp    rdx, r14
	JB   LBB1_88
	WORD $0xff49; BYTE $0xc3       // inc    r11
	LONG $0x02fb8349               // cmp    r11, 2
	JNE  LBB1_87

LBB1_97:
	LONG $0xe2700f66; BYTE $0x50 // pshufd    xmm4, xmm2, 80
	LONG $0xd3700f66; BYTE $0x50 // pshufd    xmm2, xmm3, 80
	WORD $0x854d; BYTE $0xe4     // test    r12, r12
	LONG $0x247c8b48; BYTE $0x70 // mov    rdi, qword [rsp + 112]
	JE   LBB1_100
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	WORD $0xf631                 // xor    esi, esi

LBB1_99:
	LONG $0x244c8b48; BYTE $0x30   // mov    rcx, qword [rsp + 48]
	LONG $0x24548b48; BYTE $0x38   // mov    rdx, qword [rsp + 56]
	LONG $0x1c6f0f66; BYTE $0x31   // movdqa    xmm3, oword [rcx + rsi]
	LONG $0xdcd50f66               // pmullw    xmm3, xmm4
	LONG $0x2c6f0f66; BYTE $0x32   // movdqa    xmm5, oword [rdx + rsi]
	LONG $0xead50f66               // pmullw    xmm5, xmm2
	LONG $0xebfd0f66               // paddw    xmm5, xmm3
	LONG $0xe8fd0f66               // paddw    xmm5, xmm0
	LONG $0xd5710f66; BYTE $0x08   // psrlw    xmm5, 8
	LONG $0x5c6f0f66; WORD $0x1031 // movdqa    xmm3, oword [rcx + rsi + 16]
	LONG $0xdcd50f66               // pmullw    xmm3, xmm4
	LONG $0x746f0f66; WORD $0x1032 // movdqa    xmm6, oword [rdx + rsi + 16]
	LONG $0xf2d50f66               // pmullw    xmm6, xmm2
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xf0fd0f66               // paddw    xmm6, xmm0
	LONG $0xd6710f66; BYTE $0x08   // psrlw    xmm6, 8
	LONG $0xee670f66               // packuswb    xmm5, xmm6
	LONG $0x287f0ff3               // movdqu    oword [rax], xmm5
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x10c08348               // add    rax, 16
	WORD $0x394c; BYTE $0xe6       // cmp    rsi, r12
	JB   LBB1_99

LBB1_100:
	LONG $0x24448b48; BYTE $0x30       // mov    rax, qword [rsp + 48]
	LONG $0x244c8b48; BYTE $0x38       // mov    rcx, qword [rsp + 56]
	LONG $0x24548b48; BYTE $0x68       // mov    rdx, qword [rsp + 104]
	LONG $0x1c6f0ff3; BYTE $0x10       // movdqu    xmm3, oword [rax + rdx]
	LONG $0x6c6f0ff3; WORD $0x1010     // movdqu    xmm5, oword [rax + rdx + 16]
	LONG $0xdcd50f66                   // pmullw    xmm3, xmm4
	LONG $0x346f0ff3; BYTE $0x11       // movdqu    xmm6, oword [rcx + rdx]
	LONG $0x7c6f0ff3; WORD $0x1011     // movdqu    xmm7, oword [rcx + rdx + 16]
	LONG $0xf2d50f66                   // pmullw    xmm6, xmm2
	LONG $0xf3fd0f66                   // paddw    xmm6, xmm3
	LONG $0xf0fd0f66                   // paddw    xmm6, xmm0
	LONG $0xd6710f66; BYTE $0x08       // psrlw    xmm6, 8
	LONG $0xecd50f66                   // pmullw    xmm5, xmm4
	LONG $0xfad50f66                   // pmullw    xmm7, xmm2
	LONG $0xfdfd0f66                   // paddw    xmm7, xmm5
	LONG $0xf8fd0f66                   // paddw    xmm7, xmm0
	LONG $0xd7710f66; BYTE $0x08       // psrlw    xmm7, 8
	LONG $0xf7670f66                   // packuswb    xmm6, xmm7
	LONG $0x24848b48; LONG $0x00000088 // mov    rax, qword [rsp + 136]
	LONG $0x347f0ff3; BYTE $0x07       // movdqu    oword [rdi + rax], xmm6
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	WORD $0xff48; BYTE $0xc3           // inc    rbx
	LONG $0x245c3b48; BYTE $0xb0       // cmp    rbx, qword -80[rsp] /* [rbp + 16] */
	JNE  LBB1_101
	JMP  LBB1_162

LBB1_116:
	WORD $0x8948; BYTE $0xd1     // mov    rcx, rdx
	WORD $0xd148; BYTE $0xe9     // shr    rcx, 1
	WORD $0x0948; BYTE $0xc8     // or    rax, rcx
	WORD $0x570f; BYTE $0xc9     // xorps    xmm1, xmm1
	LONG $0x2a0f48f3; BYTE $0xc8 // cvtsi2ss    xmm1, rax
	LONG $0xc9580ff3             // addss    xmm1, xmm1

LBB1_118:
	WORD $0x854d; BYTE $0xe4                       // test    r12, r12
	JE   LBB1_138
	LONG $0xc15e0ff3                               // divss    xmm0, xmm1
	LONG $0xc05a0ff3                               // cvtss2sd    xmm0, xmm0
	LONG $0x84110ff2; LONG $0x00008824; BYTE $0x00 // movsd    qword [rsp + 136], xmm0
	LONG $0xfec38348                               // add    rbx, -2
	LONG $0xa5048d4a; LONG $0x00000000             // lea    rax, [4*r12]
	LONG $0x24448948; BYTE $0x28                   // mov    qword [rsp + 40], rax
	WORD $0x894c; BYTE $0xe0                       // mov    rax, r12
	LONG $0xc2af0f48                               // imul    rax, rdx
	LONG $0x950c8d48; LONG $0x00000004             // lea    rcx, [4*rdx + 4]
	LONG $0xccaf0f49                               // imul    rcx, r12
	LONG $0x248c8948; LONG $0x000000e8             // mov    qword [rsp + 232], rcx
	LONG $0x244c8d49; BYTE $0xfc                   // lea    rcx, [r12 - 4]
	LONG $0x02e9c148                               // shr    rcx, 2
	WORD $0x518d; BYTE $0x01                       // lea    edx, [rcx + 1]
	LONG $0x24748d49; BYTE $0xff                   // lea    rsi, [r12 - 1]
	LONG $0x24748948; BYTE $0x78                   // mov    qword [rsp + 120], rsi
	WORD $0x894c; BYTE $0xe6                       // mov    rsi, r12
	LONG $0xfce68348                               // and    rsi, -4
	LONG $0x24b48948; LONG $0x000000b8             // mov    qword [rsp + 184], rsi
	WORD $0xe283; BYTE $0x01                       // and    edx, 1
	LONG $0x24948948; LONG $0x000000d0             // mov    qword [rsp + 208], rdx
	WORD $0xff48; BYTE $0xca                       // dec    rdx
	LONG $0x248c8948; LONG $0x000000d8             // mov    qword [rsp + 216], rcx
	WORD $0x2948; BYTE $0xca                       // sub    rdx, rcx
	LONG $0x24948948; LONG $0x000000c8             // mov    qword [rsp + 200], rdx
	LONG $0x874c8d48; BYTE $0x08                   // lea    rcx, [rdi + 4*rax + 8]
	LONG $0x244c8948; BYTE $0x10                   // mov    qword [rsp + 16], rcx
	LONG $0x852c8d4c; LONG $0x00000000             // lea    r13, [4*rax]
	LONG $0x000002b8; BYTE $0x00                   // mov    eax, 2
	LONG $0x24448948; BYTE $0x68                   // mov    qword [rsp + 104], rax
	LONG $0x000001b8; BYTE $0x00                   // mov    eax, 1
	LONG $0x6e0f4866; BYTE $0xc0                   // movq    xmm0, rax
	LONG $0xf8730f66; BYTE $0x08                   // pslldq    xmm0, 8
	LONG $0x847f0f66; LONG $0x0000f024; BYTE $0x00 // movdqa    oword [rsp + 240], xmm0
	WORD $0x3145; BYTE $0xff                       // xor    r15d, r15d
	WORD $0x3145; BYTE $0xf6                       // xor    r14d, r14d
	LONG $0x249c8948; LONG $0x00000080             // mov    qword [rsp + 128], rbx

LBB1_120:
	LONG $0x6e0f4966; BYTE $0xc6                   // movq    xmm0, r14
	LONG $0x45620f66; BYTE $0x00                   // punpckldq    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x455c0f66; BYTE $0x10                   // subpd    xmm0, oword 16[rbp] /* [rip + .LCPI1_1] */
	LONG $0xc8700f66; BYTE $0x4e                   // pshufd    xmm1, xmm0, 78
	LONG $0xc8580f66                               // addpd    xmm1, xmm0
	LONG $0x45100ff2; BYTE $0x70                   // movsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0xc8580ff2                               // addsd    xmm1, xmm0
	LONG $0x8c590ff2; LONG $0x00008824; BYTE $0x00 // mulsd    xmm1, qword [rsp + 136]
	LONG $0x4d580ff2; BYTE $0x78                   // addsd    xmm1, qword 120[rbp] /* [rip + .LCPI1_3] */
	WORD $0x570f; BYTE $0xc0                       // xorps    xmm0, xmm0
	LONG $0xc15a0ff2                               // cvtsd2ss    xmm0, xmm1
	LONG $0x44110ff3; WORD $0x1824                 // movss    dword [rsp + 24], xmm0
	LONG $0xc05a0ff3                               // cvtss2sd    xmm0, xmm0
	CALL clib·_floor(SB)
	LONG $0x6f0f4466; WORD $0x604d                 // movdqa    xmm9, oword 96[rbp] /* [rip + .LCPI1_9] */
	LONG $0x6f0f4466; WORD $0x5045                 // movdqa    xmm8, oword 80[rbp] /* [rip + .LCPI1_8] */
	LONG $0x247c8b48; BYTE $0xc8                   // mov    rdi, qword -56[rsp] /* [rbp + 40] */
	LONG $0x2c0f4cf2; BYTE $0xd8                   // cvttsd2si    r11, xmm0
	WORD $0x570f; BYTE $0xc0                       // xorps    xmm0, xmm0
	LONG $0x2a0f49f3; BYTE $0xc3                   // cvtsi2ss    xmm0, r11
	LONG $0x4c100ff3; WORD $0x1824                 // movss    xmm1, dword [rsp + 24]
	LONG $0xc85c0ff3                               // subss    xmm1, xmm0
	WORD $0x854d; BYTE $0xdb                       // test    r11, r11
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xd8480f4c                               // cmovs    r11, rax
	LONG $0x8d590ff3; LONG $0x00000080             // mulss    xmm1, dword 128[rbp] /* [rip + .LCPI1_4] */
	WORD $0x570f; BYTE $0xc0                       // xorps    xmm0, xmm0
	LONG $0xc15a0ff3                               // cvtss2sd    xmm0, xmm1
	LONG $0x45580ff2; BYTE $0x70                   // addsd    xmm0, qword 112[rbp] /* [rip + .LCPI1_2] */
	LONG $0x2c0f44f2; BYTE $0xd0                   // cvttsd2si    r10d, xmm0
	LONG $0xd0480f44                               // cmovs    r10d, eax
	WORD $0x3949; BYTE $0xdb                       // cmp    r11, rbx
	LONG $0xdb4f0f4c                               // cmovg    r11, rbx
	LONG $0x000010b8; BYTE $0x00                   // mov    eax, 16
	LONG $0xd04f0f44                               // cmovg    r10d, eax
	LONG $0xdcaf0f4d                               // imul    r11, r12
	LONG $0x04fc8349                               // cmp    r12, 4
	LONG $0x0000b841; WORD $0x0000                 // mov    r8d, 0
	JB   LBB1_130
	LONG $0x24bc8348; LONG $0x000000b8; BYTE $0x00 // cmp    qword [rsp + 184], 0
	LONG $0x0000b841; WORD $0x0000                 // mov    r8d, 0
	JE   LBB1_130
	LONG $0x244c8b48; BYTE $0x28                   // mov    rcx, qword [rsp + 40]
	LONG $0xceaf0f49                               // imul    rcx, r14
	LONG $0x0f148d48                               // lea    rdx, [rdi + rcx]
	LONG $0x24848b48; LONG $0x000000e8             // mov    rax, qword [rsp + 232]
	LONG $0x08348d48                               // lea    rsi, [rax + rcx]
	WORD $0x0148; BYTE $0xfe                       // add    rsi, rdi
	WORD $0x3948; BYTE $0xf2                       // cmp    rdx, rsi
	JAE  LBB1_124
	LONG $0x24448b48; BYTE $0x28                   // mov    rax, qword [rsp + 40]
	LONG $0x08148d48                               // lea    rdx, [rax + rcx]
	WORD $0x0148; BYTE $0xfa                       // add    rdx, rdi
	WORD $0x014c; BYTE $0xe9                       // add    rcx, r13
	WORD $0x0148; BYTE $0xf9                       // add    rcx, rdi
	WORD $0x3948; BYTE $0xd1                       // cmp    rcx, rdx
	LONG $0x0000b841; WORD $0x0000                 // mov    r8d, 0
	JB   LBB1_130

LBB1_124:
	WORD $0x894c; BYTE $0xf2                       // mov    rdx, r14
	LONG $0xd4af0f49                               // imul    rdx, r12
	LONG $0x24bc8348; LONG $0x000000d8; BYTE $0x00 // cmp    qword [rsp + 216], 0
	LONG $0x6e0f4966; BYTE $0xc3                   // movq    xmm0, r11
	LONG $0xc8700f66; BYTE $0x44                   // pshufd    xmm1, xmm0, 68
	LONG $0x6e0f4166; BYTE $0xc2                   // movd    xmm0, r10d
	LONG $0xc0700f66; BYTE $0x00                   // pshufd    xmm0, xmm0, 0
	LONG $0x946f0f66; LONG $0x0000f024; BYTE $0x00 // movdqa    xmm2, oword [rsp + 240]
	LONG $0x5d6f0f66; BYTE $0x40                   // movdqa    xmm3, oword 64[rbp] /* [rip + .LCPI1_7] */
	LONG $0x24848b48; LONG $0x000000e0             // mov    rax, qword [rsp + 224]
	JE   LBB1_127
	LONG $0x000001b9; BYTE $0x00                   // mov    ecx, 1
	LONG $0x6e0f4866; BYTE $0xd1                   // movq    xmm2, rcx
	LONG $0xfa730f66; BYTE $0x08                   // pslldq    xmm2, 8
	LONG $0x24b48b48; LONG $0x000000c8             // mov    rsi, qword [rsp + 200]
	LONG $0x5d6f0f66; BYTE $0x40                   // movdqa    xmm3, oword 64[rbp] /* [rip + .LCPI1_7] */

LBB1_126:
	LONG $0xe26f0f66             // movdqa    xmm4, xmm2
	LONG $0xd40f4166; BYTE $0xe0 // paddq    xmm4, xmm8
	LONG $0xeb6f0f66             // movdqa    xmm5, xmm3
	LONG $0xe9d40f66             // paddq    xmm5, xmm1
	LONG $0xf26f0f66             // movdqa    xmm6, xmm2
	LONG $0xf1d40f66             // paddq    xmm6, xmm1
	LONG $0xf6700f66; BYTE $0xe8 // pshufd    xmm6, xmm6, 232
	LONG $0xfd700f66; BYTE $0xe8 // pshufd    xmm7, xmm5, 232
	LONG $0xf76c0f66             // punpcklqdq    xmm6, xmm7
	LONG $0x7e0f4866; BYTE $0xd1 // movq    rcx, xmm2
	WORD $0x0148; BYTE $0xd1     // add    rcx, rdx
	LONG $0x347f0ff3; BYTE $0x8f // movdqu    oword [rdi + 4*rcx], xmm6
	LONG $0x047f0ff3; BYTE $0x88 // movdqu    oword [rax + 4*rcx], xmm0
	LONG $0xd40f4166; BYTE $0xd1 // paddq    xmm2, xmm9
	LONG $0xd40f4166; BYTE $0xd9 // paddq    xmm3, xmm9
	LONG $0xd40f4166; BYTE $0xe8 // paddq    xmm5, xmm8
	LONG $0x7e0f4866; BYTE $0xe1 // movq    rcx, xmm4
	LONG $0xe1d40f66             // paddq    xmm4, xmm1
	LONG $0xe4700f66; BYTE $0xe8 // pshufd    xmm4, xmm4, 232
	LONG $0xed700f66; BYTE $0xe8 // pshufd    xmm5, xmm5, 232
	LONG $0xe56c0f66             // punpcklqdq    xmm4, xmm5
	WORD $0x0148; BYTE $0xd1     // add    rcx, rdx
	LONG $0x247f0ff3; BYTE $0x8f // movdqu    oword [rdi + 4*rcx], xmm4
	LONG $0x047f0ff3; BYTE $0x88 // movdqu    oword [rax + 4*rcx], xmm0
	LONG $0x02c68348             // add    rsi, 2
	JNE  LBB1_126

LBB1_127:
	LONG $0x24bc8348; LONG $0x000000d0; BYTE $0x00 // cmp    qword [rsp + 208], 0
	JE   LBB1_129
	LONG $0xd9d40f66                               // paddq    xmm3, xmm1
	LONG $0xcad40f66                               // paddq    xmm1, xmm2
	LONG $0xc9700f66; BYTE $0xe8                   // pshufd    xmm1, xmm1, 232
	LONG $0xdb700f66; BYTE $0xe8                   // pshufd    xmm3, xmm3, 232
	LONG $0xcb6c0f66                               // punpcklqdq    xmm1, xmm3
	LONG $0x7e0f4866; BYTE $0xd1                   // movq    rcx, xmm2
	WORD $0x0148; BYTE $0xd1                       // add    rcx, rdx
	LONG $0x0c7f0ff3; BYTE $0x8f                   // movdqu    oword [rdi + 4*rcx], xmm1
	LONG $0x047f0ff3; BYTE $0x88                   // movdqu    oword [rax + 4*rcx], xmm0

LBB1_129:
	LONG $0x24848b48; LONG $0x000000b8 // mov    rax, qword [rsp + 184]
	WORD $0x394c; BYTE $0xe0           // cmp    rax, r12
	WORD $0x8949; BYTE $0xc0           // mov    r8, rax
	JE   LBB1_137

LBB1_130:
	WORD $0x894d; BYTE $0xe1     // mov    r9, r12
	WORD $0x294d; BYTE $0xc1     // sub    r9, r8
	LONG $0x244c8b48; BYTE $0x78 // mov    rcx, qword [rsp + 120]
	WORD $0x294c; BYTE $0xc1     // sub    rcx, r8
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB1_134
	WORD $0x2949; BYTE $0xd1     // sub    r9, rdx
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x801c8d4a             // lea    rbx, [rax + 4*r8]
	LONG $0x24448b48; BYTE $0x68 // mov    rax, qword [rsp + 104]
	LONG $0x000c8d49             // lea    rcx, [r8 + rax]
	LONG $0x8f348d48             // lea    rsi, [rdi + 4*rcx]
	LONG $0x180c8d4b             // lea    rcx, [r8 + r11]
	WORD $0xff31                 // xor    edi, edi

LBB1_132:
	WORD $0x048d; BYTE $0x39           // lea    eax, [rcx + rdi]
	LONG $0xf8be4489                   // mov    dword [rsi + 4*rdi - 8], eax
	LONG $0xbb548944; BYTE $0xf8       // mov    dword [rbx + 4*rdi - 8], r10d
	LONG $0x0139448d                   // lea    eax, [rcx + rdi + 1]
	LONG $0xfcbe4489                   // mov    dword [rsi + 4*rdi - 4], eax
	LONG $0xbb548944; BYTE $0xfc       // mov    dword [rbx + 4*rdi - 4], r10d
	LONG $0x0239448d                   // lea    eax, [rcx + rdi + 2]
	WORD $0x0489; BYTE $0xbe           // mov    dword [rsi + 4*rdi], eax
	LONG $0xbb148944                   // mov    dword [rbx + 4*rdi], r10d
	LONG $0x0339448d                   // lea    eax, [rcx + rdi + 3]
	LONG $0x04be4489                   // mov    dword [rsi + 4*rdi + 4], eax
	LONG $0xbb548944; BYTE $0x04       // mov    dword [rbx + 4*rdi + 4], r10d
	LONG $0x04c78348                   // add    rdi, 4
	WORD $0x3949; BYTE $0xf9           // cmp    r9, rdi
	JNE  LBB1_132
	WORD $0x0149; BYTE $0xf8           // add    r8, rdi
	LONG $0x249c8b48; LONG $0x00000080 // mov    rbx, qword [rsp + 128]
	LONG $0x247c8b48; BYTE $0xc8       // mov    rdi, qword -56[rsp] /* [rbp + 40] */

LBB1_134:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_137
	WORD $0x0145; BYTE $0xc3 // add    r11d, r8d
	WORD $0x014d; BYTE $0xf8 // add    r8, r15
	LONG $0x870c8d4a         // lea    rcx, [rdi + 4*r8]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB1_136:
	WORD $0x8944; BYTE $0x19     // mov    dword [rcx], r11d
	LONG $0x0d548945; BYTE $0x00 // mov    dword [r13 + rcx], r10d
	WORD $0xff41; BYTE $0xc3     // inc    r11d
	LONG $0x04c18348             // add    rcx, 4
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_136

LBB1_137:
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x24440348; BYTE $0x28 // add    rax, qword [rsp + 40]
	LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
	LONG $0x2464014c; BYTE $0x68 // add    qword [rsp + 104], r12
	WORD $0x014d; BYTE $0xe7     // add    r15, r12
	LONG $0x24548b48; BYTE $0x08 // mov    rdx, qword [rsp + 8]
	WORD $0x3949; BYTE $0xd6     // cmp    r14, rdx
	JNE  LBB1_120

LBB1_138:
	LONG $0x244c8b4c; BYTE $0xb0               // mov    r9, qword -80[rsp] /* [rbp + 16] */
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20               // mov    rbx, qword [rsp + 32]
	JE   LBB1_162
	WORD $0x8548; BYTE $0xdb                   // test    rbx, rbx
	JE   LBB1_156
	LONG $0xff438d48                           // lea    rax, [rbx - 1]
	LONG $0x24448948; BYTE $0x18               // mov    qword [rsp + 24], rax
	WORD $0xd889                               // mov    eax, ebx
	WORD $0xe083; BYTE $0x01                   // and    eax, 1
	WORD $0x8948; BYTE $0xd9                   // mov    rcx, rbx
	LONG $0x24448948; BYTE $0x08               // mov    qword [rsp + 8], rax
	WORD $0x2948; BYTE $0xc1                   // sub    rcx, rax
	LONG $0x244c8948; BYTE $0x28               // mov    qword [rsp + 40], rcx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // mov    rax, -2
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	LONG $0x248c8b48; LONG $0x000000b0         // mov    rcx, qword [rsp + 176]
	LONG $0x24948b48; LONG $0x000000c0         // mov    rdx, qword [rsp + 192]
	JMP  LBB1_141

LBB1_185:
	LONG $0x247c0348; BYTE $0xb8 // add    rdi, qword -72[rsp] /* [rbp + 24] */
	LONG $0x247c8948; BYTE $0x70 // mov    qword [rsp + 112], rdi
	LONG $0x244c8b48; BYTE $0x40 // mov    rcx, qword [rsp + 64]
	LONG $0x24548b48; BYTE $0x48 // mov    rdx, qword [rsp + 72]
	WORD $0x894c; BYTE $0xf0     // mov    rax, r14

LBB1_141:
	LONG $0x823c8b46             // mov    r15d, dword [rdx + 4*r8]
	LONG $0x2444894c; BYTE $0x10 // mov    qword [rsp + 16], r8
	LONG $0x8134634e             // movsxd    r14, dword [rcx + 4*r8]
	WORD $0x3949; BYTE $0xc6     // cmp    r14, rax
	JE   LBB1_148
	WORD $0xff48; BYTE $0xc0     // inc    rax
	WORD $0x3949; BYTE $0xc6     // cmp    r14, rax
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JNE  LBB1_144
	LONG $0x24448b48; BYTE $0x50 // mov    rax, qword [rsp + 80]
	LONG $0x244c8b48; BYTE $0x58 // mov    rcx, qword [rsp + 88]
	LONG $0x244c8948; BYTE $0x50 // mov    qword [rsp + 80], rcx
	LONG $0x24448948; BYTE $0x58 // mov    qword [rsp + 88], rax
	LONG $0x000001b8; BYTE $0x00 // mov    eax, 1

LBB1_144:
	LONG $0x246c8b4c; BYTE $0x30 // mov    r13, qword [rsp + 48]
	LONG $0x245c8b4c; BYTE $0x38 // mov    r11, qword [rsp + 56]

LBB1_145:
	LONG $0xc4548b48; BYTE $0x50                   // mov    rdx, qword [rsp + 8*rax + 80]
	LONG $0x303c8d4a                               // lea    rdi, [rax + r14]
	LONG $0xbcaf0f48; LONG $0x00009824; BYTE $0x00 // imul    rdi, qword [rsp + 152]
	LONG $0x24bc0348; LONG $0x00000090             // add    rdi, qword [rsp + 144]
	WORD $0x894c; BYTE $0xe9                       // mov    rcx, r13
	WORD $0x894c; BYTE $0xde                       // mov    rsi, r11
	WORD $0x8949; BYTE $0xd8                       // mov    r8, rbx

LBB1_146:
	WORD $0x634c; BYTE $0x09     // movsxd    r9, dword [rcx]
	LONG $0x14b60f46; BYTE $0x0f // movzx    r10d, byte [rdi + r9]
	WORD $0x014d; BYTE $0xe1     // add    r9, r12
	LONG $0x1cb60f42; BYTE $0x0f // movzx    ebx, byte [rdi + r9]
	WORD $0x2944; BYTE $0xd3     // sub    ebx, r10d
	LONG $0x04e2c141             // shl    r10d, 4
	WORD $0xaf0f; BYTE $0x1e     // imul    ebx, dword [rsi]
	WORD $0x0144; BYTE $0xd3     // add    ebx, r10d
	WORD $0x1a89                 // mov    dword [rdx], ebx
	LONG $0x04c28348             // add    rdx, 4
	LONG $0x04c68348             // add    rsi, 4
	LONG $0x04c18348             // add    rcx, 4
	WORD $0xff49; BYTE $0xc8     // dec    r8
	JNE  LBB1_146
	WORD $0xff48; BYTE $0xc0     // inc    rax
	LONG $0x02f88348             // cmp    rax, 2
	LONG $0x245c8b48; BYTE $0x20 // mov    rbx, qword [rsp + 32]
	JNE  LBB1_145

LBB1_148:
	WORD $0x8545; BYTE $0xff       // test    r15d, r15d
	JE   LBB1_173
	LONG $0x10ff8341               // cmp    r15d, 16
	JNE  LBB1_178
	LONG $0x247c8348; WORD $0x0018 // cmp    qword [rsp + 24], 0
	LONG $0x000000b8; BYTE $0x00   // mov    eax, 0
	LONG $0x247c8b48; BYTE $0x70   // mov    rdi, qword [rsp + 112]
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	LONG $0x24448b4c; BYTE $0x10   // mov    r8, qword [rsp + 16]
	JE   LBB1_153
	WORD $0xc031                   // xor    eax, eax

LBB1_152:
	LONG $0x244c8b48; BYTE $0x58 // mov    rcx, qword [rsp + 88]
	WORD $0x0c8b; BYTE $0x81     // mov    ecx, dword [rcx + 4*rax]
	WORD $0xe1c1; BYTE $0x04     // shl    ecx, 4
	WORD $0xe983; BYTE $0x80     // sub    ecx, -128
	WORD $0x2c88; BYTE $0x07     // mov    byte [rdi + rax], ch
	LONG $0x244c8b48; BYTE $0x58 // mov    rcx, qword [rsp + 88]
	LONG $0x04814c8b             // mov    ecx, dword [rcx + 4*rax + 4]
	WORD $0xe1c1; BYTE $0x04     // shl    ecx, 4
	WORD $0xe983; BYTE $0x80     // sub    ecx, -128
	LONG $0x01076c88             // mov    byte [rdi + rax + 1], ch
	LONG $0x02c08348             // add    rax, 2
	WORD $0x3948; BYTE $0xc2     // cmp    rdx, rax
	JNE  LBB1_152

LBB1_153:
	LONG $0x247c8348; WORD $0x0008 // cmp    qword [rsp + 8], 0
	LONG $0x24748b48; BYTE $0xb0   // mov    rsi, qword -80[rsp] /* [rbp + 16] */
	JE   LBB1_184
	LONG $0x244c8b48; BYTE $0x58   // mov    rcx, qword [rsp + 88]
	JMP  LBB1_155

LBB1_173:
	LONG $0x247c8348; WORD $0x0018 // cmp    qword [rsp + 24], 0
	LONG $0x000000b8; BYTE $0x00   // mov    eax, 0
	LONG $0x247c8b48; BYTE $0x70   // mov    rdi, qword [rsp + 112]
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	JE   LBB1_176
	WORD $0xc031                   // xor    eax, eax

LBB1_175:
	LONG $0x244c8b48; BYTE $0x50 // mov    rcx, qword [rsp + 80]
	WORD $0x0c8b; BYTE $0x81     // mov    ecx, dword [rcx + 4*rax]
	WORD $0xe1c1; BYTE $0x04     // shl    ecx, 4
	WORD $0xe983; BYTE $0x80     // sub    ecx, -128
	WORD $0x2c88; BYTE $0x07     // mov    byte [rdi + rax], ch
	LONG $0x244c8b48; BYTE $0x50 // mov    rcx, qword [rsp + 80]
	LONG $0x04814c8b             // mov    ecx, dword [rcx + 4*rax + 4]
	WORD $0xe1c1; BYTE $0x04     // shl    ecx, 4
	WORD $0xe983; BYTE $0x80     // sub    ecx, -128
	LONG $0x01076c88             // mov    byte [rdi + rax + 1], ch
	LONG $0x02c08348             // add    rax, 2
	WORD $0x3948; BYTE $0xc2     // cmp    rdx, rax
	JNE  LBB1_175

LBB1_176:
	LONG $0x247c8348; WORD $0x0008 // cmp    qword [rsp + 8], 0
	LONG $0x24748b48; BYTE $0xb0   // mov    rsi, qword -80[rsp] /* [rbp + 16] */
	LONG $0x24448b4c; BYTE $0x10   // mov    r8, qword [rsp + 16]
	JE   LBB1_184
	LONG $0x244c8b48; BYTE $0x50   // mov    rcx, qword [rsp + 80]

LBB1_155:
	WORD $0x0c8b; BYTE $0x81 // mov    ecx, dword [rcx + 4*rax]
	WORD $0xe1c1; BYTE $0x04 // shl    ecx, 4
	WORD $0xe983; BYTE $0x80 // sub    ecx, -128
	JMP  LBB1_183

LBB1_178:
	LONG $0x247c8348; WORD $0x0018 // cmp    qword [rsp + 24], 0
	LONG $0x000000b8; BYTE $0x00   // mov    eax, 0
	LONG $0x247c8b48; BYTE $0x70   // mov    rdi, qword [rsp + 112]
	LONG $0x24748b48; BYTE $0x28   // mov    rsi, qword [rsp + 40]
	LONG $0x24448b4c; BYTE $0x10   // mov    r8, qword [rsp + 16]
	JE   LBB1_181
	WORD $0xc031                   // xor    eax, eax

LBB1_180:
	LONG $0x244c8b48; BYTE $0x50               // mov    rcx, qword [rsp + 80]
	LONG $0x24548b48; BYTE $0x58               // mov    rdx, qword [rsp + 88]
	WORD $0x0c8b; BYTE $0x81                   // mov    ecx, dword [rcx + 4*rax]
	WORD $0x148b; BYTE $0x82                   // mov    edx, dword [rdx + 4*rax]
	WORD $0xca29                               // sub    edx, ecx
	WORD $0xe1c1; BYTE $0x04                   // shl    ecx, 4
	LONG $0xd7af0f41                           // imul    edx, r15d
	LONG $0x80118c8d; WORD $0x0000; BYTE $0x00 // lea    ecx, [rcx + rdx + 128]
	WORD $0x2c88; BYTE $0x07                   // mov    byte [rdi + rax], ch
	LONG $0x244c8b48; BYTE $0x50               // mov    rcx, qword [rsp + 80]
	LONG $0x24548b48; BYTE $0x58               // mov    rdx, qword [rsp + 88]
	LONG $0x04814c8b                           // mov    ecx, dword [rcx + 4*rax + 4]
	LONG $0x0482548b                           // mov    edx, dword [rdx + 4*rax + 4]
	WORD $0xca29                               // sub    edx, ecx
	WORD $0xe1c1; BYTE $0x04                   // shl    ecx, 4
	LONG $0xd7af0f41                           // imul    edx, r15d
	LONG $0x80118c8d; WORD $0x0000; BYTE $0x00 // lea    ecx, [rcx + rdx + 128]
	LONG $0x01076c88                           // mov    byte [rdi + rax + 1], ch
	LONG $0x02c08348                           // add    rax, 2
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JNE  LBB1_180

LBB1_181:
	LONG $0x247c8348; WORD $0x0008             // cmp    qword [rsp + 8], 0
	LONG $0x24748b48; BYTE $0xb0               // mov    rsi, qword -80[rsp] /* [rbp + 16] */
	JE   LBB1_184
	LONG $0x244c8b48; BYTE $0x50               // mov    rcx, qword [rsp + 80]
	LONG $0x24548b48; BYTE $0x58               // mov    rdx, qword [rsp + 88]
	WORD $0x0c8b; BYTE $0x81                   // mov    ecx, dword [rcx + 4*rax]
	WORD $0x148b; BYTE $0x82                   // mov    edx, dword [rdx + 4*rax]
	WORD $0xca29                               // sub    edx, ecx
	WORD $0xe1c1; BYTE $0x04                   // shl    ecx, 4
	LONG $0xd7af0f41                           // imul    edx, r15d
	LONG $0x80118c8d; WORD $0x0000; BYTE $0x00 // lea    ecx, [rcx + rdx + 128]

LBB1_183:
	WORD $0x2c88; BYTE $0x07 // mov    byte [rdi + rax], ch

LBB1_184:
	WORD $0xff49; BYTE $0xc0 // inc    r8
	WORD $0x3949; BYTE $0xf0 // cmp    r8, rsi
	JNE  LBB1_185
	JMP  LBB1_162

LBB1_156:
	WORD $0x8945; BYTE $0xc8                   // mov    r8d, r9d
	LONG $0x01e08341                           // and    r8d, 1
	WORD $0xc931                               // xor    ecx, ecx
	LONG $0x01f98349                           // cmp    r9, 1
	JNE  LBB1_163
	LONG $0xfec2c748; WORD $0xffff; BYTE $0xff // mov    rdx, -2
	LONG $0x24b48b48; LONG $0x000000a8         // mov    rsi, qword [rsp + 168]
	LONG $0x24848b48; LONG $0x000000a0         // mov    rax, qword [rsp + 160]
	JMP  LBB1_158

LBB1_163:
	WORD $0x294d; BYTE $0xc1                   // sub    r9, r8
	LONG $0xe2af0f4c                           // imul    r12, rdx
	LONG $0xe7548d4e; BYTE $0x04               // lea    r10, [rdi + 8*r12 + 4]
	LONG $0xfec2c748; WORD $0xffff; BYTE $0xff // mov    rdx, -2
	WORD $0xc931                               // xor    ecx, ecx
	LONG $0x24bc8b48; LONG $0x000000a0         // mov    rdi, qword [rsp + 160]
	LONG $0x249c8b48; LONG $0x000000a8         // mov    rbx, qword [rsp + 168]

LBB1_164:
	LONG $0x8a446349; BYTE $0xfc // movsxd    rax, dword [r10 + 4*rcx - 4]
	WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	JE   LBB1_165
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	JNE  LBB1_165
	LONG $0x247c8948; BYTE $0x50 // mov    qword [rsp + 80], rdi
	LONG $0x245c8948; BYTE $0x58 // mov    qword [rsp + 88], rbx
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	JMP  LBB1_168

LBB1_165:
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi
	WORD $0x8948; BYTE $0xdf // mov    rdi, rbx

LBB1_168:
	LONG $0x8a146349             // movsxd    rdx, dword [r10 + 4*rcx]
	WORD $0xc239                 // cmp    edx, eax
	JE   LBB1_169
	WORD $0xff48; BYTE $0xc0     // inc    rax
	WORD $0x3948; BYTE $0xc2     // cmp    rdx, rax
	JNE  LBB1_169
	LONG $0x24748948; BYTE $0x50 // mov    qword [rsp + 80], rsi
	LONG $0x247c8948; BYTE $0x58 // mov    qword [rsp + 88], rdi
	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	JMP  LBB1_172

LBB1_169:
	WORD $0x8948; BYTE $0xf0 // mov    rax, rsi
	WORD $0x8948; BYTE $0xfe // mov    rsi, rdi

LBB1_172:
	LONG $0x02c18348         // add    rcx, 2
	WORD $0x3949; BYTE $0xc9 // cmp    r9, rcx
	WORD $0x8948; BYTE $0xc7 // mov    rdi, rax
	WORD $0x8948; BYTE $0xf3 // mov    rbx, rsi
	JNE  LBB1_164

LBB1_158:
	WORD $0x8948; BYTE $0xc7           // mov    rdi, rax
	WORD $0x854d; BYTE $0xc0           // test    r8, r8
	JE   LBB1_162
	LONG $0x24848b48; LONG $0x000000b0 // mov    rax, qword [rsp + 176]
	LONG $0x88046348                   // movsxd    rax, dword [rax + 4*rcx]
	WORD $0x3948; BYTE $0xd0           // cmp    rax, rdx
	JE   LBB1_162
	WORD $0xff48; BYTE $0xc2           // inc    rdx
	WORD $0x3948; BYTE $0xd0           // cmp    rax, rdx
	JNE  LBB1_162
	LONG $0x247c8948; BYTE $0x50       // mov    qword [rsp + 80], rdi
	LONG $0x24748948; BYTE $0x58       // mov    qword [rsp + 88], rsi

LBB1_162:
	MOVQ -48(SP), SP
	RET
