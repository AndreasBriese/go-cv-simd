//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x3fa0000000000000
DATA LCDATA1<>+0x008(SB)/8, $0x4030000000000000
DATA LCDATA1<>+0x010(SB)/8, $0x0000008000000080
DATA LCDATA1<>+0x018(SB)/8, $0x0000008000000080
DATA LCDATA1<>+0x020(SB)/8, $0x000000000c080400
DATA LCDATA1<>+0x028(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x030(SB)/8, $0x0100010001000100
DATA LCDATA1<>+0x038(SB)/8, $0x0100010001000100
DATA LCDATA1<>+0x040(SB)/8, $0x0008000800080008
DATA LCDATA1<>+0x048(SB)/8, $0x0008000800080008
DATA LCDATA1<>+0x050(SB)/8, $0x0080008000800080
DATA LCDATA1<>+0x058(SB)/8, $0x0080008000800080
GLOBL LCDATA1<>(SB), 8, $96

TEXT gocvsimd·_memcpy(SB), 7, $0
    RET

TEXT gocvsimd·_floor(SB), 7, $0
    RET

TEXT ·_SimdSse2ShiftBilinear(SB), 7, $0

	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	SUBQ $360, SP

	LEAQ LCDATA1<>(SB), BP

	LONG $0x248c894c; LONG $0xffffff28 // mov    qword -216[rsp], r9 /* [rbp - 216] */
	LONG $0x2444894c; BYTE $0xc0       // mov    qword -64[rsp], r8 /* [rbp - 64] */
	LONG $0x24548948; BYTE $0x88       // mov    qword -120[rsp], rdx /* [rbp - 120] */
	LONG $0x24748948; BYTE $0xd0       // mov    qword -48[rsp], rsi /* [rbp - 48] */
	LONG $0x247c8948; BYTE $0xa0       // mov    qword -96[rsp], rdi /* [rbp - 96] */
	LONG $0x24543b48; BYTE $0x60       // cmp    rdx, qword 96[rsp] /* [rbp + 56] */
	JB   LBB0_37
	LONG $0x24448b48; BYTE $0x50       // mov    rax, qword 80[rsp] /* [rbp + 40] */
	LONG $0x38453948                   // cmp    qword [rbp + 56], rax
	JB   LBB0_37
	LONG $0x24448b48; BYTE $0x58       // mov    rax, qword 88[rsp] /* [rbp + 48] */
	LONG $0x40453948                   // cmp    qword [rbp + 64], rax
	JB   LBB0_37
	LONG $0x244c3b48; BYTE $0x68       // cmp    rcx, qword 104[rsp] /* [rbp + 64] */
	JB   LBB0_37
	LONG $0x244c8948; BYTE $0x80       // mov    qword -128[rsp], rcx /* [rbp - 128] */
	LONG $0x307d8348; BYTE $0x00       // cmp    qword [rbp + 48], 0
	JE   LBB0_11
	LONG $0x247c8b4c; BYTE $0xc0       // mov    r15, qword -64[rsp] /* [rbp - 64] */
	LONG $0x7caf0f4c; WORD $0x8824     // imul    r15, qword -120[rsp] /* [rbp - 120] */
	LONG $0x247c894c; BYTE $0xc8       // mov    qword -56[rsp], r15 /* [rbp - 56] */
	LONG $0x24448b48; BYTE $0x58       // mov    rax, qword 88[rsp] /* [rbp + 48] */
	LONG $0xff488d48                   // lea    rcx, [rax - 1]
	LONG $0x244c8948; BYTE $0xb0       // mov    qword -80[rsp], rcx /* [rbp - 80] */
	WORD $0x3145; BYTE $0xed           // xor    r13d, r13d
	WORD $0x03a8                       // test    al, 3
	LONG $0x000000bb; BYTE $0x00       // mov    ebx, 0
	LONG $0x0000be41; WORD $0x0000     // mov    r14d, 0
	LONG $0x244c8b48; BYTE $0xa0       // mov    rcx, qword -96[rsp] /* [rbp - 96] */
	LONG $0x24448b48; BYTE $0x70       // mov    rax, qword 112[rsp] /* [rbp + 72] */
	JE   LBB0_8
	LONG $0x24648b4c; BYTE $0x58       // mov    r12, qword 88[rsp] /* [rbp + 48] */
	LONG $0x03e48341                   // and    r12d, 3
	LONG $0x2464894c; BYTE $0xb8       // mov    qword -72[rsp], r12 /* [rbp - 72] */
	WORD $0x3145; BYTE $0xed           // xor    r13d, r13d
	WORD $0xdb31                       // xor    ebx, ebx
	WORD $0x3145; BYTE $0xf6           // xor    r14d, r14d

LBB0_7:
	LONG $0x29348d4a             // lea    rsi, [rcx + r13]
	LONG $0x183c8d48             // lea    rdi, [rax + rbx]
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	WORD $0x8949; BYTE $0xcc     // mov    r12, rcx
	WORD $0x8949; BYTE $0xc7     // mov    r15, rax
	CALL gocvsimd·_memcpy(SB)
	WORD $0x894c; BYTE $0xf8     // mov    rax, r15
	LONG $0x247c8b4c; BYTE $0xc8 // mov    r15, qword -56[rsp] /* [rbp - 56] */
	WORD $0x894c; BYTE $0xe1     // mov    rcx, r12
	LONG $0x246c034c; BYTE $0xd0 // add    r13, qword -48[rsp] /* [rbp - 48] */
	LONG $0x245c0348; BYTE $0x78 // add    rbx, qword 120[rsp] /* [rbp + 80] */
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x2474394c; BYTE $0xb8 // cmp    qword -72[rsp], r14 /* [rbp - 72] */
	JNE  LBB0_7

LBB0_8:
	LONG $0x247c8348; WORD $0x03b0     // cmp    qword -80[rsp], 3 /* [rbp - 80] */
	JB   LBB0_11
	LONG $0x24448b48; BYTE $0xd0       // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x400c8d48                   // lea    rcx, [rax + 2*rax]
	LONG $0x244c8948; BYTE $0xb8       // mov    qword -72[rsp], rcx /* [rbp - 72] */
	LONG $0x246c034c; BYTE $0xa0       // add    r13, qword -96[rsp] /* [rbp - 96] */
	LONG $0x850c8d48; LONG $0x00000000 // lea    rcx, [4*rax]
	LONG $0x244c8948; BYTE $0xb0       // mov    qword -80[rsp], rcx /* [rbp - 80] */
	LONG $0x00048d48                   // lea    rax, [rax + rax]
	LONG $0x24448948; BYTE $0xa8       // mov    qword -88[rsp], rax /* [rbp - 88] */
	LONG $0x24448b48; BYTE $0x78       // mov    rax, qword 120[rsp] /* [rbp + 80] */
	LONG $0x400c8d48                   // lea    rcx, [rax + 2*rax]
	LONG $0x244c8948; BYTE $0x98       // mov    qword -104[rsp], rcx /* [rbp - 104] */
	LONG $0x245c0348; BYTE $0x70       // add    rbx, qword 112[rsp] /* [rbp + 72] */
	LONG $0x850c8d48; LONG $0x00000000 // lea    rcx, [4*rax]
	LONG $0x244c8948; BYTE $0x90       // mov    qword -112[rsp], rcx /* [rbp - 112] */
	LONG $0x24648b4c; BYTE $0x58       // mov    r12, qword 88[rsp] /* [rbp + 48] */
	WORD $0x294d; BYTE $0xf4           // sub    r12, r14
	LONG $0x00348d4c                   // lea    r14, [rax + rax]

LBB0_10:
	WORD $0x8948; BYTE $0xdf     // mov    rdi, rbx
	WORD $0x894c; BYTE $0xee     // mov    rsi, r13
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0xd0 // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x05748d49; BYTE $0x00 // lea    rsi, [r13 + rax]
	LONG $0x24448b48; BYTE $0x78 // mov    rax, qword 120[rsp] /* [rbp + 80] */
	LONG $0x033c8d48             // lea    rdi, [rbx + rax]
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0xa8 // mov    rax, qword -88[rsp] /* [rbp - 88] */
	LONG $0x05748d49; BYTE $0x00 // lea    rsi, [r13 + rax]
	LONG $0x333c8d4a             // lea    rdi, [rbx + r14]
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0xb8 // mov    rax, qword -72[rsp] /* [rbp - 72] */
	LONG $0x05748d49; BYTE $0x00 // lea    rsi, [r13 + rax]
	LONG $0x24448b48; BYTE $0x98 // mov    rax, qword -104[rsp] /* [rbp - 104] */
	LONG $0x033c8d48             // lea    rdi, [rbx + rax]
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x246c034c; BYTE $0xb0 // add    r13, qword -80[rsp] /* [rbp - 80] */
	LONG $0x245c0348; BYTE $0x90 // add    rbx, qword -112[rsp] /* [rbp - 112] */
	LONG $0xfcc48349             // add    r12, -4
	JNE  LBB0_10

LBB0_11:
	LONG $0x244c8b48; BYTE $0x80 // mov    rcx, qword -128[rsp] /* [rbp - 128] */
	LONG $0x244c3b48; BYTE $0x68 // cmp    rcx, qword 104[rsp] /* [rbp + 64] */
	JBE  LBB0_19
	LONG $0x24748b48; BYTE $0x68 // mov    rsi, qword 104[rsp] /* [rbp + 64] */
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi
	LONG $0x24448b48; BYTE $0xd0 // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0xf8af0f4c             // imul    r15, rax
	LONG $0x24448b48; BYTE $0x78 // mov    rax, qword 120[rsp] /* [rbp + 80] */
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	LONG $0xdeaf0f48             // imul    rbx, rsi
	LONG $0x246c8b4c; BYTE $0xc0 // mov    r13, qword -64[rsp] /* [rbp - 64] */
	LONG $0x24448b48; BYTE $0x88 // mov    rax, qword -120[rsp] /* [rbp - 120] */
	LONG $0xe8af0f4c             // imul    r13, rax
	WORD $0xc889                 // mov    eax, ecx
	WORD $0xf029                 // sub    eax, esi
	LONG $0xff518d48             // lea    rdx, [rcx - 1]
	WORD $0x2948; BYTE $0xf2     // sub    rdx, rsi
	LONG $0x24548948; BYTE $0xc8 // mov    qword -56[rsp], rdx /* [rbp - 56] */
	WORD $0x03a8                 // test    al, 3
	JE   LBB0_13
	WORD $0x8941; BYTE $0xce     // mov    r14d, ecx
	WORD $0x2941; BYTE $0xf6     // sub    r14d, esi
	LONG $0x03e68341             // and    r14d, 3
	WORD $0xf749; BYTE $0xde     // neg    r14
	WORD $0x8949; BYTE $0xf4     // mov    r12, rsi

LBB0_15:
	LONG $0x24448b48; BYTE $0x70 // mov    rax, qword 112[rsp] /* [rbp + 72] */
	LONG $0x183c8d48             // lea    rdi, [rax + rbx]
	LONG $0x24448b48; BYTE $0xa0 // mov    rax, qword -96[rsp] /* [rbp - 96] */
	LONG $0x38348d4a             // lea    rsi, [rax + r15]
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	LONG $0x247c034c; BYTE $0xd0 // add    r15, qword -48[rsp] /* [rbp - 48] */
	LONG $0x245c0348; BYTE $0x78 // add    rbx, qword 120[rsp] /* [rbp + 80] */
	WORD $0xff49; BYTE $0xc4     // inc    r12
	WORD $0xff49; BYTE $0xc6     // inc    r14
	JNE  LBB0_15
	JMP  LBB0_16

LBB0_13:
	WORD $0x8949; BYTE $0xf4 // mov    r12, rsi

LBB0_16:
	LONG $0x247c8348; WORD $0x03c8     // cmp    qword -56[rsp], 3 /* [rbp - 56] */
	LONG $0x24748b4c; BYTE $0x80       // mov    r14, qword -128[rsp] /* [rbp - 128] */
	JB   LBB0_19
	WORD $0x294d; BYTE $0xe6           // sub    r14, r12
	LONG $0x24448b48; BYTE $0x78       // mov    rax, qword 120[rsp] /* [rbp + 80] */
	LONG $0x40148d48                   // lea    rdx, [rax + 2*rax]
	LONG $0x24548948; BYTE $0xc8       // mov    qword -56[rsp], rdx /* [rbp - 56] */
	LONG $0x245c0348; BYTE $0x70       // add    rbx, qword 112[rsp] /* [rbp + 72] */
	LONG $0x85148d48; LONG $0x00000000 // lea    rdx, [4*rax]
	LONG $0x24548948; BYTE $0xb8       // mov    qword -72[rsp], rdx /* [rbp - 72] */
	LONG $0x00048d48                   // lea    rax, [rax + rax]
	LONG $0x24448948; BYTE $0xb0       // mov    qword -80[rsp], rax /* [rbp - 80] */
	LONG $0x24448b48; BYTE $0xd0       // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x40148d48                   // lea    rdx, [rax + 2*rax]
	LONG $0x24548948; BYTE $0xa8       // mov    qword -88[rsp], rdx /* [rbp - 88] */
	LONG $0x247c034c; BYTE $0xa0       // add    r15, qword -96[rsp] /* [rbp - 96] */
	LONG $0x85148d48; LONG $0x00000000 // lea    rdx, [4*rax]
	LONG $0x24548948; BYTE $0x98       // mov    qword -104[rsp], rdx /* [rbp - 104] */
	LONG $0x00248d4c                   // lea    r12, [rax + rax]

LBB0_18:
	WORD $0x8948; BYTE $0xdf     // mov    rdi, rbx
	WORD $0x894c; BYTE $0xfe     // mov    rsi, r15
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0x78 // mov    rax, qword 120[rsp] /* [rbp + 80] */
	LONG $0x033c8d48             // lea    rdi, [rbx + rax]
	LONG $0x24448b48; BYTE $0xd0 // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x07348d49             // lea    rsi, [r15 + rax]
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0xb0 // mov    rax, qword -80[rsp] /* [rbp - 80] */
	LONG $0x033c8d48             // lea    rdi, [rbx + rax]
	LONG $0x27348d4b             // lea    rsi, [r15 + r12]
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0xc8 // mov    rax, qword -56[rsp] /* [rbp - 56] */
	LONG $0x033c8d48             // lea    rdi, [rbx + rax]
	LONG $0x24448b48; BYTE $0xa8 // mov    rax, qword -88[rsp] /* [rbp - 88] */
	LONG $0x07348d49             // lea    rsi, [r15 + rax]
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	LONG $0x245c0348; BYTE $0xb8 // add    rbx, qword -72[rsp] /* [rbp - 72] */
	LONG $0x247c034c; BYTE $0x98 // add    r15, qword -104[rsp] /* [rbp - 104] */
	LONG $0xfcc68349             // add    r14, -4
	JNE  LBB0_18

LBB0_19:
	LONG $0x244c8b48; BYTE $0x78 // mov    rcx, qword 120[rsp] /* [rbp + 80] */
	LONG $0x287d8348; BYTE $0x00 // cmp    qword [rbp + 40], 0
	JE   LBB0_28
	LONG $0x24448b48; BYTE $0x58 // mov    rax, qword 88[rsp] /* [rbp + 48] */
	LONG $0x40453948             // cmp    qword [rbp + 64], rax
	JBE  LBB0_28
	LONG $0x247c8b4c; BYTE $0x50 // mov    r15, qword 80[rsp] /* [rbp + 40] */
	LONG $0x24448b48; BYTE $0xc0 // mov    rax, qword -64[rsp] /* [rbp - 64] */
	LONG $0xf8af0f4c             // imul    r15, rax
	WORD $0x8949; BYTE $0xcc     // mov    r12, rcx
	LONG $0x24748b48; BYTE $0x58 // mov    rsi, qword 88[rsp] /* [rbp + 48] */
	LONG $0xe6af0f4c             // imul    r12, rsi
	WORD $0x8948; BYTE $0xf3     // mov    rbx, rsi
	LONG $0x24448b48; BYTE $0xd0 // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0xd8af0f48             // imul    rbx, rax
	LONG $0x24548b48; BYTE $0x68 // mov    rdx, qword 104[rsp] /* [rbp + 64] */
	WORD $0xd089                 // mov    eax, edx
	WORD $0xf029                 // sub    eax, esi
	LONG $0xff4a8d48             // lea    rcx, [rdx - 1]
	WORD $0x2948; BYTE $0xf1     // sub    rcx, rsi
	WORD $0x03a8                 // test    al, 3
	JE   LBB0_22
	LONG $0x244c8948; BYTE $0xc8 // mov    qword -56[rsp], rcx /* [rbp - 56] */
	WORD $0x8941; BYTE $0xd6     // mov    r14d, edx
	WORD $0x2941; BYTE $0xf6     // sub    r14d, esi
	LONG $0x03e68341             // and    r14d, 3
	WORD $0xf749; BYTE $0xde     // neg    r14
	WORD $0x8949; BYTE $0xf5     // mov    r13, rsi

LBB0_24:
	LONG $0x24448b48; BYTE $0x70 // mov    rax, qword 112[rsp] /* [rbp + 72] */
	LONG $0x203c8d4a             // lea    rdi, [rax + r12]
	LONG $0x24448b48; BYTE $0xa0 // mov    rax, qword -96[rsp] /* [rbp - 96] */
	LONG $0x18348d48             // lea    rsi, [rax + rbx]
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x245c0348; BYTE $0xd0 // add    rbx, qword -48[rsp] /* [rbp - 48] */
	LONG $0x2464034c; BYTE $0x78 // add    r12, qword 120[rsp] /* [rbp + 80] */
	WORD $0xff49; BYTE $0xc5     // inc    r13
	WORD $0xff49; BYTE $0xc6     // inc    r14
	JNE  LBB0_24
	JMP  LBB0_25

LBB0_22:
	LONG $0x244c8948; BYTE $0xc8 // mov    qword -56[rsp], rcx /* [rbp - 56] */
	WORD $0x8949; BYTE $0xf5     // mov    r13, rsi

LBB0_25:
	LONG $0x247c8348; WORD $0x03c8     // cmp    qword -56[rsp], 3 /* [rbp - 56] */
	JB   LBB0_28
	LONG $0x24748b4c; BYTE $0x68       // mov    r14, qword 104[rsp] /* [rbp + 64] */
	WORD $0x294d; BYTE $0xee           // sub    r14, r13
	LONG $0x24448b48; BYTE $0x78       // mov    rax, qword 120[rsp] /* [rbp + 80] */
	LONG $0x400c8d48                   // lea    rcx, [rax + 2*rax]
	LONG $0x244c8948; BYTE $0xc8       // mov    qword -56[rsp], rcx /* [rbp - 56] */
	LONG $0x2464034c; BYTE $0x70       // add    r12, qword 112[rsp] /* [rbp + 72] */
	LONG $0x850c8d48; LONG $0x00000000 // lea    rcx, [4*rax]
	LONG $0x244c8948; BYTE $0xb8       // mov    qword -72[rsp], rcx /* [rbp - 72] */
	LONG $0x00048d48                   // lea    rax, [rax + rax]
	LONG $0x24448948; BYTE $0xb0       // mov    qword -80[rsp], rax /* [rbp - 80] */
	LONG $0x24448b48; BYTE $0xd0       // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x400c8d48                   // lea    rcx, [rax + 2*rax]
	LONG $0x244c8948; BYTE $0xa8       // mov    qword -88[rsp], rcx /* [rbp - 88] */
	LONG $0x245c0348; BYTE $0xa0       // add    rbx, qword -96[rsp] /* [rbp - 96] */
	LONG $0x850c8d48; LONG $0x00000000 // lea    rcx, [4*rax]
	LONG $0x244c8948; BYTE $0x98       // mov    qword -104[rsp], rcx /* [rbp - 104] */
	LONG $0x002c8d4c                   // lea    r13, [rax + rax]

LBB0_27:
	WORD $0x894c; BYTE $0xe7     // mov    rdi, r12
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0x78 // mov    rax, qword 120[rsp] /* [rbp + 80] */
	LONG $0x043c8d49             // lea    rdi, [r12 + rax]
	LONG $0x24448b48; BYTE $0xd0 // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x03348d48             // lea    rsi, [rbx + rax]
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0xb0 // mov    rax, qword -80[rsp] /* [rbp - 80] */
	LONG $0x043c8d49             // lea    rdi, [r12 + rax]
	LONG $0x2b348d4a             // lea    rsi, [rbx + r13]
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0xc8 // mov    rax, qword -56[rsp] /* [rbp - 56] */
	LONG $0x043c8d49             // lea    rdi, [r12 + rax]
	LONG $0x24448b48; BYTE $0xa8 // mov    rax, qword -88[rsp] /* [rbp - 88] */
	LONG $0x03348d48             // lea    rsi, [rbx + rax]
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x2464034c; BYTE $0xb8 // add    r12, qword -72[rsp] /* [rbp - 72] */
	LONG $0x245c0348; BYTE $0x98 // add    rbx, qword -104[rsp] /* [rbp - 104] */
	LONG $0xfcc68349             // add    r14, -4
	JNE  LBB0_27

LBB0_28:
	LONG $0x24448b48; BYTE $0x88   // mov    rax, qword -120[rsp] /* [rbp - 120] */
	LONG $0x24442b48; BYTE $0x60   // sub    rax, qword 96[rsp] /* [rbp + 56] */
	LONG $0x24448948; BYTE $0x88   // mov    qword -120[rsp], rax /* [rbp - 120] */
	JBE  LBB0_37
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword 88[rsp] /* [rbp + 48] */
	LONG $0x40453948               // cmp    qword [rbp + 64], rax
	JBE  LBB0_37
	LONG $0x24448b48; BYTE $0x60   // mov    rax, qword 96[rsp] /* [rbp + 56] */
	LONG $0x244c8b48; BYTE $0xc0   // mov    rcx, qword -64[rsp] /* [rbp - 64] */
	LONG $0xc1af0f48               // imul    rax, rcx
	LONG $0x24548b48; BYTE $0x88   // mov    rdx, qword -120[rsp] /* [rbp - 120] */
	LONG $0xd1af0f48               // imul    rdx, rcx
	LONG $0x24548948; BYTE $0x88   // mov    qword -120[rsp], rdx /* [rbp - 120] */
	LONG $0x247c8b4c; BYTE $0x78   // mov    r15, qword 120[rsp] /* [rbp + 80] */
	LONG $0x24548b48; BYTE $0x58   // mov    rdx, qword 88[rsp] /* [rbp + 48] */
	LONG $0xfaaf0f4c               // imul    r15, rdx
	WORD $0x0149; BYTE $0xc7       // add    r15, rax
	WORD $0x8948; BYTE $0xd3       // mov    rbx, rdx
	LONG $0x5caf0f48; WORD $0xd024 // imul    rbx, qword -48[rsp] /* [rbp - 48] */
	WORD $0x0148; BYTE $0xc3       // add    rbx, rax
	LONG $0x244c8b48; BYTE $0x68   // mov    rcx, qword 104[rsp] /* [rbp + 64] */
	WORD $0xc889                   // mov    eax, ecx
	WORD $0xd029                   // sub    eax, edx
	LONG $0xff718d48               // lea    rsi, [rcx - 1]
	WORD $0x2948; BYTE $0xd6       // sub    rsi, rdx
	LONG $0x24748948; BYTE $0xc8   // mov    qword -56[rsp], rsi /* [rbp - 56] */
	WORD $0x03a8                   // test    al, 3
	JE   LBB0_31
	WORD $0x8941; BYTE $0xcd       // mov    r13d, ecx
	WORD $0x2941; BYTE $0xd5       // sub    r13d, edx
	LONG $0x03e58341               // and    r13d, 3
	WORD $0xf749; BYTE $0xdd       // neg    r13
	WORD $0x8949; BYTE $0xd4       // mov    r12, rdx
	LONG $0x24748b4c; BYTE $0x88   // mov    r14, qword -120[rsp] /* [rbp - 120] */

LBB0_33:
	LONG $0x24448b48; BYTE $0x70 // mov    rax, qword 112[rsp] /* [rbp + 72] */
	LONG $0x383c8d4a             // lea    rdi, [rax + r15]
	LONG $0x24448b48; BYTE $0xa0 // mov    rax, qword -96[rsp] /* [rbp - 96] */
	LONG $0x18348d48             // lea    rsi, [rax + rbx]
	WORD $0x894c; BYTE $0xf2     // mov    rdx, r14
	CALL gocvsimd·_memcpy(SB)
	LONG $0x245c0348; BYTE $0xd0 // add    rbx, qword -48[rsp] /* [rbp - 48] */
	LONG $0x247c034c; BYTE $0x78 // add    r15, qword 120[rsp] /* [rbp + 80] */
	WORD $0xff49; BYTE $0xc4     // inc    r12
	WORD $0xff49; BYTE $0xc5     // inc    r13
	JNE  LBB0_33
	JMP  LBB0_34

LBB0_31:
	WORD $0x8949; BYTE $0xd4     // mov    r12, rdx
	LONG $0x24748b4c; BYTE $0x88 // mov    r14, qword -120[rsp] /* [rbp - 120] */

LBB0_34:
	WORD $0x894d; BYTE $0xf5           // mov    r13, r14
	LONG $0x247c8348; WORD $0x03c8     // cmp    qword -56[rsp], 3 /* [rbp - 56] */
	JB   LBB0_37
	LONG $0x24748b4c; BYTE $0x68       // mov    r14, qword 104[rsp] /* [rbp + 64] */
	WORD $0x294d; BYTE $0xe6           // sub    r14, r12
	LONG $0x24448b48; BYTE $0x78       // mov    rax, qword 120[rsp] /* [rbp + 80] */
	LONG $0x400c8d48                   // lea    rcx, [rax + 2*rax]
	LONG $0x244c8948; BYTE $0xc8       // mov    qword -56[rsp], rcx /* [rbp - 56] */
	LONG $0x247c034c; BYTE $0x70       // add    r15, qword 112[rsp] /* [rbp + 72] */
	LONG $0x850c8d48; LONG $0x00000000 // lea    rcx, [4*rax]
	LONG $0x244c8948; BYTE $0xb8       // mov    qword -72[rsp], rcx /* [rbp - 72] */
	LONG $0x00048d48                   // lea    rax, [rax + rax]
	LONG $0x24448948; BYTE $0xb0       // mov    qword -80[rsp], rax /* [rbp - 80] */
	LONG $0x24448b48; BYTE $0xd0       // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x400c8d48                   // lea    rcx, [rax + 2*rax]
	LONG $0x244c8948; BYTE $0xa8       // mov    qword -88[rsp], rcx /* [rbp - 88] */
	LONG $0x245c0348; BYTE $0xa0       // add    rbx, qword -96[rsp] /* [rbp - 96] */
	LONG $0x850c8d48; LONG $0x00000000 // lea    rcx, [4*rax]
	LONG $0x244c8948; BYTE $0x98       // mov    qword -104[rsp], rcx /* [rbp - 104] */
	LONG $0x00048d48                   // lea    rax, [rax + rax]
	LONG $0x24448948; BYTE $0x90       // mov    qword -112[rsp], rax /* [rbp - 112] */

LBB0_36:
	WORD $0x894c; BYTE $0xff     // mov    rdi, r15
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0x78 // mov    rax, qword 120[rsp] /* [rbp + 80] */
	LONG $0x073c8d49             // lea    rdi, [r15 + rax]
	LONG $0x24448b48; BYTE $0xd0 // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x03348d48             // lea    rsi, [rbx + rax]
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0xb0 // mov    rax, qword -80[rsp] /* [rbp - 80] */
	LONG $0x073c8d49             // lea    rdi, [r15 + rax]
	LONG $0x24448b48; BYTE $0x90 // mov    rax, qword -112[rsp] /* [rbp - 112] */
	LONG $0x03348d48             // lea    rsi, [rbx + rax]
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0xc8 // mov    rax, qword -56[rsp] /* [rbp - 56] */
	LONG $0x073c8d49             // lea    rdi, [r15 + rax]
	LONG $0x24448b48; BYTE $0xa8 // mov    rax, qword -88[rsp] /* [rbp - 88] */
	LONG $0x03348d48             // lea    rsi, [rbx + rax]
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	LONG $0x247c034c; BYTE $0xb8 // add    r15, qword -72[rsp] /* [rbp - 72] */
	LONG $0x245c0348; BYTE $0x98 // add    rbx, qword -104[rsp] /* [rbp - 104] */
	LONG $0xfcc68349             // add    r14, -4
	JNE  LBB0_36

LBB0_37:
	LONG $0x246c8b4c; BYTE $0x78               // mov    r13, qword 120[rsp] /* [rbp + 80] */
	WORD $0x894c; BYTE $0xee                   // mov    rsi, r13
	LONG $0x24448b48; BYTE $0x58               // mov    rax, qword 88[rsp] /* [rbp + 48] */
	WORD $0x8948; BYTE $0xc1                   // mov    rcx, rax
	LONG $0xf1af0f48                           // imul    rsi, rcx
	LONG $0x24748948; BYTE $0x90               // mov    qword -112[rsp], rsi /* [rbp - 112] */
	LONG $0x24448b48; BYTE $0x50               // mov    rax, qword 80[rsp] /* [rbp + 40] */
	WORD $0x8948; BYTE $0xc2                   // mov    rdx, rax
	WORD $0x8949; BYTE $0xd5                   // mov    r13, rdx
	LONG $0x6caf0f4c; WORD $0xc024             // imul    r13, qword -64[rsp] /* [rbp - 64] */
	LONG $0x2e048d4a                           // lea    rax, [rsi + r13]
	LONG $0x24440348; BYTE $0x70               // add    rax, qword 112[rsp] /* [rbp + 72] */
	LONG $0x24448948; BYTE $0xb8               // mov    qword -72[rsp], rax /* [rbp - 72] */
	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x44af0f48; WORD $0xd024             // imul    rax, qword -48[rsp] /* [rbp - 48] */
	WORD $0x014c; BYTE $0xe8                   // add    rax, r13
	LONG $0x24848948; LONG $0xffffff50         // mov    qword -176[rsp], rax /* [rbp - 176] */
	WORD $0x8948; BYTE $0xce                   // mov    rsi, rcx
	LONG $0x24448b48; BYTE $0x38               // mov    rax, qword 56[rsp] /* [rbp + 16] */
	LONG $0xf0af0f48                           // imul    rsi, rax
	WORD $0x014c; BYTE $0xee                   // add    rsi, r13
	LONG $0x24b48948; LONG $0xffffff08         // mov    qword -248[rsp], rsi /* [rbp - 248] */
	LONG $0x24848b48; LONG $0xffffff28         // mov    rax, qword -216[rsp] /* [rbp - 216] */
	LONG $0x30048d48                           // lea    rax, [rax + rsi]
	LONG $0x24848948; LONG $0xfffffef8         // mov    qword -264[rsp], rax /* [rbp - 264] */
	LONG $0x24448b48; BYTE $0x60               // mov    rax, qword 96[rsp] /* [rbp + 56] */
	WORD $0x8949; BYTE $0xc4                   // mov    r12, rax
	WORD $0x2949; BYTE $0xd4                   // sub    r12, rdx
	LONG $0x24a4894c; LONG $0xffffff30         // mov    qword -208[rsp], r12 /* [rbp - 208] */
	LONG $0x24448b48; BYTE $0x40               // mov    rax, qword 64[rsp] /* [rbp + 24] */
	LONG $0x00100ff2                           // movsd    xmm0, qword [rax]
	LONG $0x24448b48; BYTE $0x68               // mov    rax, qword 104[rsp] /* [rbp + 64] */
	WORD $0x2948; BYTE $0xc8                   // sub    rax, rcx
	LONG $0x24848948; LONG $0xffffff38         // mov    qword -200[rsp], rax /* [rbp - 200] */
	LONG $0x45580ff2; BYTE $0x00               // addsd    xmm0, qword 0[rbp] /* [rip + LCPI0_0] */
	LONG $0x44110ff2; WORD $0xb024             // movsd    qword -80[rsp], xmm0 /* [rbp - 80] */
	CALL gocvsimd·_floor(SB)
	LONG $0x2c0f4cf2; BYTE $0xf0               // cvttsd2si    r14, xmm0
	LONG $0x24b4894c; LONG $0xffffff40         // mov    qword -192[rsp], r14 /* [rbp - 192] */
	LONG $0x24448b48; BYTE $0x48               // mov    rax, qword 72[rsp] /* [rbp + 32] */
	LONG $0x45100ff2; BYTE $0x00               // movsd    xmm0, qword 0[rbp] /* [rip + LCPI0_0] */
	LONG $0x00580ff2                           // addsd    xmm0, qword [rax]
	LONG $0x44110ff2; WORD $0xc824             // movsd    qword -56[rsp], xmm0 /* [rbp - 56] */
	CALL gocvsimd·_floor(SB)
	LONG $0x2c0f4cf2; BYTE $0xf8               // cvttsd2si    r15, xmm0
	LONG $0x24bc894c; LONG $0xffffff48         // mov    qword -184[rsp], r15 /* [rbp - 184] */
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f49f2; BYTE $0xc6               // cvtsi2sd    xmm0, r14
	LONG $0x4c100ff2; WORD $0xb024             // movsd    xmm1, qword -80[rsp] /* [rbp - 80] */
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x4d590ff2; BYTE $0x08               // mulsd    xmm1, qword 8[rbp] /* [rip + LCPI0_1] */
	LONG $0xc1280f66                           // movapd    xmm0, xmm1
	CALL gocvsimd·_floor(SB)
	LONG $0xd82c0ff2                           // cvttsd2si    ebx, xmm0
	LONG $0xf4249c89; WORD $0xfffe; BYTE $0xff // mov    dword -268[rsp], ebx /* [rbp - 268] */
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x2a0f49f2; BYTE $0xc7               // cvtsi2sd    xmm0, r15
	LONG $0x4c100ff2; WORD $0xc824             // movsd    xmm1, qword -56[rsp] /* [rbp - 56] */
	LONG $0xc85c0ff2                           // subsd    xmm1, xmm0
	LONG $0x4d590ff2; BYTE $0x08               // mulsd    xmm1, qword 8[rbp] /* [rip + LCPI0_1] */
	LONG $0xc1280f66                           // movapd    xmm0, xmm1
	CALL gocvsimd·_floor(SB)
	LONG $0xc82c0ff2                           // cvttsd2si    ecx, xmm0
	LONG $0x24248c89; WORD $0xffff; BYTE $0xff // mov    dword -220[rsp], ecx /* [rbp - 220] */
	WORD $0xd889                               // mov    eax, ebx
	WORD $0xd8f7                               // neg    eax
	WORD $0x1948; BYTE $0xc0                   // sbb    rax, rax
	LONG $0x24848948; LONG $0xffffff60         // mov    qword -160[rsp], rax /* [rbp - 160] */
	WORD $0xc889                               // mov    eax, ecx
	WORD $0xd8f7                               // neg    eax
	WORD $0x1948; BYTE $0xc0                   // sbb    rax, rax
	LONG $0x24448948; BYTE $0xa8               // mov    qword -88[rsp], rax /* [rbp - 88] */
	WORD $0xc031                               // xor    eax, eax
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	LONG $0xf0480f4c                           // cmovs    r14, rax
	LONG $0x24b4894c; LONG $0xfffffeb0         // mov    qword -336[rsp], r14 /* [rbp - 336] */
	WORD $0x894c; BYTE $0xe6                   // mov    rsi, r12
	WORD $0x294c; BYTE $0xf6                   // sub    rsi, r14
	WORD $0x854d; BYTE $0xff                   // test    r15, r15
	LONG $0xc7490f49                           // cmovns    rax, r15
	LONG $0x24848948; LONG $0xfffffed0         // mov    qword -304[rsp], rax /* [rbp - 304] */
	WORD $0x3949; BYTE $0xf4                   // cmp    r12, rsi
	JB   LBB0_59
	LONG $0x248c8b48; LONG $0xffffff40         // mov    rcx, qword -192[rsp] /* [rbp - 192] */
	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x3ff8c148                           // sar    rax, 63
	LONG $0x24bc8b48; LONG $0xffffff60         // mov    rdi, qword -160[rsp] /* [rbp - 160] */
	WORD $0x2948; BYTE $0xcf                   // sub    rdi, rcx
	WORD $0x2148; BYTE $0xc7                   // and    rdi, rax
	WORD $0x3948; BYTE $0xf7                   // cmp    rdi, rsi
	JA   LBB0_59
	LONG $0x24848b48; LONG $0xffffff38         // mov    rax, qword -200[rsp] /* [rbp - 200] */
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0x249c2b48; LONG $0xfffffed0         // sub    rbx, qword -304[rsp] /* [rbp - 304] */
	WORD $0x3948; BYTE $0xc3                   // cmp    rbx, rax
	JA   LBB0_59
	LONG $0x248c8b48; LONG $0xffffff48         // mov    rcx, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x3ff8c148                           // sar    rax, 63
	LONG $0x24548b48; BYTE $0xa8               // mov    rdx, qword -88[rsp] /* [rbp - 88] */
	WORD $0x2948; BYTE $0xca                   // sub    rdx, rcx
	WORD $0x2148; BYTE $0xc2                   // and    rdx, rax
	WORD $0x3948; BYTE $0xda                   // cmp    rdx, rbx
	JA   LBB0_59
	LONG $0x249c8948; LONG $0xffffff10         // mov    qword -240[rsp], rbx /* [rbp - 240] */
	LONG $0x24bc8948; LONG $0xfffffee0         // mov    qword -288[rsp], rdi /* [rbp - 288] */
	LONG $0x24b48948; LONG $0xfffffee8         // mov    qword -280[rsp], rsi /* [rbp - 280] */
	LONG $0x24ac894c; LONG $0xffffff00         // mov    qword -256[rsp], r13 /* [rbp - 256] */
	WORD $0x8548; BYTE $0xd2                   // test    rdx, rdx
	LONG $0x24948948; LONG $0xffffff18         // mov    qword -232[rsp], rdx /* [rbp - 232] */
	JE   LBB0_48
	LONG $0x24948b48; LONG $0xffffff30         // mov    rdx, qword -208[rsp] /* [rbp - 208] */
	LONG $0x54af0f48; WORD $0xc024             // imul    rdx, qword -64[rsp] /* [rbp - 64] */
	LONG $0x24548948; BYTE $0x98               // mov    qword -104[rsp], rdx /* [rbp - 104] */
	LONG $0x24848b48; LONG $0xffffff18         // mov    rax, qword -232[rsp] /* [rbp - 232] */
	LONG $0xff488d48                           // lea    rcx, [rax - 1]
	LONG $0x244c8948; BYTE $0x80               // mov    qword -128[rsp], rcx /* [rbp - 128] */
	WORD $0x3145; BYTE $0xed                   // xor    r13d, r13d
	WORD $0x03a8                               // test    al, 3
	LONG $0x0000bc41; WORD $0x0000             // mov    r12d, 0
	LONG $0x000000bb; BYTE $0x00               // mov    ebx, 0
	LONG $0x24748b4c; BYTE $0x78               // mov    r14, qword 120[rsp] /* [rbp + 80] */
	WORD $0x894c; BYTE $0xf1                   // mov    rcx, r14
	LONG $0x247c8b4c; BYTE $0xb8               // mov    r15, qword -72[rsp] /* [rbp - 72] */
	LONG $0x24448b48; BYTE $0x38               // mov    rax, qword 56[rsp] /* [rbp + 16] */
	LONG $0x24b48b4c; LONG $0xfffffef8         // mov    r14, qword -264[rsp] /* [rbp - 264] */
	JE   LBB0_45
	LONG $0x249c8b48; LONG $0xffffff18         // mov    rbx, qword -232[rsp] /* [rbp - 232] */
	WORD $0xe383; BYTE $0x03                   // and    ebx, 3
	LONG $0x245c8948; BYTE $0x88               // mov    qword -120[rsp], rbx /* [rbp - 120] */
	WORD $0x3145; BYTE $0xed                   // xor    r13d, r13d
	WORD $0x3145; BYTE $0xe4                   // xor    r12d, r12d
	WORD $0xdb31                               // xor    ebx, ebx

LBB0_44:
	LONG $0x245c8948; BYTE $0xb0 // mov    qword -80[rsp], rbx /* [rbp - 80] */
	LONG $0x2464894c; BYTE $0xc8 // mov    qword -56[rsp], r12 /* [rbp - 56] */
	LONG $0x2e348d4b             // lea    rsi, [r14 + r13]
	LONG $0x273c8d4b             // lea    rdi, [r15 + r12]
	WORD $0x8949; BYTE $0xcc     // mov    r12, rcx
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	CALL gocvsimd·_memcpy(SB)
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x245c8b48; BYTE $0xb0 // mov    rbx, qword -80[rsp] /* [rbp - 80] */
	WORD $0x894c; BYTE $0xe1     // mov    rcx, r12
	LONG $0x24648b4c; BYTE $0xc8 // mov    r12, qword -56[rsp] /* [rbp - 56] */
	LONG $0x24548b48; BYTE $0x98 // mov    rdx, qword -104[rsp] /* [rbp - 104] */
	WORD $0x0149; BYTE $0xc5     // add    r13, rax
	WORD $0x0149; BYTE $0xcc     // add    r12, rcx
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x245c3948; BYTE $0x88 // cmp    qword -120[rsp], rbx /* [rbp - 120] */
	JNE  LBB0_44

LBB0_45:
	LONG $0x247c8348; WORD $0x0380     // cmp    qword -128[rsp], 3 /* [rbp - 128] */
	LONG $0x247c8b48; BYTE $0x90       // mov    rdi, qword -112[rsp] /* [rbp - 112] */
	LONG $0x24848b4c; LONG $0xffffff08 // mov    r8, qword -248[rsp] /* [rbp - 248] */
	JB   LBB0_48
	LONG $0x24448b48; BYTE $0x58       // mov    rax, qword 88[rsp] /* [rbp + 48] */
	WORD $0x8949; BYTE $0xc1           // mov    r9, rax
	LONG $0x03598d4d                   // lea    r11, [r9 + 3]
	LONG $0x244c8b48; BYTE $0x38       // mov    rcx, qword 56[rsp] /* [rbp + 16] */
	WORD $0x8948; BYTE $0xc8           // mov    rax, rcx
	LONG $0xc3af0f49                   // imul    rax, r11
	LONG $0x24ac034c; LONG $0xffffff28 // add    r13, qword -216[rsp] /* [rbp - 216] */
	LONG $0x8d348d48; LONG $0x00000000 // lea    rsi, [4*rcx]
	LONG $0x24748948; BYTE $0x88       // mov    qword -120[rsp], rsi /* [rbp - 120] */
	LONG $0x24948b4c; LONG $0xffffff00 // mov    r10, qword -256[rsp] /* [rbp - 256] */
	WORD $0x014c; BYTE $0xd0           // add    rax, r10
	LONG $0x24448948; BYTE $0xb0       // mov    qword -80[rsp], rax /* [rbp - 80] */
	LONG $0x02718d49                   // lea    rsi, [r9 + 2]
	WORD $0x8948; BYTE $0xc8           // mov    rax, rcx
	LONG $0xc6af0f48                   // imul    rax, rsi
	WORD $0x014c; BYTE $0xd0           // add    rax, r10
	LONG $0x24848948; LONG $0xffffff78 // mov    qword -136[rsp], rax /* [rbp - 136] */
	LONG $0x01498d4d                   // lea    r9, [r9 + 1]
	LONG $0xc9af0f49                   // imul    rcx, r9
	WORD $0x014c; BYTE $0xd1           // add    rcx, r10
	LONG $0x248c8948; LONG $0xffffff68 // mov    qword -152[rsp], rcx /* [rbp - 152] */
	LONG $0x24448b48; BYTE $0x78       // mov    rax, qword 120[rsp] /* [rbp + 80] */
	LONG $0x850c8d48; LONG $0x00000000 // lea    rcx, [4*rax]
	LONG $0x248c8948; LONG $0xffffff58 // mov    qword -168[rsp], rcx /* [rbp - 168] */
	LONG $0xd8af0f4c                   // imul    r11, rax
	WORD $0x014d; BYTE $0xe3           // add    r11, r12
	LONG $0x244c8b48; BYTE $0x70       // mov    rcx, qword 112[rsp] /* [rbp + 72] */
	WORD $0x0149; BYTE $0xcb           // add    r11, rcx
	WORD $0x014d; BYTE $0xd3           // add    r11, r10
	LONG $0x245c894c; BYTE $0xc8       // mov    qword -56[rsp], r11 /* [rbp - 56] */
	LONG $0xf0af0f48                   // imul    rsi, rax
	WORD $0x014c; BYTE $0xe6           // add    rsi, r12
	WORD $0x0148; BYTE $0xce           // add    rsi, rcx
	WORD $0x014c; BYTE $0xd6           // add    rsi, r10
	LONG $0x24748948; BYTE $0x80       // mov    qword -128[rsp], rsi /* [rbp - 128] */
	LONG $0xc8af0f4c                   // imul    r9, rax
	WORD $0x014d; BYTE $0xe1           // add    r9, r12
	WORD $0x0149; BYTE $0xc9           // add    r9, rcx
	WORD $0x014d; BYTE $0xd1           // add    r9, r10
	LONG $0x248c894c; LONG $0xffffff70 // mov    qword -144[rsp], r9 /* [rbp - 144] */
	WORD $0x014c; BYTE $0xe7           // add    rdi, r12
	WORD $0x0148; BYTE $0xcf           // add    rdi, rcx
	WORD $0x014c; BYTE $0xd7           // add    rdi, r10
	LONG $0x247c8948; BYTE $0x90       // mov    qword -112[rsp], rdi /* [rbp - 112] */
	LONG $0x24b48b4c; LONG $0xffffff18 // mov    r14, qword -232[rsp] /* [rbp - 232] */
	WORD $0x2949; BYTE $0xde           // sub    r14, rbx
	WORD $0xdb31                       // xor    ebx, ebx

LBB0_47:
	LONG $0x05748d4b; BYTE $0x00       // lea    rsi, [r13 + r8]
	LONG $0x24448b48; BYTE $0x90       // mov    rax, qword -112[rsp] /* [rbp - 112] */
	LONG $0x183c8d48                   // lea    rdi, [rax + rbx]
	WORD $0x8949; BYTE $0xd7           // mov    r15, rdx
	WORD $0x894d; BYTE $0xc4           // mov    r12, r8
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24848b48; LONG $0xffffff68 // mov    rax, qword -152[rsp] /* [rbp - 152] */
	LONG $0x05748d49; BYTE $0x00       // lea    rsi, [r13 + rax]
	LONG $0x24848b48; LONG $0xffffff70 // mov    rax, qword -144[rsp] /* [rbp - 144] */
	LONG $0x183c8d48                   // lea    rdi, [rax + rbx]
	WORD $0x894c; BYTE $0xfa           // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24848b48; LONG $0xffffff78 // mov    rax, qword -136[rsp] /* [rbp - 136] */
	LONG $0x05748d49; BYTE $0x00       // lea    rsi, [r13 + rax]
	LONG $0x24448b48; BYTE $0x80       // mov    rax, qword -128[rsp] /* [rbp - 128] */
	LONG $0x183c8d48                   // lea    rdi, [rax + rbx]
	WORD $0x894c; BYTE $0xfa           // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x24448b48; BYTE $0xb0       // mov    rax, qword -80[rsp] /* [rbp - 80] */
	LONG $0x05748d49; BYTE $0x00       // lea    rsi, [r13 + rax]
	LONG $0x24448b48; BYTE $0xc8       // mov    rax, qword -56[rsp] /* [rbp - 56] */
	LONG $0x183c8d48                   // lea    rdi, [rax + rbx]
	WORD $0x894c; BYTE $0xfa           // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	WORD $0x894d; BYTE $0xe0           // mov    r8, r12
	WORD $0x894c; BYTE $0xfa           // mov    rdx, r15
	LONG $0x246c034c; BYTE $0x88       // add    r13, qword -120[rsp] /* [rbp - 120] */
	LONG $0x249c0348; LONG $0xffffff58 // add    rbx, qword -168[rsp] /* [rbp - 168] */
	LONG $0xfcc68349                   // add    r14, -4
	JNE  LBB0_47

LBB0_48:
	LONG $0x24848b48; LONG $0xffffff10 // mov    rax, qword -240[rsp] /* [rbp - 240] */
	LONG $0x24843b48; LONG $0xffffff38 // cmp    rax, qword -200[rsp] /* [rbp - 200] */
	LONG $0x246c8b4c; BYTE $0x78       // mov    r13, qword 120[rsp] /* [rbp + 80] */
	WORD $0x894c; BYTE $0xee           // mov    rsi, r13
	LONG $0x24648b4c; BYTE $0x38       // mov    r12, qword 56[rsp] /* [rbp + 16] */
	WORD $0x894d; BYTE $0xe5           // mov    r13, r12
	JAE  LBB0_51
	LONG $0x24848b48; LONG $0xffffff30 // mov    rax, qword -208[rsp] /* [rbp - 208] */
	LONG $0x44af0f48; WORD $0xc024     // imul    rax, qword -64[rsp] /* [rbp - 64] */
	LONG $0x24448948; BYTE $0xc8       // mov    qword -56[rsp], rax /* [rbp - 56] */
	WORD $0x3145; BYTE $0xf6           // xor    r14d, r14d
	LONG $0x24848b48; LONG $0xffffff48 // mov    rax, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xc0           // test    rax, rax
	LONG $0xf0490f4c                   // cmovns    r14, rax
	LONG $0x245c8b48; BYTE $0x68       // mov    rbx, qword 104[rsp] /* [rbp + 64] */
	WORD $0x294c; BYTE $0xf3           // sub    rbx, r14
	WORD $0x8949; BYTE $0xf7           // mov    r15, rsi
	LONG $0xfbaf0f4c                   // imul    r15, rbx
	LONG $0x24848b48; LONG $0xffffff00 // mov    rax, qword -256[rsp] /* [rbp - 256] */
	WORD $0x0149; BYTE $0xc7           // add    r15, rax
	LONG $0x247c034c; BYTE $0x70       // add    r15, qword 112[rsp] /* [rbp + 72] */
	LONG $0xddaf0f49                   // imul    rbx, r13
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x249c0348; LONG $0xffffff28 // add    rbx, qword -216[rsp] /* [rbp - 216] */

LBB0_50:
	WORD $0x894c; BYTE $0xff     // mov    rdi, r15
	WORD $0x8949; BYTE $0xf4     // mov    r12, rsi
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	LONG $0x24548b48; BYTE $0xc8 // mov    rdx, qword -56[rsp] /* [rbp - 56] */
	CALL gocvsimd·_memcpy(SB)
	WORD $0x894c; BYTE $0xe6     // mov    rsi, r12
	WORD $0x0149; BYTE $0xf7     // add    r15, rsi
	WORD $0x014c; BYTE $0xeb     // add    rbx, r13
	WORD $0xff49; BYTE $0xce     // dec    r14
	JNE  LBB0_50

LBB0_51:
	LONG $0x24948b48; LONG $0xfffffee0 // mov    rdx, qword -288[rsp] /* [rbp - 288] */
	WORD $0x8548; BYTE $0xd2           // test    rdx, rdx
	JE   LBB0_55
	LONG $0x24848b48; LONG $0xffffff10 // mov    rax, qword -240[rsp] /* [rbp - 240] */
	LONG $0x24843948; LONG $0xffffff18 // cmp    qword -232[rsp], rax /* [rbp - 232] */
	JAE  LBB0_55
	LONG $0x54af0f48; WORD $0xc024     // imul    rdx, qword -64[rsp] /* [rbp - 64] */
	LONG $0x24748b4c; BYTE $0x68       // mov    r14, qword 104[rsp] /* [rbp + 64] */
	LONG $0x24bc8b48; LONG $0xffffff18 // mov    rdi, qword -232[rsp] /* [rbp - 232] */
	WORD $0x2949; BYTE $0xfe           // sub    r14, rdi
	LONG $0x24448b48; BYTE $0x58       // mov    rax, qword 88[rsp] /* [rbp + 48] */
	WORD $0x8948; BYTE $0xc1           // mov    rcx, rax
	WORD $0x2949; BYTE $0xce           // sub    r14, rcx
	WORD $0xc031                       // xor    eax, eax
	LONG $0x249c8b48; LONG $0xffffff48 // mov    rbx, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xdb           // test    rbx, rbx
	LONG $0xc3490f48                   // cmovns    rax, rbx
	WORD $0x2949; BYTE $0xc6           // sub    r14, rax
	LONG $0x0f3c8d4c                   // lea    r15, [rdi + rcx]
	WORD $0x8948; BYTE $0xf3           // mov    rbx, rsi
	LONG $0xdfaf0f49                   // imul    rbx, r15
	LONG $0x24848b48; LONG $0xffffff00 // mov    rax, qword -256[rsp] /* [rbp - 256] */
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x245c0348; BYTE $0x70       // add    rbx, qword 112[rsp] /* [rbp + 72] */
	LONG $0xfdaf0f4d                   // imul    r15, r13
	WORD $0x0149; BYTE $0xc7           // add    r15, rax
	LONG $0x24bc034c; LONG $0xffffff28 // add    r15, qword -216[rsp] /* [rbp - 216] */

LBB0_54:
	WORD $0x8948; BYTE $0xdf     // mov    rdi, rbx
	WORD $0x894c; BYTE $0xfe     // mov    rsi, r15
	WORD $0x894d; BYTE $0xec     // mov    r12, r13
	WORD $0x8949; BYTE $0xd5     // mov    r13, rdx
	CALL gocvsimd·_memcpy(SB)
	WORD $0x894c; BYTE $0xea     // mov    rdx, r13
	WORD $0x894d; BYTE $0xe5     // mov    r13, r12
	LONG $0x24448b48; BYTE $0x78 // mov    rax, qword 120[rsp] /* [rbp + 80] */
	WORD $0x0148; BYTE $0xc3     // add    rbx, rax
	WORD $0x014d; BYTE $0xef     // add    r15, r13
	WORD $0xff49; BYTE $0xce     // dec    r14
	JNE  LBB0_54

LBB0_55:
	LONG $0x24848b48; LONG $0xfffffee8 // mov    rax, qword -280[rsp] /* [rbp - 280] */
	LONG $0x24843948; LONG $0xffffff30 // cmp    qword -208[rsp], rax /* [rbp - 208] */
	LONG $0x24948b48; LONG $0xffffff18 // mov    rdx, qword -232[rsp] /* [rbp - 232] */
	LONG $0x24848b48; LONG $0xffffff10 // mov    rax, qword -240[rsp] /* [rbp - 240] */
	LONG $0x24a48b4c; LONG $0xffffff28 // mov    r12, qword -216[rsp] /* [rbp - 216] */
	JBE  LBB0_59
	WORD $0x3948; BYTE $0xc2           // cmp    rdx, rax
	JAE  LBB0_59
	LONG $0x24bc8b4c; LONG $0xfffffeb0 // mov    r15, qword -336[rsp] /* [rbp - 336] */
	LONG $0x24448b4c; BYTE $0xc0       // mov    r8, qword -64[rsp] /* [rbp - 64] */
	LONG $0xf8af0f4d                   // imul    r15, r8
	LONG $0x24748b4c; BYTE $0x68       // mov    r14, qword 104[rsp] /* [rbp + 64] */
	WORD $0x2949; BYTE $0xd6           // sub    r14, rdx
	LONG $0x24448b48; BYTE $0x58       // mov    rax, qword 88[rsp] /* [rbp + 48] */
	WORD $0x8948; BYTE $0xc6           // mov    rsi, rax
	WORD $0x2949; BYTE $0xf6           // sub    r14, rsi
	WORD $0xc031                       // xor    eax, eax
	LONG $0x24bc8b48; LONG $0xffffff48 // mov    rdi, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xff           // test    rdi, rdi
	LONG $0x000000b9; BYTE $0x00       // mov    ecx, 0
	LONG $0xcf490f48                   // cmovns    rcx, rdi
	WORD $0x2949; BYTE $0xce           // sub    r14, rcx
	WORD $0x0148; BYTE $0xf2           // add    rdx, rsi
	LONG $0x245c8b48; BYTE $0x78       // mov    rbx, qword 120[rsp] /* [rbp + 80] */
	LONG $0xdaaf0f48                   // imul    rbx, rdx
	LONG $0x248c8b48; LONG $0xffffff40 // mov    rcx, qword -192[rsp] /* [rbp - 192] */
	WORD $0x8548; BYTE $0xc9           // test    rcx, rcx
	LONG $0xc1490f48                   // cmovns    rax, rcx
	LONG $0x244c8b48; BYTE $0x60       // mov    rcx, qword 96[rsp] /* [rbp + 56] */
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0xc8af0f49                   // imul    rcx, r8
	WORD $0x0148; BYTE $0xcb           // add    rbx, rcx
	LONG $0xd5af0f49                   // imul    rdx, r13
	WORD $0x0148; BYTE $0xca           // add    rdx, rcx
	WORD $0x0149; BYTE $0xd4           // add    r12, rdx
	LONG $0x245c0348; BYTE $0x70       // add    rbx, qword 112[rsp] /* [rbp + 72] */

LBB0_58:
	WORD $0x8948; BYTE $0xdf     // mov    rdi, rbx
	WORD $0x894c; BYTE $0xe6     // mov    rsi, r12
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x245c0348; BYTE $0x78 // add    rbx, qword 120[rsp] /* [rbp + 80] */
	WORD $0x014d; BYTE $0xec     // add    r12, r13
	WORD $0xff49; BYTE $0xce     // dec    r14
	JNE  LBB0_58

LBB0_59:
	LONG $0x24848b48; LONG $0xffffff50             // mov    rax, qword -176[rsp] /* [rbp - 176] */
	LONG $0x24440348; BYTE $0xa0                   // add    rax, qword -96[rsp] /* [rbp - 96] */
	LONG $0x24848948; LONG $0xffffff50             // mov    qword -176[rsp], rax /* [rbp - 176] */
	LONG $0x2424bc8b; WORD $0xffff; BYTE $0xff     // mov    edi, dword -220[rsp] /* [rbp - 220] */
	WORD $0xff85                                   // test    edi, edi
	LONG $0xd0950f41                               // setne    r8b
	LONG $0x24848b48; LONG $0xffffff48             // mov    rax, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8948; BYTE $0xc1                       // mov    rcx, rax
	WORD $0xf748; BYTE $0xd9                       // neg    rcx
	LONG $0x248c8948; LONG $0xfffffea8             // mov    qword -344[rsp], rcx /* [rbp - 344] */
	WORD $0x8948; BYTE $0xc3                       // mov    rbx, rax
	LONG $0xd94d0f48                               // cmovge    rbx, rcx
	LONG $0x249c8948; LONG $0xfffffe90             // mov    qword -368[rsp], rbx /* [rbp - 368] */
	WORD $0x8548; BYTE $0xc0                       // test    rax, rax
	LONG $0xd2980f41                               // sets    r10b
	LONG $0xf424948b; WORD $0xfffe; BYTE $0xff     // mov    edx, dword -268[rsp] /* [rbp - 268] */
	WORD $0xd285                                   // test    edx, edx
	LONG $0xd1950f41                               // setne    r9b
	LONG $0x24848b48; LONG $0xffffff40             // mov    rax, qword -192[rsp] /* [rbp - 192] */
	WORD $0x8948; BYTE $0xc1                       // mov    rcx, rax
	WORD $0xf748; BYTE $0xd9                       // neg    rcx
	LONG $0x248c8948; LONG $0xfffffea0             // mov    qword -352[rsp], rcx /* [rbp - 352] */
	WORD $0x8948; BYTE $0xc6                       // mov    rsi, rax
	LONG $0xf14d0f48                               // cmovge    rsi, rcx
	LONG $0x24b48948; LONG $0xfffffe80             // mov    qword -384[rsp], rsi /* [rbp - 384] */
	WORD $0x8548; BYTE $0xc0                       // test    rax, rax
	WORD $0x980f; BYTE $0xd0                       // sets    al
	WORD $0x2044; BYTE $0xc8                       // and    al, r9b
	WORD $0x2045; BYTE $0xc2                       // and    r10b, r8b
	LONG $0x248c8b48; LONG $0xffffff30             // mov    rcx, qword -208[rsp] /* [rbp - 208] */
	WORD $0x2948; BYTE $0xf1                       // sub    rcx, rsi
	LONG $0x248c8948; LONG $0xfffffe98             // mov    qword -360[rsp], rcx /* [rbp - 360] */
	LONG $0x24b48b48; LONG $0xffffff38             // mov    rsi, qword -200[rsp] /* [rbp - 200] */
	WORD $0x2948; BYTE $0xde                       // sub    rsi, rbx
	LONG $0x24740148; BYTE $0xa8                   // add    qword -88[rsp], rsi /* [rbp - 88] */
	LONG $0x0010bc41; WORD $0x0000                 // mov    r12d, 16
	LONG $0x0010bd41; WORD $0x0000                 // mov    r13d, 16
	WORD $0x2941; BYTE $0xd5                       // sub    r13d, edx
	LONG $0x24ac8944; LONG $0xfffffe88             // mov    dword -376[rsp], r13d /* [rbp - 376] */
	WORD $0x2941; BYTE $0xfc                       // sub    r12d, edi
	LONG $0x24a48944; LONG $0xfffffe8c             // mov    dword -372[rsp], r12d /* [rbp - 372] */
	WORD $0x8945; BYTE $0xe6                       // mov    r14d, r12d
	LONG $0xf5af0f45                               // imul    r14d, r13d
	LONG $0xe2af0f44                               // imul    r12d, edx
	LONG $0xefaf0f44                               // imul    r13d, edi
	LONG $0x246c8944; BYTE $0x98                   // mov    dword -104[rsp], r13d /* [rbp - 104] */
	WORD $0xaf0f; BYTE $0xfa                       // imul    edi, edx
	LONG $0x2824bc89; WORD $0xffff; BYTE $0xff     // mov    dword -216[rsp], edi /* [rbp - 216] */
	WORD $0xfb89                                   // mov    ebx, edi
	WORD $0xd285                                   // test    edx, edx
	WORD $0xb60f; BYTE $0xc0                       // movzx    eax, al
	LONG $0x24848948; LONG $0xfffffec0             // mov    qword -320[rsp], rax /* [rbp - 320] */
	LONG $0xc2b60f41                               // movzx    eax, r10b
	LONG $0x24848948; LONG $0xfffffec8             // mov    qword -312[rsp], rax /* [rbp - 312] */
	LONG $0xc1b60f41                               // movzx    eax, r9b
	LONG $0x24848948; LONG $0xffffff58             // mov    qword -168[rsp], rax /* [rbp - 168] */
	LONG $0xc8b60f45                               // movzx    r9d, r8b
	LONG $0x247c8b4c; BYTE $0xd0                   // mov    r15, qword -48[rsp] /* [rbp - 48] */
	JE   LBB0_77
	LONG $0x24848b48; LONG $0xffffff30             // mov    rax, qword -208[rsp] /* [rbp - 208] */
	LONG $0xff488d48                               // lea    rcx, [rax - 1]
	WORD $0x8948; BYTE $0xca                       // mov    rdx, rcx
	LONG $0x24bc8b48; LONG $0xffffff40             // mov    rdi, qword -192[rsp] /* [rbp - 192] */
	WORD $0x2948; BYTE $0xfa                       // sub    rdx, rdi
	WORD $0x8548; BYTE $0xff                       // test    rdi, rdi
	WORD $0x8949; BYTE $0xfa                       // mov    r10, rdi
	WORD $0xf749; BYTE $0xd2                       // not    r10
	LONG $0xd2490f4c                               // cmovns    r10, rdx
	WORD $0x894c; BYTE $0xd2                       // mov    rdx, r10
	LONG $0x24448b4c; BYTE $0xc0                   // mov    r8, qword -64[rsp] /* [rbp - 64] */
	LONG $0xd0af0f49                               // imul    rdx, r8
	WORD $0xf631                                   // xor    esi, esi
	LONG $0x24bc8348; LONG $0xffffff48; BYTE $0x00 // cmp    qword -184[rsp], 0 /* [rbp - 184] */
	LONG $0xb44e0f48; LONG $0xfffea824; BYTE $0xff // cmovle    rsi, qword -344[rsp] /* [rbp - 344] */
	LONG $0x74af0f48; WORD $0x3824                 // imul    rsi, qword 56[rsp] /* [rbp + 16] */
	WORD $0x0148; BYTE $0xd6                       // add    rsi, rdx
	WORD $0x8548; BYTE $0xff                       // test    rdi, rdi
	JS   LBB0_61
	WORD $0x8948; BYTE $0xf0                       // mov    rax, rsi
	LONG $0x24b48b48; LONG $0xfffffed0             // mov    rsi, qword -304[rsp] /* [rbp - 304] */
	WORD $0x8948; BYTE $0xf2                       // mov    rdx, rsi
	LONG $0xd7af0f49                               // imul    rdx, r15
	LONG $0x24bc8b48; LONG $0xffffff50             // mov    rdi, qword -176[rsp] /* [rbp - 176] */
	WORD $0x0148; BYTE $0xfa                       // add    rdx, rdi
	LONG $0xc8af0f49                               // imul    rcx, r8
	WORD $0x0148; BYTE $0xca                       // add    rdx, rcx
	LONG $0x24840348; LONG $0xfffffef8             // add    rax, qword -264[rsp] /* [rbp - 264] */
	LONG $0x24848948; LONG $0xffffff08             // mov    qword -248[rsp], rax /* [rbp - 248] */
	WORD $0x0149; BYTE $0xf1                       // add    r9, rsi
	LONG $0xcfaf0f4d                               // imul    r9, r15
	WORD $0x0149; BYTE $0xf9                       // add    r9, rdi
	WORD $0x0149; BYTE $0xc9                       // add    r9, rcx
	LONG $0x24948948; LONG $0xffffff10             // mov    qword -240[rsp], rdx /* [rbp - 240] */
	LONG $0x248c894c; LONG $0xffffff00             // mov    qword -256[rsp], r9 /* [rbp - 256] */
	LONG $0x24848948; LONG $0xffffff18             // mov    qword -232[rsp], rax /* [rbp - 232] */
	JMP  LBB0_63

LBB0_61:
	LONG $0x24b40348; LONG $0xfffffef8 // add    rsi, qword -264[rsp] /* [rbp - 264] */
	LONG $0x24b48948; LONG $0xffffff10 // mov    qword -240[rsp], rsi /* [rbp - 240] */
	LONG $0x24948b48; LONG $0xfffffed0 // mov    rdx, qword -304[rsp] /* [rbp - 304] */
	WORD $0x8948; BYTE $0xd0           // mov    rax, rdx
	LONG $0xc7af0f49                   // imul    rax, r15
	LONG $0x248c8b48; LONG $0xffffff50 // mov    rcx, qword -176[rsp] /* [rbp - 176] */
	WORD $0x0148; BYTE $0xc8           // add    rax, rcx
	LONG $0x24848948; LONG $0xffffff08 // mov    qword -248[rsp], rax /* [rbp - 248] */
	WORD $0x0149; BYTE $0xd1           // add    r9, rdx
	LONG $0xcfaf0f4d                   // imul    r9, r15
	WORD $0x0149; BYTE $0xc9           // add    r9, rcx
	LONG $0x248c894c; LONG $0xffffff18 // mov    qword -232[rsp], r9 /* [rbp - 232] */
	LONG $0x24b48948; LONG $0xffffff00 // mov    qword -256[rsp], rsi /* [rbp - 256] */

LBB0_63:
	WORD $0x854d; BYTE $0xc0           // test    r8, r8
	JE   LBB0_77
	LONG $0x248c8b48; LONG $0xfffffec8 // mov    rcx, qword -312[rsp] /* [rbp - 312] */
	LONG $0x3fe1c148                   // shl    rcx, 63
	LONG $0x3ff9c148                   // sar    rcx, 63
	LONG $0x244c3948; BYTE $0xa8       // cmp    qword -88[rsp], rcx /* [rbp - 88] */
	JE   LBB0_77
	LONG $0x244c8b48; BYTE $0xa8       // mov    rcx, qword -88[rsp] /* [rbp - 88] */
	LONG $0x24948b48; LONG $0xfffffec8 // mov    rdx, qword -312[rsp] /* [rbp - 312] */
	LONG $0x11048d48                   // lea    rax, [rcx + rdx]
	LONG $0x24448948; BYTE $0x90       // mov    qword -112[rsp], rax /* [rbp - 112] */
	WORD $0xc031                       // xor    eax, eax
	LONG $0x24448948; BYTE $0xb0       // mov    qword -80[rsp], rax /* [rbp - 80] */
	LONG $0x24948b48; LONG $0xffffff48 // mov    rdx, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xd2           // test    rdx, rdx
	LONG $0x000000b9; BYTE $0x00       // mov    ecx, 0
	LONG $0xca490f48                   // cmovns    rcx, rdx
	LONG $0x244c0348; BYTE $0x58       // add    rcx, qword 88[rsp] /* [rbp + 48] */
	WORD $0x2948; BYTE $0xd1           // sub    rcx, rdx
	LONG $0x24548b48; BYTE $0x50       // mov    rdx, qword 80[rsp] /* [rbp + 40] */
	WORD $0x8948; BYTE $0xd6           // mov    rsi, rdx
	LONG $0x323c8d49                   // lea    rdi, [r10 + rsi]
	LONG $0x24548b48; BYTE $0xc0       // mov    rdx, qword -64[rsp] /* [rbp - 64] */
	LONG $0xfaaf0f48                   // imul    rdi, rdx
	LONG $0x4caf0f48; WORD $0x7824     // imul    rcx, qword 120[rsp] /* [rbp + 80] */
	WORD $0x0148; BYTE $0xcf           // add    rdi, rcx
	LONG $0x24bc8948; LONG $0xfffffee8 // mov    qword -280[rsp], rdi /* [rbp - 280] */
	LONG $0x32448d49; BYTE $0x01       // lea    rax, [r10 + rsi + 1]
	LONG $0xc2af0f48                   // imul    rax, rdx
	LONG $0x01448d48; BYTE $0xff       // lea    rax, [rcx + rax - 1]
	LONG $0x24848948; LONG $0xfffffee0 // mov    qword -288[rsp], rax /* [rbp - 288] */
	LONG $0xff428d48                   // lea    rax, [rdx - 1]
	LONG $0x24848948; LONG $0xfffffed8 // mov    qword -296[rsp], rax /* [rbp - 296] */
	LONG $0xfce28348                   // and    rdx, -4
	LONG $0x24548948; BYTE $0xc8       // mov    qword -56[rsp], rdx /* [rbp - 56] */
	LONG $0x6e0f4166; BYTE $0xc6       // movd    xmm0, r14d
	LONG $0x700f4466; WORD $0x00c0     // pshufd    xmm8, xmm0, 0
	LONG $0x6e0f4166; BYTE $0xc4       // movd    xmm0, r12d
	LONG $0x700f4466; WORD $0x00d8     // pshufd    xmm11, xmm0, 0
	LONG $0x6e0f4166; BYTE $0xc5       // movd    xmm0, r13d
	LONG $0x700f4466; WORD $0x00e0     // pshufd    xmm12, xmm0, 0
	LONG $0xc36e0f66                   // movd    xmm0, ebx
	LONG $0x700f4466; WORD $0x00e8     // pshufd    xmm13, xmm0, 0
	LONG $0x24448b48; BYTE $0x70       // mov    rax, qword 112[rsp] /* [rbp + 72] */
	LONG $0x383c8d48                   // lea    rdi, [rax + rdi]
	LONG $0xe4ef0f66                   // pxor    xmm4, xmm4
	LONG $0x700f4566; WORD $0xf5f0     // pshufd    xmm14, xmm8, 245
	LONG $0x700f4566; WORD $0xf5fb     // pshufd    xmm15, xmm11, 245
	LONG $0x700f4566; WORD $0xf5d4     // pshufd    xmm10, xmm12, 245
	LONG $0x700f4166; WORD $0xf5c5     // pshufd    xmm0, xmm13, 245
	LONG $0x249c8b4c; LONG $0xffffff18 // mov    r11, qword -232[rsp] /* [rbp - 232] */
	LONG $0x24848b4c; LONG $0xffffff00 // mov    r8, qword -256[rsp] /* [rbp - 256] */
	LONG $0x248c8b4c; LONG $0xffffff08 // mov    r9, qword -248[rsp] /* [rbp - 248] */
	LONG $0x24948b4c; LONG $0xffffff10 // mov    r10, qword -240[rsp] /* [rbp - 240] */

LBB0_66:
	LONG $0x247c8b4c; BYTE $0xc0               // mov    r15, qword -64[rsp] /* [rbp - 64] */
	LONG $0x04ff8349                           // cmp    r15, 4
	LONG $0x000000b9; BYTE $0x00               // mov    ecx, 0
	WORD $0x8944; BYTE $0xe8                   // mov    eax, r13d
	JB   LBB0_70
	LONG $0x247c8348; WORD $0x00c8             // cmp    qword -56[rsp], 0 /* [rbp - 56] */
	LONG $0x000000b9; BYTE $0x00               // mov    ecx, 0
	JE   LBB0_70
	LONG $0x24bc8948; LONG $0xffffff68         // mov    qword -152[rsp], rdi /* [rbp - 152] */
	LONG $0x24748b48; BYTE $0xb0               // mov    rsi, qword -80[rsp] /* [rbp - 80] */
	WORD $0x8948; BYTE $0xf1                   // mov    rcx, rsi
	LONG $0x4caf0f48; WORD $0x7824             // imul    rcx, qword 120[rsp] /* [rbp + 80] */
	LONG $0x24848b48; LONG $0xfffffee8         // mov    rax, qword -280[rsp] /* [rbp - 280] */
	LONG $0x083c8d4c                           // lea    r15, [rax + rcx]
	LONG $0x24548b48; BYTE $0x70               // mov    rdx, qword 112[rsp] /* [rbp + 72] */
	WORD $0x0149; BYTE $0xd7                   // add    r15, rdx
	LONG $0x248c0348; LONG $0xfffffee0         // add    rcx, qword -288[rsp] /* [rbp - 288] */
	WORD $0x0148; BYTE $0xd1                   // add    rcx, rdx
	WORD $0x8948; BYTE $0xf7                   // mov    rdi, rsi
	LONG $0x7caf0f48; WORD $0x3824             // imul    rdi, qword 56[rsp] /* [rbp + 16] */
	LONG $0x24848b48; LONG $0xffffff18         // mov    rax, qword -232[rsp] /* [rbp - 232] */
	LONG $0x38148d48                           // lea    rdx, [rax + rdi]
	LONG $0x24548948; BYTE $0x88               // mov    qword -120[rsp], rdx /* [rbp - 120] */
	LONG $0x249c8b48; LONG $0xfffffed8         // mov    rbx, qword -296[rsp] /* [rbp - 296] */
	LONG $0x3b148d48                           // lea    rdx, [rbx + rdi]
	LONG $0x24948948; LONG $0xffffff70         // mov    qword -144[rsp], rdx /* [rbp - 144] */
	LONG $0x10048d48                           // lea    rax, [rax + rdx]
	LONG $0x24848948; LONG $0xffffff78         // mov    qword -136[rsp], rax /* [rbp - 136] */
	WORD $0x8948; BYTE $0xf2                   // mov    rdx, rsi
	LONG $0x54af0f48; WORD $0xd024             // imul    rdx, qword -48[rsp] /* [rbp - 48] */
	LONG $0x24848b48; LONG $0xffffff00         // mov    rax, qword -256[rsp] /* [rbp - 256] */
	LONG $0x10348d48                           // lea    rsi, [rax + rdx]
	LONG $0x24748948; BYTE $0x80               // mov    qword -128[rsp], rsi /* [rbp - 128] */
	LONG $0x132c8d4c                           // lea    r13, [rbx + rdx]
	LONG $0x281c8d4a                           // lea    rbx, [rax + r13]
	LONG $0x24848b48; LONG $0xffffff08         // mov    rax, qword -248[rsp] /* [rbp - 248] */
	WORD $0x0148; BYTE $0xc7                   // add    rdi, rax
	LONG $0x24b48b48; LONG $0xffffff70         // mov    rsi, qword -144[rsp] /* [rbp - 144] */
	WORD $0x0148; BYTE $0xc6                   // add    rsi, rax
	LONG $0x24848b48; LONG $0xffffff10         // mov    rax, qword -240[rsp] /* [rbp - 240] */
	WORD $0x0148; BYTE $0xc2                   // add    rdx, rax
	WORD $0x0149; BYTE $0xc5                   // add    r13, rax
	LONG $0x24bc3b4c; LONG $0xffffff78         // cmp    r15, qword -136[rsp] /* [rbp - 136] */
	LONG $0x2494960f; LONG $0xffffff78         // setbe    byte -136[rsp] /* [rbp - 136] */
	LONG $0x244c3948; BYTE $0x88               // cmp    qword -120[rsp], rcx /* [rbp - 120] */
	LONG $0x2454960f; BYTE $0x88               // setbe    byte -120[rsp] /* [rbp - 120] */
	WORD $0x3949; BYTE $0xdf                   // cmp    r15, rbx
	WORD $0x960f; BYTE $0xd0                   // setbe    al
	LONG $0x244c3948; BYTE $0x80               // cmp    qword -128[rsp], rcx /* [rbp - 128] */
	LONG $0x2454960f; BYTE $0x80               // setbe    byte -128[rsp] /* [rbp - 128] */
	WORD $0x3949; BYTE $0xf7                   // cmp    r15, rsi
	WORD $0x960f; BYTE $0xd3                   // setbe    bl
	WORD $0x3948; BYTE $0xcf                   // cmp    rdi, rcx
	LONG $0xd6960f40                           // setbe    sil
	WORD $0x394d; BYTE $0xef                   // cmp    r15, r13
	LONG $0xd7960f40                           // setbe    dil
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	WORD $0x960f; BYTE $0xd1                   // setbe    cl
	LONG $0x8824548a                           // mov    dl, byte -120[rsp] /* [rbp - 120] */
	LONG $0x78249484; WORD $0xffff; BYTE $0xff // test    dl, byte -136[rsp] /* [rbp - 136] */
	JNE  LBB0_69
	LONG $0x80244422                           // and    al, byte -128[rsp] /* [rbp - 128] */
	JNE  LBB0_69
	WORD $0x2040; BYTE $0xf3                   // and    bl, sil
	JNE  LBB0_69
	WORD $0x2040; BYTE $0xcf                   // and    dil, cl
	LONG $0x000000b9; BYTE $0x00               // mov    ecx, 0
	LONG $0x24bc8b48; LONG $0xffffff68         // mov    rdi, qword -152[rsp] /* [rbp - 152] */
	WORD $0x8948; BYTE $0xfa                   // mov    rdx, rdi
	LONG $0x0000bd41; WORD $0x0000             // mov    r13d, 0
	LONG $0x247c8b4c; BYTE $0xc0               // mov    r15, qword -64[rsp] /* [rbp - 64] */
	LONG $0x28249c8b; WORD $0xffff; BYTE $0xff // mov    ebx, dword -216[rsp] /* [rbp - 216] */
	LONG $0x9824448b                           // mov    eax, dword -104[rsp] /* [rbp - 104] */
	JNE  LBB0_70

LBB0_74:
	LONG $0x6e0f4366; WORD $0x2a0c // movd    xmm1, dword [r10 + r13]
	LONG $0xcc600f66               // punpcklbw    xmm1, xmm4
	LONG $0xcc610f66               // punpcklwd    xmm1, xmm4
	LONG $0x6e0f4366; WORD $0x292c // movd    xmm5, dword [r9 + r13]
	LONG $0xec600f66               // punpcklbw    xmm5, xmm4
	LONG $0xec610f66               // punpcklwd    xmm5, xmm4
	LONG $0x6e0f4366; WORD $0x2834 // movd    xmm6, dword [r8 + r13]
	LONG $0xf4600f66               // punpcklbw    xmm6, xmm4
	LONG $0xf4610f66               // punpcklwd    xmm6, xmm4
	LONG $0x6e0f4366; WORD $0x2b14 // movd    xmm2, dword [r11 + r13]
	LONG $0xd4600f66               // punpcklbw    xmm2, xmm4
	LONG $0xd4610f66               // punpcklwd    xmm2, xmm4
	LONG $0x700f4466; WORD $0xf5c9 // pshufd    xmm9, xmm1, 245
	LONG $0xf40f4166; BYTE $0xc8   // pmuludq    xmm1, xmm8
	LONG $0xd9700f66; BYTE $0xe8   // pshufd    xmm3, xmm1, 232
	LONG $0xf40f4566; BYTE $0xce   // pmuludq    xmm9, xmm14
	LONG $0x700f4166; WORD $0xe8c9 // pshufd    xmm1, xmm9, 232
	LONG $0xd9620f66               // punpckldq    xmm3, xmm1
	LONG $0xfd700f66; BYTE $0xf5   // pshufd    xmm7, xmm5, 245
	LONG $0xf40f4166; BYTE $0xeb   // pmuludq    xmm5, xmm11
	LONG $0xcd700f66; BYTE $0xe8   // pshufd    xmm1, xmm5, 232
	LONG $0xf40f4166; BYTE $0xff   // pmuludq    xmm7, xmm15
	LONG $0xef700f66; BYTE $0xe8   // pshufd    xmm5, xmm7, 232
	LONG $0xcd620f66               // punpckldq    xmm1, xmm5
	LONG $0xee700f66; BYTE $0xf5   // pshufd    xmm5, xmm6, 245
	LONG $0xf40f4166; BYTE $0xf4   // pmuludq    xmm6, xmm12
	LONG $0xf6700f66; BYTE $0xe8   // pshufd    xmm6, xmm6, 232
	LONG $0xf40f4166; BYTE $0xea   // pmuludq    xmm5, xmm10
	LONG $0xed700f66; BYTE $0xe8   // pshufd    xmm5, xmm5, 232
	LONG $0xf5620f66               // punpckldq    xmm6, xmm5
	LONG $0xea700f66; BYTE $0xf5   // pshufd    xmm5, xmm2, 245
	LONG $0xf40f4166; BYTE $0xd5   // pmuludq    xmm2, xmm13
	LONG $0xd2700f66; BYTE $0xe8   // pshufd    xmm2, xmm2, 232
	LONG $0xe8f40f66               // pmuludq    xmm5, xmm0
	LONG $0xed700f66; BYTE $0xe8   // pshufd    xmm5, xmm5, 232
	LONG $0xd5620f66               // punpckldq    xmm2, xmm5
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xcefe0f66               // paddd    xmm1, xmm6
	LONG $0xcafe0f66               // paddd    xmm1, xmm2
	LONG $0x4dfe0f66; BYTE $0x10   // paddd    xmm1, 16[rbp] /* [rip + LCPI0_2] */
	LONG $0xd1720f66; BYTE $0x08   // psrld    xmm1, 8
	LONG $0x00380f66; WORD $0x204d // pshufb    xmm1, 32[rbp] /* [rip + LCPI0_3] */
	LONG $0x0a7e0f66               // movd    dword [rdx], xmm1
	LONG $0x04c58349               // add    r13, 4
	LONG $0x04c28348               // add    rdx, 4
	LONG $0x246c394c; BYTE $0xc8   // cmp    qword -56[rsp], r13 /* [rbp - 56] */
	JNE  LBB0_74
	LONG $0x244c8b48; BYTE $0xc8   // mov    rcx, qword -56[rsp] /* [rbp - 56] */
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB0_70
	JMP  LBB0_76

LBB0_69:
	WORD $0xc931                               // xor    ecx, ecx
	LONG $0x247c8b4c; BYTE $0xc0               // mov    r15, qword -64[rsp] /* [rbp - 64] */
	LONG $0x28249c8b; WORD $0xffff; BYTE $0xff // mov    ebx, dword -216[rsp] /* [rbp - 216] */
	LONG $0x9824448b                           // mov    eax, dword -104[rsp] /* [rbp - 104] */
	LONG $0x24bc8b48; LONG $0xffffff68         // mov    rdi, qword -152[rsp] /* [rbp - 152] */

LBB0_70:
	LONG $0x14b60f41; BYTE $0x0a               // movzx    edx, byte [r10 + rcx]
	WORD $0x8948; BYTE $0xfe                   // mov    rsi, rdi
	LONG $0x3cb60f41; BYTE $0x09               // movzx    edi, byte [r9 + rcx]
	LONG $0xd6af0f41                           // imul    edx, r14d
	LONG $0xfcaf0f41                           // imul    edi, r12d
	WORD $0xd701                               // add    edi, edx
	LONG $0x14b60f41; BYTE $0x08               // movzx    edx, byte [r8 + rcx]
	WORD $0xaf0f; BYTE $0xd0                   // imul    edx, eax
	WORD $0xd701                               // add    edi, edx
	LONG $0x14b60f41; BYTE $0x0b               // movzx    edx, byte [r11 + rcx]
	WORD $0xaf0f; BYTE $0xd3                   // imul    edx, ebx
	LONG $0x803a948d; WORD $0x0000; BYTE $0x00 // lea    edx, [rdx + rdi + 128]
	WORD $0x8948; BYTE $0xf7                   // mov    rdi, rsi
	WORD $0x3488; BYTE $0x0f                   // mov    byte [rdi + rcx], dh
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	WORD $0x3949; BYTE $0xcf                   // cmp    r15, rcx
	JNE  LBB0_70

LBB0_76:
	WORD $0x8941; BYTE $0xc5     // mov    r13d, eax
	LONG $0x24448b48; BYTE $0xd0 // mov    rax, qword -48[rsp] /* [rbp - 48] */
	WORD $0x0149; BYTE $0xc2     // add    r10, rax
	LONG $0x244c8b48; BYTE $0x38 // mov    rcx, qword 56[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xc9     // add    r9, rcx
	WORD $0x0149; BYTE $0xc0     // add    r8, rax
	WORD $0x0149; BYTE $0xcb     // add    r11, rcx
	LONG $0x24448b48; BYTE $0xb0 // mov    rax, qword -80[rsp] /* [rbp - 80] */
	WORD $0xff48; BYTE $0xc0     // inc    rax
	LONG $0x24448948; BYTE $0xb0 // mov    qword -80[rsp], rax /* [rbp - 80] */
	LONG $0x244c8b48; BYTE $0x78 // mov    rcx, qword 120[rsp] /* [rbp + 80] */
	WORD $0x0148; BYTE $0xcf     // add    rdi, rcx
	LONG $0x24443b48; BYTE $0x90 // cmp    rax, qword -112[rsp] /* [rbp - 112] */
	JNE  LBB0_66

LBB0_77:
	LONG $0x24848b48; LONG $0xfffffe98             // mov    rax, qword -360[rsp] /* [rbp - 360] */
	LONG $0x24840148; LONG $0xffffff60             // add    qword -160[rsp], rax /* [rbp - 160] */
	LONG $0x2424bc83; LONG $0x00ffffff             // cmp    dword -220[rsp], 0 /* [rbp - 220] */
	LONG $0x24848b4c; LONG $0xfffffef8             // mov    r8, qword -264[rsp] /* [rbp - 264] */
	WORD $0x8945; BYTE $0xeb                       // mov    r11d, r13d
	JE   LBB0_112
	WORD $0x8945; BYTE $0xd9                       // mov    r9d, r11d
	WORD $0xff31                                   // xor    edi, edi
	LONG $0x24bc8348; LONG $0xffffff40; BYTE $0x00 // cmp    qword -192[rsp], 0 /* [rbp - 192] */
	LONG $0xbc4e0f48; LONG $0xfffea024; BYTE $0xff // cmovle    rdi, qword -352[rsp] /* [rbp - 352] */
	LONG $0x24748b48; BYTE $0xc0                   // mov    rsi, qword -64[rsp] /* [rbp - 64] */
	LONG $0xfeaf0f48                               // imul    rdi, rsi
	LONG $0x24948b4c; LONG $0xffffff38             // mov    r10, qword -200[rsp] /* [rbp - 200] */
	WORD $0xff49; BYTE $0xca                       // dec    r10
	WORD $0x894c; BYTE $0xd0                       // mov    rax, r10
	LONG $0x248c8b48; LONG $0xffffff48             // mov    rcx, qword -184[rsp] /* [rbp - 184] */
	WORD $0x2948; BYTE $0xc8                       // sub    rax, rcx
	WORD $0x8548; BYTE $0xc9                       // test    rcx, rcx
	WORD $0x8948; BYTE $0xca                       // mov    rdx, rcx
	WORD $0xf748; BYTE $0xd2                       // not    rdx
	LONG $0xd0490f48                               // cmovns    rdx, rax
	LONG $0x24948948; LONG $0xfffffe98             // mov    qword -360[rsp], rdx /* [rbp - 360] */
	LONG $0x24448b48; BYTE $0x38                   // mov    rax, qword 56[rsp] /* [rbp + 16] */
	LONG $0xc2af0f48                               // imul    rax, rdx
	LONG $0x24848948; LONG $0xfffffe78             // mov    qword -392[rsp], rax /* [rbp - 392] */
	WORD $0x0148; BYTE $0xc7                       // add    rdi, rax
	WORD $0x8548; BYTE $0xc9                       // test    rcx, rcx
	JS   LBB0_79
	WORD $0x894c; BYTE $0xd0                       // mov    rax, r10
	LONG $0x44af0f48; WORD $0xd024                 // imul    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x24840348; LONG $0xffffff50             // add    rax, qword -176[rsp] /* [rbp - 176] */
	LONG $0x248c8b48; LONG $0xfffffeb0             // mov    rcx, qword -336[rsp] /* [rbp - 336] */
	WORD $0x8948; BYTE $0xca                       // mov    rdx, rcx
	LONG $0xd6af0f48                               // imul    rdx, rsi
	WORD $0x0148; BYTE $0xc2                       // add    rdx, rax
	LONG $0x24948948; LONG $0xffffff08             // mov    qword -248[rsp], rdx /* [rbp - 248] */
	LONG $0x24948b48; LONG $0xffffff58             // mov    rdx, qword -168[rsp] /* [rbp - 168] */
	WORD $0x0148; BYTE $0xca                       // add    rdx, rcx
	LONG $0xd6af0f48                               // imul    rdx, rsi
	WORD $0x0148; BYTE $0xc2                       // add    rdx, rax
	WORD $0x014c; BYTE $0xc7                       // add    rdi, r8
	LONG $0x24bc8948; LONG $0xffffff10             // mov    qword -240[rsp], rdi /* [rbp - 240] */
	LONG $0x24948948; LONG $0xffffff18             // mov    qword -232[rsp], rdx /* [rbp - 232] */
	LONG $0x24bc8948; LONG $0xffffff58             // mov    qword -168[rsp], rdi /* [rbp - 168] */
	JMP  LBB0_81

LBB0_79:
	WORD $0x014c; BYTE $0xc7           // add    rdi, r8
	LONG $0x24bc8948; LONG $0xffffff18 // mov    qword -232[rsp], rdi /* [rbp - 232] */
	LONG $0x248c8b48; LONG $0xfffffeb0 // mov    rcx, qword -336[rsp] /* [rbp - 336] */
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0xd6af0f48                   // imul    rdx, rsi
	LONG $0x24848b48; LONG $0xffffff50 // mov    rax, qword -176[rsp] /* [rbp - 176] */
	WORD $0x0148; BYTE $0xc2           // add    rdx, rax
	LONG $0x24948948; LONG $0xffffff10 // mov    qword -240[rsp], rdx /* [rbp - 240] */
	LONG $0x24948b48; LONG $0xffffff58 // mov    rdx, qword -168[rsp] /* [rbp - 168] */
	WORD $0x0148; BYTE $0xca           // add    rdx, rcx
	LONG $0xd6af0f48                   // imul    rdx, rsi
	WORD $0x0148; BYTE $0xc2           // add    rdx, rax
	LONG $0x24948948; LONG $0xffffff58 // mov    qword -168[rsp], rdx /* [rbp - 168] */
	LONG $0x24bc8948; LONG $0xffffff08 // mov    qword -248[rsp], rdi /* [rbp - 248] */

LBB0_81:
	LONG $0x2494894c; LONG $0xffffff38 // mov    qword -200[rsp], r10 /* [rbp - 200] */
	WORD $0x8548; BYTE $0xf6           // test    rsi, rsi
	JE   LBB0_97
	LONG $0x24848b48; LONG $0xfffffec0 // mov    rax, qword -320[rsp] /* [rbp - 320] */
	LONG $0x3fe0c148                   // shl    rax, 63
	LONG $0x3ff8c148                   // sar    rax, 63
	LONG $0x24843948; LONG $0xffffff60 // cmp    qword -160[rsp], rax /* [rbp - 160] */
	JE   LBB0_97
	LONG $0x24848b48; LONG $0xffffff60 // mov    rax, qword -160[rsp] /* [rbp - 160] */
	LONG $0x248c8b48; LONG $0xfffffec0 // mov    rcx, qword -320[rsp] /* [rbp - 320] */
	LONG $0x082c8d4c                   // lea    r13, [rax + rcx]
	LONG $0x24ac894c; LONG $0xfffffed8 // mov    qword -296[rsp], r13 /* [rbp - 296] */
	WORD $0xc031                       // xor    eax, eax
	LONG $0x24448948; BYTE $0xb0       // mov    qword -80[rsp], rax /* [rbp - 80] */
	LONG $0x24948b4c; LONG $0xffffff40 // mov    r10, qword -192[rsp] /* [rbp - 192] */
	WORD $0x854d; BYTE $0xd2           // test    r10, r10
	LONG $0x000000b8; BYTE $0x00       // mov    eax, 0
	LONG $0xc2490f49                   // cmovns    rax, r10
	LONG $0x244c8b48; BYTE $0x50       // mov    rcx, qword 80[rsp] /* [rbp + 40] */
	WORD $0x8949; BYTE $0xc8           // mov    r8, rcx
	LONG $0x003c8d4a                   // lea    rdi, [rax + r8]
	WORD $0x294c; BYTE $0xd7           // sub    rdi, r10
	LONG $0x244c8b48; BYTE $0x58       // mov    rcx, qword 88[rsp] /* [rbp + 48] */
	LONG $0x24948b48; LONG $0xfffffe98 // mov    rdx, qword -360[rsp] /* [rbp - 360] */
	LONG $0x0a0c8d48                   // lea    rcx, [rdx + rcx]
	LONG $0x4caf0f48; WORD $0x7824     // imul    rcx, qword 120[rsp] /* [rbp + 80] */
	LONG $0xfeaf0f48                   // imul    rdi, rsi
	WORD $0x0148; BYTE $0xcf           // add    rdi, rcx
	LONG $0x24bc8948; LONG $0xffffff00 // mov    qword -256[rsp], rdi /* [rbp - 256] */
	LONG $0x00448d4a; BYTE $0x01       // lea    rax, [rax + r8 + 1]
	WORD $0x294c; BYTE $0xd0           // sub    rax, r10
	LONG $0xc6af0f48                   // imul    rax, rsi
	LONG $0x08448d48; BYTE $0xff       // lea    rax, [rax + rcx - 1]
	LONG $0x24848948; LONG $0xfffffee8 // mov    qword -280[rsp], rax /* [rbp - 280] */
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x24848948; LONG $0xfffffee0 // mov    qword -288[rsp], rax /* [rbp - 288] */
	WORD $0x8948; BYTE $0xf0           // mov    rax, rsi
	LONG $0xfce08348                   // and    rax, -4
	LONG $0x24448948; BYTE $0xc8       // mov    qword -56[rsp], rax /* [rbp - 56] */
	LONG $0x6e0f4166; BYTE $0xc6       // movd    xmm0, r14d
	LONG $0x700f4466; WORD $0x00c0     // pshufd    xmm8, xmm0, 0
	LONG $0x6e0f4166; BYTE $0xc4       // movd    xmm0, r12d
	LONG $0x700f4466; WORD $0x00d8     // pshufd    xmm11, xmm0, 0
	LONG $0x6e0f4166; BYTE $0xc1       // movd    xmm0, r9d
	LONG $0x700f4466; WORD $0x00e0     // pshufd    xmm12, xmm0, 0
	LONG $0xc36e0f66                   // movd    xmm0, ebx
	LONG $0x700f4466; WORD $0x00e8     // pshufd    xmm13, xmm0, 0
	LONG $0x24448b48; BYTE $0x70       // mov    rax, qword 112[rsp] /* [rbp + 72] */
	LONG $0x38148d48                   // lea    rdx, [rax + rdi]
	LONG $0xe4ef0f66                   // pxor    xmm4, xmm4
	LONG $0x700f4566; WORD $0xf5f0     // pshufd    xmm14, xmm8, 245
	LONG $0x700f4566; WORD $0xf5fb     // pshufd    xmm15, xmm11, 245
	LONG $0x700f4566; WORD $0xf5d4     // pshufd    xmm10, xmm12, 245
	LONG $0x700f4166; WORD $0xf5c5     // pshufd    xmm0, xmm13, 245
	LONG $0x24948b4c; LONG $0xffffff58 // mov    r10, qword -168[rsp] /* [rbp - 168] */
	LONG $0x249c8b4c; LONG $0xffffff10 // mov    r11, qword -240[rsp] /* [rbp - 240] */
	LONG $0x24bc8b4c; LONG $0xffffff08 // mov    r15, qword -248[rsp] /* [rbp - 248] */
	LONG $0x24848b4c; LONG $0xffffff18 // mov    r8, qword -232[rsp] /* [rbp - 232] */

LBB0_84:
	LONG $0x04fe8348                           // cmp    rsi, 4
	LONG $0x000000bf; BYTE $0x00               // mov    edi, 0
	JB   LBB0_89
	LONG $0x247c8348; WORD $0x00c8             // cmp    qword -56[rsp], 0 /* [rbp - 56] */
	LONG $0x000000bf; BYTE $0x00               // mov    edi, 0
	JE   LBB0_89
	LONG $0x244c8944; BYTE $0x98               // mov    dword -104[rsp], r9d /* [rbp - 104] */
	LONG $0x24448b48; BYTE $0xb0               // mov    rax, qword -80[rsp] /* [rbp - 80] */
	LONG $0xc6af0f48                           // imul    rax, rsi
	LONG $0x248c8b48; LONG $0xffffff00         // mov    rcx, qword -256[rsp] /* [rbp - 256] */
	LONG $0x01348d48                           // lea    rsi, [rcx + rax]
	LONG $0x244c8b48; BYTE $0x70               // mov    rcx, qword 112[rsp] /* [rbp + 72] */
	WORD $0x8949; BYTE $0xc9                   // mov    r9, rcx
	WORD $0x014c; BYTE $0xce                   // add    rsi, r9
	LONG $0x248c8b48; LONG $0xfffffee8         // mov    rcx, qword -280[rsp] /* [rbp - 280] */
	LONG $0x010c8d48                           // lea    rcx, [rcx + rax]
	WORD $0x014c; BYTE $0xc9                   // add    rcx, r9
	LONG $0x24ac8b4c; LONG $0xffffff58         // mov    r13, qword -168[rsp] /* [rbp - 168] */
	LONG $0x057c8d49; BYTE $0x00               // lea    rdi, [r13 + rax]
	LONG $0x24bc8948; LONG $0xffffff78         // mov    qword -136[rsp], rdi /* [rbp - 136] */
	LONG $0x24bc8b48; LONG $0xfffffee0         // mov    rdi, qword -288[rsp] /* [rbp - 288] */
	LONG $0x070c8d4c                           // lea    r9, [rdi + rax]
	LONG $0x0d7c8d4b; BYTE $0x00               // lea    rdi, [r13 + r9]
	LONG $0x247c8948; BYTE $0x88               // mov    qword -120[rsp], rdi /* [rbp - 120] */
	LONG $0x24ac8b4c; LONG $0xffffff10         // mov    r13, qword -240[rsp] /* [rbp - 240] */
	LONG $0x057c8d49; BYTE $0x00               // lea    rdi, [r13 + rax]
	LONG $0x247c8948; BYTE $0x80               // mov    qword -128[rsp], rdi /* [rbp - 128] */
	LONG $0x0d7c8d4b; BYTE $0x00               // lea    rdi, [r13 + r9]
	LONG $0x24bc8948; LONG $0xffffff68         // mov    qword -152[rsp], rdi /* [rbp - 152] */
	LONG $0x24ac8b4c; LONG $0xffffff18         // mov    r13, qword -232[rsp] /* [rbp - 232] */
	LONG $0x057c8d49; BYTE $0x00               // lea    rdi, [r13 + rax]
	LONG $0x247c8948; BYTE $0x90               // mov    qword -112[rsp], rdi /* [rbp - 112] */
	LONG $0x0d7c8d4b; BYTE $0x00               // lea    rdi, [r13 + r9]
	LONG $0x24bc8948; LONG $0xffffff70         // mov    qword -144[rsp], rdi /* [rbp - 144] */
	LONG $0x24ac8b4c; LONG $0xffffff08         // mov    r13, qword -248[rsp] /* [rbp - 248] */
	WORD $0x014c; BYTE $0xe8                   // add    rax, r13
	WORD $0x014d; BYTE $0xe9                   // add    r9, r13
	LONG $0x24743b48; BYTE $0x88               // cmp    rsi, qword -120[rsp] /* [rbp - 120] */
	LONG $0x2454960f; BYTE $0x88               // setbe    byte -120[rsp] /* [rbp - 120] */
	LONG $0x248c3948; LONG $0xffffff78         // cmp    qword -136[rsp], rcx /* [rbp - 136] */
	LONG $0x2494960f; LONG $0xffffff78         // setbe    byte -136[rsp] /* [rbp - 136] */
	LONG $0x24b43b48; LONG $0xffffff68         // cmp    rsi, qword -152[rsp] /* [rbp - 152] */
	LONG $0xd7960f40                           // setbe    dil
	LONG $0x244c3948; BYTE $0x80               // cmp    qword -128[rsp], rcx /* [rbp - 128] */
	LONG $0x2454960f; BYTE $0x80               // setbe    byte -128[rsp] /* [rbp - 128] */
	LONG $0x24b43b48; LONG $0xffffff70         // cmp    rsi, qword -144[rsp] /* [rbp - 144] */
	LONG $0xd5960f41                           // setbe    r13b
	LONG $0x244c3948; BYTE $0x90               // cmp    qword -112[rsp], rcx /* [rbp - 112] */
	LONG $0x2454960f; BYTE $0x90               // setbe    byte -112[rsp] /* [rbp - 112] */
	WORD $0x394c; BYTE $0xce                   // cmp    rsi, r9
	LONG $0xd6960f40                           // setbe    sil
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	WORD $0x960f; BYTE $0xd0                   // setbe    al
	LONG $0x78248c8a; WORD $0xffff; BYTE $0xff // mov    cl, byte -136[rsp] /* [rbp - 136] */
	LONG $0x88244c84                           // test    cl, byte -120[rsp] /* [rbp - 120] */
	JNE  LBB0_87
	LONG $0x247c2240; BYTE $0x80               // and    dil, byte -128[rsp] /* [rbp - 128] */
	LONG $0x244c8b44; BYTE $0x98               // mov    r9d, dword -104[rsp] /* [rbp - 104] */
	JNE  LBB0_91
	LONG $0x246c2244; BYTE $0x90               // and    r13b, byte -112[rsp] /* [rbp - 112] */
	JNE  LBB0_91
	WORD $0x2040; BYTE $0xc6                   // and    sil, al
	LONG $0x000000bf; BYTE $0x00               // mov    edi, 0
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0x000000b9; BYTE $0x00               // mov    ecx, 0
	LONG $0x24748b48; BYTE $0xc0               // mov    rsi, qword -64[rsp] /* [rbp - 64] */
	LONG $0x24ac8b4c; LONG $0xfffffed8         // mov    r13, qword -296[rsp] /* [rbp - 296] */
	JNE  LBB0_89

LBB0_94:
	LONG $0x6e0f4166; WORD $0x0f0c // movd    xmm1, dword [r15 + rcx]
	LONG $0xcc600f66               // punpcklbw    xmm1, xmm4
	LONG $0xcc610f66               // punpcklwd    xmm1, xmm4
	LONG $0x6e0f4166; WORD $0x082c // movd    xmm5, dword [r8 + rcx]
	LONG $0xec600f66               // punpcklbw    xmm5, xmm4
	LONG $0xec610f66               // punpcklwd    xmm5, xmm4
	LONG $0x6e0f4166; WORD $0x0b34 // movd    xmm6, dword [r11 + rcx]
	LONG $0xf4600f66               // punpcklbw    xmm6, xmm4
	LONG $0xf4610f66               // punpcklwd    xmm6, xmm4
	LONG $0x6e0f4166; WORD $0x0a14 // movd    xmm2, dword [r10 + rcx]
	LONG $0xd4600f66               // punpcklbw    xmm2, xmm4
	LONG $0xd4610f66               // punpcklwd    xmm2, xmm4
	LONG $0x700f4466; WORD $0xf5c9 // pshufd    xmm9, xmm1, 245
	LONG $0xf40f4166; BYTE $0xc8   // pmuludq    xmm1, xmm8
	LONG $0xd9700f66; BYTE $0xe8   // pshufd    xmm3, xmm1, 232
	LONG $0xf40f4566; BYTE $0xce   // pmuludq    xmm9, xmm14
	LONG $0x700f4166; WORD $0xe8c9 // pshufd    xmm1, xmm9, 232
	LONG $0xd9620f66               // punpckldq    xmm3, xmm1
	LONG $0xfd700f66; BYTE $0xf5   // pshufd    xmm7, xmm5, 245
	LONG $0xf40f4166; BYTE $0xeb   // pmuludq    xmm5, xmm11
	LONG $0xcd700f66; BYTE $0xe8   // pshufd    xmm1, xmm5, 232
	LONG $0xf40f4166; BYTE $0xff   // pmuludq    xmm7, xmm15
	LONG $0xef700f66; BYTE $0xe8   // pshufd    xmm5, xmm7, 232
	LONG $0xcd620f66               // punpckldq    xmm1, xmm5
	LONG $0xee700f66; BYTE $0xf5   // pshufd    xmm5, xmm6, 245
	LONG $0xf40f4166; BYTE $0xf4   // pmuludq    xmm6, xmm12
	LONG $0xf6700f66; BYTE $0xe8   // pshufd    xmm6, xmm6, 232
	LONG $0xf40f4166; BYTE $0xea   // pmuludq    xmm5, xmm10
	LONG $0xed700f66; BYTE $0xe8   // pshufd    xmm5, xmm5, 232
	LONG $0xf5620f66               // punpckldq    xmm6, xmm5
	LONG $0xea700f66; BYTE $0xf5   // pshufd    xmm5, xmm2, 245
	LONG $0xf40f4166; BYTE $0xd5   // pmuludq    xmm2, xmm13
	LONG $0xd2700f66; BYTE $0xe8   // pshufd    xmm2, xmm2, 232
	LONG $0xe8f40f66               // pmuludq    xmm5, xmm0
	LONG $0xed700f66; BYTE $0xe8   // pshufd    xmm5, xmm5, 232
	LONG $0xd5620f66               // punpckldq    xmm2, xmm5
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xcefe0f66               // paddd    xmm1, xmm6
	LONG $0xcafe0f66               // paddd    xmm1, xmm2
	LONG $0x4dfe0f66; BYTE $0x10   // paddd    xmm1, 16[rbp] /* [rip + LCPI0_2] */
	LONG $0xd1720f66; BYTE $0x08   // psrld    xmm1, 8
	LONG $0x00380f66; WORD $0x204d // pshufb    xmm1, 32[rbp] /* [rip + LCPI0_3] */
	LONG $0x087e0f66               // movd    dword [rax], xmm1
	LONG $0x04c18348               // add    rcx, 4
	LONG $0x04c08348               // add    rax, 4
	LONG $0x244c3948; BYTE $0xc8   // cmp    qword -56[rsp], rcx /* [rbp - 56] */
	JNE  LBB0_94
	LONG $0x247c8b48; BYTE $0xc8   // mov    rdi, qword -56[rsp] /* [rbp - 56] */
	WORD $0x3948; BYTE $0xf7       // cmp    rdi, rsi
	JNE  LBB0_89
	JMP  LBB0_96

LBB0_91:
	WORD $0xff31                 // xor    edi, edi
	LONG $0x24748b48; BYTE $0xc0 // mov    rsi, qword -64[rsp] /* [rbp - 64] */
	JMP  LBB0_88

LBB0_87:
	WORD $0xff31                 // xor    edi, edi
	LONG $0x24748b48; BYTE $0xc0 // mov    rsi, qword -64[rsp] /* [rbp - 64] */
	LONG $0x244c8b44; BYTE $0x98 // mov    r9d, dword -104[rsp] /* [rbp - 104] */

LBB0_88:
	LONG $0x24ac8b4c; LONG $0xfffffed8 // mov    r13, qword -296[rsp] /* [rbp - 296] */

LBB0_89:
	LONG $0x04b60f41; BYTE $0x3f               // movzx    eax, byte [r15 + rdi]
	LONG $0x0cb60f41; BYTE $0x38               // movzx    ecx, byte [r8 + rdi]
	LONG $0xc6af0f41                           // imul    eax, r14d
	LONG $0xccaf0f41                           // imul    ecx, r12d
	WORD $0xc101                               // add    ecx, eax
	LONG $0x04b60f41; BYTE $0x3b               // movzx    eax, byte [r11 + rdi]
	LONG $0xc1af0f41                           // imul    eax, r9d
	WORD $0xc101                               // add    ecx, eax
	LONG $0x04b60f41; BYTE $0x3a               // movzx    eax, byte [r10 + rdi]
	WORD $0xaf0f; BYTE $0xc3                   // imul    eax, ebx
	LONG $0x8008848d; WORD $0x0000; BYTE $0x00 // lea    eax, [rax + rcx + 128]
	WORD $0x2488; BYTE $0x3a                   // mov    byte [rdx + rdi], ah
	WORD $0xff48; BYTE $0xc7                   // inc    rdi
	WORD $0x3948; BYTE $0xfe                   // cmp    rsi, rdi
	JNE  LBB0_89

LBB0_96:
	WORD $0x0149; BYTE $0xf7     // add    r15, rsi
	WORD $0x0149; BYTE $0xf0     // add    r8, rsi
	WORD $0x0149; BYTE $0xf3     // add    r11, rsi
	WORD $0x0149; BYTE $0xf2     // add    r10, rsi
	LONG $0x24448b48; BYTE $0xb0 // mov    rax, qword -80[rsp] /* [rbp - 80] */
	WORD $0xff48; BYTE $0xc0     // inc    rax
	LONG $0x24448948; BYTE $0xb0 // mov    qword -80[rsp], rax /* [rbp - 80] */
	WORD $0x0148; BYTE $0xf2     // add    rdx, rsi
	WORD $0x394c; BYTE $0xe8     // cmp    rax, r13
	JNE  LBB0_84

LBB0_97:
	LONG $0x24748948; BYTE $0xc0       // mov    qword -64[rsp], rsi /* [rbp - 64] */
	LONG $0xf424bc83; LONG $0x00fffffe // cmp    dword -268[rsp], 0 /* [rbp - 268] */
	LONG $0x24848b4c; LONG $0xfffffef8 // mov    r8, qword -264[rsp] /* [rbp - 264] */
	LONG $0x24948b4c; LONG $0xffffff30 // mov    r10, qword -208[rsp] /* [rbp - 208] */
	WORD $0x8945; BYTE $0xcb           // mov    r11d, r9d
	JE   LBB0_112
	WORD $0xff49; BYTE $0xca           // dec    r10
	WORD $0x894c; BYTE $0xd0           // mov    rax, r10
	LONG $0x24948b48; LONG $0xffffff40 // mov    rdx, qword -192[rsp] /* [rbp - 192] */
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	WORD $0x8548; BYTE $0xd2           // test    rdx, rdx
	WORD $0x8948; BYTE $0xd6           // mov    rsi, rdx
	WORD $0xf748; BYTE $0xd6           // not    rsi
	LONG $0xf0490f48                   // cmovns    rsi, rax
	WORD $0x8948; BYTE $0xf0           // mov    rax, rsi
	LONG $0x247c8b48; BYTE $0xc0       // mov    rdi, qword -64[rsp] /* [rbp - 64] */
	LONG $0xc7af0f48                   // imul    rax, rdi
	LONG $0x248c8b48; LONG $0xfffffe78 // mov    rcx, qword -392[rsp] /* [rbp - 392] */
	WORD $0x0148; BYTE $0xc1           // add    rcx, rax
	LONG $0x24848b48; LONG $0xffffff38 // mov    rax, qword -200[rsp] /* [rbp - 200] */
	LONG $0x44af0f48; WORD $0xd024     // imul    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x248c8b4c; LONG $0xffffff50 // mov    r9, qword -176[rsp] /* [rbp - 176] */
	WORD $0x014c; BYTE $0xc8           // add    rax, r9
	LONG $0xd7af0f4c                   // imul    r10, rdi
	WORD $0x0149; BYTE $0xc8           // add    r8, rcx
	LONG $0x113c8d4f                   // lea    r15, [r9 + r10]
	LONG $0x24bc8b48; LONG $0xffffff48 // mov    rdi, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xff           // test    rdi, rdi
	WORD $0x894d; BYTE $0xc5           // mov    r13, r8
	LONG $0xe8490f4c                   // cmovns    r13, rax
	LONG $0xf8490f4d                   // cmovns    r15, r8
	WORD $0x8548; BYTE $0xd2           // test    rdx, rdx
	LONG $0xe8490f4d                   // cmovns    r13, r8
	LONG $0xf8480f4d                   // cmovs    r15, r8
	WORD $0x0149; BYTE $0xc2           // add    r10, rax
	WORD $0x8948; BYTE $0xf9           // mov    rcx, rdi
	WORD $0x0948; BYTE $0xd1           // or    rcx, rdx
	LONG $0xd0480f4d                   // cmovs    r10, r8
	WORD $0x8548; BYTE $0xd7           // test    rdi, rdx
	LONG $0xc1480f4d                   // cmovs    r8, r9
	LONG $0x247c8348; WORD $0x00c0     // cmp    qword -64[rsp], 0 /* [rbp - 64] */
	JE   LBB0_112
	WORD $0xff31                       // xor    edi, edi
	LONG $0x247c8348; WORD $0x04c0     // cmp    qword -64[rsp], 4 /* [rbp - 64] */
	JB   LBB0_110
	WORD $0xff31                       // xor    edi, edi
	LONG $0x24448b48; BYTE $0xc0       // mov    rax, qword -64[rsp] /* [rbp - 64] */
	LONG $0xfce08348                   // and    rax, -4
	LONG $0x24448948; BYTE $0xb0       // mov    qword -80[rsp], rax /* [rbp - 80] */
	JE   LBB0_110
	LONG $0x245c8944; BYTE $0x98       // mov    dword -104[rsp], r11d /* [rbp - 104] */
	LONG $0x24448b48; BYTE $0x58       // mov    rax, qword 88[rsp] /* [rbp + 48] */
	LONG $0x248c8b48; LONG $0xfffffe98 // mov    rcx, qword -360[rsp] /* [rbp - 360] */
	LONG $0x010c8d48                   // lea    rcx, [rcx + rax]
	LONG $0x4caf0f48; WORD $0x7824     // imul    rcx, qword 120[rsp] /* [rbp + 80] */
	LONG $0x24448b48; BYTE $0x50       // mov    rax, qword 80[rsp] /* [rbp + 40] */
	WORD $0x8948; BYTE $0xc7           // mov    rdi, rax
	LONG $0x3e1c8d4c                   // lea    r11, [rsi + rdi]
	LONG $0x24448b48; BYTE $0xc0       // mov    rax, qword -64[rsp] /* [rbp - 64] */
	LONG $0xd8af0f4c                   // imul    r11, rax
	WORD $0x0149; BYTE $0xcb           // add    r11, rcx
	LONG $0x24548b48; BYTE $0x70       // mov    rdx, qword 112[rsp] /* [rbp + 72] */
	WORD $0x0149; BYTE $0xd3           // add    r11, rdx
	LONG $0x245c894c; BYTE $0x80       // mov    qword -128[rsp], r11 /* [rbp - 128] */
	LONG $0x3e7c8d48; BYTE $0x01       // lea    rdi, [rsi + rdi + 1]
	LONG $0x24748948; BYTE $0xc8       // mov    qword -56[rsp], rsi /* [rbp - 56] */
	LONG $0xf8af0f48                   // imul    rdi, rax
	WORD $0x0148; BYTE $0xcf           // add    rdi, rcx
	LONG $0x3a7c8d48; BYTE $0xff       // lea    rdi, [rdx + rdi - 1]
	LONG $0x004c8d49; BYTE $0xff       // lea    rcx, [r8 + rax - 1]
	LONG $0x07548d49; BYTE $0xff       // lea    rdx, [r15 + rax - 1]
	LONG $0x054c8d4d; BYTE $0xff       // lea    r9, [r13 + rax - 1]
	LONG $0x02448d49; BYTE $0xff       // lea    rax, [r10 + rax - 1]
	WORD $0x3949; BYTE $0xcb           // cmp    r11, rcx
	LONG $0x2454960f; BYTE $0x90       // setbe    byte -112[rsp] /* [rbp - 112] */
	WORD $0x3949; BYTE $0xf8           // cmp    r8, rdi
	LONG $0x2484894c; LONG $0xfffffef8 // mov    qword -264[rsp], r8 /* [rbp - 264] */
	LONG $0xd0960f41                   // setbe    r8b
	WORD $0x3949; BYTE $0xd3           // cmp    r11, rdx
	WORD $0x960f; BYTE $0xd1           // setbe    cl
	WORD $0x3949; BYTE $0xff           // cmp    r15, rdi
	LONG $0xd6960f40                   // setbe    sil
	WORD $0x394d; BYTE $0xcb           // cmp    r11, r9
	WORD $0x960f; BYTE $0xd2           // setbe    dl
	WORD $0x3949; BYTE $0xfd           // cmp    r13, rdi
	LONG $0x2454960f; BYTE $0x88       // setbe    byte -120[rsp] /* [rbp - 120] */
	WORD $0x3949; BYTE $0xc3           // cmp    r11, rax
	LONG $0xd1960f41                   // setbe    r9b
	WORD $0x3949; BYTE $0xfa           // cmp    r10, rdi
	WORD $0x960f; BYTE $0xd0           // setbe    al
	WORD $0xff31                       // xor    edi, edi
	LONG $0x24448444; BYTE $0x90       // test    r8b, byte -112[rsp] /* [rbp - 112] */
	JNE  LBB0_102
	WORD $0x2040; BYTE $0xf1           // and    cl, sil
	JNE  LBB0_102
	LONG $0x88245422                   // and    dl, byte -120[rsp] /* [rbp - 120] */
	LONG $0x24848b4c; LONG $0xfffffef8 // mov    r8, qword -264[rsp] /* [rbp - 264] */
	JNE  LBB0_105
	WORD $0x2041; BYTE $0xc1           // and    r9b, al
	LONG $0x245c8b44; BYTE $0x98       // mov    r11d, dword -104[rsp] /* [rbp - 104] */
	LONG $0x24748b48; BYTE $0xc8       // mov    rsi, qword -56[rsp] /* [rbp - 56] */
	JNE  LBB0_110
	LONG $0x6e0f4166; BYTE $0xc6       // movd    xmm0, r14d
	LONG $0x700f4466; WORD $0x00c0     // pshufd    xmm8, xmm0, 0
	LONG $0x6e0f4166; BYTE $0xc4       // movd    xmm0, r12d
	LONG $0x700f4466; WORD $0x00d8     // pshufd    xmm11, xmm0, 0
	LONG $0x6e0f4166; BYTE $0xc3       // movd    xmm0, r11d
	LONG $0x700f4466; WORD $0x00e0     // pshufd    xmm12, xmm0, 0
	LONG $0xc36e0f66                   // movd    xmm0, ebx
	LONG $0x700f4466; WORD $0x00e8     // pshufd    xmm13, xmm0, 0
	WORD $0x894c; BYTE $0xd2           // mov    rdx, r10
	LONG $0x24548b4c; BYTE $0xc0       // mov    r10, qword -64[rsp] /* [rbp - 64] */
	LONG $0xfce28349                   // and    r10, -4
	LONG $0xe4ef0f66                   // pxor    xmm4, xmm4
	LONG $0x700f4566; WORD $0xf5f0     // pshufd    xmm14, xmm8, 245
	LONG $0x700f4566; WORD $0xf5fb     // pshufd    xmm15, xmm11, 245
	LONG $0x700f4566; WORD $0xf5d4     // pshufd    xmm10, xmm12, 245
	LONG $0x700f4166; WORD $0xf5c5     // pshufd    xmm0, xmm13, 245
	WORD $0x894d; BYTE $0xc3           // mov    r11, r8
	WORD $0x894c; BYTE $0xc1           // mov    rcx, r8
	WORD $0x894c; BYTE $0xf8           // mov    rax, r15
	WORD $0x894d; BYTE $0xe8           // mov    r8, r13
	WORD $0x8949; BYTE $0xd1           // mov    r9, rdx
	LONG $0x24748b48; BYTE $0x80       // mov    rsi, qword -128[rsp] /* [rbp - 128] */

LBB0_108:
	LONG $0x6e0f4166; BYTE $0x09   // movd    xmm1, dword [r9]
	LONG $0xcc600f66               // punpcklbw    xmm1, xmm4
	LONG $0xcc610f66               // punpcklwd    xmm1, xmm4
	LONG $0x6e0f4166; BYTE $0x28   // movd    xmm5, dword [r8]
	LONG $0xec600f66               // punpcklbw    xmm5, xmm4
	LONG $0xec610f66               // punpcklwd    xmm5, xmm4
	LONG $0x306e0f66               // movd    xmm6, dword [rax]
	LONG $0xf4600f66               // punpcklbw    xmm6, xmm4
	LONG $0xf4610f66               // punpcklwd    xmm6, xmm4
	LONG $0x6e0f4166; BYTE $0x13   // movd    xmm2, dword [r11]
	LONG $0xd4600f66               // punpcklbw    xmm2, xmm4
	LONG $0xd4610f66               // punpcklwd    xmm2, xmm4
	LONG $0x700f4466; WORD $0xf5c9 // pshufd    xmm9, xmm1, 245
	LONG $0xf40f4166; BYTE $0xc8   // pmuludq    xmm1, xmm8
	LONG $0xd9700f66; BYTE $0xe8   // pshufd    xmm3, xmm1, 232
	LONG $0xf40f4566; BYTE $0xce   // pmuludq    xmm9, xmm14
	LONG $0x700f4166; WORD $0xe8c9 // pshufd    xmm1, xmm9, 232
	LONG $0xd9620f66               // punpckldq    xmm3, xmm1
	LONG $0xfd700f66; BYTE $0xf5   // pshufd    xmm7, xmm5, 245
	LONG $0xf40f4166; BYTE $0xeb   // pmuludq    xmm5, xmm11
	LONG $0xcd700f66; BYTE $0xe8   // pshufd    xmm1, xmm5, 232
	LONG $0xf40f4166; BYTE $0xff   // pmuludq    xmm7, xmm15
	LONG $0xef700f66; BYTE $0xe8   // pshufd    xmm5, xmm7, 232
	LONG $0xcd620f66               // punpckldq    xmm1, xmm5
	LONG $0xee700f66; BYTE $0xf5   // pshufd    xmm5, xmm6, 245
	LONG $0xf40f4166; BYTE $0xf4   // pmuludq    xmm6, xmm12
	LONG $0xf6700f66; BYTE $0xe8   // pshufd    xmm6, xmm6, 232
	LONG $0xf40f4166; BYTE $0xea   // pmuludq    xmm5, xmm10
	LONG $0xed700f66; BYTE $0xe8   // pshufd    xmm5, xmm5, 232
	LONG $0xf5620f66               // punpckldq    xmm6, xmm5
	LONG $0xea700f66; BYTE $0xf5   // pshufd    xmm5, xmm2, 245
	LONG $0xf40f4166; BYTE $0xd5   // pmuludq    xmm2, xmm13
	LONG $0xd2700f66; BYTE $0xe8   // pshufd    xmm2, xmm2, 232
	LONG $0xe8f40f66               // pmuludq    xmm5, xmm0
	LONG $0xed700f66; BYTE $0xe8   // pshufd    xmm5, xmm5, 232
	LONG $0xd5620f66               // punpckldq    xmm2, xmm5
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xcefe0f66               // paddd    xmm1, xmm6
	LONG $0xcafe0f66               // paddd    xmm1, xmm2
	LONG $0x4dfe0f66; BYTE $0x10   // paddd    xmm1, 16[rbp] /* [rip + LCPI0_2] */
	LONG $0xd1720f66; BYTE $0x08   // psrld    xmm1, 8
	LONG $0x00380f66; WORD $0x204d // pshufb    xmm1, 32[rbp] /* [rip + LCPI0_3] */
	LONG $0x0e7e0f66               // movd    dword [rsi], xmm1
	LONG $0x04c68348               // add    rsi, 4
	LONG $0x04c18349               // add    r9, 4
	LONG $0x04c08349               // add    r8, 4
	LONG $0x04c08348               // add    rax, 4
	LONG $0x04c38349               // add    r11, 4
	LONG $0xfcc28349               // add    r10, -4
	JNE  LBB0_108
	LONG $0x247c8b48; BYTE $0xb0   // mov    rdi, qword -80[rsp] /* [rbp - 80] */
	LONG $0x247c3b48; BYTE $0xc0   // cmp    rdi, qword -64[rsp] /* [rbp - 64] */
	WORD $0x8949; BYTE $0xc8       // mov    r8, rcx
	WORD $0x8949; BYTE $0xd2       // mov    r10, rdx
	LONG $0x245c8b44; BYTE $0x98   // mov    r11d, dword -104[rsp] /* [rbp - 104] */
	LONG $0x24748b48; BYTE $0xc8   // mov    rsi, qword -56[rsp] /* [rbp - 56] */
	JE   LBB0_112
	JMP  LBB0_110

LBB0_102:
	LONG $0x24848b4c; LONG $0xfffffef8 // mov    r8, qword -264[rsp] /* [rbp - 264] */

LBB0_105:
	LONG $0x245c8b44; BYTE $0x98 // mov    r11d, dword -104[rsp] /* [rbp - 104] */
	LONG $0x24748b48; BYTE $0xc8 // mov    rsi, qword -56[rsp] /* [rbp - 56] */

LBB0_110:
	LONG $0x24448b48; BYTE $0xc0       // mov    rax, qword -64[rsp] /* [rbp - 64] */
	WORD $0x8949; BYTE $0xc1           // mov    r9, rax
	WORD $0x2949; BYTE $0xf9           // sub    r9, rdi
	LONG $0x248c8b48; LONG $0xfffffe98 // mov    rcx, qword -360[rsp] /* [rbp - 360] */
	LONG $0x244c0348; BYTE $0x58       // add    rcx, qword 88[rsp] /* [rbp + 48] */
	LONG $0x4caf0f48; WORD $0x7824     // imul    rcx, qword 120[rsp] /* [rbp + 80] */
	WORD $0x0148; BYTE $0xf9           // add    rcx, rdi
	LONG $0x24740348; BYTE $0x50       // add    rsi, qword 80[rsp] /* [rbp + 40] */
	LONG $0xf0af0f48                   // imul    rsi, rax
	WORD $0x0148; BYTE $0xce           // add    rsi, rcx
	LONG $0x24740348; BYTE $0x70       // add    rsi, qword 112[rsp] /* [rbp + 72] */
	WORD $0x0149; BYTE $0xf8           // add    r8, rdi
	WORD $0x0149; BYTE $0xff           // add    r15, rdi
	WORD $0x0149; BYTE $0xfd           // add    r13, rdi
	WORD $0x0149; BYTE $0xfa           // add    r10, rdi

LBB0_111:
	LONG $0x3ab60f41                           // movzx    edi, byte [r10]
	LONG $0x45b60f41; BYTE $0x00               // movzx    eax, byte [r13]
	LONG $0x17b60f41                           // movzx    edx, byte [r15]
	LONG $0x08b60f41                           // movzx    ecx, byte [r8]
	LONG $0xfeaf0f41                           // imul    edi, r14d
	LONG $0xc4af0f41                           // imul    eax, r12d
	LONG $0xd3af0f41                           // imul    edx, r11d
	WORD $0xaf0f; BYTE $0xcb                   // imul    ecx, ebx
	WORD $0xf801                               // add    eax, edi
	WORD $0xd001                               // add    eax, edx
	LONG $0x8001848d; WORD $0x0000; BYTE $0x00 // lea    eax, [rcx + rax + 128]
	WORD $0x2688                               // mov    byte [rsi], ah
	WORD $0xff48; BYTE $0xc6                   // inc    rsi
	WORD $0xff49; BYTE $0xc0                   // inc    r8
	WORD $0xff49; BYTE $0xc7                   // inc    r15
	WORD $0xff49; BYTE $0xc5                   // inc    r13
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	WORD $0xff49; BYTE $0xc9                   // dec    r9
	JNE  LBB0_111

LBB0_112:
	LONG $0x24848b48; LONG $0xfffffed0         // mov    rax, qword -304[rsp] /* [rbp - 304] */
	LONG $0x44af0f48; WORD $0xd024             // imul    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0x24548b4c; BYTE $0xc0               // mov    r10, qword -64[rsp] /* [rbp - 64] */
	LONG $0x24b48b48; LONG $0xfffffeb0         // mov    rsi, qword -336[rsp] /* [rbp - 336] */
	LONG $0xf2af0f49                           // imul    rsi, r10
	WORD $0x0148; BYTE $0xc6                   // add    rsi, rax
	LONG $0x24948b48; LONG $0xffffff50         // mov    rdx, qword -176[rsp] /* [rbp - 176] */
	WORD $0x0148; BYTE $0xf2                   // add    rdx, rsi
	WORD $0xc031                               // xor    eax, eax
	LONG $0x24b48b48; LONG $0xfffffea8         // mov    rsi, qword -344[rsp] /* [rbp - 344] */
	WORD $0x8548; BYTE $0xf6                   // test    rsi, rsi
	LONG $0xf0480f48                           // cmovs    rsi, rax
	LONG $0x246c8b4c; BYTE $0x78               // mov    r13, qword 120[rsp] /* [rbp + 80] */
	LONG $0xf5af0f49                           // imul    rsi, r13
	LONG $0x24bc8b48; LONG $0xfffffea0         // mov    rdi, qword -352[rsp] /* [rbp - 352] */
	WORD $0x8548; BYTE $0xff                   // test    rdi, rdi
	LONG $0xf8480f48                           // cmovs    rdi, rax
	LONG $0xfaaf0f49                           // imul    rdi, r10
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	LONG $0x247c0148; BYTE $0xb8               // add    qword -72[rsp], rdi /* [rbp - 72] */
	LONG $0x24bc8b4c; LONG $0xffffff60         // mov    r15, qword -160[rsp] /* [rbp - 160] */
	LONG $0x24bc034c; LONG $0xfffffec0         // add    r15, qword -320[rsp] /* [rbp - 320] */
	LONG $0x24848b48; LONG $0xfffffec8         // mov    rax, qword -312[rsp] /* [rbp - 312] */
	LONG $0x24440148; BYTE $0xa8               // add    qword -88[rsp], rax /* [rbp - 88] */
	LONG $0xfaaf0f4d                           // imul    r15, r10
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0xf0e08348                           // and    rax, -16
	LONG $0x2424b48b; WORD $0xffff; BYTE $0xff // mov    esi, dword -220[rsp] /* [rbp - 220] */
	WORD $0xf685                               // test    esi, esi
	JE   LBB0_139
	WORD $0x8949; BYTE $0xd5                   // mov    r13, rdx
	LONG $0xf424bc8b; WORD $0xfffe; BYTE $0xff // mov    edi, dword -268[rsp] /* [rbp - 268] */
	WORD $0xff85                               // test    edi, edi
	LONG $0x24448b4c; BYTE $0xa0               // mov    r8, qword -96[rsp] /* [rbp - 96] */
	LONG $0x244c8b48; BYTE $0x68               // mov    rcx, qword 104[rsp] /* [rbp + 64] */
	JE   LBB0_125
	LONG $0x247c8348; WORD $0x00a8             // cmp    qword -88[rsp], 0 /* [rbp - 88] */
	JE   LBB0_162
	LONG $0x6e0f4566; BYTE $0xd6               // movd    xmm10, r14d
	LONG $0x456f0f66; BYTE $0x30               // movdqa    xmm0, 48[rbp] /* [rip + LCPI0_4] */
	LONG $0x380f4466; WORD $0xd000             // pshufb    xmm10, xmm0
	LONG $0x6e0f4566; BYTE $0xdc               // movd    xmm11, r12d
	LONG $0x380f4466; WORD $0xd800             // pshufb    xmm11, xmm0
	LONG $0x6e0f4566; BYTE $0xf3               // movd    xmm14, r11d
	LONG $0x380f4466; WORD $0xf000             // pshufb    xmm14, xmm0
	LONG $0x6e0f4466; BYTE $0xfb               // movd    xmm15, ebx
	LONG $0x380f4466; WORD $0xf800             // pshufb    xmm15, xmm0
	WORD $0x8548; BYTE $0xc0                   // test    rax, rax
	JE   LBB0_117
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	LONG $0x24948b48; LONG $0xffffff48         // mov    rdx, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xd2                   // test    rdx, rdx
	LONG $0xd0480f49                           // cmovs    rdx, r8
	LONG $0x244c8b48; BYTE $0x58               // mov    rcx, qword 88[rsp] /* [rbp + 48] */
	LONG $0x110c8d4c                           // lea    r9, [rcx + rdx]
	LONG $0x11548d48; BYTE $0x01               // lea    rdx, [rcx + rdx + 1]
	LONG $0x245c8b4c; BYTE $0xd0               // mov    r11, qword -48[rsp] /* [rbp - 48] */
	LONG $0xd3af0f49                           // imul    rdx, r11
	LONG $0x24b48b48; LONG $0xffffff40         // mov    rsi, qword -192[rsp] /* [rbp - 192] */
	WORD $0x8548; BYTE $0xf6                   // test    rsi, rsi
	LONG $0xf0480f49                           // cmovs    rsi, r8
	LONG $0x244c8b48; BYTE $0x50               // mov    rcx, qword 80[rsp] /* [rbp + 40] */
	LONG $0x31248d4c                           // lea    r12, [rcx + rsi]
	LONG $0x31748d48; BYTE $0x01               // lea    rsi, [rcx + rsi + 1]
	WORD $0x894c; BYTE $0xd7                   // mov    rdi, r10
	LONG $0xf7af0f48                           // imul    rsi, rdi
	LONG $0x32148d4c                           // lea    r10, [rdx + rsi]
	LONG $0x244c8b48; BYTE $0xa0               // mov    rcx, qword -96[rsp] /* [rbp - 96] */
	WORD $0x0149; BYTE $0xca                   // add    r10, rcx
	LONG $0xe7af0f4c                           // imul    r12, rdi
	WORD $0x8949; BYTE $0xfe                   // mov    r14, rdi
	WORD $0x0149; BYTE $0xd4                   // add    r12, rdx
	WORD $0x0149; BYTE $0xcc                   // add    r12, rcx
	LONG $0xcbaf0f4d                           // imul    r9, r11
	WORD $0x0149; BYTE $0xf1                   // add    r9, rsi
	WORD $0x0149; BYTE $0xc9                   // add    r9, rcx
	LONG $0xef0f4566; BYTE $0xc0               // pxor    xmm8, xmm8
	LONG $0x6f0f4466; WORD $0x504d             // movdqa    xmm9, 80[rbp] /* [rip + LCPI0_6] */

LBB0_122:
	WORD $0x894c; BYTE $0xca     // mov    rdx, r9
	WORD $0x894c; BYTE $0xe6     // mov    rsi, r12
	WORD $0x894c; BYTE $0xd7     // mov    rdi, r10
	WORD $0xdb31                 // xor    ebx, ebx
	LONG $0x244c8b48; BYTE $0xb8 // mov    rcx, qword -72[rsp] /* [rbp - 72] */

LBB0_123:
	LONG $0x6f0f41f3; WORD $0x1d54; BYTE $0x00 // movdqu    xmm2, [r13 + rbx]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0x600f4166; BYTE $0xe8               // punpcklbw    xmm5, xmm8
	LONG $0x680f4166; BYTE $0xd0               // punpckhbw    xmm2, xmm8
	LONG $0x3a6f0ff3                           // movdqu    xmm7, [rdx]
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0x600f4166; BYTE $0xf0               // punpcklbw    xmm6, xmm8
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0x1e6f0ff3                           // movdqu    xmm3, [rsi]
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0x276f0ff3                           // movdqu    xmm4, [rdi]
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0x600f4166; BYTE $0xc8               // punpcklbw    xmm1, xmm8
	LONG $0x680f4166; BYTE $0xe0               // punpckhbw    xmm4, xmm8
	LONG $0xd50f4166; BYTE $0xea               // pmullw    xmm5, xmm10
	LONG $0xd50f4166; BYTE $0xf3               // pmullw    xmm6, xmm11
	LONG $0xd50f4166; BYTE $0xc6               // pmullw    xmm0, xmm14
	LONG $0xd50f4166; BYTE $0xcf               // pmullw    xmm1, xmm15
	LONG $0xf5fd0f66                           // paddw    xmm6, xmm5
	LONG $0xf0fd0f66                           // paddw    xmm6, xmm0
	LONG $0xf1fd0f66                           // paddw    xmm6, xmm1
	LONG $0xfd0f4166; BYTE $0xf1               // paddw    xmm6, xmm9
	LONG $0xd6710f66; BYTE $0x08               // psrlw    xmm6, 8
	LONG $0xd50f4166; BYTE $0xd2               // pmullw    xmm2, xmm10
	LONG $0xd50f4166; BYTE $0xfb               // pmullw    xmm7, xmm11
	LONG $0xd50f4166; BYTE $0xde               // pmullw    xmm3, xmm14
	LONG $0xd50f4166; BYTE $0xe7               // pmullw    xmm4, xmm15
	LONG $0xfafd0f66                           // paddw    xmm7, xmm2
	LONG $0xfbfd0f66                           // paddw    xmm7, xmm3
	LONG $0xfcfd0f66                           // paddw    xmm7, xmm4
	LONG $0xfd0f4166; BYTE $0xf9               // paddw    xmm7, xmm9
	LONG $0xd7710f66; BYTE $0x08               // psrlw    xmm7, 8
	LONG $0xf7670f66                           // packuswb    xmm6, xmm7
	LONG $0x347f0ff3; BYTE $0x19               // movdqu    [rcx + rbx], xmm6
	LONG $0x10c38348                           // add    rbx, 16
	LONG $0x10c78348                           // add    rdi, 16
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x3948; BYTE $0xc3                   // cmp    rbx, rax
	JB   LBB0_123
	WORD $0x3949; BYTE $0xc7                   // cmp    r15, rax
	JE   LBB0_121
	LONG $0x3d548d4b; BYTE $0x00               // lea    rdx, [r13 + r15]
	LONG $0x6f0f43f3; WORD $0x3d54; BYTE $0xf0 // movdqu    xmm2, [r13 + r15 - 16]
	LONG $0x6f0f4466; BYTE $0xea               // movdqa    xmm13, xmm2
	LONG $0x600f4566; BYTE $0xe8               // punpcklbw    xmm13, xmm8
	LONG $0x680f4166; BYTE $0xd0               // punpckhbw    xmm2, xmm8
	LONG $0x6f0f41f3; WORD $0x167c; BYTE $0xf0 // movdqu    xmm7, [r14 + rdx - 16]
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0x600f4166; BYTE $0xf0               // punpcklbw    xmm6, xmm8
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0x13748d49; BYTE $0xf0               // lea    rsi, [r11 + rdx - 16]
	LONG $0x6f0f45f3; WORD $0x1364; BYTE $0xf0 // movdqu    xmm12, [r11 + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xc4               // movdqa    xmm0, xmm12
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0x680f4566; BYTE $0xe0               // punpckhbw    xmm12, xmm8
	LONG $0x6f0f41f3; WORD $0x362c             // movdqu    xmm5, [r14 + rsi]
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0x600f4166; BYTE $0xc8               // punpcklbw    xmm1, xmm8
	LONG $0x680f4166; BYTE $0xe8               // punpckhbw    xmm5, xmm8
	LONG $0xd50f4566; BYTE $0xea               // pmullw    xmm13, xmm10
	LONG $0xd50f4166; BYTE $0xf3               // pmullw    xmm6, xmm11
	LONG $0xd50f4166; BYTE $0xc6               // pmullw    xmm0, xmm14
	LONG $0xd50f4166; BYTE $0xcf               // pmullw    xmm1, xmm15
	LONG $0xfd0f4166; BYTE $0xf5               // paddw    xmm6, xmm13
	LONG $0xf0fd0f66                           // paddw    xmm6, xmm0
	LONG $0xf1fd0f66                           // paddw    xmm6, xmm1
	LONG $0xfd0f4166; BYTE $0xf1               // paddw    xmm6, xmm9
	LONG $0xd6710f66; BYTE $0x08               // psrlw    xmm6, 8
	LONG $0xd50f4166; BYTE $0xd2               // pmullw    xmm2, xmm10
	LONG $0xd50f4166; BYTE $0xfb               // pmullw    xmm7, xmm11
	LONG $0xd50f4566; BYTE $0xe6               // pmullw    xmm12, xmm14
	LONG $0xd50f4166; BYTE $0xef               // pmullw    xmm5, xmm15
	LONG $0xfafd0f66                           // paddw    xmm7, xmm2
	LONG $0xfd0f4166; BYTE $0xfc               // paddw    xmm7, xmm12
	LONG $0xfdfd0f66                           // paddw    xmm7, xmm5
	LONG $0xfd0f4166; BYTE $0xf9               // paddw    xmm7, xmm9
	LONG $0xd7710f66; BYTE $0x08               // psrlw    xmm7, 8
	LONG $0xf7670f66                           // packuswb    xmm6, xmm7
	LONG $0x7f0f42f3; WORD $0x3974; BYTE $0xf0 // movdqu    [rcx + r15 - 16], xmm6

LBB0_121:
	WORD $0x014d; BYTE $0xdd     // add    r13, r11
	LONG $0x244c0348; BYTE $0x78 // add    rcx, qword 120[rsp] /* [rbp + 80] */
	LONG $0x244c8948; BYTE $0xb8 // mov    qword -72[rsp], rcx /* [rbp - 72] */
	WORD $0xff49; BYTE $0xc0     // inc    r8
	WORD $0x014d; BYTE $0xda     // add    r10, r11
	WORD $0x014d; BYTE $0xdc     // add    r12, r11
	WORD $0x014d; BYTE $0xd9     // add    r9, r11
	LONG $0x24443b4c; BYTE $0xa8 // cmp    r8, qword -88[rsp] /* [rbp - 88] */
	JNE  LBB0_122
	JMP  LBB0_162

LBB0_139:
	LONG $0x24848b44; LONG $0xfffffef4             // mov    r8d, dword -268[rsp] /* [rbp - 268] */
	WORD $0x8545; BYTE $0xc0                       // test    r8d, r8d
	LONG $0x24748b4c; BYTE $0xa0                   // mov    r14, qword -96[rsp] /* [rbp - 96] */
	LONG $0x247c8b48; BYTE $0x68                   // mov    rdi, qword 104[rsp] /* [rbp + 64] */
	JE   LBB0_140
	WORD $0x8948; BYTE $0xd3                       // mov    rbx, rdx
	WORD $0x894d; BYTE $0xd1                       // mov    r9, r10
	LONG $0x247c8348; WORD $0x00a8                 // cmp    qword -88[rsp], 0 /* [rbp - 88] */
	JE   LBB0_162
	LONG $0x846e0f66; LONG $0xfffe8824; BYTE $0xff // movd    xmm0, dword -376[rsp] /* [rbp - 376] */
	LONG $0x556f0f66; BYTE $0x30                   // movdqa    xmm2, 48[rbp] /* [rip + LCPI0_4] */
	LONG $0x00380f66; BYTE $0xc2                   // pshufb    xmm0, xmm2
	LONG $0x6e0f4166; BYTE $0xc8                   // movd    xmm1, r8d
	LONG $0x00380f66; BYTE $0xca                   // pshufb    xmm1, xmm2
	WORD $0x8548; BYTE $0xc0                       // test    rax, rax
	JE   LBB0_159
	WORD $0x3949; BYTE $0xc7                       // cmp    r15, rax
	LONG $0x24748b48; BYTE $0x58                   // mov    rsi, qword 88[rsp] /* [rbp + 48] */
	JNE  LBB0_151
	WORD $0x894c; BYTE $0xff                       // mov    rdi, r15
	WORD $0xc031                                   // xor    eax, eax
	LONG $0x24948b48; LONG $0xffffff40             // mov    rdx, qword -192[rsp] /* [rbp - 192] */
	WORD $0x8548; BYTE $0xd2                       // test    rdx, rdx
	LONG $0xd0480f48                               // cmovs    rdx, rax
	LONG $0x244c8b48; BYTE $0x50                   // mov    rcx, qword 80[rsp] /* [rbp + 40] */
	LONG $0x114c8d48; BYTE $0x01                   // lea    rcx, [rcx + rdx + 1]
	LONG $0xc9af0f4c                               // imul    r9, rcx
	LONG $0x248c8b48; LONG $0xffffff48             // mov    rcx, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xc9                       // test    rcx, rcx
	LONG $0xc8480f48                               // cmovs    rcx, rax
	WORD $0x0148; BYTE $0xce                       // add    rsi, rcx
	LONG $0x74af0f48; WORD $0xd024                 // imul    rsi, qword -48[rsp] /* [rbp - 48] */
	WORD $0x014c; BYTE $0xce                       // add    rsi, r9
	WORD $0x0149; BYTE $0xf6                       // add    r14, rsi
	LONG $0xd2ef0f66                               // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x40                   // movdqa    xmm3, 64[rbp] /* [rip + LCPI0_5] */

LBB0_156:
	WORD $0x894c; BYTE $0xf1     // mov    rcx, r14
	WORD $0xd231                 // xor    edx, edx
	LONG $0x24748b48; BYTE $0xb8 // mov    rsi, qword -72[rsp] /* [rbp - 72] */

LBB0_157:
	LONG $0x246f0ff3; BYTE $0x13 // movdqu    xmm4, [rbx + rdx]
	LONG $0xec6f0f66             // movdqa    xmm5, xmm4
	LONG $0xea600f66             // punpcklbw    xmm5, xmm2
	LONG $0xe2680f66             // punpckhbw    xmm4, xmm2
	LONG $0x316f0ff3             // movdqu    xmm6, [rcx]
	LONG $0xfe6f0f66             // movdqa    xmm7, xmm6
	LONG $0xfa600f66             // punpcklbw    xmm7, xmm2
	LONG $0xf2680f66             // punpckhbw    xmm6, xmm2
	LONG $0xe8d50f66             // pmullw    xmm5, xmm0
	LONG $0xf9d50f66             // pmullw    xmm7, xmm1
	LONG $0xfdfd0f66             // paddw    xmm7, xmm5
	LONG $0xfbfd0f66             // paddw    xmm7, xmm3
	LONG $0xd7710f66; BYTE $0x04 // psrlw    xmm7, 4
	LONG $0xe0d50f66             // pmullw    xmm4, xmm0
	LONG $0xf1d50f66             // pmullw    xmm6, xmm1
	LONG $0xf4fd0f66             // paddw    xmm6, xmm4
	LONG $0xf3fd0f66             // paddw    xmm6, xmm3
	LONG $0xd6710f66; BYTE $0x04 // psrlw    xmm6, 4
	LONG $0xfe670f66             // packuswb    xmm7, xmm6
	LONG $0x3c7f0ff3; BYTE $0x16 // movdqu    [rsi + rdx], xmm7
	LONG $0x10c28348             // add    rdx, 16
	LONG $0x10c18348             // add    rcx, 16
	WORD $0x3948; BYTE $0xfa     // cmp    rdx, rdi
	JB   LBB0_157
	LONG $0x244c8b48; BYTE $0xd0 // mov    rcx, qword -48[rsp] /* [rbp - 48] */
	WORD $0x0148; BYTE $0xcb     // add    rbx, rcx
	WORD $0x014c; BYTE $0xee     // add    rsi, r13
	LONG $0x24748948; BYTE $0xb8 // mov    qword -72[rsp], rsi /* [rbp - 72] */
	WORD $0xff48; BYTE $0xc0     // inc    rax
	WORD $0x0149; BYTE $0xce     // add    r14, rcx
	LONG $0x24443b48; BYTE $0xa8 // cmp    rax, qword -88[rsp] /* [rbp - 88] */
	JNE  LBB0_156
	JMP  LBB0_162

LBB0_125:
	LONG $0x247c8348; WORD $0x00a8                 // cmp    qword -88[rsp], 0 /* [rbp - 88] */
	JE   LBB0_162
	LONG $0x846e0f66; LONG $0xfffe8c24; BYTE $0xff // movd    xmm0, dword -372[rsp] /* [rbp - 372] */
	LONG $0x556f0f66; BYTE $0x30                   // movdqa    xmm2, 48[rbp] /* [rip + LCPI0_4] */
	LONG $0x00380f66; BYTE $0xc2                   // pshufb    xmm0, xmm2
	LONG $0xce6e0f66                               // movd    xmm1, esi
	LONG $0x00380f66; BYTE $0xca                   // pshufb    xmm1, xmm2
	WORD $0x8548; BYTE $0xc0                       // test    rax, rax
	JE   LBB0_136
	WORD $0x3949; BYTE $0xc7                       // cmp    r15, rax
	LONG $0x24548b48; BYTE $0x58                   // mov    rdx, qword 88[rsp] /* [rbp + 48] */
	JNE  LBB0_128
	WORD $0xc031                                   // xor    eax, eax
	LONG $0x248c8b48; LONG $0xffffff48             // mov    rcx, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xc9                       // test    rcx, rcx
	LONG $0xc8480f48                               // cmovs    rcx, rax
	LONG $0x0a4c8d48; BYTE $0x01                   // lea    rcx, [rdx + rcx + 1]
	LONG $0x4caf0f48; WORD $0xd024                 // imul    rcx, qword -48[rsp] /* [rbp - 48] */
	LONG $0x24b48b48; LONG $0xffffff40             // mov    rsi, qword -192[rsp] /* [rbp - 192] */
	WORD $0x8548; BYTE $0xf6                       // test    rsi, rsi
	LONG $0xf0480f48                               // cmovs    rsi, rax
	LONG $0x24548b48; BYTE $0x50                   // mov    rdx, qword 80[rsp] /* [rbp + 40] */
	WORD $0x0148; BYTE $0xf2                       // add    rdx, rsi
	LONG $0xd2af0f4c                               // imul    r10, rdx
	WORD $0x0149; BYTE $0xca                       // add    r10, rcx
	WORD $0x014d; BYTE $0xd0                       // add    r8, r10
	LONG $0xd2ef0f66                               // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x40                   // movdqa    xmm3, 64[rbp] /* [rip + LCPI0_5] */

LBB0_133:
	WORD $0x894c; BYTE $0xc1     // mov    rcx, r8
	WORD $0xd231                 // xor    edx, edx
	LONG $0x24748b48; BYTE $0xb8 // mov    rsi, qword -72[rsp] /* [rbp - 72] */

LBB0_134:
	LONG $0x6f0f41f3; WORD $0x1564; BYTE $0x00 // movdqu    xmm4, [r13 + rdx]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0x316f0ff3                           // movdqu    xmm6, [rcx]
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xe8d50f66                           // pmullw    xmm5, xmm0
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfdfd0f66                           // paddw    xmm7, xmm5
	LONG $0xfbfd0f66                           // paddw    xmm7, xmm3
	LONG $0xd7710f66; BYTE $0x04               // psrlw    xmm7, 4
	LONG $0xe0d50f66                           // pmullw    xmm4, xmm0
	LONG $0xf1d50f66                           // pmullw    xmm6, xmm1
	LONG $0xf4fd0f66                           // paddw    xmm6, xmm4
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xd6710f66; BYTE $0x04               // psrlw    xmm6, 4
	LONG $0xfe670f66                           // packuswb    xmm7, xmm6
	LONG $0x3c7f0ff3; BYTE $0x16               // movdqu    [rsi + rdx], xmm7
	LONG $0x10c28348                           // add    rdx, 16
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394c; BYTE $0xfa                   // cmp    rdx, r15
	JB   LBB0_134
	LONG $0x244c8b48; BYTE $0xd0               // mov    rcx, qword -48[rsp] /* [rbp - 48] */
	WORD $0x0149; BYTE $0xcd                   // add    r13, rcx
	LONG $0x24740348; BYTE $0x78               // add    rsi, qword 120[rsp] /* [rbp + 80] */
	LONG $0x24748948; BYTE $0xb8               // mov    qword -72[rsp], rsi /* [rbp - 72] */
	WORD $0xff48; BYTE $0xc0                   // inc    rax
	WORD $0x0149; BYTE $0xc8                   // add    r8, rcx
	LONG $0x24443b48; BYTE $0xa8               // cmp    rax, qword -88[rsp] /* [rbp - 88] */
	JNE  LBB0_133
	JMP  LBB0_162

LBB0_140:
	WORD $0x894d; BYTE $0xec           // mov    r12, r13
	WORD $0x8949; BYTE $0xd5           // mov    r13, rdx
	LONG $0x247c8348; WORD $0x00a8     // cmp    qword -88[rsp], 0 /* [rbp - 88] */
	JE   LBB0_162
	WORD $0xfe83; BYTE $0x01           // cmp    esi, 1
	WORD $0x8948; BYTE $0xf8           // mov    rax, rdi
	LONG $0xffd08348                   // adc    rax, -1
	LONG $0x24b48b4c; LONG $0xfffffec8 // mov    r14, qword -312[rsp] /* [rbp - 312] */
	LONG $0x300c8d4a                   // lea    rcx, [rax + r14]
	LONG $0x24948b4c; LONG $0xfffffe90 // mov    r10, qword -368[rsp] /* [rbp - 368] */
	WORD $0x2944; BYTE $0xd1           // sub    ecx, r10d
	LONG $0x24548b48; BYTE $0x58       // mov    rdx, qword 88[rsp] /* [rbp + 48] */
	WORD $0xd129                       // sub    ecx, edx
	LONG $0x30448d4a; BYTE $0xff       // lea    rax, [rax + r14 - 1]
	WORD $0x294c; BYTE $0xd0           // sub    rax, r10
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	LONG $0x24448948; BYTE $0xc0       // mov    qword -64[rsp], rax /* [rbp - 64] */
	WORD $0xdb31                       // xor    ebx, ebx
	WORD $0xc1f6; BYTE $0x07           // test    cl, 7
	JE   LBB0_142
	WORD $0xf089                       // mov    eax, esi
	WORD $0xd8f7                       // neg    eax
	WORD $0xc019                       // sbb    eax, eax
	WORD $0xf801                       // add    eax, edi
	LONG $0x06048d41                   // lea    eax, [r14 + rax]
	WORD $0x2944; BYTE $0xd0           // sub    eax, r10d
	WORD $0xd029                       // sub    eax, edx
	WORD $0xe083; BYTE $0x07           // and    eax, 7
	LONG $0x24448948; BYTE $0xc8       // mov    qword -56[rsp], rax /* [rbp - 56] */
	WORD $0xdb31                       // xor    ebx, ebx
	LONG $0x24748b4c; BYTE $0xb8       // mov    r14, qword -72[rsp] /* [rbp - 72] */

LBB0_144:
	WORD $0x894c; BYTE $0xf7     // mov    rdi, r14
	WORD $0x894c; BYTE $0xee     // mov    rsi, r13
	WORD $0x894c; BYTE $0xfa     // mov    rdx, r15
	CALL gocvsimd·_memcpy(SB)
	LONG $0x246c034c; BYTE $0xd0 // add    r13, qword -48[rsp] /* [rbp - 48] */
	WORD $0x014d; BYTE $0xe6     // add    r14, r12
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x245c3948; BYTE $0xc8 // cmp    qword -56[rsp], rbx /* [rbp - 56] */
	JNE  LBB0_144
	JMP  LBB0_145

LBB0_117:
	WORD $0x3949; BYTE $0xc7           // cmp    r15, rax
	JE   LBB0_162
	WORD $0xdef7                       // neg    esi
	WORD $0x1948; BYTE $0xc0           // sbb    rax, rax
	WORD $0x0148; BYTE $0xc1           // add    rcx, rax
	LONG $0x248c0348; LONG $0xfffffec8 // add    rcx, qword -312[rsp] /* [rbp - 312] */
	LONG $0x248c2b48; LONG $0xfffffe90 // sub    rcx, qword -368[rsp] /* [rbp - 368] */
	LONG $0x24748b4c; BYTE $0x58       // mov    r14, qword 88[rsp] /* [rbp + 48] */
	WORD $0x294c; BYTE $0xf1           // sub    rcx, r14
	WORD $0xf889                       // mov    eax, edi
	LONG $0x24bc8b48; LONG $0xffffff40 // mov    rdi, qword -192[rsp] /* [rbp - 192] */
	WORD $0x8548; BYTE $0xff           // test    rdi, rdi
	LONG $0x000000be; BYTE $0x00       // mov    esi, 0
	LONG $0xf7490f48                   // cmovns    rsi, rdi
	LONG $0x247c8b4c; BYTE $0x60       // mov    r15, qword 96[rsp] /* [rbp + 56] */
	WORD $0x014c; BYTE $0xfe           // add    rsi, r15
	WORD $0xd8f7                       // neg    eax
	WORD $0x1948; BYTE $0xc0           // sbb    rax, rax
	LONG $0x24448948; BYTE $0xc8       // mov    qword -56[rsp], rax /* [rbp - 56] */
	WORD $0x0148; BYTE $0xc6           // add    rsi, rax
	LONG $0x248c8b4c; LONG $0xfffffec0 // mov    r9, qword -320[rsp] /* [rbp - 320] */
	LONG $0x31548d49; BYTE $0x01       // lea    rdx, [r9 + rsi + 1]
	WORD $0x014c; BYTE $0xce           // add    rsi, r9
	LONG $0x24848b4c; LONG $0xfffffe80 // mov    r8, qword -384[rsp] /* [rbp - 384] */
	WORD $0x294c; BYTE $0xc2           // sub    rdx, r8
	LONG $0xd2af0f49                   // imul    rdx, r10
	LONG $0x24ac8b4c; LONG $0xffffff48 // mov    r13, qword -184[rsp] /* [rbp - 184] */
	WORD $0x854d; BYTE $0xed           // test    r13, r13
	LONG $0x000000b8; BYTE $0x00       // mov    eax, 0
	LONG $0xc5490f49                   // cmovns    rax, r13
	LONG $0x06248d4d                   // lea    r12, [r14 + rax]
	LONG $0x065c8d49; BYTE $0x01       // lea    rbx, [r14 + rax + 1]
	LONG $0x24448b48; BYTE $0xd0       // mov    rax, qword -48[rsp] /* [rbp - 48] */
	LONG $0xd8af0f48                   // imul    rbx, rax
	WORD $0x294c; BYTE $0xc6           // sub    rsi, r8
	LONG $0xf2af0f49                   // imul    rsi, r10
	LONG $0x1a5c8d4c; BYTE $0xf0       // lea    r11, [rdx + rbx - 16]
	LONG $0x1e7c8d4c; BYTE $0xf0       // lea    r15, [rsi + rbx - 16]
	LONG $0xe0af0f4c                   // imul    r12, rax
	LONG $0x22548d4a; BYTE $0xf0       // lea    rdx, [rdx + r12 - 16]
	LONG $0x26748d4a; BYTE $0xf0       // lea    rsi, [rsi + r12 - 16]
	WORD $0xf748; BYTE $0xdf           // neg    rdi
	LONG $0x0000bc41; WORD $0x0000     // mov    r12d, 0
	LONG $0xfc480f49                   // cmovs    rdi, r12
	LONG $0x247c0348; BYTE $0x60       // add    rdi, qword 96[rsp] /* [rbp + 56] */
	LONG $0x247c0348; BYTE $0xc8       // add    rdi, qword -56[rsp] /* [rbp - 56] */
	WORD $0x014c; BYTE $0xcf           // add    rdi, r9
	WORD $0x294c; BYTE $0xc7           // sub    rdi, r8
	LONG $0x245c8b48; BYTE $0xa0       // mov    rbx, qword -96[rsp] /* [rbp - 96] */
	LONG $0xfaaf0f49                   // imul    rdi, r10
	WORD $0xf749; BYTE $0xdd           // neg    r13
	LONG $0xec480f4d                   // cmovs    r13, r12
	WORD $0x014d; BYTE $0xf5           // add    r13, r14
	LONG $0x6caf0f4c; WORD $0x7824     // imul    r13, qword 120[rsp] /* [rbp + 80] */
	WORD $0x0149; BYTE $0xfd           // add    r13, rdi
	LONG $0x247c8b48; BYTE $0x70       // mov    rdi, qword 112[rsp] /* [rbp + 72] */
	LONG $0x2f7c8d4a; BYTE $0xf0       // lea    rdi, [rdi + r13 - 16]
	LONG $0xef0f4566; BYTE $0xc9       // pxor    xmm9, xmm9
	LONG $0x6f0f4466; WORD $0x5045     // movdqa    xmm8, 80[rbp] /* [rip + LCPI0_6] */

LBB0_119:
	LONG $0x2c6f0ff3; BYTE $0x1e   // movdqu    xmm5, [rsi + rbx]
	LONG $0xd56f0f66               // movdqa    xmm2, xmm5
	LONG $0x600f4166; BYTE $0xd1   // punpcklbw    xmm2, xmm9
	LONG $0x680f4166; BYTE $0xe9   // punpckhbw    xmm5, xmm9
	LONG $0x3c6f0ff3; BYTE $0x1a   // movdqu    xmm7, [rdx + rbx]
	LONG $0xf76f0f66               // movdqa    xmm6, xmm7
	LONG $0x600f4166; BYTE $0xf1   // punpcklbw    xmm6, xmm9
	LONG $0x680f4166; BYTE $0xf9   // punpckhbw    xmm7, xmm9
	LONG $0x6f0f41f3; WORD $0x1f04 // movdqu    xmm0, [r15 + rbx]
	LONG $0xd86f0f66               // movdqa    xmm3, xmm0
	LONG $0x600f4166; BYTE $0xd9   // punpcklbw    xmm3, xmm9
	LONG $0x680f4166; BYTE $0xc1   // punpckhbw    xmm0, xmm9
	LONG $0x6f0f41f3; WORD $0x1b24 // movdqu    xmm4, [r11 + rbx]
	LONG $0xcc6f0f66               // movdqa    xmm1, xmm4
	LONG $0x600f4166; BYTE $0xc9   // punpcklbw    xmm1, xmm9
	LONG $0x680f4166; BYTE $0xe1   // punpckhbw    xmm4, xmm9
	LONG $0xd50f4166; BYTE $0xd2   // pmullw    xmm2, xmm10
	LONG $0xd50f4166; BYTE $0xf3   // pmullw    xmm6, xmm11
	LONG $0xd50f4166; BYTE $0xde   // pmullw    xmm3, xmm14
	LONG $0xd50f4166; BYTE $0xcf   // pmullw    xmm1, xmm15
	LONG $0xf2fd0f66               // paddw    xmm6, xmm2
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xf1fd0f66               // paddw    xmm6, xmm1
	LONG $0xfd0f4166; BYTE $0xf0   // paddw    xmm6, xmm8
	LONG $0xd6710f66; BYTE $0x08   // psrlw    xmm6, 8
	LONG $0xd50f4166; BYTE $0xea   // pmullw    xmm5, xmm10
	LONG $0xd50f4166; BYTE $0xfb   // pmullw    xmm7, xmm11
	LONG $0xd50f4166; BYTE $0xc6   // pmullw    xmm0, xmm14
	LONG $0xd50f4166; BYTE $0xe7   // pmullw    xmm4, xmm15
	LONG $0xfdfd0f66               // paddw    xmm7, xmm5
	LONG $0xf8fd0f66               // paddw    xmm7, xmm0
	LONG $0xfcfd0f66               // paddw    xmm7, xmm4
	LONG $0xfd0f4166; BYTE $0xf8   // paddw    xmm7, xmm8
	LONG $0xd7710f66; BYTE $0x08   // psrlw    xmm7, 8
	LONG $0xf7670f66               // packuswb    xmm6, xmm7
	LONG $0x377f0ff3               // movdqu    [rdi], xmm6
	WORD $0x0148; BYTE $0xc3       // add    rbx, rax
	LONG $0x247c0348; BYTE $0x78   // add    rdi, qword 120[rsp] /* [rbp + 80] */
	WORD $0xff48; BYTE $0xc9       // dec    rcx
	JNE  LBB0_119
	JMP  LBB0_162

LBB0_159:
	WORD $0x3949; BYTE $0xc7           // cmp    r15, rax
	JE   LBB0_162
	WORD $0xdef7                       // neg    esi
	WORD $0x1948; BYTE $0xc0           // sbb    rax, rax
	WORD $0x0148; BYTE $0xc7           // add    rdi, rax
	LONG $0x24bc0348; LONG $0xfffffec8 // add    rdi, qword -312[rsp] /* [rbp - 312] */
	LONG $0x24bc2b48; LONG $0xfffffe90 // sub    rdi, qword -368[rsp] /* [rbp - 368] */
	LONG $0x247c8b4c; BYTE $0x58       // mov    r15, qword 88[rsp] /* [rbp + 48] */
	WORD $0x294c; BYTE $0xff           // sub    rdi, r15
	WORD $0xc031                       // xor    eax, eax
	LONG $0x249c8b4c; LONG $0xffffff40 // mov    r11, qword -192[rsp] /* [rbp - 192] */
	WORD $0x854d; BYTE $0xdb           // test    r11, r11
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	LONG $0xd3490f49                   // cmovns    rdx, r11
	LONG $0x245c8b48; BYTE $0x60       // mov    rbx, qword 96[rsp] /* [rbp + 56] */
	WORD $0x0148; BYTE $0xda           // add    rdx, rbx
	WORD $0xf741; BYTE $0xd8           // neg    r8d
	WORD $0x194d; BYTE $0xd2           // sbb    r10, r10
	WORD $0x014c; BYTE $0xd2           // add    rdx, r10
	LONG $0x24848b4c; LONG $0xfffffec0 // mov    r8, qword -320[rsp] /* [rbp - 320] */
	LONG $0x104c8d49; BYTE $0x01       // lea    rcx, [r8 + rdx + 1]
	WORD $0x014c; BYTE $0xc2           // add    rdx, r8
	LONG $0x24a48b4c; LONG $0xfffffe80 // mov    r12, qword -384[rsp] /* [rbp - 384] */
	WORD $0x294c; BYTE $0xe1           // sub    rcx, r12
	LONG $0xc9af0f49                   // imul    rcx, r9
	LONG $0x249c8b48; LONG $0xffffff48 // mov    rbx, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xdb           // test    rbx, rbx
	LONG $0x000000be; BYTE $0x00       // mov    esi, 0
	LONG $0xf3490f48                   // cmovns    rsi, rbx
	WORD $0x014c; BYTE $0xfe           // add    rsi, r15
	LONG $0x74af0f48; WORD $0xd024     // imul    rsi, qword -48[rsp] /* [rbp - 48] */
	WORD $0x0148; BYTE $0xf1           // add    rcx, rsi
	WORD $0x294c; BYTE $0xe2           // sub    rdx, r12
	LONG $0xd1af0f49                   // imul    rdx, r9
	WORD $0x0148; BYTE $0xf2           // add    rdx, rsi
	LONG $0x0e4c8d49; BYTE $0xf0       // lea    rcx, [r14 + rcx - 16]
	LONG $0x16548d49; BYTE $0xf0       // lea    rdx, [r14 + rdx - 16]
	WORD $0xf749; BYTE $0xdb           // neg    r11
	LONG $0xd8480f4c                   // cmovs    r11, rax
	LONG $0x245c034c; BYTE $0x60       // add    r11, qword 96[rsp] /* [rbp + 56] */
	WORD $0x014d; BYTE $0xd3           // add    r11, r10
	WORD $0x014d; BYTE $0xc3           // add    r11, r8
	WORD $0x294d; BYTE $0xe3           // sub    r11, r12
	LONG $0xd9af0f4d                   // imul    r11, r9
	WORD $0xf748; BYTE $0xdb           // neg    rbx
	LONG $0xd8480f48                   // cmovs    rbx, rax
	WORD $0x014c; BYTE $0xfb           // add    rbx, r15
	LONG $0xddaf0f49                   // imul    rbx, r13
	WORD $0x014c; BYTE $0xdb           // add    rbx, r11
	LONG $0x24748b48; BYTE $0x70       // mov    rsi, qword 112[rsp] /* [rbp + 72] */
	LONG $0x1e748d48; BYTE $0xf0       // lea    rsi, [rsi + rbx - 16]
	LONG $0xd2ef0f66                   // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x40       // movdqa    xmm3, 64[rbp] /* [rip + LCPI0_5] */

LBB0_161:
	LONG $0x246f0ff3; BYTE $0x02 // movdqu    xmm4, [rdx + rax]
	LONG $0xec6f0f66             // movdqa    xmm5, xmm4
	LONG $0xea600f66             // punpcklbw    xmm5, xmm2
	LONG $0xe2680f66             // punpckhbw    xmm4, xmm2
	LONG $0x346f0ff3; BYTE $0x01 // movdqu    xmm6, [rcx + rax]
	LONG $0xfe6f0f66             // movdqa    xmm7, xmm6
	LONG $0xfa600f66             // punpcklbw    xmm7, xmm2
	LONG $0xf2680f66             // punpckhbw    xmm6, xmm2
	LONG $0xe8d50f66             // pmullw    xmm5, xmm0
	LONG $0xf9d50f66             // pmullw    xmm7, xmm1
	LONG $0xfdfd0f66             // paddw    xmm7, xmm5
	LONG $0xfbfd0f66             // paddw    xmm7, xmm3
	LONG $0xd7710f66; BYTE $0x04 // psrlw    xmm7, 4
	LONG $0xe0d50f66             // pmullw    xmm4, xmm0
	LONG $0xf1d50f66             // pmullw    xmm6, xmm1
	LONG $0xf4fd0f66             // paddw    xmm6, xmm4
	LONG $0xf3fd0f66             // paddw    xmm6, xmm3
	LONG $0xd6710f66; BYTE $0x04 // psrlw    xmm6, 4
	LONG $0xfe670f66             // packuswb    xmm7, xmm6
	LONG $0x3e7f0ff3             // movdqu    [rsi], xmm7
	LONG $0x24440348; BYTE $0xd0 // add    rax, qword -48[rsp] /* [rbp - 48] */
	WORD $0x014c; BYTE $0xee     // add    rsi, r13
	WORD $0xff48; BYTE $0xcf     // dec    rdi
	JNE  LBB0_161
	JMP  LBB0_162

LBB0_136:
	WORD $0x3949; BYTE $0xc7           // cmp    r15, rax
	JE   LBB0_162
	WORD $0xdef7                       // neg    esi
	WORD $0x1948; BYTE $0xc0           // sbb    rax, rax
	WORD $0x0148; BYTE $0xc1           // add    rcx, rax
	LONG $0x248c0348; LONG $0xfffffec8 // add    rcx, qword -312[rsp] /* [rbp - 312] */
	LONG $0x248c2b48; LONG $0xfffffe90 // sub    rcx, qword -368[rsp] /* [rbp - 368] */
	LONG $0x24748b48; BYTE $0x58       // mov    rsi, qword 88[rsp] /* [rbp + 48] */
	WORD $0x8949; BYTE $0xf6           // mov    r14, rsi
	WORD $0x294c; BYTE $0xf1           // sub    rcx, r14
	WORD $0xc031                       // xor    eax, eax
	LONG $0x24b48b48; LONG $0xffffff40 // mov    rsi, qword -192[rsp] /* [rbp - 192] */
	WORD $0x8548; BYTE $0xf6           // test    rsi, rsi
	LONG $0x000000bb; BYTE $0x00       // mov    ebx, 0
	LONG $0xde490f48                   // cmovns    rbx, rsi
	LONG $0x24548b48; BYTE $0x60       // mov    rdx, qword 96[rsp] /* [rbp + 56] */
	WORD $0x0148; BYTE $0xd3           // add    rbx, rdx
	WORD $0xdff7                       // neg    edi
	WORD $0x194d; BYTE $0xff           // sbb    r15, r15
	WORD $0x014c; BYTE $0xfb           // add    rbx, r15
	LONG $0x24948b48; LONG $0xfffffec0 // mov    rdx, qword -320[rsp] /* [rbp - 320] */
	WORD $0x8949; BYTE $0xd5           // mov    r13, rdx
	WORD $0x014c; BYTE $0xeb           // add    rbx, r13
	LONG $0x24a48b4c; LONG $0xfffffe80 // mov    r12, qword -384[rsp] /* [rbp - 384] */
	WORD $0x294c; BYTE $0xe3           // sub    rbx, r12
	WORD $0x894d; BYTE $0xd1           // mov    r9, r10
	LONG $0xd9af0f49                   // imul    rbx, r9
	LONG $0x249c8b4c; LONG $0xffffff48 // mov    r11, qword -184[rsp] /* [rbp - 184] */
	WORD $0x854d; BYTE $0xdb           // test    r11, r11
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	LONG $0xd3490f49                   // cmovns    rdx, r11
	LONG $0x16148d4d                   // lea    r10, [r14 + rdx]
	LONG $0x16548d49; BYTE $0x01       // lea    rdx, [r14 + rdx + 1]
	LONG $0x247c8b48; BYTE $0xd0       // mov    rdi, qword -48[rsp] /* [rbp - 48] */
	LONG $0xd7af0f48                   // imul    rdx, rdi
	WORD $0x0148; BYTE $0xda           // add    rdx, rbx
	LONG $0xd7af0f4c                   // imul    r10, rdi
	WORD $0x0149; BYTE $0xda           // add    r10, rbx
	LONG $0x105c8d49; BYTE $0xf0       // lea    rbx, [r8 + rdx - 16]
	LONG $0x10548d4b; BYTE $0xf0       // lea    rdx, [r8 + r10 - 16]
	WORD $0xf748; BYTE $0xde           // neg    rsi
	LONG $0xf0480f48                   // cmovs    rsi, rax
	LONG $0x24740348; BYTE $0x60       // add    rsi, qword 96[rsp] /* [rbp + 56] */
	WORD $0x014c; BYTE $0xfe           // add    rsi, r15
	WORD $0x014c; BYTE $0xee           // add    rsi, r13
	WORD $0x294c; BYTE $0xe6           // sub    rsi, r12
	LONG $0xf1af0f49                   // imul    rsi, r9
	WORD $0xf749; BYTE $0xdb           // neg    r11
	LONG $0xd8480f4c                   // cmovs    r11, rax
	WORD $0x014d; BYTE $0xf3           // add    r11, r14
	LONG $0x5caf0f4c; WORD $0x7824     // imul    r11, qword 120[rsp] /* [rbp + 80] */
	WORD $0x0149; BYTE $0xf3           // add    r11, rsi
	LONG $0x24748b48; BYTE $0x70       // mov    rsi, qword 112[rsp] /* [rbp + 72] */
	LONG $0x1e748d4a; BYTE $0xf0       // lea    rsi, [rsi + r11 - 16]
	LONG $0xd2ef0f66                   // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x40       // movdqa    xmm3, 64[rbp] /* [rip + LCPI0_5] */

LBB0_138:
	LONG $0x246f0ff3; BYTE $0x02 // movdqu    xmm4, [rdx + rax]
	LONG $0xec6f0f66             // movdqa    xmm5, xmm4
	LONG $0xea600f66             // punpcklbw    xmm5, xmm2
	LONG $0xe2680f66             // punpckhbw    xmm4, xmm2
	LONG $0x346f0ff3; BYTE $0x03 // movdqu    xmm6, [rbx + rax]
	LONG $0xfe6f0f66             // movdqa    xmm7, xmm6
	LONG $0xfa600f66             // punpcklbw    xmm7, xmm2
	LONG $0xf2680f66             // punpckhbw    xmm6, xmm2
	LONG $0xe8d50f66             // pmullw    xmm5, xmm0
	LONG $0xf9d50f66             // pmullw    xmm7, xmm1
	LONG $0xfdfd0f66             // paddw    xmm7, xmm5
	LONG $0xfbfd0f66             // paddw    xmm7, xmm3
	LONG $0xd7710f66; BYTE $0x04 // psrlw    xmm7, 4
	LONG $0xe0d50f66             // pmullw    xmm4, xmm0
	LONG $0xf1d50f66             // pmullw    xmm6, xmm1
	LONG $0xf4fd0f66             // paddw    xmm6, xmm4
	LONG $0xf3fd0f66             // paddw    xmm6, xmm3
	LONG $0xd6710f66; BYTE $0x04 // psrlw    xmm6, 4
	LONG $0xfe670f66             // packuswb    xmm7, xmm6
	LONG $0x3e7f0ff3             // movdqu    [rsi], xmm7
	WORD $0x0148; BYTE $0xf8     // add    rax, rdi
	LONG $0x24740348; BYTE $0x78 // add    rsi, qword 120[rsp] /* [rbp + 80] */
	WORD $0xff48; BYTE $0xc9     // dec    rcx
	JNE  LBB0_138
	JMP  LBB0_162

LBB0_151:
	WORD $0x894d; BYTE $0xf8           // mov    r8, r15
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24bc8b48; LONG $0xffffff40 // mov    rdi, qword -192[rsp] /* [rbp - 192] */
	WORD $0x8548; BYTE $0xff           // test    rdi, rdi
	LONG $0xf9480f48                   // cmovs    rdi, rcx
	LONG $0x24548b48; BYTE $0x50       // mov    rdx, qword 80[rsp] /* [rbp + 40] */
	LONG $0x3a548d48; BYTE $0x01       // lea    rdx, [rdx + rdi + 1]
	LONG $0xd1af0f49                   // imul    rdx, r9
	LONG $0x24bc8b48; LONG $0xffffff48 // mov    rdi, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xff           // test    rdi, rdi
	LONG $0xf9480f48                   // cmovs    rdi, rcx
	WORD $0x0148; BYTE $0xfe           // add    rsi, rdi
	LONG $0x74af0f48; WORD $0xd024     // imul    rsi, qword -48[rsp] /* [rbp - 48] */
	WORD $0x0148; BYTE $0xd6           // add    rsi, rdx
	WORD $0x0149; BYTE $0xf6           // add    r14, rsi
	LONG $0xd2ef0f66                   // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x40       // movdqa    xmm3, 64[rbp] /* [rip + LCPI0_5] */

LBB0_152:
	WORD $0x894c; BYTE $0xf2     // mov    rdx, r14
	WORD $0xf631                 // xor    esi, esi
	LONG $0x247c8b48; BYTE $0xb8 // mov    rdi, qword -72[rsp] /* [rbp - 72] */

LBB0_153:
	LONG $0x246f0ff3; BYTE $0x33               // movdqu    xmm4, [rbx + rsi]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0x326f0ff3                           // movdqu    xmm6, [rdx]
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xe8d50f66                           // pmullw    xmm5, xmm0
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfdfd0f66                           // paddw    xmm7, xmm5
	LONG $0xfbfd0f66                           // paddw    xmm7, xmm3
	LONG $0xd7710f66; BYTE $0x04               // psrlw    xmm7, 4
	LONG $0xe0d50f66                           // pmullw    xmm4, xmm0
	LONG $0xf1d50f66                           // pmullw    xmm6, xmm1
	LONG $0xf4fd0f66                           // paddw    xmm6, xmm4
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xd6710f66; BYTE $0x04               // psrlw    xmm6, 4
	LONG $0xfe670f66                           // packuswb    xmm7, xmm6
	LONG $0x3c7f0ff3; BYTE $0x37               // movdqu    [rdi + rsi], xmm7
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JB   LBB0_153
	LONG $0x03148d4a                           // lea    rdx, [rbx + r8]
	LONG $0x6f0f42f3; WORD $0x0364; BYTE $0xf0 // movdqu    xmm4, [rbx + r8 - 16]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0x6f0f41f3; WORD $0x1174; BYTE $0xf0 // movdqu    xmm6, [r9 + rdx - 16]
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xe8d50f66                           // pmullw    xmm5, xmm0
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfdfd0f66                           // paddw    xmm7, xmm5
	LONG $0xfbfd0f66                           // paddw    xmm7, xmm3
	LONG $0xd7710f66; BYTE $0x04               // psrlw    xmm7, 4
	LONG $0xe0d50f66                           // pmullw    xmm4, xmm0
	LONG $0xf1d50f66                           // pmullw    xmm6, xmm1
	LONG $0xf4fd0f66                           // paddw    xmm6, xmm4
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xd6710f66; BYTE $0x04               // psrlw    xmm6, 4
	LONG $0xfe670f66                           // packuswb    xmm7, xmm6
	LONG $0x7f0f42f3; WORD $0x077c; BYTE $0xf0 // movdqu    [rdi + r8 - 16], xmm7
	LONG $0x24548b48; BYTE $0xd0               // mov    rdx, qword -48[rsp] /* [rbp - 48] */
	WORD $0x0148; BYTE $0xd3                   // add    rbx, rdx
	WORD $0x014c; BYTE $0xef                   // add    rdi, r13
	LONG $0x247c8948; BYTE $0xb8               // mov    qword -72[rsp], rdi /* [rbp - 72] */
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	WORD $0x0149; BYTE $0xd6                   // add    r14, rdx
	LONG $0x244c3b48; BYTE $0xa8               // cmp    rcx, qword -88[rsp] /* [rbp - 88] */
	JNE  LBB0_152
	JMP  LBB0_162

LBB0_128:
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24b48b48; LONG $0xffffff48 // mov    rsi, qword -184[rsp] /* [rbp - 184] */
	WORD $0x8548; BYTE $0xf6           // test    rsi, rsi
	LONG $0xf1480f48                   // cmovs    rsi, rcx
	LONG $0x32548d48; BYTE $0x01       // lea    rdx, [rdx + rsi + 1]
	LONG $0x54af0f48; WORD $0xd024     // imul    rdx, qword -48[rsp] /* [rbp - 48] */
	LONG $0x24bc8b48; LONG $0xffffff40 // mov    rdi, qword -192[rsp] /* [rbp - 192] */
	WORD $0x8548; BYTE $0xff           // test    rdi, rdi
	LONG $0xf9480f48                   // cmovs    rdi, rcx
	LONG $0x24748b48; BYTE $0x50       // mov    rsi, qword 80[rsp] /* [rbp + 40] */
	WORD $0x0148; BYTE $0xfe           // add    rsi, rdi
	LONG $0xd6af0f4c                   // imul    r10, rsi
	WORD $0x0149; BYTE $0xd2           // add    r10, rdx
	WORD $0x014d; BYTE $0xd0           // add    r8, r10
	LONG $0xd2ef0f66                   // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x40       // movdqa    xmm3, 64[rbp] /* [rip + LCPI0_5] */

LBB0_129:
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	WORD $0xf631                 // xor    esi, esi
	LONG $0x247c8b48; BYTE $0xb8 // mov    rdi, qword -72[rsp] /* [rbp - 72] */

LBB0_130:
	LONG $0x6f0f41f3; WORD $0x3564; BYTE $0x00 // movdqu    xmm4, [r13 + rsi]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0x326f0ff3                           // movdqu    xmm6, [rdx]
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xe8d50f66                           // pmullw    xmm5, xmm0
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfdfd0f66                           // paddw    xmm7, xmm5
	LONG $0xfbfd0f66                           // paddw    xmm7, xmm3
	LONG $0xd7710f66; BYTE $0x04               // psrlw    xmm7, 4
	LONG $0xe0d50f66                           // pmullw    xmm4, xmm0
	LONG $0xf1d50f66                           // pmullw    xmm6, xmm1
	LONG $0xf4fd0f66                           // paddw    xmm6, xmm4
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xd6710f66; BYTE $0x04               // psrlw    xmm6, 4
	LONG $0xfe670f66                           // packuswb    xmm7, xmm6
	LONG $0x3c7f0ff3; BYTE $0x37               // movdqu    [rdi + rsi], xmm7
	LONG $0x10c68348                           // add    rsi, 16
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x3948; BYTE $0xc6                   // cmp    rsi, rax
	JB   LBB0_130
	LONG $0x3d548d4b; BYTE $0x00               // lea    rdx, [r13 + r15]
	LONG $0x6f0f43f3; WORD $0x3d64; BYTE $0xf0 // movdqu    xmm4, [r13 + r15 - 16]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0x24748b48; BYTE $0xd0               // mov    rsi, qword -48[rsp] /* [rbp - 48] */
	LONG $0x746f0ff3; WORD $0xf016             // movdqu    xmm6, [rsi + rdx - 16]
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xe8d50f66                           // pmullw    xmm5, xmm0
	LONG $0xf9d50f66                           // pmullw    xmm7, xmm1
	LONG $0xfdfd0f66                           // paddw    xmm7, xmm5
	LONG $0xfbfd0f66                           // paddw    xmm7, xmm3
	LONG $0xd7710f66; BYTE $0x04               // psrlw    xmm7, 4
	LONG $0xe0d50f66                           // pmullw    xmm4, xmm0
	LONG $0xf1d50f66                           // pmullw    xmm6, xmm1
	LONG $0xf4fd0f66                           // paddw    xmm6, xmm4
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xd6710f66; BYTE $0x04               // psrlw    xmm6, 4
	LONG $0xfe670f66                           // packuswb    xmm7, xmm6
	LONG $0x7f0f42f3; WORD $0x3f7c; BYTE $0xf0 // movdqu    [rdi + r15 - 16], xmm7
	WORD $0x0149; BYTE $0xf5                   // add    r13, rsi
	LONG $0x247c0348; BYTE $0x78               // add    rdi, qword 120[rsp] /* [rbp + 80] */
	LONG $0x247c8948; BYTE $0xb8               // mov    qword -72[rsp], rdi /* [rbp - 72] */
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	WORD $0x0149; BYTE $0xf0                   // add    r8, rsi
	LONG $0x244c3b48; BYTE $0xa8               // cmp    rcx, qword -88[rsp] /* [rbp - 88] */
	JNE  LBB0_129
	JMP  LBB0_162

LBB0_142:
	LONG $0x24748b4c; BYTE $0xb8 // mov    r14, qword -72[rsp] /* [rbp - 72] */

LBB0_145:
	LONG $0x24bc894c; LONG $0xffffff60         // mov    qword -160[rsp], r15 /* [rbp - 160] */
	WORD $0x894d; BYTE $0xe7                   // mov    r15, r12
	WORD $0x894c; BYTE $0xf2                   // mov    rdx, r14
	LONG $0x247c8348; WORD $0x07c0             // cmp    qword -64[rsp], 7 /* [rbp - 64] */
	LONG $0x24748b4c; BYTE $0xd0               // mov    r14, qword -48[rsp] /* [rbp - 48] */
	LONG $0x244c8b48; BYTE $0x68               // mov    rcx, qword 104[rsp] /* [rbp + 64] */
	LONG $0x2424848b; WORD $0xffff; BYTE $0xff // mov    eax, dword -220[rsp] /* [rbp - 220] */
	JB   LBB0_162
	WORD $0xd8f7                               // neg    eax
	WORD $0x1948; BYTE $0xc0                   // sbb    rax, rax
	WORD $0x0148; BYTE $0xc1                   // add    rcx, rax
	LONG $0x248c0348; LONG $0xfffffec8         // add    rcx, qword -312[rsp] /* [rbp - 312] */
	LONG $0x248c2b48; LONG $0xfffffe90         // sub    rcx, qword -368[rsp] /* [rbp - 368] */
	WORD $0x2948; BYTE $0xd9                   // sub    rcx, rbx
	LONG $0x244c2b48; BYTE $0x58               // sub    rcx, qword 88[rsp] /* [rbp + 48] */

LBB0_147:
	LONG $0x248c8948; LONG $0xfffffeb8 // mov    qword -328[rsp], rcx /* [rbp - 328] */
	WORD $0x8948; BYTE $0xd3           // mov    rbx, rdx
	WORD $0x8948; BYTE $0xdf           // mov    rdi, rbx
	WORD $0x894d; BYTE $0xec           // mov    r12, r13
	WORD $0x894c; BYTE $0xe6           // mov    rsi, r12
	LONG $0x24ac8b4c; LONG $0xffffff60 // mov    r13, qword -160[rsp] /* [rbp - 160] */
	WORD $0x894c; BYTE $0xea           // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	WORD $0x014c; BYTE $0xfb           // add    rbx, r15
	WORD $0x014d; BYTE $0xf4           // add    r12, r14
	WORD $0x8948; BYTE $0xdf           // mov    rdi, rbx
	WORD $0x894c; BYTE $0xe6           // mov    rsi, r12
	WORD $0x894c; BYTE $0xea           // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	WORD $0x014c; BYTE $0xfb           // add    rbx, r15
	WORD $0x014d; BYTE $0xf4           // add    r12, r14
	WORD $0x8948; BYTE $0xdf           // mov    rdi, rbx
	WORD $0x894c; BYTE $0xe6           // mov    rsi, r12
	WORD $0x894c; BYTE $0xea           // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	WORD $0x014c; BYTE $0xfb           // add    rbx, r15
	WORD $0x014d; BYTE $0xf4           // add    r12, r14
	WORD $0x8948; BYTE $0xdf           // mov    rdi, rbx
	WORD $0x894c; BYTE $0xe6           // mov    rsi, r12
	WORD $0x894c; BYTE $0xea           // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	WORD $0x014c; BYTE $0xfb           // add    rbx, r15
	WORD $0x014d; BYTE $0xf4           // add    r12, r14
	WORD $0x8948; BYTE $0xdf           // mov    rdi, rbx
	WORD $0x894c; BYTE $0xe6           // mov    rsi, r12
	WORD $0x894c; BYTE $0xea           // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	WORD $0x014c; BYTE $0xfb           // add    rbx, r15
	WORD $0x014d; BYTE $0xf4           // add    r12, r14
	WORD $0x8948; BYTE $0xdf           // mov    rdi, rbx
	WORD $0x894c; BYTE $0xe6           // mov    rsi, r12
	WORD $0x894c; BYTE $0xea           // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	WORD $0x014c; BYTE $0xfb           // add    rbx, r15
	WORD $0x014d; BYTE $0xf4           // add    r12, r14
	WORD $0x8948; BYTE $0xdf           // mov    rdi, rbx
	WORD $0x894c; BYTE $0xe6           // mov    rsi, r12
	WORD $0x894c; BYTE $0xea           // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	WORD $0x014c; BYTE $0xfb           // add    rbx, r15
	WORD $0x014d; BYTE $0xf4           // add    r12, r14
	WORD $0x8948; BYTE $0xdf           // mov    rdi, rbx
	WORD $0x894c; BYTE $0xe6           // mov    rsi, r12
	WORD $0x894c; BYTE $0xea           // mov    rdx, r13
	CALL gocvsimd·_memcpy(SB)
	LONG $0x248c8b48; LONG $0xfffffeb8 // mov    rcx, qword -328[rsp] /* [rbp - 328] */
	WORD $0x014c; BYTE $0xfb           // add    rbx, r15
	WORD $0x8948; BYTE $0xda           // mov    rdx, rbx
	WORD $0x014d; BYTE $0xf4           // add    r12, r14
	WORD $0x894d; BYTE $0xe5           // mov    r13, r12
	LONG $0xf8c18348                   // add    rcx, -8
	JNE  LBB0_147

LBB0_162:
	ADDQ $360, SP
	RET
