//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_SimdSse2AbsSecondDerivativeHistogram(SB), 7, $200-64

	MOVQ SP, BP
	ANDQ $-16, BP
	SUBQ $96, BP
	MOVQ SP, -32(BP)
	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	MOVQ SP, BP
	ANDQ $-16, SP
	SUBQ $96, SP

	LONG $0x244c894c; BYTE $0x20   // mov    qword [rsp + 32], r9
	LONG $0x2404894c               // mov    qword [rsp], r8
	LONG $0x244c8948; BYTE $0x38   // mov    qword [rsp + 56], rcx
	WORD $0x8949; BYTE $0xd5       // mov    r13, rdx
	WORD $0x8949; BYTE $0xf6       // mov    r14, rsi
	WORD $0x8948; BYTE $0xfb       // mov    rbx, rdi
	LONG $0x184d8b48               // mov    rcx, qword [rbp + 24]
	WORD $0x8949; BYTE $0xdf       // mov    r15, rbx
	LONG $0xf0e78349               // and    r15, -16
	LONG $0x0f468d49               // lea    rax, [r14 + 15]
	LONG $0xf0e08348               // and    rax, -16
	LONG $0x24448948; BYTE $0x40   // mov    qword [rsp + 64], rax
	LONG $0x01248d4c               // lea    r12, [rcx + rax]
	WORD $0xf631                   // xor    esi, esi
	LONG $0x001000ba; BYTE $0x00   // mov    edx, 4096
	WORD $0x894c; BYTE $0xe7       // mov    rdi, r12
//	CALL clib·_memset(SB)
	LONG $0x247c8b48; BYTE $0x20   // mov    rdi, qword [rsp + 32]
	LONG $0x24548b48; BYTE $0x38   // mov    rdx, qword [rsp + 56]
	LONG $0x18458b48               // mov    rax, qword [rbp + 24]
	LONG $0x38048d4c               // lea    r8, [rax + rdi]
	LONG $0x3f0c8d48               // lea    rcx, [rdi + rdi]
	WORD $0x2949; BYTE $0xcd       // sub    r13, rcx
	LONG $0x246c894c; BYTE $0x28   // mov    qword [rsp + 40], r13
	WORD $0x894d; BYTE $0xf2       // mov    r10, r14
	WORD $0x2949; BYTE $0xce       // sub    r14, rcx
	LONG $0x2474894c; BYTE $0x50   // mov    qword [rsp + 80], r14
	LONG $0x384c8d4c; BYTE $0x0f   // lea    r9, [rax + rdi + 15]
	LONG $0xf0e18349               // and    r9, -16
	WORD $0x294d; BYTE $0xc1       // sub    r9, r8
	WORD $0x894d; BYTE $0xf5       // mov    r13, r14
	WORD $0x294d; BYTE $0xcd       // sub    r13, r9
	LONG $0xf0e58349               // and    r13, -16
	WORD $0x014d; BYTE $0xcd       // add    r13, r9
	LONG $0x24048b48               // mov    rax, qword [rsp]
	LONG $0xc2af0f48               // imul    rax, rdx
	LONG $0x24448948; BYTE $0x08   // mov    qword [rsp + 8], rax
	LONG $0xfce68349               // and    r14, -4
	WORD $0x3949; BYTE $0xdf       // cmp    r15, rbx
	LONG $0x244c894c; BYTE $0x48   // mov    qword [rsp + 72], r9
	JNE  LBB0_25
	WORD $0x8948; BYTE $0xd0       // mov    rax, rdx
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xd0       // cmp    rax, rdx
	JNE  LBB0_25
	LONG $0x247c8348; WORD $0x0028 // cmp    qword [rsp + 40], 0
	JE   LBB0_3
	LONG $0x01428d48               // lea    rax, [rdx + 1]
	LONG $0xc7af0f48               // imul    rax, rdi
	WORD $0x0148; BYTE $0xc3       // add    rbx, rax
	LONG $0x24048b48               // mov    rax, qword [rsp]
	WORD $0xf748; BYTE $0xd8       // neg    rax
	LONG $0x24448948; BYTE $0x18   // mov    qword [rsp + 24], rax
	LONG $0x24448b48; BYTE $0x08   // mov    rax, qword [rsp + 8]
	WORD $0xf748; BYTE $0xd8       // neg    rax
	LONG $0x24448948; BYTE $0x10   // mov    qword [rsp + 16], rax
	WORD $0x894c; BYTE $0xd6       // mov    rsi, r10
	WORD $0xff48; BYTE $0xce       // dec    rsi
	WORD $0x2948; BYTE $0xce       // sub    rsi, rcx
	LONG $0x24748948; BYTE $0x30   // mov    qword [rsp + 48], rsi
	LONG $0x18458b48               // mov    rax, qword [rbp + 24]
	LONG $0x38548d48; BYTE $0x03   // lea    rdx, [rax + rdi + 3]
	WORD $0xc031                   // xor    eax, eax

LBB0_6:
	LONG $0x24448948; BYTE $0x20 // mov    qword [rsp + 32], rax
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000bf; BYTE $0x00 // mov    edi, 0
	JE   LBB0_8
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x046f0ff3; BYTE $0x03 // movdqu    xmm0, [rbx + rax]
	LONG $0x0b6f0ff3             // movdqu    xmm1, [rbx]
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0x146f0ff3; BYTE $0x03 // movdqu    xmm2, [rbx + rax]
	LONG $0xd0e00f66             // pavgb    xmm2, xmm0
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xc1de0f66             // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66             // pminub    xmm2, xmm1
	LONG $0xc2f80f66             // psubb    xmm0, xmm2
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x146f0ff3; BYTE $0x03 // movdqu    xmm2, [rbx + rax]
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x1c6f0ff3; BYTE $0x03 // movdqu    xmm3, [rbx + rax]
	LONG $0xdae00f66             // pavgb    xmm3, xmm2
	LONG $0xd36f0f66             // movdqa    xmm2, xmm3
	LONG $0xd1de0f66             // pmaxub    xmm2, xmm1
	LONG $0xd9da0f66             // pminub    xmm3, xmm1
	LONG $0xd3f80f66             // psubb    xmm2, xmm3
	LONG $0xd0de0f66             // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; BYTE $0x10 // movdqu    [r8], xmm2
	WORD $0x894c; BYTE $0xcf     // mov    rdi, r9

LBB0_8:
	WORD $0x394c; BYTE $0xef     // cmp    rdi, r13
	JGE  LBB0_11
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x383c8d4c             // lea    r15, [rax + rdi]
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x381c8d4c             // lea    r11, [rax + rdi]
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0x380c8d4c             // lea    r9, [rax + rdi]
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x38148d4c             // lea    r10, [rax + rdi]
	WORD $0xc031                 // xor    eax, eax

LBB0_10:
	WORD $0x894c; BYTE $0xc1       // mov    rcx, r8
	LONG $0x02048d4d               // lea    r8, [r10 + rax]
	LONG $0x6f0f42f3; WORD $0x0304 // movdqu    xmm0, [rbx + r8]
	WORD $0x8949; BYTE $0xc8       // mov    r8, rcx
	LONG $0x07348d48               // lea    rsi, [rdi + rax]
	LONG $0x0c6f0f66; BYTE $0x33   // movdqa    xmm1, [rbx + rsi]
	LONG $0x010c8d49               // lea    rcx, [r9 + rax]
	LONG $0x146f0ff3; BYTE $0x0b   // movdqu    xmm2, [rbx + rcx]
	LONG $0xd0e00f66               // pavgb    xmm2, xmm0
	LONG $0xc26f0f66               // movdqa    xmm0, xmm2
	LONG $0xc1de0f66               // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66               // pminub    xmm2, xmm1
	LONG $0xc2f80f66               // psubb    xmm0, xmm2
	LONG $0x030c8d49               // lea    rcx, [r11 + rax]
	LONG $0x146f0f66; BYTE $0x0b   // movdqa    xmm2, [rbx + rcx]
	LONG $0x070c8d49               // lea    rcx, [r15 + rax]
	LONG $0x14e00f66; BYTE $0x0b   // pavgb    xmm2, [rbx + rcx]
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xd9de0f66               // pmaxub    xmm3, xmm1
	LONG $0xd1da0f66               // pminub    xmm2, xmm1
	LONG $0xdaf80f66               // psubb    xmm3, xmm2
	LONG $0xd8de0f66               // pmaxub    xmm3, xmm0
	LONG $0x7f0f4166; WORD $0x301c // movdqa    [r8 + rsi], xmm3
	LONG $0x074c8d48; BYTE $0x10   // lea    rcx, [rdi + rax + 16]
	LONG $0x10c08348               // add    rax, 16
	WORD $0x394c; BYTE $0xe9       // cmp    rcx, r13
	JL   LBB0_10

LBB0_11:
	LONG $0x24748b48; BYTE $0x50               // mov    rsi, qword [rsp + 80]
	WORD $0x394c; BYTE $0xee                   // cmp    rsi, r13
	JE   LBB0_13
	LONG $0x33048d48                           // lea    rax, [rbx + rsi]
	LONG $0x244c8b48; BYTE $0x18               // mov    rcx, qword [rsp + 24]
	LONG $0x446f0ff3; WORD $0xf001             // movdqu    xmm0, [rcx + rax - 16]
	LONG $0x4c6f0ff3; WORD $0xf033             // movdqu    xmm1, [rbx + rsi - 16]
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0x546f0ff3; WORD $0xf001             // movdqu    xmm2, [rcx + rax - 16]
	LONG $0xd0e00f66                           // pavgb    xmm2, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x244c8b48; BYTE $0x10               // mov    rcx, qword [rsp + 16]
	LONG $0x546f0ff3; WORD $0xf001             // movdqu    xmm2, [rcx + rax - 16]
	LONG $0x244c8b48; BYTE $0x08               // mov    rcx, qword [rsp + 8]
	LONG $0x5c6f0ff3; WORD $0xf001             // movdqu    xmm3, [rcx + rax - 16]
	LONG $0xdae00f66                           // pavgb    xmm3, xmm2
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xd3f80f66                           // psubb    xmm2, xmm3
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0xf0 // movdqu    [r8 + rsi - 16], xmm2

LBB0_13:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bf; BYTE $0x00 // mov    edi, 0
	LONG $0x244c8b4c; BYTE $0x48 // mov    r9, qword [rsp + 72]
	JE   LBB0_17
	WORD $0xc031                 // xor    eax, eax

LBB0_15:
	LONG $0x024cb60f; BYTE $0xfd       // movzx    ecx, byte [rdx + rax - 3]
	LONG $0x8c04ff41                   // inc    dword [r12 + 4*rcx]
	LONG $0x024cb60f; BYTE $0xfe       // movzx    ecx, byte [rdx + rax - 2]
	LONG $0x8c84ff41; LONG $0x00000400 // inc    dword [r12 + 4*rcx + 1024]
	LONG $0x024cb60f; BYTE $0xff       // movzx    ecx, byte [rdx + rax - 1]
	LONG $0x8c84ff41; LONG $0x00000800 // inc    dword [r12 + 4*rcx + 2048]
	LONG $0x020cb60f                   // movzx    ecx, byte [rdx + rax]
	LONG $0x8c84ff41; LONG $0x00000c00 // inc    dword [r12 + 4*rcx + 3072]
	LONG $0x04c08348                   // add    rax, 4
	WORD $0x394c; BYTE $0xf0           // cmp    rax, r14
	JB   LBB0_15
	WORD $0x894c; BYTE $0xf7           // mov    rdi, r14

LBB0_17:
	WORD $0x3948; BYTE $0xf7     // cmp    rdi, rsi
	JAE  LBB0_24
	WORD $0x8941; BYTE $0xf7     // mov    r15d, esi
	WORD $0x2941; BYTE $0xff     // sub    r15d, edi
	LONG $0x24448b48; BYTE $0x30 // mov    rax, qword [rsp + 48]
	WORD $0x2948; BYTE $0xf8     // sub    rax, rdi
	LONG $0x03e78341             // and    r15d, 3
	LONG $0x03f88348             // cmp    rax, 3
	JB   LBB0_21
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	WORD $0x294c; BYTE $0xf8     // sub    rax, r15

LBB0_20:
	LONG $0x3a4cb60f; BYTE $0xfd // movzx    ecx, byte [rdx + rdi - 3]
	LONG $0x8c04ff41             // inc    dword [r12 + 4*rcx]
	LONG $0x3a4cb60f; BYTE $0xfe // movzx    ecx, byte [rdx + rdi - 2]
	LONG $0x8c04ff41             // inc    dword [r12 + 4*rcx]
	LONG $0x3a4cb60f; BYTE $0xff // movzx    ecx, byte [rdx + rdi - 1]
	LONG $0x8c04ff41             // inc    dword [r12 + 4*rcx]
	LONG $0x3a0cb60f             // movzx    ecx, byte [rdx + rdi]
	LONG $0x8c04ff41             // inc    dword [r12 + 4*rcx]
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xf8     // cmp    rax, rdi
	JNE  LBB0_20

LBB0_21:
	WORD $0x854d; BYTE $0xff // test    r15, r15
	JE   LBB0_24
	WORD $0x014c; BYTE $0xc7 // add    rdi, r8
	WORD $0xf749; BYTE $0xdf // neg    r15

LBB0_23:
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	LONG $0x8404ff41         // inc    dword [r12 + 4*rax]
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0xff49; BYTE $0xc7 // inc    r15
	JNE  LBB0_23

LBB0_24:
	LONG $0x245c0348; BYTE $0x38 // add    rbx, qword [rsp + 56]
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	WORD $0xff48; BYTE $0xc0     // inc    rax
	LONG $0x24443b48; BYTE $0x28 // cmp    rax, qword [rsp + 40]
	JNE  LBB0_6

LBB0_3:
	LONG $0x18458b48                   // mov    rax, qword [rbp + 24]
	LONG $0x244c8b48; BYTE $0x40       // mov    rcx, qword [rsp + 64]
	LONG $0x08848d48; LONG $0x00000c10 // lea    rax, [rax + rcx + 3088]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x10558b48                   // mov    rdx, qword [rbp + 16]

LBB0_4:
	LONG $0x846f0f66; LONG $0xfff7f088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2064]
	LONG $0x84fe0f66; LONG $0xfff3f088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3088]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff80088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2048]
	LONG $0x84fe0f66; LONG $0xfff40088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3072]
	LONG $0x84fe0f66; LONG $0xfffc0088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1024]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB0_4
	JMP  LBB0_28

LBB0_25:
	LONG $0x247c8348; WORD $0x0028 // cmp    qword [rsp + 40], 0
	JE   LBB0_26
	LONG $0x01428d48               // lea    rax, [rdx + 1]
	LONG $0xc7af0f48               // imul    rax, rdi
	WORD $0x0148; BYTE $0xc3       // add    rbx, rax
	LONG $0x24048b48               // mov    rax, qword [rsp]
	WORD $0xf748; BYTE $0xd8       // neg    rax
	LONG $0x24448948; BYTE $0x18   // mov    qword [rsp + 24], rax
	LONG $0x24448b48; BYTE $0x08   // mov    rax, qword [rsp + 8]
	WORD $0xf748; BYTE $0xd8       // neg    rax
	LONG $0x24448948; BYTE $0x10   // mov    qword [rsp + 16], rax
	WORD $0x894c; BYTE $0xd6       // mov    rsi, r10
	WORD $0xff48; BYTE $0xce       // dec    rsi
	WORD $0x2948; BYTE $0xce       // sub    rsi, rcx
	LONG $0x24748948; BYTE $0x30   // mov    qword [rsp + 48], rsi
	LONG $0x18458b48               // mov    rax, qword [rbp + 24]
	LONG $0x38548d48; BYTE $0x03   // lea    rdx, [rax + rdi + 3]
	WORD $0xc031                   // xor    eax, eax

LBB0_30:
	LONG $0x24448948; BYTE $0x20 // mov    qword [rsp + 32], rax
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000b9; BYTE $0x00 // mov    ecx, 0
	JE   LBB0_32
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x046f0ff3; BYTE $0x03 // movdqu    xmm0, [rbx + rax]
	LONG $0x0b6f0ff3             // movdqu    xmm1, [rbx]
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0x146f0ff3; BYTE $0x03 // movdqu    xmm2, [rbx + rax]
	LONG $0xd0e00f66             // pavgb    xmm2, xmm0
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xc1de0f66             // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66             // pminub    xmm2, xmm1
	LONG $0xc2f80f66             // psubb    xmm0, xmm2
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x146f0ff3; BYTE $0x03 // movdqu    xmm2, [rbx + rax]
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x1c6f0ff3; BYTE $0x03 // movdqu    xmm3, [rbx + rax]
	LONG $0xdae00f66             // pavgb    xmm3, xmm2
	LONG $0xd36f0f66             // movdqa    xmm2, xmm3
	LONG $0xd1de0f66             // pmaxub    xmm2, xmm1
	LONG $0xd9da0f66             // pminub    xmm3, xmm1
	LONG $0xd3f80f66             // psubb    xmm2, xmm3
	LONG $0xd0de0f66             // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; BYTE $0x10 // movdqu    [r8], xmm2
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9

LBB0_32:
	WORD $0x394c; BYTE $0xe9     // cmp    rcx, r13
	JGE  LBB0_35
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x083c8d4c             // lea    r15, [rax + rcx]
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x080c8d4c             // lea    r9, [rax + rcx]
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0x08148d4c             // lea    r10, [rax + rcx]
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x08348d48             // lea    rsi, [rax + rcx]
	WORD $0x3145; BYTE $0xdb     // xor    r11d, r11d

LBB0_34:
	LONG $0x1e3c8d4a               // lea    rdi, [rsi + r11]
	LONG $0x046f0ff3; BYTE $0x3b   // movdqu    xmm0, [rbx + rdi]
	LONG $0x193c8d4a               // lea    rdi, [rcx + r11]
	LONG $0x0c6f0ff3; BYTE $0x3b   // movdqu    xmm1, [rbx + rdi]
	LONG $0x1a048d4b               // lea    rax, [r10 + r11]
	LONG $0x146f0ff3; BYTE $0x03   // movdqu    xmm2, [rbx + rax]
	LONG $0xd0e00f66               // pavgb    xmm2, xmm0
	LONG $0xc26f0f66               // movdqa    xmm0, xmm2
	LONG $0xc1de0f66               // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66               // pminub    xmm2, xmm1
	LONG $0xc2f80f66               // psubb    xmm0, xmm2
	LONG $0x19048d4b               // lea    rax, [r9 + r11]
	LONG $0x146f0ff3; BYTE $0x03   // movdqu    xmm2, [rbx + rax]
	LONG $0x1f048d4b               // lea    rax, [r15 + r11]
	LONG $0x1c6f0ff3; BYTE $0x03   // movdqu    xmm3, [rbx + rax]
	LONG $0xdae00f66               // pavgb    xmm3, xmm2
	LONG $0xd36f0f66               // movdqa    xmm2, xmm3
	LONG $0xd1de0f66               // pmaxub    xmm2, xmm1
	LONG $0xd9da0f66               // pminub    xmm3, xmm1
	LONG $0xd3f80f66               // psubb    xmm2, xmm3
	LONG $0xd0de0f66               // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x3814 // movdqu    [r8 + rdi], xmm2
	LONG $0x19448d4a; BYTE $0x10   // lea    rax, [rcx + r11 + 16]
	LONG $0x10c38349               // add    r11, 16
	WORD $0x394c; BYTE $0xe8       // cmp    rax, r13
	JL   LBB0_34

LBB0_35:
	LONG $0x24748b48; BYTE $0x50               // mov    rsi, qword [rsp + 80]
	WORD $0x394c; BYTE $0xee                   // cmp    rsi, r13
	JE   LBB0_37
	LONG $0x33048d48                           // lea    rax, [rbx + rsi]
	LONG $0x244c8b48; BYTE $0x18               // mov    rcx, qword [rsp + 24]
	LONG $0x446f0ff3; WORD $0xf001             // movdqu    xmm0, [rcx + rax - 16]
	LONG $0x4c6f0ff3; WORD $0xf033             // movdqu    xmm1, [rbx + rsi - 16]
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0x546f0ff3; WORD $0xf001             // movdqu    xmm2, [rcx + rax - 16]
	LONG $0xd0e00f66                           // pavgb    xmm2, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x244c8b48; BYTE $0x10               // mov    rcx, qword [rsp + 16]
	LONG $0x546f0ff3; WORD $0xf001             // movdqu    xmm2, [rcx + rax - 16]
	LONG $0x244c8b48; BYTE $0x08               // mov    rcx, qword [rsp + 8]
	LONG $0x5c6f0ff3; WORD $0xf001             // movdqu    xmm3, [rcx + rax - 16]
	LONG $0xdae00f66                           // pavgb    xmm3, xmm2
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xd3f80f66                           // psubb    xmm2, xmm3
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x3054; BYTE $0xf0 // movdqu    [r8 + rsi - 16], xmm2

LBB0_37:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bf; BYTE $0x00 // mov    edi, 0
	LONG $0x244c8b4c; BYTE $0x48 // mov    r9, qword [rsp + 72]
	JE   LBB0_41
	WORD $0xc031                 // xor    eax, eax

LBB0_39:
	LONG $0x024cb60f; BYTE $0xfd       // movzx    ecx, byte [rdx + rax - 3]
	LONG $0x8c04ff41                   // inc    dword [r12 + 4*rcx]
	LONG $0x024cb60f; BYTE $0xfe       // movzx    ecx, byte [rdx + rax - 2]
	LONG $0x8c84ff41; LONG $0x00000400 // inc    dword [r12 + 4*rcx + 1024]
	LONG $0x024cb60f; BYTE $0xff       // movzx    ecx, byte [rdx + rax - 1]
	LONG $0x8c84ff41; LONG $0x00000800 // inc    dword [r12 + 4*rcx + 2048]
	LONG $0x020cb60f                   // movzx    ecx, byte [rdx + rax]
	LONG $0x8c84ff41; LONG $0x00000c00 // inc    dword [r12 + 4*rcx + 3072]
	LONG $0x04c08348                   // add    rax, 4
	WORD $0x394c; BYTE $0xf0           // cmp    rax, r14
	JB   LBB0_39
	WORD $0x894c; BYTE $0xf7           // mov    rdi, r14

LBB0_41:
	WORD $0x3948; BYTE $0xf7     // cmp    rdi, rsi
	JAE  LBB0_48
	WORD $0xf189                 // mov    ecx, esi
	WORD $0xf929                 // sub    ecx, edi
	LONG $0x24448b48; BYTE $0x30 // mov    rax, qword [rsp + 48]
	WORD $0x2948; BYTE $0xf8     // sub    rax, rdi
	WORD $0xe183; BYTE $0x03     // and    ecx, 3
	LONG $0x03f88348             // cmp    rax, 3
	JB   LBB0_45
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx

LBB0_44:
	LONG $0x3a74b60f; BYTE $0xfd // movzx    esi, byte [rdx + rdi - 3]
	LONG $0xb404ff41             // inc    dword [r12 + 4*rsi]
	LONG $0x3a74b60f; BYTE $0xfe // movzx    esi, byte [rdx + rdi - 2]
	LONG $0xb404ff41             // inc    dword [r12 + 4*rsi]
	LONG $0x3a74b60f; BYTE $0xff // movzx    esi, byte [rdx + rdi - 1]
	LONG $0xb404ff41             // inc    dword [r12 + 4*rsi]
	LONG $0x3a34b60f             // movzx    esi, byte [rdx + rdi]
	LONG $0xb404ff41             // inc    dword [r12 + 4*rsi]
	LONG $0x04c78348             // add    rdi, 4
	WORD $0x3948; BYTE $0xf8     // cmp    rax, rdi
	JNE  LBB0_44

LBB0_45:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB0_48
	WORD $0x014c; BYTE $0xc7 // add    rdi, r8
	WORD $0xf748; BYTE $0xd9 // neg    rcx

LBB0_47:
	WORD $0xb60f; BYTE $0x07 // movzx    eax, byte [rdi]
	LONG $0x8404ff41         // inc    dword [r12 + 4*rax]
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0xff48; BYTE $0xc1 // inc    rcx
	JNE  LBB0_47

LBB0_48:
	LONG $0x245c0348; BYTE $0x38 // add    rbx, qword [rsp + 56]
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	WORD $0xff48; BYTE $0xc0     // inc    rax
	LONG $0x24443b48; BYTE $0x28 // cmp    rax, qword [rsp + 40]
	JNE  LBB0_30

LBB0_26:
	LONG $0x18458b48                   // mov    rax, qword [rbp + 24]
	LONG $0x244c8b48; BYTE $0x40       // mov    rcx, qword [rsp + 64]
	LONG $0x08848d48; LONG $0x00000c10 // lea    rax, [rax + rcx + 3088]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x10558b48                   // mov    rdx, qword [rbp + 16]

LBB0_27:
	LONG $0x846f0f66; LONG $0xfff7f088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2064]
	LONG $0x84fe0f66; LONG $0xfff3f088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3088]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff80088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2048]
	LONG $0x84fe0f66; LONG $0xfff40088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3072]
	LONG $0x84fe0f66; LONG $0xfffc0088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1024]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB0_27

LBB0_28:
	MOVQ -32(SP), SP
	RET

DATA LCDATA1<>+0x000(SB)/8, $0x0004000400040004
DATA LCDATA1<>+0x008(SB)/8, $0x0004000400040004
GLOBL LCDATA1<>(SB), 8, $16

TEXT ·_SimdSse2HistogramMasked(SB), 7, $120-72

	MOVQ SP, BP
	ANDQ $-16, BP
	SUBQ $48, BP
	MOVQ SP, -32(BP)
	MOVQ arg9+64(FP), DI
	MOVQ DI, -40(BP)
	MOVQ arg8+56(FP), DI
	MOVQ DI, -48(BP)
	MOVQ arg7+48(FP), DI
	MOVQ DI, -56(BP)
	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	LEAQ LCDATA1<>(SB), BP
	ANDQ $-16, SP
	SUBQ $48, SP

	LONG $0x244c894c; BYTE $0x18                     // mov    qword [rsp + 24], r9
	WORD $0x894d; BYTE $0xc5                         // mov    r13, r8
	LONG $0x244c8948; BYTE $0x08                     // mov    qword [rsp + 8], rcx
	LONG $0x24148948                                 // mov    qword [rsp], rdx
	WORD $0x8949; BYTE $0xfe                         // mov    r14, rdi
	LONG $0x24648b4c; BYTE $0xd8                     // mov    r12, qword -40[rsp] /* [rbp + 32] */
	WORD $0x8948; BYTE $0xf0                         // mov    rax, rsi
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xf0                         // cmp    rax, rsi
	LONG $0x24748948; BYTE $0x20                     // mov    qword [rsp + 32], rsi
	JNE  LBB1_28
	WORD $0x894c; BYTE $0xf0                         // mov    rax, r14
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xf0                         // cmp    rax, r14
	JNE  LBB1_28
	LONG $0x244c8b48; BYTE $0x18                     // mov    rcx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_28
	WORD $0x894c; BYTE $0xe8                         // mov    rax, r13
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xe8                         // cmp    rax, r13
	JNE  LBB1_28
	LONG $0x241c8b48                                 // mov    rbx, qword [rsp]
	LONG $0x0f438d48                                 // lea    rax, [rbx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c3c8d4d                                 // lea    r15, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	// CALL clib·_memset(SB)
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB1_10
	WORD $0x8948; BYTE $0xfe                         // mov    rsi, rdi
	LONG $0xfce68348                                 // and    rsi, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0x2444b60f; BYTE $0xc8                     // movzx    eax, byte -56[rsp] /* [rbp + 16] */
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI1_1] */

LBB1_6:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_13
	WORD $0xc031                 // xor    eax, eax

LBB1_8:
	LONG $0x6f0f4166; WORD $0x0624             // movdqa    xmm4, [r14 + rax]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x00 // movdqa    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x6f0f4166; WORD $0x0664; BYTE $0x10 // movdqa    xmm4, [r14 + rax + 16]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x10 // movdqa    xmm5, [r13 + rax + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x447c; BYTE $0x20 // movdqa    [r12 + 2*rax + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x30 // movdqa    [r12 + 2*rax + 48], xmm5
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JB   LBB1_8
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB1_13

LBB1_12:
	LONG $0x6f0f4166; WORD $0x0624             // movdqa    xmm4, [r14 + rax]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x00 // movdqa    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x10c08348                           // add    rax, 16

LBB1_13:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB1_12
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB1_16
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f41f3; WORD $0x7c6c; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm5

LBB1_16:
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_20
	WORD $0xc031                 // xor    eax, eax

LBB1_18:
	LONG $0x3cb70f41; BYTE $0x44       // movzx    edi, word [r12 + 2*rax]
	LONG $0xbf04ff41                   // inc    dword [r15 + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244     // movzx    edi, word [r12 + 2*rax + 2]
	LONG $0xbf84ff41; LONG $0x00000410 // inc    dword [r15 + 4*rdi + 1040]
	LONG $0x7cb70f41; WORD $0x0444     // movzx    edi, word [r12 + 2*rax + 4]
	LONG $0xbf84ff41; LONG $0x00000820 // inc    dword [r15 + 4*rdi + 2080]
	LONG $0x7cb70f41; WORD $0x0644     // movzx    edi, word [r12 + 2*rax + 6]
	LONG $0xbf84ff41; LONG $0x00000c30 // inc    dword [r15 + 4*rdi + 3120]
	LONG $0x04c08348                   // add    rax, 4
	WORD $0x3948; BYTE $0xf0           // cmp    rax, rsi
	JB   LBB1_18
	WORD $0x8948; BYTE $0xf0           // mov    rax, rsi
	LONG $0x243c8b48                   // mov    rdi, qword [rsp]

LBB1_20:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB1_27
	WORD $0xfb89             // mov    ebx, edi
	WORD $0xc329             // sub    ebx, eax
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x894c; BYTE $0xc7 // mov    rdi, r8
	WORD $0x2948; BYTE $0xc7 // sub    rdi, rax
	WORD $0xe383; BYTE $0x03 // and    ebx, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JB   LBB1_24
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0x2948; BYTE $0xdf // sub    rdi, rbx

LBB1_23:
	LONG $0x0cb70f41; BYTE $0x44   // movzx    ecx, word [r12 + 2*rax]
	LONG $0x8f04ff41               // inc    dword [r15 + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244 // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x8f04ff41               // inc    dword [r15 + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0444 // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x8f04ff41               // inc    dword [r15 + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0644 // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x8f04ff41               // inc    dword [r15 + 4*rcx]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc7       // cmp    rdi, rax
	JNE  LBB1_23

LBB1_24:
	WORD $0x8548; BYTE $0xdb // test    rbx, rbx
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB1_27
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xdb // neg    rbx

LBB1_26:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	LONG $0x8f04ff41         // inc    dword [r15 + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc3 // inc    rbx
	JNE  LBB1_26

LBB1_27:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB1_6

LBB1_10:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 24] */

LBB1_11:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB1_11
	JMP  LBB1_36

LBB1_28:
	LONG $0x243c8b4c                                 // mov    r15, qword [rsp]
	LONG $0x0f478d49                                 // lea    rax, [r15 + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	LONG $0x247c8b4c; BYTE $0x20                     // mov    r15, qword [rsp + 32]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB1_34
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0x2444b60f; BYTE $0xc8                     // movzx    eax, byte -56[rsp] /* [rbp + 16] */
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI1_1] */

LBB1_30:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_38
	WORD $0xc031                 // xor    eax, eax

LBB1_32:
	LONG $0x6f0f41f3; WORD $0x0624             // movdqu    xmm4, [r14 + rax]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x6f0f41f3; WORD $0x0664; BYTE $0x10 // movdqu    xmm4, [r14 + rax + 16]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x10 // movdqu    xmm5, [r13 + rax + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x447c; BYTE $0x20 // movdqa    [r12 + 2*rax + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x30 // movdqa    [r12 + 2*rax + 48], xmm5
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JB   LBB1_32
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB1_38

LBB1_37:
	LONG $0x6f0f41f3; WORD $0x0624             // movdqu    xmm4, [r14 + rax]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x10c08348                           // add    rax, 16

LBB1_38:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB1_37
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB1_41
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f41f3; WORD $0x7c6c; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm5

LBB1_41:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_45
	WORD $0xc031                 // xor    eax, eax

LBB1_43:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB1_43
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB1_45:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB1_52
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB1_49
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB1_48:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB1_48

LBB1_49:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB1_52
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB1_51:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB1_51

LBB1_52:
	WORD $0x014d; BYTE $0xfe     // add    r14, r15
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB1_30

LBB1_34:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 24] */

LBB1_35:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB1_35

LBB1_36:
	MOVQ -32(SP), SP
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x0004000400040004
DATA LCDATA2<>+0x008(SB)/8, $0x0004000400040004
GLOBL LCDATA2<>(SB), 8, $16

TEXT ·_SimdSse2HistogramConditional(SB), 7, $128-80

	MOVQ SP, BP
	ANDQ $-16, BP
	SUBQ $48, BP
	MOVQ SP, -32(BP)
	MOVQ arg10+72(FP), DI
	MOVQ DI, -40(BP)
	MOVQ arg9+64(FP), DI
	MOVQ DI, -48(BP)
	MOVQ arg8+56(FP), DI
	MOVQ DI, -56(BP)
	MOVQ arg7+48(FP), DI
	MOVQ DI, -64(BP)
	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	LEAQ LCDATA2<>(SB), BP
	ANDQ $-16, SP
	SUBQ $48, SP

	LONG $0x244c894c; BYTE $0x18                     // mov    qword [rsp + 24], r9
	WORD $0x894d; BYTE $0xc5                         // mov    r13, r8
	LONG $0x244c8948; BYTE $0x08                     // mov    qword [rsp + 8], rcx
	LONG $0x24148948                                 // mov    qword [rsp], rdx
	LONG $0x24748948; BYTE $0x20                     // mov    qword [rsp + 32], rsi
	WORD $0x8949; BYTE $0xfe                         // mov    r14, rdi
	LONG $0x24648b4c; BYTE $0xd8                     // mov    r12, qword -40[rsp] /* [rbp + 40] */
	LONG $0xc824448b                                 // mov    eax, dword -56[rsp] /* [rbp + 24] */
	LONG $0xc0245c8a                                 // mov    bl, byte -64[rsp] /* [rbp + 16] */
	WORD $0xf883; BYTE $0x02                         // cmp    eax, 2
	JG   LBB2_14
	WORD $0xc085                                     // test    eax, eax
	JE   LBB2_27
	WORD $0xf883; BYTE $0x01                         // cmp    eax, 1
	LONG $0x24148b48                                 // mov    rdx, qword [rsp]
	JE   LBB2_79
	WORD $0xf883; BYTE $0x02                         // cmp    eax, 2
	JNE  LBB2_303
	LONG $0x244c8b48; BYTE $0x20                     // mov    rcx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB2_149
	WORD $0x894c; BYTE $0xf0                         // mov    rax, r14
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xf0                         // cmp    rax, r14
	JNE  LBB2_149
	LONG $0x244c8b48; BYTE $0x18                     // mov    rcx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB2_149
	WORD $0x894c; BYTE $0xe8                         // mov    rax, r13
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xe8                         // cmp    rax, r13
	JNE  LBB2_149
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c3c8d4d                                 // lea    r15, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_131
	WORD $0x8948; BYTE $0xfe                         // mov    rsi, rdi
	LONG $0xfce68348                                 // and    rsi, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	WORD $0xb60f; BYTE $0xc3                         // movzx    eax, bl
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_10:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_134
	WORD $0xdb31                 // xor    ebx, ebx

LBB2_12:
	LONG $0x6f0f4166; WORD $0x1e24             // movdqa    xmm4, [r14 + rbx]
	LONG $0x6f0f4166; WORD $0x1d6c; BYTE $0x00 // movdqa    xmm5, [r13 + rbx]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x5c3c             // movdqa    [r12 + 2*rbx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x5c74; BYTE $0x10 // movdqa    [r12 + 2*rbx + 16], xmm6
	LONG $0x6f0f4166; WORD $0x1e64; BYTE $0x10 // movdqa    xmm4, [r14 + rbx + 16]
	LONG $0x6f0f4166; WORD $0x1d6c; BYTE $0x10 // movdqa    xmm5, [r13 + rbx + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x5c7c; BYTE $0x20 // movdqa    [r12 + 2*rbx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x5c74; BYTE $0x30 // movdqa    [r12 + 2*rbx + 48], xmm6
	LONG $0x20c38348                           // add    rbx, 32
	WORD $0x3948; BYTE $0xd3                   // cmp    rbx, rdx
	JB   LBB2_12
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_134

LBB2_133:
	LONG $0x6f0f4166; WORD $0x0624             // movdqa    xmm4, [r14 + rax]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x00 // movdqa    xmm5, [r13 + rax]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x4474; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm6
	LONG $0x10c08348                           // add    rax, 16

LBB2_134:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_133
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_137
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f41f3; WORD $0x7c74; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm6

LBB2_137:
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_141
	WORD $0xc031                 // xor    eax, eax

LBB2_139:
	LONG $0x3cb70f41; BYTE $0x44       // movzx    edi, word [r12 + 2*rax]
	LONG $0xbf04ff41                   // inc    dword [r15 + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244     // movzx    edi, word [r12 + 2*rax + 2]
	LONG $0xbf84ff41; LONG $0x00000410 // inc    dword [r15 + 4*rdi + 1040]
	LONG $0x7cb70f41; WORD $0x0444     // movzx    edi, word [r12 + 2*rax + 4]
	LONG $0xbf84ff41; LONG $0x00000820 // inc    dword [r15 + 4*rdi + 2080]
	LONG $0x7cb70f41; WORD $0x0644     // movzx    edi, word [r12 + 2*rax + 6]
	LONG $0xbf84ff41; LONG $0x00000c30 // inc    dword [r15 + 4*rdi + 3120]
	LONG $0x04c08348                   // add    rax, 4
	WORD $0x3948; BYTE $0xf0           // cmp    rax, rsi
	JB   LBB2_139
	WORD $0x8948; BYTE $0xf0           // mov    rax, rsi
	LONG $0x243c8b48                   // mov    rdi, qword [rsp]

LBB2_141:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_148
	WORD $0xfb89             // mov    ebx, edi
	WORD $0xc329             // sub    ebx, eax
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x894c; BYTE $0xc7 // mov    rdi, r8
	WORD $0x2948; BYTE $0xc7 // sub    rdi, rax
	WORD $0xe383; BYTE $0x03 // and    ebx, 3
	LONG $0x03ff8348         // cmp    rdi, 3
	JB   LBB2_145
	WORD $0x8948; BYTE $0xcf // mov    rdi, rcx
	WORD $0x2948; BYTE $0xdf // sub    rdi, rbx

LBB2_144:
	LONG $0x0cb70f41; BYTE $0x44   // movzx    ecx, word [r12 + 2*rax]
	LONG $0x8f04ff41               // inc    dword [r15 + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244 // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x8f04ff41               // inc    dword [r15 + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0444 // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x8f04ff41               // inc    dword [r15 + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0644 // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x8f04ff41               // inc    dword [r15 + 4*rcx]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc7       // cmp    rdi, rax
	JNE  LBB2_144

LBB2_145:
	WORD $0x8548; BYTE $0xdb // test    rbx, rbx
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_148
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xdb // neg    rbx

LBB2_147:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	LONG $0x8f04ff41         // inc    dword [r15 + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc3 // inc    rbx
	JNE  LBB2_147

LBB2_148:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_10

LBB2_131:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_132:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_132
	JMP  LBB2_303

LBB2_14:
	WORD $0xf883; BYTE $0x03                         // cmp    eax, 3
	JE   LBB2_173
	WORD $0xf883; BYTE $0x04                         // cmp    eax, 4
	LONG $0x24148b48                                 // mov    rdx, qword [rsp]
	JE   LBB2_225
	WORD $0xf883; BYTE $0x05                         // cmp    eax, 5
	JNE  LBB2_303
	LONG $0x244c8b48; BYTE $0x20                     // mov    rcx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB2_295
	WORD $0x894c; BYTE $0xf0                         // mov    rax, r14
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xf0                         // cmp    rax, r14
	JNE  LBB2_295
	LONG $0x244c8b48; BYTE $0x18                     // mov    rcx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB2_295
	WORD $0x894c; BYTE $0xe8                         // mov    rax, r13
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xe8                         // cmp    rax, r13
	JNE  LBB2_295
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_277
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_23:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_280
	WORD $0xf631                 // xor    esi, esi

LBB2_25:
	LONG $0x6f0f4166; WORD $0x3624             // movdqa    xmm4, [r14 + rsi]
	LONG $0x6f0f4166; WORD $0x356c; BYTE $0x00 // movdqa    xmm5, [r13 + rsi]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x743c             // movdqa    [r12 + 2*rsi], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x10 // movdqa    [r12 + 2*rsi + 16], xmm6
	LONG $0x6f0f4166; WORD $0x3664; BYTE $0x10 // movdqa    xmm4, [r14 + rsi + 16]
	LONG $0x6f0f4166; WORD $0x356c; BYTE $0x10 // movdqa    xmm5, [r13 + rsi + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x747c; BYTE $0x20 // movdqa    [r12 + 2*rsi + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x30 // movdqa    [r12 + 2*rsi + 48], xmm6
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xd6                   // cmp    rsi, rdx
	JB   LBB2_25
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_280

LBB2_279:
	LONG $0x6f0f4166; WORD $0x0624             // movdqa    xmm4, [r14 + rax]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x00 // movdqa    xmm5, [r13 + rax]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x4474; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm6
	LONG $0x10c08348                           // add    rax, 16

LBB2_280:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_279
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_283
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f41f3; WORD $0x7c74; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm6

LBB2_283:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_287
	WORD $0xc031                 // xor    eax, eax

LBB2_285:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_285
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_287:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_294
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_291
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_290:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_290

LBB2_291:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_294
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_293:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_293

LBB2_294:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_23

LBB2_277:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_278:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_278
	JMP  LBB2_303

LBB2_27:
	LONG $0x244c8b48; BYTE $0x20                     // mov    rcx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	LONG $0x24148b48                                 // mov    rdx, qword [rsp]
	JNE  LBB2_55
	WORD $0x894c; BYTE $0xf0                         // mov    rax, r14
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xf0                         // cmp    rax, r14
	JNE  LBB2_55
	LONG $0x244c8b48; BYTE $0x18                     // mov    rcx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB2_55
	WORD $0x894c; BYTE $0xe8                         // mov    rax, r13
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xe8                         // cmp    rax, r13
	JNE  LBB2_55
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_37
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_33:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_40
	WORD $0xc031                 // xor    eax, eax

LBB2_35:
	LONG $0x6f0f4166; WORD $0x0624             // movdqa    xmm4, [r14 + rax]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x00 // movdqa    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x6f0f4166; WORD $0x0664; BYTE $0x10 // movdqa    xmm4, [r14 + rax + 16]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x10 // movdqa    xmm5, [r13 + rax + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x447c; BYTE $0x20 // movdqa    [r12 + 2*rax + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x30 // movdqa    [r12 + 2*rax + 48], xmm5
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JB   LBB2_35
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_40

LBB2_39:
	LONG $0x6f0f4166; WORD $0x0624             // movdqa    xmm4, [r14 + rax]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x00 // movdqa    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x10c08348                           // add    rax, 16

LBB2_40:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_39
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_43
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f41f3; WORD $0x7c6c; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm5

LBB2_43:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_47
	WORD $0xc031                 // xor    eax, eax

LBB2_45:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_45
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_47:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_54
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_51
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_50:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_50

LBB2_51:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_54
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_53:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_53

LBB2_54:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_33

LBB2_37:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_38:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_38
	JMP  LBB2_303

LBB2_79:
	LONG $0x244c8b48; BYTE $0x20                     // mov    rcx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB2_107
	WORD $0x894c; BYTE $0xf0                         // mov    rax, r14
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xf0                         // cmp    rax, r14
	JNE  LBB2_107
	LONG $0x244c8b48; BYTE $0x18                     // mov    rcx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB2_107
	WORD $0x894c; BYTE $0xe8                         // mov    rax, r13
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xe8                         // cmp    rax, r13
	JNE  LBB2_107
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_89
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_85:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_92
	WORD $0xc031                 // xor    eax, eax

LBB2_87:
	LONG $0x6f0f4166; WORD $0x0624             // movdqa    xmm4, [r14 + rax]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x00 // movdqa    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x6f0f4166; WORD $0x0664; BYTE $0x10 // movdqa    xmm4, [r14 + rax + 16]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x10 // movdqa    xmm5, [r13 + rax + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x447c; BYTE $0x20 // movdqa    [r12 + 2*rax + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x30 // movdqa    [r12 + 2*rax + 48], xmm5
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JB   LBB2_87
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_92

LBB2_91:
	LONG $0x6f0f4166; WORD $0x0624             // movdqa    xmm4, [r14 + rax]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x00 // movdqa    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x10c08348                           // add    rax, 16

LBB2_92:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_91
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_95
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f41f3; WORD $0x7c6c; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm5

LBB2_95:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_99
	WORD $0xc031                 // xor    eax, eax

LBB2_97:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_97
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_99:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_106
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_103
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_102:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_102

LBB2_103:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_106
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_105:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_105

LBB2_106:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_85

LBB2_89:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_90:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_90
	JMP  LBB2_303

LBB2_173:
	LONG $0x244c8b48; BYTE $0x20                     // mov    rcx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	LONG $0x24148b48                                 // mov    rdx, qword [rsp]
	JNE  LBB2_201
	WORD $0x894c; BYTE $0xf0                         // mov    rax, r14
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xf0                         // cmp    rax, r14
	JNE  LBB2_201
	LONG $0x244c8b48; BYTE $0x18                     // mov    rcx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB2_201
	WORD $0x894c; BYTE $0xe8                         // mov    rax, r13
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xe8                         // cmp    rax, r13
	JNE  LBB2_201
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_183
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_179:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_186
	WORD $0xf631                 // xor    esi, esi

LBB2_181:
	LONG $0x6f0f4166; WORD $0x3624             // movdqa    xmm4, [r14 + rsi]
	LONG $0x6f0f4166; WORD $0x356c; BYTE $0x00 // movdqa    xmm5, [r13 + rsi]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x743c             // movdqa    [r12 + 2*rsi], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x10 // movdqa    [r12 + 2*rsi + 16], xmm6
	LONG $0x6f0f4166; WORD $0x3664; BYTE $0x10 // movdqa    xmm4, [r14 + rsi + 16]
	LONG $0x6f0f4166; WORD $0x356c; BYTE $0x10 // movdqa    xmm5, [r13 + rsi + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x747c; BYTE $0x20 // movdqa    [r12 + 2*rsi + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x30 // movdqa    [r12 + 2*rsi + 48], xmm6
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xd6                   // cmp    rsi, rdx
	JB   LBB2_181
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_186

LBB2_185:
	LONG $0x6f0f4166; WORD $0x0624             // movdqa    xmm4, [r14 + rax]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x00 // movdqa    xmm5, [r13 + rax]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x4474; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm6
	LONG $0x10c08348                           // add    rax, 16

LBB2_186:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_185
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_189
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f41f3; WORD $0x7c74; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm6

LBB2_189:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_193
	WORD $0xc031                 // xor    eax, eax

LBB2_191:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_191
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_193:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_200
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_197
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_196:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_196

LBB2_197:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_200
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_199:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_199

LBB2_200:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_179

LBB2_183:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_184:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_184
	JMP  LBB2_303

LBB2_225:
	LONG $0x244c8b48; BYTE $0x20                     // mov    rcx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB2_253
	WORD $0x894c; BYTE $0xf0                         // mov    rax, r14
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xf0                         // cmp    rax, r14
	JNE  LBB2_253
	LONG $0x244c8b48; BYTE $0x18                     // mov    rcx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB2_253
	WORD $0x894c; BYTE $0xe8                         // mov    rax, r13
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x394c; BYTE $0xe8                         // cmp    rax, r13
	JNE  LBB2_253
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_235
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_231:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_238
	WORD $0xf631                 // xor    esi, esi

LBB2_233:
	LONG $0x6f0f4166; WORD $0x3624             // movdqa    xmm4, [r14 + rsi]
	LONG $0x6f0f4166; WORD $0x356c; BYTE $0x00 // movdqa    xmm5, [r13 + rsi]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x743c             // movdqa    [r12 + 2*rsi], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x10 // movdqa    [r12 + 2*rsi + 16], xmm6
	LONG $0x6f0f4166; WORD $0x3664; BYTE $0x10 // movdqa    xmm4, [r14 + rsi + 16]
	LONG $0x6f0f4166; WORD $0x356c; BYTE $0x10 // movdqa    xmm5, [r13 + rsi + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x747c; BYTE $0x20 // movdqa    [r12 + 2*rsi + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x30 // movdqa    [r12 + 2*rsi + 48], xmm6
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xd6                   // cmp    rsi, rdx
	JB   LBB2_233
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_238

LBB2_237:
	LONG $0x6f0f4166; WORD $0x0624             // movdqa    xmm4, [r14 + rax]
	LONG $0x6f0f4166; WORD $0x056c; BYTE $0x00 // movdqa    xmm5, [r13 + rax]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x4474; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm6
	LONG $0x10c08348                           // add    rax, 16

LBB2_238:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_237
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_241
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f41f3; WORD $0x7c74; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm6

LBB2_241:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_245
	WORD $0xc031                 // xor    eax, eax

LBB2_243:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_243
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_245:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_252
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_249
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_248:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_248

LBB2_249:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_252
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_251:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_251

LBB2_252:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_231

LBB2_235:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_236:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_236
	JMP  LBB2_303

LBB2_149:
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_155
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_151:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_158
	WORD $0xf631                 // xor    esi, esi

LBB2_153:
	LONG $0x6f0f41f3; WORD $0x3624             // movdqu    xmm4, [r14 + rsi]
	LONG $0x6f0f41f3; WORD $0x356c; BYTE $0x00 // movdqu    xmm5, [r13 + rsi]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x743c             // movdqa    [r12 + 2*rsi], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x10 // movdqa    [r12 + 2*rsi + 16], xmm6
	LONG $0x6f0f41f3; WORD $0x3664; BYTE $0x10 // movdqu    xmm4, [r14 + rsi + 16]
	LONG $0x6f0f41f3; WORD $0x356c; BYTE $0x10 // movdqu    xmm5, [r13 + rsi + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x747c; BYTE $0x20 // movdqa    [r12 + 2*rsi + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x30 // movdqa    [r12 + 2*rsi + 48], xmm6
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xd6                   // cmp    rsi, rdx
	JB   LBB2_153
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_158

LBB2_157:
	LONG $0x6f0f41f3; WORD $0x0624             // movdqu    xmm4, [r14 + rax]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, [r13 + rax]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x4474; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm6
	LONG $0x10c08348                           // add    rax, 16

LBB2_158:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_157
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_161
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f41f3; WORD $0x7c74; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm6

LBB2_161:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_165
	WORD $0xc031                 // xor    eax, eax

LBB2_163:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_163
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_165:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_172
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_169
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_168:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_168

LBB2_169:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_172
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_171:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_171

LBB2_172:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_151

LBB2_155:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_156:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_156
	JMP  LBB2_303

LBB2_295:
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_301
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_297:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_305
	WORD $0xf631                 // xor    esi, esi

LBB2_299:
	LONG $0x6f0f41f3; WORD $0x3624             // movdqu    xmm4, [r14 + rsi]
	LONG $0x6f0f41f3; WORD $0x356c; BYTE $0x00 // movdqu    xmm5, [r13 + rsi]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x743c             // movdqa    [r12 + 2*rsi], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x10 // movdqa    [r12 + 2*rsi + 16], xmm6
	LONG $0x6f0f41f3; WORD $0x3664; BYTE $0x10 // movdqu    xmm4, [r14 + rsi + 16]
	LONG $0x6f0f41f3; WORD $0x356c; BYTE $0x10 // movdqu    xmm5, [r13 + rsi + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x747c; BYTE $0x20 // movdqa    [r12 + 2*rsi + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x30 // movdqa    [r12 + 2*rsi + 48], xmm6
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xd6                   // cmp    rsi, rdx
	JB   LBB2_299
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_305

LBB2_304:
	LONG $0x6f0f41f3; WORD $0x0624             // movdqu    xmm4, [r14 + rax]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, [r13 + rax]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x4474; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm6
	LONG $0x10c08348                           // add    rax, 16

LBB2_305:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_304
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_308
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f41f3; WORD $0x7c74; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm6

LBB2_308:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_312
	WORD $0xc031                 // xor    eax, eax

LBB2_310:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_310
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_312:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_319
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_316
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_315:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_315

LBB2_316:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_319
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_318:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_318

LBB2_319:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_297

LBB2_301:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_302:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_302
	JMP  LBB2_303

LBB2_55:
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_61
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_57:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_64
	WORD $0xc031                 // xor    eax, eax

LBB2_59:
	LONG $0x6f0f41f3; WORD $0x0624             // movdqu    xmm4, [r14 + rax]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x6f0f41f3; WORD $0x0664; BYTE $0x10 // movdqu    xmm4, [r14 + rax + 16]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x10 // movdqu    xmm5, [r13 + rax + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x447c; BYTE $0x20 // movdqa    [r12 + 2*rax + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x30 // movdqa    [r12 + 2*rax + 48], xmm5
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JB   LBB2_59
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_64

LBB2_63:
	LONG $0x6f0f41f3; WORD $0x0624             // movdqu    xmm4, [r14 + rax]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x10c08348                           // add    rax, 16

LBB2_64:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_63
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_67
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f41f3; WORD $0x7c6c; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm5

LBB2_67:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_71
	WORD $0xc031                 // xor    eax, eax

LBB2_69:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_69
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_71:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_78
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_75
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_74:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_74

LBB2_75:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_78
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_77:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_77

LBB2_78:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_57

LBB2_61:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_62:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_62
	JMP  LBB2_303

LBB2_107:
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_113
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_109:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_116
	WORD $0xc031                 // xor    eax, eax

LBB2_111:
	LONG $0x6f0f41f3; WORD $0x0624             // movdqu    xmm4, [r14 + rax]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x6f0f41f3; WORD $0x0664; BYTE $0x10 // movdqu    xmm4, [r14 + rax + 16]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x10 // movdqu    xmm5, [r13 + rax + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x447c; BYTE $0x20 // movdqa    [r12 + 2*rax + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x30 // movdqa    [r12 + 2*rax + 48], xmm5
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x3948; BYTE $0xd0                   // cmp    rax, rdx
	JB   LBB2_111
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_116

LBB2_115:
	LONG $0x6f0f41f3; WORD $0x0624             // movdqu    xmm4, [r14 + rax]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, [r13 + rax]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f4166; WORD $0x446c; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm5
	LONG $0x10c08348                           // add    rax, 16

LBB2_116:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_115
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_119
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f41f3; WORD $0x7c6c; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm5

LBB2_119:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_123
	WORD $0xc031                 // xor    eax, eax

LBB2_121:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_121
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_123:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_130
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_127
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_126:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_126

LBB2_127:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_130
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_129:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_129

LBB2_130:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_109

LBB2_113:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_114:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_114
	JMP  LBB2_303

LBB2_201:
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_207
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_203:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_210
	WORD $0xf631                 // xor    esi, esi

LBB2_205:
	LONG $0x6f0f41f3; WORD $0x3624             // movdqu    xmm4, [r14 + rsi]
	LONG $0x6f0f41f3; WORD $0x356c; BYTE $0x00 // movdqu    xmm5, [r13 + rsi]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x743c             // movdqa    [r12 + 2*rsi], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x10 // movdqa    [r12 + 2*rsi + 16], xmm6
	LONG $0x6f0f41f3; WORD $0x3664; BYTE $0x10 // movdqu    xmm4, [r14 + rsi + 16]
	LONG $0x6f0f41f3; WORD $0x356c; BYTE $0x10 // movdqu    xmm5, [r13 + rsi + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x747c; BYTE $0x20 // movdqa    [r12 + 2*rsi + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x30 // movdqa    [r12 + 2*rsi + 48], xmm6
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xd6                   // cmp    rsi, rdx
	JB   LBB2_205
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_210

LBB2_209:
	LONG $0x6f0f41f3; WORD $0x0624             // movdqu    xmm4, [r14 + rax]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, [r13 + rax]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x4474; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm6
	LONG $0x10c08348                           // add    rax, 16

LBB2_210:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_209
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_213
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f41f3; WORD $0x7c74; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm6

LBB2_213:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_217
	WORD $0xc031                 // xor    eax, eax

LBB2_215:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_215
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_217:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_224
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_221
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_220:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_220

LBB2_221:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_224
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_223:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_223

LBB2_224:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_203

LBB2_207:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_208:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_208
	JMP  LBB2_303

LBB2_253:
	WORD $0x8941; BYTE $0xdf                         // mov    r15d, ebx
	LONG $0x0f428d48                                 // lea    rax, [rdx + 15]
	LONG $0xfff0b948; LONG $0xffffffff; WORD $0x7fff // mov    rcx, 9223372036854775792
	WORD $0x2148; BYTE $0xc1                         // and    rcx, rax
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x4c1c8d49                                 // lea    rbx, [r12 + 2*rcx]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x001040ba; BYTE $0x00                     // mov    edx, 4160
	WORD $0x8948; BYTE $0xdf                         // mov    rdi, rbx
	// CALL clib·_memset(SB)
	LONG $0x243c8b48                                 // mov    rdi, qword [rsp]
	LONG $0x247c8348; WORD $0x0008                   // cmp    qword [rsp + 8], 0
	JE   LBB2_259
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0xfce38349                                 // and    r11, -4
	WORD $0x8949; BYTE $0xfa                         // mov    r10, rdi
	LONG $0xf0e28349                                 // and    r10, -16
	WORD $0x8948; BYTE $0xfa                         // mov    rdx, rdi
	LONG $0xe0e28348                                 // and    rdx, -32
	LONG $0xc7b60f41                                 // movzx    eax, r15b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0xff478d4c                                 // lea    r8, [rdi - 1]
	WORD $0x3145; BYTE $0xc9                         // xor    r9d, r9d
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x00                     // movdqa    xmm3, 0[rbp] /* [rip + .LCPI2_1] */

LBB2_255:
	WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_262
	WORD $0xf631                 // xor    esi, esi

LBB2_257:
	LONG $0x6f0f41f3; WORD $0x3624             // movdqu    xmm4, [r14 + rsi]
	LONG $0x6f0f41f3; WORD $0x356c; BYTE $0x00 // movdqu    xmm5, [r13 + rsi]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x743c             // movdqa    [r12 + 2*rsi], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x10 // movdqa    [r12 + 2*rsi + 16], xmm6
	LONG $0x6f0f41f3; WORD $0x3664; BYTE $0x10 // movdqu    xmm4, [r14 + rsi + 16]
	LONG $0x6f0f41f3; WORD $0x356c; BYTE $0x10 // movdqu    xmm5, [r13 + rsi + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x747c; BYTE $0x20 // movdqa    [r12 + 2*rsi + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x7474; BYTE $0x30 // movdqa    [r12 + 2*rsi + 48], xmm6
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x3948; BYTE $0xd6                   // cmp    rsi, rdx
	JB   LBB2_257
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JMP  LBB2_262

LBB2_261:
	LONG $0x6f0f41f3; WORD $0x0624             // movdqu    xmm4, [r14 + rax]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, [r13 + rax]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f4166; WORD $0x443c             // movdqa    [r12 + 2*rax], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f4166; WORD $0x4474; BYTE $0x10 // movdqa    [r12 + 2*rax + 16], xmm6
	LONG $0x10c08348                           // add    rax, 16

LBB2_262:
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB2_261
	WORD $0x3949; BYTE $0xfa                   // cmp    r10, rdi
	JE   LBB2_265
	LONG $0x6f0f41f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + rdi - 16]
	LONG $0x6f0f41f3; WORD $0x3d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + rdi - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f41f3; WORD $0x7c7c; BYTE $0xe0 // movdqu    [r12 + 2*rdi - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f41f3; WORD $0x7c74; BYTE $0xf0 // movdqu    [r12 + 2*rdi - 16], xmm6

LBB2_265:
	WORD $0x854d; BYTE $0xdb     // test    r11, r11
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB2_269
	WORD $0xc031                 // xor    eax, eax

LBB2_267:
	LONG $0x0cb70f41; BYTE $0x44               // movzx    ecx, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f41; WORD $0x0244             // movzx    ecx, word [r12 + 2*rax + 2]
	LONG $0x108b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1040]
	LONG $0x4cb70f41; WORD $0x0444             // movzx    ecx, word [r12 + 2*rax + 4]
	LONG $0x208b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2080]
	LONG $0x4cb70f41; WORD $0x0644             // movzx    ecx, word [r12 + 2*rax + 6]
	LONG $0x308b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3120]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd8                   // cmp    rax, r11
	JB   LBB2_267
	WORD $0x894c; BYTE $0xd8                   // mov    rax, r11

LBB2_269:
	WORD $0x3948; BYTE $0xf8 // cmp    rax, rdi
	JAE  LBB2_276
	WORD $0xfe89             // mov    esi, edi
	WORD $0xc629             // sub    esi, eax
	WORD $0x894c; BYTE $0xc1 // mov    rcx, r8
	WORD $0x2948; BYTE $0xc1 // sub    rcx, rax
	WORD $0xe683; BYTE $0x03 // and    esi, 3
	LONG $0x03f98348         // cmp    rcx, 3
	JB   LBB2_273
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x2948; BYTE $0xf1 // sub    rcx, rsi

LBB2_272:
	LONG $0x3cb70f41; BYTE $0x44   // movzx    edi, word [r12 + 2*rax]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0244 // movzx    edi, word [r12 + 2*rax + 2]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0444 // movzx    edi, word [r12 + 2*rax + 4]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x7cb70f41; WORD $0x0644 // movzx    edi, word [r12 + 2*rax + 6]
	WORD $0x04ff; BYTE $0xbb       // inc    dword [rbx + 4*rdi]
	LONG $0x04c08348               // add    rax, 4
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_272

LBB2_273:
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	LONG $0x243c8b48         // mov    rdi, qword [rsp]
	JE   LBB2_276
	LONG $0x44048d49         // lea    rax, [r12 + 2*rax]
	WORD $0xf748; BYTE $0xde // neg    rsi

LBB2_275:
	WORD $0xb70f; BYTE $0x08 // movzx    ecx, word [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	LONG $0x02c08348         // add    rax, 2
	WORD $0xff48; BYTE $0xc6 // inc    rsi
	JNE  LBB2_275

LBB2_276:
	LONG $0x2474034c; BYTE $0x20 // add    r14, qword [rsp + 32]
	LONG $0x246c034c; BYTE $0x18 // add    r13, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	JNE  LBB2_255

LBB2_259:
	LONG $0x24448b48; BYTE $0x10       // mov    rax, qword [rsp + 16]
	LONG $0x44848d49; LONG $0x00000c50 // lea    rax, [r12 + 2*rax + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24548b48; BYTE $0xd0       // mov    rdx, qword -48[rsp] /* [rbp + 32] */

LBB2_260:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_260

LBB2_303:
	MOVQ -32(SP), SP
	RET

TEXT ·_SimdSse2HistogramBufAllocSize(SB), 7, $0-16

   	MOVQ arg1+0(FP), DI

	LONG $0x3f848d48; LONG $0x0000105e // lea    rax, [rdi + rdi + 4190]
	LONG $0xe0e08348                   // and    rax, -32

   	MOVQ AX, ret+8(FP)
	RET
