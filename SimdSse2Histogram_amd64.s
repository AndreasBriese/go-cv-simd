//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_SimdSse2AbsSecondDerivativeHistogram(SB), 7, $104-64

	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	ADDQ $8, SP

	LONG $0x2444894c; BYTE $0x08       // mov    qword [rsp + 8], r8
	WORD $0x8949; BYTE $0xc8           // mov    r8, rcx
	LONG $0x24548948; BYTE $0x28       // mov    qword [rsp + 40], rdx
	LONG $0x248c8b48; LONG $0x000000a8 // mov    rcx, qword 168[rsp] /* [rbp + 24] */
	WORD $0x8948; BYTE $0xf8           // mov    rax, rdi
	LONG $0xf0e08348                   // and    rax, -16
	WORD $0x8948; BYTE $0xf2           // mov    rdx, rsi
	LONG $0x0f768d48                   // lea    rsi, [rsi + 15]
	LONG $0xf0e68348                   // and    rsi, -16
	LONG $0x311c8d48                   // lea    rbx, [rcx + rsi]
	WORD $0x3948; BYTE $0xf8           // cmp    rax, rdi
	LONG $0x2444894c; BYTE $0x58       // mov    qword [rsp + 88], r8
	LONG $0x24748948; BYTE $0x50       // mov    qword [rsp + 80], rsi
	JNE  LBB0_2
	WORD $0x894c; BYTE $0xc0           // mov    rax, r8
	LONG $0xf0e08348                   // and    rax, -16
	WORD $0x394c; BYTE $0xc0           // cmp    rax, r8
	JNE  LBB0_2
	LONG $0x000001b8; BYTE $0x00       // mov    eax, 1

LBB0_11:
	LONG $0x008304c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rax], 0
	LONG $0x088344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 8], 0
	LONG $0x108344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 16], 0
	LONG $0x188344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 24], 0
	LONG $0x208344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 32], 0
	LONG $0x288344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 40], 0
	LONG $0x308344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 48], 0
	LONG $0x388344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 56], 0
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x10003d48; WORD $0x0000             // cmp    rax, 4096
	JB   LBB0_11
	LONG $0x31448d48; BYTE $0x38               // lea    rax, [rcx + rsi + 56]
	WORD $0xc931                               // xor    ecx, ecx

LBB0_13:
	LONG $0xc88844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 56], 0
	LONG $0xd08844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 48], 0
	LONG $0xd88844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 40], 0
	LONG $0xe08844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 32], 0
	LONG $0xe88844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 24], 0
	LONG $0xf08844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 16], 0
	LONG $0xf88844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 8], 0
	LONG $0x008804c7; WORD $0x0000; BYTE $0x00 // mov    dword [rax + 4*rcx], 0
	LONG $0x10c18348                           // add    rcx, 16
	LONG $0x00f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4096
	JB   LBB0_13
	LONG $0x093c8d4f                           // lea    r15, [r9 + r9]
	LONG $0x247c294c; BYTE $0x28               // sub    qword [rsp + 40], r15
	JE   LBB0_15
	LONG $0x248c8b48; LONG $0x000000a8         // mov    rcx, qword 168[rsp] /* [rbp + 24] */
	LONG $0x09348d4e                           // lea    r14, [rcx + r9]
	WORD $0x8949; BYTE $0xd4                   // mov    r12, rdx
	WORD $0x294d; BYTE $0xfc                   // sub    r12, r15
	LONG $0x09748d4a; BYTE $0x0f               // lea    rsi, [rcx + r9 + 15]
	LONG $0xf0e68348                           // and    rsi, -16
	WORD $0x294c; BYTE $0xf6                   // sub    rsi, r14
	WORD $0x894d; BYTE $0xe3                   // mov    r11, r12
	WORD $0x2949; BYTE $0xf3                   // sub    r11, rsi
	LONG $0xf0e38349                           // and    r11, -16
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	LONG $0x244c8b48; BYTE $0x08               // mov    rcx, qword [rsp + 8]
	WORD $0x8949; BYTE $0xcd                   // mov    r13, rcx
	WORD $0x894c; BYTE $0xe8                   // mov    rax, r13
	LONG $0xc0af0f49                           // imul    rax, r8
	WORD $0x894d; BYTE $0xe2                   // mov    r10, r12
	LONG $0xfce28349                           // and    r10, -4
	LONG $0x01488d49                           // lea    rcx, [r8 + 1]
	LONG $0xc9af0f49                           // imul    rcx, r9
	WORD $0x0148; BYTE $0xcf                   // add    rdi, rcx
	WORD $0xf749; BYTE $0xdd                   // neg    r13
	LONG $0x246c894c; BYTE $0x18               // mov    qword [rsp + 24], r13
	WORD $0x8948; BYTE $0xc1                   // mov    rcx, rax
	LONG $0x244c8948; BYTE $0x20               // mov    qword [rsp + 32], rcx
	WORD $0xf748; BYTE $0xd8                   // neg    rax
	LONG $0x24448948; BYTE $0x10               // mov    qword [rsp + 16], rax
	WORD $0xff48; BYTE $0xca                   // dec    rdx
	WORD $0x294c; BYTE $0xfa                   // sub    rdx, r15
	LONG $0x24548948; BYTE $0x40               // mov    qword [rsp + 64], rdx
	LONG $0x24848b48; LONG $0x000000a8         // mov    rax, qword 168[rsp] /* [rbp + 24] */
	LONG $0x08548d4a; BYTE $0x03               // lea    rdx, [rax + r9 + 3]
	WORD $0x894d; BYTE $0xf1                   // mov    r9, r14
	WORD $0xc031                               // xor    eax, eax
	LONG $0x2464894c; BYTE $0x38               // mov    qword [rsp + 56], r12
	LONG $0x24748948; BYTE $0x30               // mov    qword [rsp + 48], rsi

LBB0_18:
	LONG $0x24448948; BYTE $0x48 // mov    qword [rsp + 72], rax
	WORD $0x8548; BYTE $0xf6     // test    rsi, rsi
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB0_20
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x046f0ff3; BYTE $0x07 // movdqu    xmm0, oword [rdi + rax]
	LONG $0x0f6f0ff3             // movdqu    xmm1, oword [rdi]
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x146f0ff3; BYTE $0x07 // movdqu    xmm2, oword [rdi + rax]
	LONG $0xd0e00f66             // pavgb    xmm2, xmm0
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xc1de0f66             // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66             // pminub    xmm2, xmm1
	LONG $0xc2f80f66             // psubb    xmm0, xmm2
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x146f0ff3; BYTE $0x07 // movdqu    xmm2, oword [rdi + rax]
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	LONG $0x1c6f0ff3; BYTE $0x07 // movdqu    xmm3, oword [rdi + rax]
	LONG $0xdae00f66             // pavgb    xmm3, xmm2
	LONG $0xd36f0f66             // movdqa    xmm2, xmm3
	LONG $0xd1de0f66             // pmaxub    xmm2, xmm1
	LONG $0xd9da0f66             // pminub    xmm3, xmm1
	LONG $0xd3f80f66             // psubb    xmm2, xmm3
	LONG $0xd0de0f66             // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; BYTE $0x11 // movdqu    oword [r9], xmm2
	WORD $0x8948; BYTE $0xf0     // mov    rax, rsi

LBB0_20:
	WORD $0x394c; BYTE $0xd8     // cmp    rax, r11
	JGE  LBB0_23
	LONG $0x244c8b48; BYTE $0x20 // mov    rcx, qword [rsp + 32]
	LONG $0x013c8d4c             // lea    r15, [rcx + rax]
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	LONG $0x01048d4c             // lea    r8, [rcx + rax]
	LONG $0x244c8b48; BYTE $0x08 // mov    rcx, qword [rsp + 8]
	LONG $0x012c8d4c             // lea    r13, [rcx + rax]
	LONG $0x244c8b48; BYTE $0x18 // mov    rcx, qword [rsp + 24]
	LONG $0x01248d4c             // lea    r12, [rcx + rax]
	WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d

LBB0_22:
	WORD $0x894c; BYTE $0xc9       // mov    rcx, r9
	LONG $0x340c8d4f               // lea    r9, [r12 + r14]
	LONG $0x6f0f42f3; WORD $0x0f04 // movdqu    xmm0, oword [rdi + r9]
	WORD $0x8949; BYTE $0xc9       // mov    r9, rcx
	LONG $0x30348d4a               // lea    rsi, [rax + r14]
	LONG $0x0c6f0f66; BYTE $0x37   // movdqa    xmm1, oword [rdi + rsi]
	LONG $0x354c8d4b; BYTE $0x00   // lea    rcx, [r13 + r14]
	LONG $0x146f0ff3; BYTE $0x0f   // movdqu    xmm2, oword [rdi + rcx]
	LONG $0xd0e00f66               // pavgb    xmm2, xmm0
	LONG $0xc26f0f66               // movdqa    xmm0, xmm2
	LONG $0xc1de0f66               // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66               // pminub    xmm2, xmm1
	LONG $0xc2f80f66               // psubb    xmm0, xmm2
	LONG $0x300c8d4b               // lea    rcx, [r8 + r14]
	LONG $0x146f0f66; BYTE $0x0f   // movdqa    xmm2, oword [rdi + rcx]
	LONG $0x370c8d4b               // lea    rcx, [r15 + r14]
	LONG $0x14e00f66; BYTE $0x0f   // pavgb    xmm2, oword [rdi + rcx]
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xd9de0f66               // pmaxub    xmm3, xmm1
	LONG $0xd1da0f66               // pminub    xmm2, xmm1
	LONG $0xdaf80f66               // psubb    xmm3, xmm2
	LONG $0xd8de0f66               // pmaxub    xmm3, xmm0
	LONG $0x7f0f4166; WORD $0x311c // movdqa    oword [r9 + rsi], xmm3
	LONG $0x304c8d4a; BYTE $0x10   // lea    rcx, [rax + r14 + 16]
	LONG $0x10c68349               // add    r14, 16
	WORD $0x394c; BYTE $0xd9       // cmp    rcx, r11
	JL   LBB0_22

LBB0_23:
	LONG $0x24648b4c; BYTE $0x38               // mov    r12, qword [rsp + 56]
	WORD $0x394d; BYTE $0xdc                   // cmp    r12, r11
	JE   LBB0_25
	LONG $0x27048d4a                           // lea    rax, [rdi + r12]
	LONG $0x244c8b48; BYTE $0x18               // mov    rcx, qword [rsp + 24]
	LONG $0x446f0ff3; WORD $0xf001             // movdqu    xmm0, oword [rcx + rax - 16]
	LONG $0x6f0f42f3; WORD $0x274c; BYTE $0xf0 // movdqu    xmm1, oword [rdi + r12 - 16]
	LONG $0x244c8b48; BYTE $0x08               // mov    rcx, qword [rsp + 8]
	LONG $0x546f0ff3; WORD $0xf001             // movdqu    xmm2, oword [rcx + rax - 16]
	LONG $0xd0e00f66                           // pavgb    xmm2, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x244c8b48; BYTE $0x10               // mov    rcx, qword [rsp + 16]
	LONG $0x546f0ff3; WORD $0xf001             // movdqu    xmm2, oword [rcx + rax - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x5c6f0ff3; WORD $0xf001             // movdqu    xmm3, oword [rcx + rax - 16]
	LONG $0xdae00f66                           // pavgb    xmm3, xmm2
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xd3f80f66                           // psubb    xmm2, xmm3
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0x7f0f43f3; WORD $0x2154; BYTE $0xf0 // movdqu    oword [r9 + r12 - 16], xmm2

LBB0_25:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	LONG $0x24448b4c; BYTE $0x58 // mov    r8, qword [rsp + 88]
	JE   LBB0_29
	WORD $0xc031                 // xor    eax, eax

LBB0_27:
	LONG $0x024cb60f; BYTE $0xfd               // movzx    ecx, byte [rdx + rax - 3]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x024cb60f; BYTE $0xfe               // movzx    ecx, byte [rdx + rax - 2]
	LONG $0x008b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1024]
	LONG $0x024cb60f; BYTE $0xff               // movzx    ecx, byte [rdx + rax - 1]
	LONG $0x008b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2048]
	LONG $0x020cb60f                           // movzx    ecx, byte [rdx + rax]
	LONG $0x008b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3072]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xd0                   // cmp    rax, r10
	JB   LBB0_27
	WORD $0x894c; BYTE $0xd0                   // mov    rax, r10

LBB0_29:
	WORD $0x394c; BYTE $0xe0     // cmp    rax, r12
	JAE  LBB0_36
	WORD $0x8945; BYTE $0xe7     // mov    r15d, r12d
	WORD $0x2941; BYTE $0xc7     // sub    r15d, eax
	LONG $0x244c8b48; BYTE $0x40 // mov    rcx, qword [rsp + 64]
	WORD $0x2948; BYTE $0xc1     // sub    rcx, rax
	LONG $0x03e78341             // and    r15d, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB0_33
	WORD $0x894c; BYTE $0xe1     // mov    rcx, r12
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15

LBB0_32:
	LONG $0x0274b60f; BYTE $0xfd // movzx    esi, byte [rdx + rax - 3]
	WORD $0x04ff; BYTE $0xb3     // inc    dword [rbx + 4*rsi]
	LONG $0x0274b60f; BYTE $0xfe // movzx    esi, byte [rdx + rax - 2]
	WORD $0x04ff; BYTE $0xb3     // inc    dword [rbx + 4*rsi]
	LONG $0x0274b60f; BYTE $0xff // movzx    esi, byte [rdx + rax - 1]
	WORD $0x04ff; BYTE $0xb3     // inc    dword [rbx + 4*rsi]
	LONG $0x0234b60f             // movzx    esi, byte [rdx + rax]
	WORD $0x04ff; BYTE $0xb3     // inc    dword [rbx + 4*rsi]
	LONG $0x04c08348             // add    rax, 4
	WORD $0x3948; BYTE $0xc1     // cmp    rcx, rax
	JNE  LBB0_32

LBB0_33:
	WORD $0x854d; BYTE $0xff // test    r15, r15
	JE   LBB0_36
	WORD $0x014c; BYTE $0xc8 // add    rax, r9
	WORD $0xf749; BYTE $0xdf // neg    r15

LBB0_35:
	WORD $0xb60f; BYTE $0x08 // movzx    ecx, byte [rax]
	WORD $0x04ff; BYTE $0x8b // inc    dword [rbx + 4*rcx]
	WORD $0xff48; BYTE $0xc0 // inc    rax
	WORD $0xff49; BYTE $0xc7 // inc    r15
	JNE  LBB0_35

LBB0_36:
	WORD $0x014c; BYTE $0xc7     // add    rdi, r8
	LONG $0x24448b48; BYTE $0x48 // mov    rax, qword [rsp + 72]
	WORD $0xff48; BYTE $0xc0     // inc    rax
	LONG $0x24443b48; BYTE $0x28 // cmp    rax, qword [rsp + 40]
	LONG $0x24748b48; BYTE $0x30 // mov    rsi, qword [rsp + 48]
	JNE  LBB0_18

LBB0_15:
	LONG $0x24848b48; LONG $0x000000a8 // mov    rax, qword 168[rsp] /* [rbp + 24] */
	LONG $0x244c8b48; BYTE $0x50       // mov    rcx, qword [rsp + 80]
	LONG $0x08848d48; LONG $0x00000c10 // lea    rax, [rax + rcx + 3088]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24948b48; LONG $0x000000a0 // mov    rdx, qword 160[rsp] /* [rbp + 16] */

LBB0_16:
	LONG $0x846f0f66; LONG $0xfff7f088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2064]
	LONG $0x84fe0f66; LONG $0xfff3f088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3088]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    oword [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff80088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2048]
	LONG $0x84fe0f66; LONG $0xfff40088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3072]
	LONG $0x84fe0f66; LONG $0xfffc0088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1024]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    oword [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB0_16
	JMP  LBB0_9

LBB0_2:
	LONG $0x000001b8; BYTE $0x00 // mov    eax, 1

LBB0_3:
	LONG $0x008304c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rax], 0
	LONG $0x088344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 8], 0
	LONG $0x108344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 16], 0
	LONG $0x188344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 24], 0
	LONG $0x208344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 32], 0
	LONG $0x288344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 40], 0
	LONG $0x308344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 48], 0
	LONG $0x388344c7; LONG $0x00000000         // mov    dword [rbx + 4*rax + 56], 0
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x10003d48; WORD $0x0000             // cmp    rax, 4096
	JB   LBB0_3
	LONG $0x31448d48; BYTE $0x38               // lea    rax, [rcx + rsi + 56]
	WORD $0xc931                               // xor    ecx, ecx

LBB0_5:
	LONG $0xc88844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 56], 0
	LONG $0xd08844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 48], 0
	LONG $0xd88844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 40], 0
	LONG $0xe08844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 32], 0
	LONG $0xe88844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 24], 0
	LONG $0xf08844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 16], 0
	LONG $0xf88844c7; LONG $0x00000000         // mov    dword [rax + 4*rcx - 8], 0
	LONG $0x008804c7; WORD $0x0000; BYTE $0x00 // mov    dword [rax + 4*rcx], 0
	LONG $0x10c18348                           // add    rcx, 16
	LONG $0x00f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4096
	JB   LBB0_5
	LONG $0x091c8d4f                           // lea    r11, [r9 + r9]
	LONG $0x245c294c; BYTE $0x28               // sub    qword [rsp + 40], r11
	JE   LBB0_7
	LONG $0x24848b48; LONG $0x000000a8         // mov    rax, qword 168[rsp] /* [rbp + 24] */
	LONG $0x08148d4e                           // lea    r10, [rax + r9]
	WORD $0x8949; BYTE $0xd6                   // mov    r14, rdx
	WORD $0x294d; BYTE $0xde                   // sub    r14, r11
	LONG $0x087c8d4e; BYTE $0x0f               // lea    r15, [rax + r9 + 15]
	LONG $0xf0e78349                           // and    r15, -16
	WORD $0x294d; BYTE $0xd7                   // sub    r15, r10
	WORD $0x894d; BYTE $0xf4                   // mov    r12, r14
	WORD $0x294d; BYTE $0xfc                   // sub    r12, r15
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x014d; BYTE $0xfc                   // add    r12, r15
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	WORD $0x8948; BYTE $0xc1                   // mov    rcx, rax
	WORD $0x8948; BYTE $0xce                   // mov    rsi, rcx
	LONG $0xf0af0f49                           // imul    rsi, r8
	WORD $0x894d; BYTE $0xf5                   // mov    r13, r14
	LONG $0xfce58349                           // and    r13, -4
	LONG $0x01408d49                           // lea    rax, [r8 + 1]
	LONG $0xc1af0f49                           // imul    rax, r9
	WORD $0x0148; BYTE $0xc7                   // add    rdi, rax
	WORD $0xf748; BYTE $0xd9                   // neg    rcx
	LONG $0x244c8948; BYTE $0x18               // mov    qword [rsp + 24], rcx
	WORD $0x8948; BYTE $0xf0                   // mov    rax, rsi
	LONG $0x24448948; BYTE $0x20               // mov    qword [rsp + 32], rax
	WORD $0xf748; BYTE $0xde                   // neg    rsi
	LONG $0x24748948; BYTE $0x10               // mov    qword [rsp + 16], rsi
	WORD $0xff48; BYTE $0xca                   // dec    rdx
	WORD $0x294c; BYTE $0xda                   // sub    rdx, r11
	LONG $0x24548948; BYTE $0x40               // mov    qword [rsp + 64], rdx
	LONG $0x24848b48; LONG $0x000000a8         // mov    rax, qword 168[rsp] /* [rbp + 24] */
	LONG $0x08748d4a; BYTE $0x03               // lea    rsi, [rax + r9 + 3]
	WORD $0xc031                               // xor    eax, eax
	LONG $0x2474894c; BYTE $0x38               // mov    qword [rsp + 56], r14
	LONG $0x247c894c; BYTE $0x30               // mov    qword [rsp + 48], r15
	LONG $0x246c894c; BYTE $0x60               // mov    qword [rsp + 96], r13

LBB0_38:
	LONG $0x24448948; BYTE $0x48 // mov    qword [rsp + 72], rax
	WORD $0x854d; BYTE $0xff     // test    r15, r15
	LONG $0x000000b9; BYTE $0x00 // mov    ecx, 0
	JE   LBB0_40
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x046f0ff3; BYTE $0x07 // movdqu    xmm0, oword [rdi + rax]
	LONG $0x0f6f0ff3             // movdqu    xmm1, oword [rdi]
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x146f0ff3; BYTE $0x07 // movdqu    xmm2, oword [rdi + rax]
	LONG $0xd0e00f66             // pavgb    xmm2, xmm0
	LONG $0xc26f0f66             // movdqa    xmm0, xmm2
	LONG $0xc1de0f66             // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66             // pminub    xmm2, xmm1
	LONG $0xc2f80f66             // psubb    xmm0, xmm2
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x146f0ff3; BYTE $0x07 // movdqu    xmm2, oword [rdi + rax]
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	LONG $0x1c6f0ff3; BYTE $0x07 // movdqu    xmm3, oword [rdi + rax]
	LONG $0xdae00f66             // pavgb    xmm3, xmm2
	LONG $0xd36f0f66             // movdqa    xmm2, xmm3
	LONG $0xd1de0f66             // pmaxub    xmm2, xmm1
	LONG $0xd9da0f66             // pminub    xmm3, xmm1
	LONG $0xd3f80f66             // psubb    xmm2, xmm3
	LONG $0xd0de0f66             // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; BYTE $0x12 // movdqu    oword [r10], xmm2
	WORD $0x894c; BYTE $0xf9     // mov    rcx, r15

LBB0_40:
	WORD $0x394c; BYTE $0xe1     // cmp    rcx, r12
	WORD $0x894d; BYTE $0xd7     // mov    r15, r10
	JGE  LBB0_43
	LONG $0x24448b48; BYTE $0x20 // mov    rax, qword [rsp + 32]
	LONG $0x082c8d4c             // lea    r13, [rax + rcx]
	LONG $0x24448b48; BYTE $0x10 // mov    rax, qword [rsp + 16]
	LONG $0x08348d4c             // lea    r14, [rax + rcx]
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x081c8d4c             // lea    r11, [rax + rcx]
	LONG $0x24448b48; BYTE $0x18 // mov    rax, qword [rsp + 24]
	LONG $0x08148d4c             // lea    r10, [rax + rcx]
	WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d

LBB0_42:
	LONG $0x02048d4b               // lea    rax, [r10 + r8]
	LONG $0x046f0ff3; BYTE $0x07   // movdqu    xmm0, oword [rdi + rax]
	LONG $0x01048d4a               // lea    rax, [rcx + r8]
	LONG $0x0c6f0ff3; BYTE $0x07   // movdqu    xmm1, oword [rdi + rax]
	LONG $0x030c8d4f               // lea    r9, [r11 + r8]
	LONG $0x6f0f42f3; WORD $0x0f14 // movdqu    xmm2, oword [rdi + r9]
	LONG $0xd0e00f66               // pavgb    xmm2, xmm0
	LONG $0xc26f0f66               // movdqa    xmm0, xmm2
	LONG $0xc1de0f66               // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66               // pminub    xmm2, xmm1
	LONG $0xc2f80f66               // psubb    xmm0, xmm2
	LONG $0x06148d4b               // lea    rdx, [r14 + r8]
	LONG $0x146f0ff3; BYTE $0x17   // movdqu    xmm2, oword [rdi + rdx]
	LONG $0x05548d4b; BYTE $0x00   // lea    rdx, [r13 + r8]
	LONG $0x1c6f0ff3; BYTE $0x17   // movdqu    xmm3, oword [rdi + rdx]
	LONG $0xdae00f66               // pavgb    xmm3, xmm2
	LONG $0xd36f0f66               // movdqa    xmm2, xmm3
	LONG $0xd1de0f66               // pmaxub    xmm2, xmm1
	LONG $0xd9da0f66               // pminub    xmm3, xmm1
	LONG $0xd3f80f66               // psubb    xmm2, xmm3
	LONG $0xd0de0f66               // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; WORD $0x0714 // movdqu    oword [r15 + rax], xmm2
	LONG $0x01448d4a; BYTE $0x10   // lea    rax, [rcx + r8 + 16]
	LONG $0x10c08349               // add    r8, 16
	WORD $0x394c; BYTE $0xe0       // cmp    rax, r12
	JL   LBB0_42

LBB0_43:
	LONG $0x24748b4c; BYTE $0x38               // mov    r14, qword [rsp + 56]
	WORD $0x394d; BYTE $0xe6                   // cmp    r14, r12
	WORD $0x894d; BYTE $0xfa                   // mov    r10, r15
	JE   LBB0_45
	LONG $0x37048d4a                           // lea    rax, [rdi + r14]
	LONG $0x244c8b48; BYTE $0x18               // mov    rcx, qword [rsp + 24]
	LONG $0x446f0ff3; WORD $0xf001             // movdqu    xmm0, oword [rcx + rax - 16]
	LONG $0x6f0f42f3; WORD $0x374c; BYTE $0xf0 // movdqu    xmm1, oword [rdi + r14 - 16]
	LONG $0x244c8b48; BYTE $0x08               // mov    rcx, qword [rsp + 8]
	LONG $0x546f0ff3; WORD $0xf001             // movdqu    xmm2, oword [rcx + rax - 16]
	LONG $0xd0e00f66                           // pavgb    xmm2, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xc2f80f66                           // psubb    xmm0, xmm2
	LONG $0x244c8b48; BYTE $0x10               // mov    rcx, qword [rsp + 16]
	LONG $0x546f0ff3; WORD $0xf001             // movdqu    xmm2, oword [rcx + rax - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x5c6f0ff3; WORD $0xf001             // movdqu    xmm3, oword [rcx + rax - 16]
	LONG $0xdae00f66                           // pavgb    xmm3, xmm2
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xd3f80f66                           // psubb    xmm2, xmm3
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0x7f0f43f3; WORD $0x3254; BYTE $0xf0 // movdqu    oword [r10 + r14 - 16], xmm2

LBB0_45:
	LONG $0x246c8b4c; BYTE $0x60 // mov    r13, qword [rsp + 96]
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000b9; BYTE $0x00 // mov    ecx, 0
	LONG $0x244c8b4c; BYTE $0x58 // mov    r9, qword [rsp + 88]
	LONG $0x247c8b4c; BYTE $0x30 // mov    r15, qword [rsp + 48]
	JE   LBB0_49
	WORD $0xc031                 // xor    eax, eax

LBB0_47:
	LONG $0x064cb60f; BYTE $0xfd               // movzx    ecx, byte [rsi + rax - 3]
	WORD $0x04ff; BYTE $0x8b                   // inc    dword [rbx + 4*rcx]
	LONG $0x064cb60f; BYTE $0xfe               // movzx    ecx, byte [rsi + rax - 2]
	LONG $0x008b84ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rcx + 1024]
	LONG $0x064cb60f; BYTE $0xff               // movzx    ecx, byte [rsi + rax - 1]
	LONG $0x008b84ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rcx + 2048]
	LONG $0x060cb60f                           // movzx    ecx, byte [rsi + rax]
	LONG $0x008b84ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rcx + 3072]
	LONG $0x04c08348                           // add    rax, 4
	WORD $0x394c; BYTE $0xe8                   // cmp    rax, r13
	JB   LBB0_47
	WORD $0x894c; BYTE $0xe9                   // mov    rcx, r13

LBB0_49:
	WORD $0x394c; BYTE $0xf1     // cmp    rcx, r14
	JAE  LBB0_56
	WORD $0x8944; BYTE $0xf2     // mov    edx, r14d
	WORD $0xca29                 // sub    edx, ecx
	LONG $0x24448b48; BYTE $0x40 // mov    rax, qword [rsp + 64]
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f88348             // cmp    rax, 3
	JB   LBB0_53
	WORD $0x894d; BYTE $0xf0     // mov    r8, r14
	WORD $0x2949; BYTE $0xd0     // sub    r8, rdx

LBB0_52:
	LONG $0x0e44b60f; BYTE $0xfd // movzx    eax, byte [rsi + rcx - 3]
	WORD $0x04ff; BYTE $0x83     // inc    dword [rbx + 4*rax]
	LONG $0x0e44b60f; BYTE $0xfe // movzx    eax, byte [rsi + rcx - 2]
	WORD $0x04ff; BYTE $0x83     // inc    dword [rbx + 4*rax]
	LONG $0x0e44b60f; BYTE $0xff // movzx    eax, byte [rsi + rcx - 1]
	WORD $0x04ff; BYTE $0x83     // inc    dword [rbx + 4*rax]
	LONG $0x0e04b60f             // movzx    eax, byte [rsi + rcx]
	WORD $0x04ff; BYTE $0x83     // inc    dword [rbx + 4*rax]
	LONG $0x04c18348             // add    rcx, 4
	WORD $0x3949; BYTE $0xc8     // cmp    r8, rcx
	JNE  LBB0_52

LBB0_53:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB0_56
	WORD $0x014c; BYTE $0xd1 // add    rcx, r10
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB0_55:
	WORD $0xb60f; BYTE $0x01 // movzx    eax, byte [rcx]
	WORD $0x04ff; BYTE $0x83 // inc    dword [rbx + 4*rax]
	WORD $0xff48; BYTE $0xc1 // inc    rcx
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB0_55

LBB0_56:
	WORD $0x014c; BYTE $0xcf     // add    rdi, r9
	LONG $0x24448b48; BYTE $0x48 // mov    rax, qword [rsp + 72]
	WORD $0xff48; BYTE $0xc0     // inc    rax
	LONG $0x24443b48; BYTE $0x28 // cmp    rax, qword [rsp + 40]
	JNE  LBB0_38

LBB0_7:
	LONG $0x24848b48; LONG $0x000000a8 // mov    rax, qword 168[rsp] /* [rbp + 24] */
	LONG $0x244c8b48; BYTE $0x50       // mov    rcx, qword [rsp + 80]
	LONG $0x08848d48; LONG $0x00000c10 // lea    rax, [rax + rcx + 3088]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24948b48; LONG $0x000000a0 // mov    rdx, qword 160[rsp] /* [rbp + 16] */

LBB0_8:
	LONG $0x846f0f66; LONG $0xfff7f088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2064]
	LONG $0x84fe0f66; LONG $0xfff3f088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3088]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8a                   // movdqu    oword [rdx + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff80088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2048]
	LONG $0x84fe0f66; LONG $0xfff40088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3072]
	LONG $0x84fe0f66; LONG $0xfffc0088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1024]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108a                 // movdqu    oword [rdx + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB0_8

LBB0_9:
	SUBQ $8, SP
	RET

DATA LCDATA1<>+0x000(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x008(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x010(SB)/8, $0x0004000400040004
DATA LCDATA1<>+0x018(SB)/8, $0x0004000400040004
GLOBL LCDATA1<>(SB), 8, $32

TEXT Â·_SimdSse2HistogramMasked(SB), 7, $40-72

	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	LEAQ LCDATA1<>(SB), BP
	ADDQ $8, SP

	LONG $0x244c894c; BYTE $0x10                     // mov    qword [rsp + 16], r9
	LONG $0x240c8948                                 // mov    qword [rsp], rcx
	WORD $0x8949; BYTE $0xd2                         // mov    r10, rdx
	LONG $0x24448b48; BYTE $0x70                     // mov    rax, qword 112[rsp] /* [rbp + 32] */
	LONG $0x244c8b4c; BYTE $0x68                     // mov    r9, qword 104[rsp] /* [rbp + 24] */
	LONG $0x245c8b4c; BYTE $0x60                     // mov    r11, qword 96[rsp] /* [rbp + 16] */
	WORD $0x8948; BYTE $0xf1                         // mov    rcx, rsi
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x24748948; BYTE $0x18                     // mov    qword [rsp + 24], rsi
	WORD $0x3948; BYTE $0xf1                         // cmp    rcx, rsi
	JNE  LBB1_32
	WORD $0x8948; BYTE $0xf9                         // mov    rcx, rdi
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xf9                         // cmp    rcx, rdi
	JNE  LBB1_32
	LONG $0x24548b48; BYTE $0x10                     // mov    rdx, qword [rsp + 16]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB1_32
	WORD $0x894c; BYTE $0xc1                         // mov    rcx, r8
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x394c; BYTE $0xc1                         // cmp    rcx, r8
	JNE  LBB1_32
	LONG $0x0f4a8d49                                 // lea    rcx, [r10 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x502c8d4c                                 // lea    r13, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB1_5:
	LONG $0x8d44c741; LONG $0x00000000; BYTE $0x00 // mov    dword [r13 + 4*rcx], 0
	LONG $0x8d44c741; LONG $0x00000008; BYTE $0x00 // mov    dword [r13 + 4*rcx + 8], 0
	LONG $0x8d44c741; LONG $0x00000010; BYTE $0x00 // mov    dword [r13 + 4*rcx + 16], 0
	LONG $0x8d44c741; LONG $0x00000018; BYTE $0x00 // mov    dword [r13 + 4*rcx + 24], 0
	LONG $0x8d44c741; LONG $0x00000020; BYTE $0x00 // mov    dword [r13 + 4*rcx + 32], 0
	LONG $0x8d44c741; LONG $0x00000028; BYTE $0x00 // mov    dword [r13 + 4*rcx + 40], 0
	LONG $0x8d44c741; LONG $0x00000030; BYTE $0x00 // mov    dword [r13 + 4*rcx + 48], 0
	LONG $0x8d44c741; LONG $0x00000038; BYTE $0x00 // mov    dword [r13 + 4*rcx + 56], 0
	LONG $0x8d44c741; LONG $0x00000040; BYTE $0x00 // mov    dword [r13 + 4*rcx + 64], 0
	LONG $0x8d44c741; LONG $0x00000048; BYTE $0x00 // mov    dword [r13 + 4*rcx + 72], 0
	LONG $0x8d44c741; LONG $0x00000050; BYTE $0x00 // mov    dword [r13 + 4*rcx + 80], 0
	LONG $0x8d44c741; LONG $0x00000058; BYTE $0x00 // mov    dword [r13 + 4*rcx + 88], 0
	LONG $0x8d44c741; LONG $0x00000060; BYTE $0x00 // mov    dword [r13 + 4*rcx + 96], 0
	LONG $0x1ac18348                               // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00     // cmp    rcx, 4160
	JB   LBB1_5
	LONG $0x24548948; BYTE $0x20                   // mov    qword [rsp + 32], rdx
	LONG $0x50548d48; BYTE $0x60                   // lea    rdx, [rax + 2*rdx + 96]
	WORD $0xc931                                   // xor    ecx, ecx

LBB1_7:
	LONG $0xa08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 96], 0
	LONG $0xa88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 88], 0
	LONG $0xb08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 80], 0
	LONG $0xb88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 72], 0
	LONG $0xc08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 64], 0
	LONG $0xc88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 56], 0
	LONG $0xd08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 48], 0
	LONG $0xd88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 40], 0
	LONG $0xe08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 32], 0
	LONG $0xe88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 24], 0
	LONG $0xf08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 16], 0
	LONG $0xf88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 8], 0
	LONG $0x008a04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rdx + 4*rcx], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB1_7
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB1_14
	WORD $0x894d; BYTE $0xd6                   // mov    r14, r10
	LONG $0xfce68349                           // and    r14, -4
	WORD $0x894d; BYTE $0xd7                   // mov    r15, r10
	LONG $0xf0e78349                           // and    r15, -16
	WORD $0x894d; BYTE $0xd4                   // mov    r12, r10
	LONG $0xe0e48349                           // and    r12, -32
	LONG $0x6e0f4166; BYTE $0xc3               // movd    xmm0, r11d
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff4a8d49                           // lea    rcx, [r10 - 1]
	LONG $0x244c8948; BYTE $0x08               // mov    qword [rsp + 8], rcx
	WORD $0x3145; BYTE $0xdb                   // xor    r11d, r11d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_10:
	WORD $0x854d; BYTE $0xe4     // test    r12, r12
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_17
	WORD $0xd231                 // xor    edx, edx

LBB1_12:
	LONG $0x246f0f66; BYTE $0x17               // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c             // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x646f0f66; WORD $0x1017             // movdqa    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f4166; WORD $0x106c; BYTE $0x10 // movdqa    xmm5, oword [r8 + rdx + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm5
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB1_12
	WORD $0x894c; BYTE $0xe2                   // mov    rdx, r12
	JMP  LBB1_17

LBB1_16:
	LONG $0x246f0f66; BYTE $0x17   // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66               // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66               // pand    xmm5, xmm1
	LONG $0xf46f0f66               // movdqa    xmm6, xmm4
	LONG $0xf2600f66               // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xfd6f0f66               // movdqa    xmm7, xmm5
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66               // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xea680f66               // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66               // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x10c28348               // add    rdx, 16

LBB1_17:
	WORD $0x394c; BYTE $0xfa                   // cmp    rdx, r15
	JB   LBB1_16
	WORD $0x394d; BYTE $0xd7                   // cmp    r15, r10
	JE   LBB1_20
	LONG $0x6f0f42f3; WORD $0x1764; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r10 - 16]
	LONG $0x6f0f43f3; WORD $0x106c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r10 - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f42f3; WORD $0x507c; BYTE $0xe0 // movdqu    oword [rax + 2*r10 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f42f3; WORD $0x506c; BYTE $0xf0 // movdqu    oword [rax + 2*r10 - 16], xmm5

LBB1_20:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB1_24
	WORD $0xc931                 // xor    ecx, ecx

LBB1_22:
	LONG $0x4814b70f                   // movzx    edx, word [rax + 2*rcx]
	LONG $0x9544ff41; BYTE $0x00       // inc    dword [r13 + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02       // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x9584ff41; LONG $0x00000410 // inc    dword [r13 + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04       // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x9584ff41; LONG $0x00000820 // inc    dword [r13 + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06       // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x9584ff41; LONG $0x00000c30 // inc    dword [r13 + 4*rdx + 3120]
	LONG $0x04c18348                   // add    rcx, 4
	WORD $0x394c; BYTE $0xf1           // cmp    rcx, r14
	JB   LBB1_22
	WORD $0x894c; BYTE $0xf3           // mov    rbx, r14

LBB1_24:
	WORD $0x394c; BYTE $0xd3     // cmp    rbx, r10
	JAE  LBB1_31
	WORD $0x8944; BYTE $0xd2     // mov    edx, r10d
	WORD $0xda29                 // sub    edx, ebx
	LONG $0x244c8b48; BYTE $0x08 // mov    rcx, qword [rsp + 8]
	WORD $0x2948; BYTE $0xd9     // sub    rcx, rbx
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB1_28
	WORD $0x894c; BYTE $0xd1     // mov    rcx, r10
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB1_27:
	LONG $0x5834b70f             // movzx    esi, word [rax + 2*rbx]
	LONG $0xb544ff41; BYTE $0x00 // inc    dword [r13 + 4*rsi]
	LONG $0x5874b70f; BYTE $0x02 // movzx    esi, word [rax + 2*rbx + 2]
	LONG $0xb544ff41; BYTE $0x00 // inc    dword [r13 + 4*rsi]
	LONG $0x5874b70f; BYTE $0x04 // movzx    esi, word [rax + 2*rbx + 4]
	LONG $0xb544ff41; BYTE $0x00 // inc    dword [r13 + 4*rsi]
	LONG $0x5874b70f; BYTE $0x06 // movzx    esi, word [rax + 2*rbx + 6]
	LONG $0xb544ff41; BYTE $0x00 // inc    dword [r13 + 4*rsi]
	LONG $0x04c38348             // add    rbx, 4
	WORD $0x3948; BYTE $0xd9     // cmp    rcx, rbx
	JNE  LBB1_27

LBB1_28:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB1_31
	LONG $0x580c8d48         // lea    rcx, [rax + 2*rbx]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB1_30:
	WORD $0xb70f; BYTE $0x31     // movzx    esi, word [rcx]
	LONG $0xb544ff41; BYTE $0x00 // inc    dword [r13 + 4*rsi]
	LONG $0x02c18348             // add    rcx, 2
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_30

LBB1_31:
	LONG $0x247c0348; BYTE $0x18 // add    rdi, qword [rsp + 24]
	LONG $0x2444034c; BYTE $0x10 // add    r8, qword [rsp + 16]
	WORD $0xff49; BYTE $0xc3     // inc    r11
	LONG $0x241c3b4c             // cmp    r11, qword [rsp]
	JNE  LBB1_10

LBB1_14:
	LONG $0x244c8b48; BYTE $0x20       // mov    rcx, qword [rsp + 32]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB1_15:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8904                 // movdqu    oword [r9 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8944; BYTE $0x10     // movdqu    oword [r9 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB1_15
	JMP  LBB1_44

LBB1_32:
	LONG $0x0f4a8d49                                 // lea    rcx, [r10 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB1_33:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB1_33
	WORD $0x8948; BYTE $0xd6                   // mov    rsi, rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB1_35:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB1_35
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB1_42
	WORD $0x894d; BYTE $0xd1                   // mov    r9, r10
	LONG $0xfce18349                           // and    r9, -4
	WORD $0x894d; BYTE $0xd7                   // mov    r15, r10
	LONG $0xf0e78349                           // and    r15, -16
	WORD $0x894d; BYTE $0xd4                   // mov    r12, r10
	LONG $0xe0e48349                           // and    r12, -32
	LONG $0x6e0f4166; BYTE $0xc3               // movd    xmm0, r11d
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff4a8d49                           // lea    rcx, [r10 - 1]
	LONG $0x244c8948; BYTE $0x08               // mov    qword [rsp + 8], rcx
	WORD $0x3145; BYTE $0xdb                   // xor    r11d, r11d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_38:
	WORD $0x854d; BYTE $0xe4     // test    r12, r12
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_46
	WORD $0xd231                 // xor    edx, edx

LBB1_40:
	LONG $0x246f0ff3; BYTE $0x17               // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c             // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x646f0ff3; WORD $0x1017             // movdqu    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f41f3; WORD $0x106c; BYTE $0x10 // movdqu    xmm5, oword [r8 + rdx + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm5
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB1_40
	WORD $0x894c; BYTE $0xe2                   // mov    rdx, r12
	JMP  LBB1_46

LBB1_45:
	LONG $0x246f0ff3; BYTE $0x17   // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66               // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66               // pand    xmm5, xmm1
	LONG $0xf46f0f66               // movdqa    xmm6, xmm4
	LONG $0xf2600f66               // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xfd6f0f66               // movdqa    xmm7, xmm5
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66               // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xea680f66               // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66               // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x10c28348               // add    rdx, 16

LBB1_46:
	WORD $0x394c; BYTE $0xfa                   // cmp    rdx, r15
	JB   LBB1_45
	WORD $0x394d; BYTE $0xd7                   // cmp    r15, r10
	JE   LBB1_49
	LONG $0x6f0f42f3; WORD $0x1764; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r10 - 16]
	LONG $0x6f0f43f3; WORD $0x106c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r10 - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f42f3; WORD $0x507c; BYTE $0xe0 // movdqu    oword [rax + 2*r10 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f42f3; WORD $0x506c; BYTE $0xf0 // movdqu    oword [rax + 2*r10 - 16], xmm5

LBB1_49:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x0000be41; WORD $0x0000 // mov    r14d, 0
	JE   LBB1_53
	WORD $0xc931                   // xor    ecx, ecx

LBB1_51:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xc9                   // cmp    rcx, r9
	JB   LBB1_51
	WORD $0x894d; BYTE $0xce                   // mov    r14, r9

LBB1_53:
	WORD $0x394d; BYTE $0xd6     // cmp    r14, r10
	JAE  LBB1_60
	WORD $0x8945; BYTE $0xd5     // mov    r13d, r10d
	WORD $0x2945; BYTE $0xf5     // sub    r13d, r14d
	LONG $0x244c8b48; BYTE $0x08 // mov    rcx, qword [rsp + 8]
	WORD $0x294c; BYTE $0xf1     // sub    rcx, r14
	LONG $0x03e58341             // and    r13d, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB1_57
	WORD $0x894c; BYTE $0xd1     // mov    rcx, r10
	WORD $0x294c; BYTE $0xe9     // sub    rcx, r13

LBB1_56:
	LONG $0x14b70f42; BYTE $0x70   // movzx    edx, word [rax + 2*r14]
	WORD $0x04ff; BYTE $0x93       // inc    dword [rbx + 4*rdx]
	LONG $0x54b70f42; WORD $0x0270 // movzx    edx, word [rax + 2*r14 + 2]
	WORD $0x04ff; BYTE $0x93       // inc    dword [rbx + 4*rdx]
	LONG $0x54b70f42; WORD $0x0470 // movzx    edx, word [rax + 2*r14 + 4]
	WORD $0x04ff; BYTE $0x93       // inc    dword [rbx + 4*rdx]
	LONG $0x54b70f42; WORD $0x0670 // movzx    edx, word [rax + 2*r14 + 6]
	WORD $0x04ff; BYTE $0x93       // inc    dword [rbx + 4*rdx]
	LONG $0x04c68349               // add    r14, 4
	WORD $0x394c; BYTE $0xf1       // cmp    rcx, r14
	JNE  LBB1_56

LBB1_57:
	WORD $0x854d; BYTE $0xed // test    r13, r13
	JE   LBB1_60
	LONG $0x700c8d4a         // lea    rcx, [rax + 2*r14]
	WORD $0xf749; BYTE $0xdd // neg    r13

LBB1_59:
	WORD $0xb70f; BYTE $0x11 // movzx    edx, word [rcx]
	WORD $0x04ff; BYTE $0x93 // inc    dword [rbx + 4*rdx]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff49; BYTE $0xc5 // inc    r13
	JNE  LBB1_59

LBB1_60:
	LONG $0x247c0348; BYTE $0x18 // add    rdi, qword [rsp + 24]
	LONG $0x2444034c; BYTE $0x10 // add    r8, qword [rsp + 16]
	WORD $0xff49; BYTE $0xc3     // inc    r11
	LONG $0x241c3b4c             // cmp    r11, qword [rsp]
	JNE  LBB1_38

LBB1_42:
	LONG $0x70848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rsi + 3152]
	WORD $0xc931                       // xor    ecx, ecx
	LONG $0x24748b48; BYTE $0x68       // mov    rsi, qword 104[rsp] /* [rbp + 24] */

LBB1_43:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x047f0ff3; BYTE $0x8e                   // movdqu    oword [rsi + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x447f0ff3; WORD $0x108e                 // movdqu    oword [rsi + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB1_43

LBB1_44:
	SUBQ $8, SP
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x0101010101010101
DATA LCDATA2<>+0x008(SB)/8, $0x0101010101010101
DATA LCDATA2<>+0x010(SB)/8, $0x0004000400040004
DATA LCDATA2<>+0x018(SB)/8, $0x0004000400040004
GLOBL LCDATA2<>(SB), 8, $32

TEXT Â·_SimdSse2HistogramConditional(SB), 7, $40-80

	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	LEAQ LCDATA2<>(SB), BP
	ADDQ $8, SP

	LONG $0x244c894c; BYTE $0x18                     // mov    qword [rsp + 24], r9
	LONG $0x240c8948                                 // mov    qword [rsp], rcx
	WORD $0x8949; BYTE $0xd1                         // mov    r9, rdx
	LONG $0x24748948; BYTE $0x20                     // mov    qword [rsp + 32], rsi
	LONG $0x24448b48; BYTE $0x78                     // mov    rax, qword 120[rsp] /* [rbp + 40] */
	LONG $0x24548b4c; BYTE $0x70                     // mov    r10, qword 112[rsp] /* [rbp + 32] */
	LONG $0x68244c8b                                 // mov    ecx, dword 104[rsp] /* [rbp + 24] */
	LONG $0x24748a44; BYTE $0x60                     // mov    r14b, byte 96[rsp] /* [rbp + 16] */
	WORD $0xf983; BYTE $0x02                         // cmp    ecx, 2
	JG   LBB2_18
	WORD $0xc985                                     // test    ecx, ecx
	JE   LBB2_35
	WORD $0xf983; BYTE $0x01                         // cmp    ecx, 1
	JE   LBB2_95
	WORD $0xf983; BYTE $0x02                         // cmp    ecx, 2
	JNE  LBB2_351
	LONG $0x24548b48; BYTE $0x20                     // mov    rdx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_173
	WORD $0x8948; BYTE $0xf9                         // mov    rcx, rdi
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xf9                         // cmp    rcx, rdi
	JNE  LBB2_173
	LONG $0x24548b48; BYTE $0x18                     // mov    rdx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_173
	WORD $0x894c; BYTE $0xc1                         // mov    rcx, r8
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x394c; BYTE $0xc1                         // cmp    rcx, r8
	JNE  LBB2_173
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_9:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_9
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB2_11:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB2_11
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_155
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_14:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_158
	WORD $0xd231                 // xor    edx, edx

LBB2_16:
	LONG $0x246f0f66; BYTE $0x17               // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c             // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x646f0f66; WORD $0x1017             // movdqa    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f4166; WORD $0x106c; BYTE $0x10 // movdqa    xmm5, oword [r8 + rdx + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm6
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_16
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_158

LBB2_157:
	LONG $0x246f0f66; BYTE $0x17   // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf0da0f66               // pminub    xmm6, xmm0
	LONG $0xf5740f66               // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66               // pandn    xmm6, xmm1
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xea600f66               // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66               // paddw    xmm5, xmm3
	LONG $0xfe6f0f66               // movdqa    xmm7, xmm6
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66               // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xf2680f66               // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66               // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x10c28348               // add    rdx, 16

LBB2_158:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_157
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_161
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f42f3; WORD $0x4874; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm6

LBB2_161:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_165
	WORD $0xc931                   // xor    ecx, ecx

LBB2_163:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_163
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_165:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_172
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_169
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_168:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_168

LBB2_169:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_172
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_171:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_171

LBB2_172:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_14

LBB2_155:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_156:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_156
	JMP  LBB2_351

LBB2_18:
	WORD $0xf983; BYTE $0x03                         // cmp    ecx, 3
	JE   LBB2_201
	WORD $0xf983; BYTE $0x04                         // cmp    ecx, 4
	JE   LBB2_261
	WORD $0xf983; BYTE $0x05                         // cmp    ecx, 5
	JNE  LBB2_351
	LONG $0x24548b48; BYTE $0x20                     // mov    rdx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_339
	WORD $0x8948; BYTE $0xf9                         // mov    rcx, rdi
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xf9                         // cmp    rcx, rdi
	JNE  LBB2_339
	LONG $0x24548b48; BYTE $0x18                     // mov    rdx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_339
	WORD $0x894c; BYTE $0xc1                         // mov    rcx, r8
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x394c; BYTE $0xc1                         // cmp    rcx, r8
	JNE  LBB2_339
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_26:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_26
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB2_28:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB2_28
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_321
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_31:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_324
	WORD $0xd231                 // xor    edx, edx

LBB2_33:
	LONG $0x246f0f66; BYTE $0x17               // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c             // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x646f0f66; WORD $0x1017             // movdqa    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f4166; WORD $0x106c; BYTE $0x10 // movdqa    xmm5, oword [r8 + rdx + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm6
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_33
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_324

LBB2_323:
	LONG $0x246f0f66; BYTE $0x17   // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf0da0f66               // pminub    xmm6, xmm0
	LONG $0xf5740f66               // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66               // pand    xmm6, xmm1
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xea600f66               // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66               // paddw    xmm5, xmm3
	LONG $0xfe6f0f66               // movdqa    xmm7, xmm6
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66               // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xf2680f66               // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66               // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x10c28348               // add    rdx, 16

LBB2_324:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_323
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_327
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f42f3; WORD $0x4874; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm6

LBB2_327:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_331
	WORD $0xc931                   // xor    ecx, ecx

LBB2_329:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_329
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_331:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_338
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_335
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_334:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_334

LBB2_335:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_338
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_337:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_337

LBB2_338:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_31

LBB2_321:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_322:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_322
	JMP  LBB2_351

LBB2_35:
	LONG $0x24548b48; BYTE $0x20                     // mov    rdx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_67
	WORD $0x8948; BYTE $0xf9                         // mov    rcx, rdi
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xf9                         // cmp    rcx, rdi
	JNE  LBB2_67
	LONG $0x24548b48; BYTE $0x18                     // mov    rdx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_67
	WORD $0x894c; BYTE $0xc1                         // mov    rcx, r8
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x394c; BYTE $0xc1                         // cmp    rcx, r8
	JNE  LBB2_67
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_40:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_40
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x50548d48; BYTE $0x60               // lea    rdx, [rax + 2*rdx + 96]
	WORD $0xc931                               // xor    ecx, ecx

LBB2_42:
	LONG $0xa08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 96], 0
	LONG $0xa88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 88], 0
	LONG $0xb08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 80], 0
	LONG $0xb88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 72], 0
	LONG $0xc08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 64], 0
	LONG $0xc88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 56], 0
	LONG $0xd08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 48], 0
	LONG $0xd88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 40], 0
	LONG $0xe08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 32], 0
	LONG $0xe88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 24], 0
	LONG $0xf08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 16], 0
	LONG $0xf88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 8], 0
	LONG $0x008a04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rdx + 4*rcx], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_42
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_49
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_45:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_52
	WORD $0xd231                 // xor    edx, edx

LBB2_47:
	LONG $0x246f0f66; BYTE $0x17               // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c             // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x646f0f66; WORD $0x1017             // movdqa    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f4166; WORD $0x106c; BYTE $0x10 // movdqa    xmm5, oword [r8 + rdx + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm5
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_47
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_52

LBB2_51:
	LONG $0x246f0f66; BYTE $0x17   // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66               // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66               // pand    xmm5, xmm1
	LONG $0xf46f0f66               // movdqa    xmm6, xmm4
	LONG $0xf2600f66               // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xfd6f0f66               // movdqa    xmm7, xmm5
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66               // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xea680f66               // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66               // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x10c28348               // add    rdx, 16

LBB2_52:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_51
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_55
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f42f3; WORD $0x486c; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm5

LBB2_55:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_59
	WORD $0xc931                   // xor    ecx, ecx

LBB2_57:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_57
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_59:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_66
	WORD $0x894c; BYTE $0xd6     // mov    rsi, r10
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_63
	WORD $0x894d; BYTE $0xca     // mov    r10, r9
	WORD $0x2949; BYTE $0xd2     // sub    r10, rdx

LBB2_62:
	LONG $0x0cb70f42; BYTE $0x78   // movzx    ecx, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0x8b       // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f42; WORD $0x0278 // movzx    ecx, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0x8b       // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f42; WORD $0x0478 // movzx    ecx, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0x8b       // inc    dword [rbx + 4*rcx]
	LONG $0x4cb70f42; WORD $0x0678 // movzx    ecx, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0x8b       // inc    dword [rbx + 4*rcx]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394d; BYTE $0xfa       // cmp    r10, r15
	JNE  LBB2_62

LBB2_63:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	WORD $0x8949; BYTE $0xf2 // mov    r10, rsi
	JE   LBB2_66
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_65:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_65

LBB2_66:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_45

LBB2_49:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_50:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_50
	JMP  LBB2_351

LBB2_95:
	LONG $0x24548b48; BYTE $0x20                     // mov    rdx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_127
	WORD $0x8948; BYTE $0xf9                         // mov    rcx, rdi
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xf9                         // cmp    rcx, rdi
	JNE  LBB2_127
	LONG $0x24548b48; BYTE $0x18                     // mov    rdx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_127
	WORD $0x894c; BYTE $0xc1                         // mov    rcx, r8
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x394c; BYTE $0xc1                         // cmp    rcx, r8
	JNE  LBB2_127
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_100:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_100
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB2_102:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB2_102
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_109
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_105:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_112
	WORD $0xd231                 // xor    edx, edx

LBB2_107:
	LONG $0x246f0f66; BYTE $0x17               // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c             // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x646f0f66; WORD $0x1017             // movdqa    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f4166; WORD $0x106c; BYTE $0x10 // movdqa    xmm5, oword [r8 + rdx + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm5
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_107
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_112

LBB2_111:
	LONG $0x246f0f66; BYTE $0x17   // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66               // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66               // pandn    xmm5, xmm1
	LONG $0xf46f0f66               // movdqa    xmm6, xmm4
	LONG $0xf2600f66               // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xfd6f0f66               // movdqa    xmm7, xmm5
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66               // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xea680f66               // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66               // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x10c28348               // add    rdx, 16

LBB2_112:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_111
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_115
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f42f3; WORD $0x486c; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm5

LBB2_115:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_119
	WORD $0xc931                   // xor    ecx, ecx

LBB2_117:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_117
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_119:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_126
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_123
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_122:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_122

LBB2_123:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_126
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_125:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_125

LBB2_126:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_105

LBB2_109:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_110:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_110
	JMP  LBB2_351

LBB2_201:
	LONG $0x24548b48; BYTE $0x20                     // mov    rdx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_233
	WORD $0x8948; BYTE $0xf9                         // mov    rcx, rdi
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xf9                         // cmp    rcx, rdi
	JNE  LBB2_233
	LONG $0x24548b48; BYTE $0x18                     // mov    rdx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_233
	WORD $0x894c; BYTE $0xc1                         // mov    rcx, r8
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x394c; BYTE $0xc1                         // cmp    rcx, r8
	JNE  LBB2_233
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_206:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_206
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB2_208:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB2_208
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_215
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_211:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_218
	WORD $0xd231                 // xor    edx, edx

LBB2_213:
	LONG $0x246f0f66; BYTE $0x17               // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c             // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x646f0f66; WORD $0x1017             // movdqa    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f4166; WORD $0x106c; BYTE $0x10 // movdqa    xmm5, oword [r8 + rdx + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm6
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_213
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_218

LBB2_217:
	LONG $0x246f0f66; BYTE $0x17   // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf0de0f66               // pmaxub    xmm6, xmm0
	LONG $0xf5740f66               // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66               // pand    xmm6, xmm1
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xea600f66               // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66               // paddw    xmm5, xmm3
	LONG $0xfe6f0f66               // movdqa    xmm7, xmm6
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66               // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xf2680f66               // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66               // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x10c28348               // add    rdx, 16

LBB2_218:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_217
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_221
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f42f3; WORD $0x4874; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm6

LBB2_221:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_225
	WORD $0xc931                   // xor    ecx, ecx

LBB2_223:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_223
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_225:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_232
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_229
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_228:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_228

LBB2_229:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_232
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_231:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_231

LBB2_232:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_211

LBB2_215:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_216:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_216
	JMP  LBB2_351

LBB2_261:
	LONG $0x24548b48; BYTE $0x20                     // mov    rdx, qword [rsp + 32]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_293
	WORD $0x8948; BYTE $0xf9                         // mov    rcx, rdi
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xf9                         // cmp    rcx, rdi
	JNE  LBB2_293
	LONG $0x24548b48; BYTE $0x18                     // mov    rdx, qword [rsp + 24]
	WORD $0x8948; BYTE $0xd1                         // mov    rcx, rdx
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x3948; BYTE $0xd1                         // cmp    rcx, rdx
	JNE  LBB2_293
	WORD $0x894c; BYTE $0xc1                         // mov    rcx, r8
	LONG $0xf0e18348                                 // and    rcx, -16
	WORD $0x394c; BYTE $0xc1                         // cmp    rcx, r8
	JNE  LBB2_293
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_266:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_266
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB2_268:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB2_268
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_275
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_271:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_278
	WORD $0xd231                 // xor    edx, edx

LBB2_273:
	LONG $0x246f0f66; BYTE $0x17               // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c             // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x646f0f66; WORD $0x1017             // movdqa    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f4166; WORD $0x106c; BYTE $0x10 // movdqa    xmm5, oword [r8 + rdx + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm6
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_273
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_278

LBB2_277:
	LONG $0x246f0f66; BYTE $0x17   // movdqa    xmm4, oword [rdi + rdx]
	LONG $0x6f0f4166; WORD $0x102c // movdqa    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf0de0f66               // pmaxub    xmm6, xmm0
	LONG $0xf5740f66               // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66               // pandn    xmm6, xmm1
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xea600f66               // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66               // paddw    xmm5, xmm3
	LONG $0xfe6f0f66               // movdqa    xmm7, xmm6
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66               // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xf2680f66               // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66               // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x10c28348               // add    rdx, 16

LBB2_278:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_277
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_281
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f42f3; WORD $0x4874; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm6

LBB2_281:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_285
	WORD $0xc931                   // xor    ecx, ecx

LBB2_283:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_283
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_285:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_292
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_289
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_288:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_288

LBB2_289:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_292
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_291:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_291

LBB2_292:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_271

LBB2_275:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_276:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_276
	JMP  LBB2_351

LBB2_173:
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_174:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_174
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB2_176:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB2_176
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_183
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_179:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_186
	WORD $0xd231                 // xor    edx, edx

LBB2_181:
	LONG $0x246f0ff3; BYTE $0x17               // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c             // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x646f0ff3; WORD $0x1017             // movdqu    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f41f3; WORD $0x106c; BYTE $0x10 // movdqu    xmm5, oword [r8 + rdx + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm6
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_181
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_186

LBB2_185:
	LONG $0x246f0ff3; BYTE $0x17   // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf0da0f66               // pminub    xmm6, xmm0
	LONG $0xf5740f66               // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66               // pandn    xmm6, xmm1
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xea600f66               // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66               // paddw    xmm5, xmm3
	LONG $0xfe6f0f66               // movdqa    xmm7, xmm6
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66               // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xf2680f66               // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66               // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x10c28348               // add    rdx, 16

LBB2_186:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_185
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_189
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f42f3; WORD $0x4874; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm6

LBB2_189:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_193
	WORD $0xc931                   // xor    ecx, ecx

LBB2_191:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_191
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_193:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_200
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_197
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_196:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_196

LBB2_197:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_200
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_199:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_199

LBB2_200:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_179

LBB2_183:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_184:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_184
	JMP  LBB2_351

LBB2_339:
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_340:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_340
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB2_342:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB2_342
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_349
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_345:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_353
	WORD $0xd231                 // xor    edx, edx

LBB2_347:
	LONG $0x246f0ff3; BYTE $0x17               // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c             // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x646f0ff3; WORD $0x1017             // movdqu    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f41f3; WORD $0x106c; BYTE $0x10 // movdqu    xmm5, oword [r8 + rdx + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm6
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_347
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_353

LBB2_352:
	LONG $0x246f0ff3; BYTE $0x17   // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf0da0f66               // pminub    xmm6, xmm0
	LONG $0xf5740f66               // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66               // pand    xmm6, xmm1
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xea600f66               // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66               // paddw    xmm5, xmm3
	LONG $0xfe6f0f66               // movdqa    xmm7, xmm6
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66               // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xf2680f66               // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66               // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x10c28348               // add    rdx, 16

LBB2_353:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_352
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_356
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f42f3; WORD $0x4874; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm6

LBB2_356:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_360
	WORD $0xc931                   // xor    ecx, ecx

LBB2_358:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_358
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_360:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_367
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_364
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_363:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_363

LBB2_364:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_367
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_366:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_366

LBB2_367:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_345

LBB2_349:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_350:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_350
	JMP  LBB2_351

LBB2_67:
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_68:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_68
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x50548d48; BYTE $0x60               // lea    rdx, [rax + 2*rdx + 96]
	WORD $0xc931                               // xor    ecx, ecx

LBB2_70:
	LONG $0xa08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 96], 0
	LONG $0xa88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 88], 0
	LONG $0xb08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 80], 0
	LONG $0xb88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 72], 0
	LONG $0xc08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 64], 0
	LONG $0xc88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 56], 0
	LONG $0xd08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 48], 0
	LONG $0xd88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 40], 0
	LONG $0xe08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 32], 0
	LONG $0xe88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 24], 0
	LONG $0xf08a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 16], 0
	LONG $0xf88a44c7; LONG $0x00000000         // mov    dword [rdx + 4*rcx - 8], 0
	LONG $0x008a04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rdx + 4*rcx], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_70
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_77
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_73:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_80
	WORD $0xd231                 // xor    edx, edx

LBB2_75:
	LONG $0x246f0ff3; BYTE $0x17               // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c             // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x646f0ff3; WORD $0x1017             // movdqu    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f41f3; WORD $0x106c; BYTE $0x10 // movdqu    xmm5, oword [r8 + rdx + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm5
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_75
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_80

LBB2_79:
	LONG $0x246f0ff3; BYTE $0x17   // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66               // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66               // pand    xmm5, xmm1
	LONG $0xf46f0f66               // movdqa    xmm6, xmm4
	LONG $0xf2600f66               // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xfd6f0f66               // movdqa    xmm7, xmm5
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66               // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xea680f66               // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66               // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x10c28348               // add    rdx, 16

LBB2_80:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_79
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_83
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f42f3; WORD $0x486c; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm5

LBB2_83:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_87
	WORD $0xc931                   // xor    ecx, ecx

LBB2_85:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_85
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_87:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_94
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_91
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_90:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_90

LBB2_91:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_94
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_93:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_93

LBB2_94:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_73

LBB2_77:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_78:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_78
	JMP  LBB2_351

LBB2_127:
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_128:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_128
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB2_130:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB2_130
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_137
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_133:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_140
	WORD $0xd231                 // xor    edx, edx

LBB2_135:
	LONG $0x246f0ff3; BYTE $0x17               // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c             // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x646f0ff3; WORD $0x1017             // movdqu    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f41f3; WORD $0x106c; BYTE $0x10 // movdqu    xmm5, oword [r8 + rdx + 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm5
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_135
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_140

LBB2_139:
	LONG $0x246f0ff3; BYTE $0x17   // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xe8740f66               // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66               // pandn    xmm5, xmm1
	LONG $0xf46f0f66               // movdqa    xmm6, xmm4
	LONG $0xf2600f66               // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xfd6f0f66               // movdqa    xmm7, xmm5
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66               // pmullw    xmm7, xmm6
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xea680f66               // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66               // pmullw    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm5
	LONG $0x10c28348               // add    rdx, 16

LBB2_140:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_139
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_143
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xe8740f66                           // pcmpeqb    xmm5, xmm0
	LONG $0xe9df0f66                           // pandn    xmm5, xmm1
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2600f66                           // punpcklbw    xmm6, xmm2
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfed50f66                           // pmullw    xmm7, xmm6
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xea680f66                           // punpckhbw    xmm5, xmm2
	LONG $0xecd50f66                           // pmullw    xmm5, xmm4
	LONG $0x7f0f42f3; WORD $0x486c; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm5

LBB2_143:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_147
	WORD $0xc931                   // xor    ecx, ecx

LBB2_145:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_145
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_147:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_154
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_151
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_150:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_150

LBB2_151:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_154
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_153:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_153

LBB2_154:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_133

LBB2_137:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_138:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_138
	JMP  LBB2_351

LBB2_233:
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_234:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_234
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB2_236:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB2_236
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_243
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_239:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_246
	WORD $0xd231                 // xor    edx, edx

LBB2_241:
	LONG $0x246f0ff3; BYTE $0x17               // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c             // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x646f0ff3; WORD $0x1017             // movdqu    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f41f3; WORD $0x106c; BYTE $0x10 // movdqu    xmm5, oword [r8 + rdx + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm6
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_241
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_246

LBB2_245:
	LONG $0x246f0ff3; BYTE $0x17   // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf0de0f66               // pmaxub    xmm6, xmm0
	LONG $0xf5740f66               // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66               // pand    xmm6, xmm1
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xea600f66               // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66               // paddw    xmm5, xmm3
	LONG $0xfe6f0f66               // movdqa    xmm7, xmm6
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66               // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xf2680f66               // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66               // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x10c28348               // add    rdx, 16

LBB2_246:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_245
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_249
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f42f3; WORD $0x4874; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm6

LBB2_249:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_253
	WORD $0xc931                   // xor    ecx, ecx

LBB2_251:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_251
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_253:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_260
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_257
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_256:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_256

LBB2_257:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_260
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_259:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_259

LBB2_260:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_239

LBB2_243:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_244:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_244
	JMP  LBB2_351

LBB2_293:
	LONG $0x0f498d49                                 // lea    rcx, [r9 + 15]
	LONG $0xfff0ba48; LONG $0xffffffff; WORD $0x7fff // mov    rdx, 9223372036854775792
	WORD $0x2148; BYTE $0xca                         // and    rdx, rcx
	LONG $0x501c8d48                                 // lea    rbx, [rax + 2*rdx]
	LONG $0x000001b9; BYTE $0x00                     // mov    ecx, 1

LBB2_294:
	LONG $0x008b04c7; WORD $0x0000; BYTE $0x00 // mov    dword [rbx + 4*rcx], 0
	LONG $0x088b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 8], 0
	LONG $0x108b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 16], 0
	LONG $0x188b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 24], 0
	LONG $0x208b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 32], 0
	LONG $0x288b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 40], 0
	LONG $0x308b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 48], 0
	LONG $0x388b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 56], 0
	LONG $0x408b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 64], 0
	LONG $0x488b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 72], 0
	LONG $0x508b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 80], 0
	LONG $0x588b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 88], 0
	LONG $0x608b44c7; LONG $0x00000000         // mov    dword [rbx + 4*rcx + 96], 0
	LONG $0x1ac18348                           // add    rcx, 26
	LONG $0x40f98148; WORD $0x0010; BYTE $0x00 // cmp    rcx, 4160
	JB   LBB2_294
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0x504c8d48; BYTE $0x60               // lea    rcx, [rax + 2*rdx + 96]
	WORD $0xd231                               // xor    edx, edx

LBB2_296:
	LONG $0xa09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 96], 0
	LONG $0xa89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 88], 0
	LONG $0xb09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 80], 0
	LONG $0xb89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 72], 0
	LONG $0xc09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 64], 0
	LONG $0xc89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 56], 0
	LONG $0xd09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 48], 0
	LONG $0xd89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 40], 0
	LONG $0xe09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 32], 0
	LONG $0xe89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 24], 0
	LONG $0xf09144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 16], 0
	LONG $0xf89144c7; LONG $0x00000000         // mov    dword [rcx + 4*rdx - 8], 0
	LONG $0x009104c7; WORD $0x0000; BYTE $0x00 // mov    dword [rcx + 4*rdx], 0
	LONG $0x1ac28348                           // add    rdx, 26
	LONG $0x40fa8148; WORD $0x0010; BYTE $0x00 // cmp    rdx, 4160
	JB   LBB2_296
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB2_303
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0xfce38349                           // and    r11, -4
	WORD $0x894d; BYTE $0xcc                   // mov    r12, r9
	LONG $0xf0e48349                           // and    r12, -16
	WORD $0x894d; BYTE $0xcd                   // mov    r13, r9
	LONG $0xe0e58349                           // and    r13, -32
	LONG $0xceb60f41                           // movzx    ecx, r14b
	LONG $0xc16e0f66                           // movd    xmm0, ecx
	LONG $0xc0600f66                           // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00               // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50               // pshufd    xmm0, xmm0, 80
	LONG $0xff498d49                           // lea    rcx, [r9 - 1]
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	WORD $0x3145; BYTE $0xf6                   // xor    r14d, r14d
	LONG $0x4d6f0f66; BYTE $0x00               // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, oword 16[rbp] /* [rip + .LCPI2_1] */

LBB2_299:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB2_306
	WORD $0xd231                 // xor    edx, edx

LBB2_301:
	LONG $0x246f0ff3; BYTE $0x17               // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c             // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50               // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050             // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x646f0ff3; WORD $0x1017             // movdqu    xmm4, oword [rdi + rdx + 16]
	LONG $0x6f0f41f3; WORD $0x106c; BYTE $0x10 // movdqu    xmm5, oword [r8 + rdx + 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2050             // movdqa    oword [rax + 2*rdx + 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x3050             // movdqa    oword [rax + 2*rdx + 48], xmm6
	LONG $0x20c28348                           // add    rdx, 32
	WORD $0x394c; BYTE $0xea                   // cmp    rdx, r13
	JB   LBB2_301
	WORD $0x894c; BYTE $0xea                   // mov    rdx, r13
	JMP  LBB2_306

LBB2_305:
	LONG $0x246f0ff3; BYTE $0x17   // movdqu    xmm4, oword [rdi + rdx]
	LONG $0x6f0f41f3; WORD $0x102c // movdqu    xmm5, oword [r8 + rdx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xf0de0f66               // pmaxub    xmm6, xmm0
	LONG $0xf5740f66               // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66               // pandn    xmm6, xmm1
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xea600f66               // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66               // paddw    xmm5, xmm3
	LONG $0xfe6f0f66               // movdqa    xmm7, xmm6
	LONG $0xfa600f66               // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66               // pmullw    xmm7, xmm5
	LONG $0x3c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm7
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xf2680f66               // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66               // pmullw    xmm6, xmm4
	LONG $0x747f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm6
	LONG $0x10c28348               // add    rdx, 16

LBB2_306:
	WORD $0x394c; BYTE $0xe2                   // cmp    rdx, r12
	JB   LBB2_305
	WORD $0x394d; BYTE $0xcc                   // cmp    r12, r9
	JE   LBB2_309
	LONG $0x6f0f42f3; WORD $0x0f64; BYTE $0xf0 // movdqu    xmm4, oword [rdi + r9 - 16]
	LONG $0x6f0f43f3; WORD $0x086c; BYTE $0xf0 // movdqu    xmm5, oword [r8 + r9 - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf5740f66                           // pcmpeqb    xmm6, xmm5
	LONG $0xf1df0f66                           // pandn    xmm6, xmm1
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xea600f66                           // punpcklbw    xmm5, xmm2
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfa600f66                           // punpcklbw    xmm7, xmm2
	LONG $0xfdd50f66                           // pmullw    xmm7, xmm5
	LONG $0x7f0f42f3; WORD $0x487c; BYTE $0xe0 // movdqu    oword [rax + 2*r9 - 32], xmm7
	LONG $0xe2680f66                           // punpckhbw    xmm4, xmm2
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xf2680f66                           // punpckhbw    xmm6, xmm2
	LONG $0xf4d50f66                           // pmullw    xmm6, xmm4
	LONG $0x7f0f42f3; WORD $0x4874; BYTE $0xf0 // movdqu    oword [rax + 2*r9 - 16], xmm6

LBB2_309:
	WORD $0x854d; BYTE $0xdb       // test    r11, r11
	LONG $0x0000bf41; WORD $0x0000 // mov    r15d, 0
	JE   LBB2_313
	WORD $0xc931                   // xor    ecx, ecx

LBB2_311:
	LONG $0x4814b70f                           // movzx    edx, word [rax + 2*rcx]
	WORD $0x04ff; BYTE $0x93                   // inc    dword [rbx + 4*rdx]
	LONG $0x4854b70f; BYTE $0x02               // movzx    edx, word [rax + 2*rcx + 2]
	LONG $0x109384ff; WORD $0x0004; BYTE $0x00 // inc    dword [rbx + 4*rdx + 1040]
	LONG $0x4854b70f; BYTE $0x04               // movzx    edx, word [rax + 2*rcx + 4]
	LONG $0x209384ff; WORD $0x0008; BYTE $0x00 // inc    dword [rbx + 4*rdx + 2080]
	LONG $0x4854b70f; BYTE $0x06               // movzx    edx, word [rax + 2*rcx + 6]
	LONG $0x309384ff; WORD $0x000c; BYTE $0x00 // inc    dword [rbx + 4*rdx + 3120]
	LONG $0x04c18348                           // add    rcx, 4
	WORD $0x394c; BYTE $0xd9                   // cmp    rcx, r11
	JB   LBB2_311
	WORD $0x894d; BYTE $0xdf                   // mov    r15, r11

LBB2_313:
	WORD $0x394d; BYTE $0xcf     // cmp    r15, r9
	JAE  LBB2_320
	WORD $0x8944; BYTE $0xca     // mov    edx, r9d
	WORD $0x2944; BYTE $0xfa     // sub    edx, r15d
	LONG $0x244c8b48; BYTE $0x10 // mov    rcx, qword [rsp + 16]
	WORD $0x294c; BYTE $0xf9     // sub    rcx, r15
	WORD $0xe283; BYTE $0x03     // and    edx, 3
	LONG $0x03f98348             // cmp    rcx, 3
	JB   LBB2_317
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	WORD $0x2948; BYTE $0xd1     // sub    rcx, rdx

LBB2_316:
	LONG $0x34b70f42; BYTE $0x78   // movzx    esi, word [rax + 2*r15]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0278 // movzx    esi, word [rax + 2*r15 + 2]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0478 // movzx    esi, word [rax + 2*r15 + 4]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x74b70f42; WORD $0x0678 // movzx    esi, word [rax + 2*r15 + 6]
	WORD $0x04ff; BYTE $0xb3       // inc    dword [rbx + 4*rsi]
	LONG $0x04c78349               // add    r15, 4
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	JNE  LBB2_316

LBB2_317:
	WORD $0x8548; BYTE $0xd2 // test    rdx, rdx
	JE   LBB2_320
	LONG $0x780c8d4a         // lea    rcx, [rax + 2*r15]
	WORD $0xf748; BYTE $0xda // neg    rdx

LBB2_319:
	WORD $0xb70f; BYTE $0x31 // movzx    esi, word [rcx]
	WORD $0x04ff; BYTE $0xb3 // inc    dword [rbx + 4*rsi]
	LONG $0x02c18348         // add    rcx, 2
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	JNE  LBB2_319

LBB2_320:
	LONG $0x247c0348; BYTE $0x20 // add    rdi, qword [rsp + 32]
	LONG $0x2444034c; BYTE $0x18 // add    r8, qword [rsp + 24]
	WORD $0xff49; BYTE $0xc6     // inc    r14
	LONG $0x24343b4c             // cmp    r14, qword [rsp]
	JNE  LBB2_299

LBB2_303:
	LONG $0x244c8b48; BYTE $0x08       // mov    rcx, qword [rsp + 8]
	LONG $0x48848d48; LONG $0x00000c50 // lea    rax, [rax + 2*rcx + 3152]
	WORD $0xc931                       // xor    ecx, ecx

LBB2_304:
	LONG $0x846f0f66; LONG $0xfff7d088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2096]
	LONG $0x84fe0f66; LONG $0xfff3c088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3136]
	LONG $0x84fe0f66; LONG $0xfffbe088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1056]
	LONG $0x44fe0f66; WORD $0xf088                 // paddd    xmm0, oword [rax + 4*rcx - 16]
	LONG $0x7f0f41f3; WORD $0x8a04                 // movdqu    oword [r10 + 4*rcx], xmm0
	LONG $0x846f0f66; LONG $0xfff7e088; BYTE $0xff // movdqa    xmm0, oword [rax + 4*rcx - 2080]
	LONG $0x84fe0f66; LONG $0xfff3d088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 3120]
	LONG $0x84fe0f66; LONG $0xfffbf088; BYTE $0xff // paddd    xmm0, oword [rax + 4*rcx - 1040]
	LONG $0x04fe0f66; BYTE $0x88                   // paddd    xmm0, oword [rax + 4*rcx]
	LONG $0x7f0f41f3; WORD $0x8a44; BYTE $0x10     // movdqu    oword [r10 + 4*rcx + 16], xmm0
	LONG $0x08c18348                               // add    rcx, 8
	LONG $0x00f98148; WORD $0x0001; BYTE $0x00     // cmp    rcx, 256
	JB   LBB2_304

LBB2_351:
	SUBQ $8, SP
	RET

TEXT Â·_SimdSse2HistogramBufAllocSize(SB), 7, $0-16

	MOVQ arg1+0(FP), DI

	LONG $0x3f848d48; LONG $0x0000105e // lea    rax, [rdi + rdi + 4190]
	LONG $0xe0e08348                   // and    rax, -32

   	MOVQ AX, ret+8(FP)
	RET
