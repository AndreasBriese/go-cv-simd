//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x008(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x010(SB)/8, $0x0000259100002591
DATA LCDATA1<>+0x018(SB)/8, $0x0000259100002591
DATA LCDATA1<>+0x020(SB)/8, $0x1323074c1323074c
DATA LCDATA1<>+0x028(SB)/8, $0x1323074c1323074c
DATA LCDATA1<>+0x030(SB)/8, $0x0000200000002000
DATA LCDATA1<>+0x038(SB)/8, $0x0000200000002000
GLOBL LCDATA1<>(SB), 8, $64

TEXT Â·_SimdSse2BgraToGray(SB), 7, $0

    MOVQ arg1+0(FP), DI
    MOVQ arg2+8(FP), SI
    MOVQ arg3+16(FP), DX
    MOVQ arg4+24(FP), CX
    MOVQ arg5+32(FP), R8
    MOVQ arg6+40(FP), R9

    LEAQ LCDATA1<>(SB), BP

    WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
    LONG $0xf0e08348             // and    rax, -16
    WORD $0x3948; BYTE $0xf8     // cmp    rax, rdi
	JNE    LBB0_9
    WORD $0x894d; BYTE $0xca     // mov    r10, r9
    WORD $0x0949; BYTE $0xca     // or    r10, rcx
    WORD $0x894c; BYTE $0xd0     // mov    rax, r10
    LONG $0xf0e08348             // and    rax, -16
    WORD $0x394c; BYTE $0xd0     // cmp    rax, r10
	JNE    LBB0_9
    WORD $0x894c; BYTE $0xc0     // mov    rax, r8
    LONG $0xf0e08348             // and    rax, -16
    WORD $0x394c; BYTE $0xc0     // cmp    rax, r8
	JNE    LBB0_9
    WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE    LBB0_15
    WORD $0x8949; BYTE $0xf3     // mov    r11, rsi
    LONG $0xf0e38349             // and    r11, -16
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
    LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x4d6f0f66; BYTE $0x10 // movdqa    xmm1, 16[rbp] /* [rip + LCPI0_1] */
    LONG $0x556f0f66; BYTE $0x20 // movdqa    xmm2, 32[rbp] /* [rip + LCPI0_2] */
    LONG $0x5d6f0f66; BYTE $0x30 // movdqa    xmm3, 48[rbp] /* [rip + LCPI0_3] */
LBB0_5:                                 
    WORD $0x854d; BYTE $0xdb     // test    r11, r11
    LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE    LBB0_6
LBB0_16:                                
    LONG $0x246f0f66; BYTE $0x87 // movdqa    xmm4, [rdi + 4*rax]
    LONG $0xec6f0f66             // movdqa    xmm5, xmm4
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xe0db0f66             // pand    xmm4, xmm0
    LONG $0xe9f50f66             // pmaddwd    xmm5, xmm1
    LONG $0xe2f50f66             // pmaddwd    xmm4, xmm2
    LONG $0xe5fe0f66             // paddd    xmm4, xmm5
    LONG $0xe3fe0f66             // paddd    xmm4, xmm3
    LONG $0xd4720f66; BYTE $0x0e // psrld    xmm4, 14
    LONG $0x6c6f0f66; WORD $0x1087 // movdqa    xmm5, [rdi + 4*rax + 16]
    LONG $0xf56f0f66             // movdqa    xmm6, xmm5
    LONG $0xd6710f66; BYTE $0x08 // psrlw    xmm6, 8
    LONG $0xe8db0f66             // pand    xmm5, xmm0
    LONG $0xf1f50f66             // pmaddwd    xmm6, xmm1
    LONG $0xeaf50f66             // pmaddwd    xmm5, xmm2
    LONG $0xeefe0f66             // paddd    xmm5, xmm6
    LONG $0xebfe0f66             // paddd    xmm5, xmm3
    LONG $0xd5720f66; BYTE $0x0e // psrld    xmm5, 14
    LONG $0xe56b0f66             // packssdw    xmm4, xmm5
    LONG $0x6c6f0f66; WORD $0x2087 // movdqa    xmm5, [rdi + 4*rax + 32]
    LONG $0xf56f0f66             // movdqa    xmm6, xmm5
    LONG $0xd6710f66; BYTE $0x08 // psrlw    xmm6, 8
    LONG $0xe8db0f66             // pand    xmm5, xmm0
    LONG $0xf1f50f66             // pmaddwd    xmm6, xmm1
    LONG $0xeaf50f66             // pmaddwd    xmm5, xmm2
    LONG $0xeefe0f66             // paddd    xmm5, xmm6
    LONG $0xebfe0f66             // paddd    xmm5, xmm3
    LONG $0xd5720f66; BYTE $0x0e // psrld    xmm5, 14
    LONG $0x746f0f66; WORD $0x3087 // movdqa    xmm6, [rdi + 4*rax + 48]
    LONG $0xfe6f0f66             // movdqa    xmm7, xmm6
    LONG $0xd7710f66; BYTE $0x08 // psrlw    xmm7, 8
    LONG $0xf0db0f66             // pand    xmm6, xmm0
    LONG $0xf9f50f66             // pmaddwd    xmm7, xmm1
    LONG $0xf2f50f66             // pmaddwd    xmm6, xmm2
    LONG $0xf7fe0f66             // paddd    xmm6, xmm7
    LONG $0xf3fe0f66             // paddd    xmm6, xmm3
    LONG $0xd6720f66; BYTE $0x0e // psrld    xmm6, 14
    LONG $0xee6b0f66             // packssdw    xmm5, xmm6
    LONG $0xe5670f66             // packuswb    xmm4, xmm5
    LONG $0x7f0f4166; WORD $0x0024 // movdqa    [r8 + rax], xmm4
    LONG $0x10c08348             // add    rax, 16
    WORD $0x394c; BYTE $0xd8     // cmp    rax, r11
	JB    LBB0_16
LBB0_6:                                 
    WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JE    LBB0_8
    LONG $0x646f0ff3; WORD $0xc0b7 // movdqu    xmm4, [rdi + 4*rsi - 64]
    LONG $0x7c6f0ff3; WORD $0xd0b7 // movdqu    xmm7, [rdi + 4*rsi - 48]
    LONG $0x6c6f0ff3; WORD $0xe0b7 // movdqu    xmm5, [rdi + 4*rsi - 32]
    LONG $0x6f0f44f3; WORD $0xb744; BYTE $0xf0 // movdqu    xmm8, [rdi + 4*rsi - 16]
    LONG $0xf46f0f66             // movdqa    xmm6, xmm4
    LONG $0xd6710f66; BYTE $0x08 // psrlw    xmm6, 8
    LONG $0xe0db0f66             // pand    xmm4, xmm0
    LONG $0xf1f50f66             // pmaddwd    xmm6, xmm1
    LONG $0xe2f50f66             // pmaddwd    xmm4, xmm2
    LONG $0xe6fe0f66             // paddd    xmm4, xmm6
    LONG $0xe3fe0f66             // paddd    xmm4, xmm3
    LONG $0xd4720f66; BYTE $0x0e // psrld    xmm4, 14
    LONG $0xf76f0f66             // movdqa    xmm6, xmm7
    LONG $0xd6710f66; BYTE $0x08 // psrlw    xmm6, 8
    LONG $0xf8db0f66             // pand    xmm7, xmm0
    LONG $0xf1f50f66             // pmaddwd    xmm6, xmm1
    LONG $0xfaf50f66             // pmaddwd    xmm7, xmm2
    LONG $0xfefe0f66             // paddd    xmm7, xmm6
    LONG $0xfbfe0f66             // paddd    xmm7, xmm3
    LONG $0xd7720f66; BYTE $0x0e // psrld    xmm7, 14
    LONG $0xe76b0f66             // packssdw    xmm4, xmm7
    LONG $0xf56f0f66             // movdqa    xmm6, xmm5
    LONG $0xd6710f66; BYTE $0x08 // psrlw    xmm6, 8
    LONG $0xe8db0f66             // pand    xmm5, xmm0
    LONG $0xf1f50f66             // pmaddwd    xmm6, xmm1
    LONG $0xeaf50f66             // pmaddwd    xmm5, xmm2
    LONG $0xeefe0f66             // paddd    xmm5, xmm6
    LONG $0xebfe0f66             // paddd    xmm5, xmm3
    LONG $0xd5720f66; BYTE $0x0e // psrld    xmm5, 14
    LONG $0x6f0f4166; BYTE $0xf0 // movdqa    xmm6, xmm8
    LONG $0xd6710f66; BYTE $0x08 // psrlw    xmm6, 8
    LONG $0xdb0f4466; BYTE $0xc0 // pand    xmm8, xmm0
    LONG $0xf1f50f66             // pmaddwd    xmm6, xmm1
    LONG $0xf50f4466; BYTE $0xc2 // pmaddwd    xmm8, xmm2
    LONG $0xfe0f4466; BYTE $0xc6 // paddd    xmm8, xmm6
    LONG $0xfe0f4466; BYTE $0xc3 // paddd    xmm8, xmm3
    LONG $0x720f4166; WORD $0x0ed0 // psrld    xmm8, 14
    LONG $0x6b0f4166; BYTE $0xe8 // packssdw    xmm5, xmm8
    LONG $0xe5670f66             // packuswb    xmm4, xmm5
    LONG $0x7f0f41f3; WORD $0x3064; BYTE $0xf0 // movdqu    [r8 + rsi - 16], xmm4
LBB0_8:                                 
    WORD $0x0148; BYTE $0xcf     // add    rdi, rcx
    WORD $0x014d; BYTE $0xc8     // add    r8, r9
    WORD $0xff49; BYTE $0xc2     // inc    r10
    WORD $0x3949; BYTE $0xd2     // cmp    r10, rdx
	JNE    LBB0_5
	JMP    LBB0_15
LBB0_9:
    WORD $0x8548; BYTE $0xd2     // test    rdx, rdx
	JE    LBB0_15
    WORD $0x8949; BYTE $0xf3     // mov    r11, rsi
    LONG $0xf0e38349             // and    r11, -16
    WORD $0x3145; BYTE $0xd2     // xor    r10d, r10d
    LONG $0x6f0f4466; WORD $0x0045 // movdqa    xmm8, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x4d6f0f66; BYTE $0x10 // movdqa    xmm1, 16[rbp] /* [rip + LCPI0_1] */
    LONG $0x556f0f66; BYTE $0x20 // movdqa    xmm2, 32[rbp] /* [rip + LCPI0_2] */
    LONG $0x5d6f0f66; BYTE $0x30 // movdqa    xmm3, 48[rbp] /* [rip + LCPI0_3] */
LBB0_11:                                
    WORD $0x854d; BYTE $0xdb     // test    r11, r11
    LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE    LBB0_12
LBB0_17:                                
    LONG $0x246f0ff3; BYTE $0x87 // movdqu    xmm4, [rdi + 4*rax]
    LONG $0x7c6f0ff3; WORD $0x1087 // movdqu    xmm7, [rdi + 4*rax + 16]
    LONG $0x6c6f0ff3; WORD $0x2087 // movdqu    xmm5, [rdi + 4*rax + 32]
    LONG $0x746f0ff3; WORD $0x3087 // movdqu    xmm6, [rdi + 4*rax + 48]
    LONG $0xc46f0f66             // movdqa    xmm0, xmm4
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xdb0f4166; BYTE $0xe0 // pand    xmm4, xmm8
    LONG $0xc1f50f66             // pmaddwd    xmm0, xmm1
    LONG $0xe2f50f66             // pmaddwd    xmm4, xmm2
    LONG $0xe0fe0f66             // paddd    xmm4, xmm0
    LONG $0xe3fe0f66             // paddd    xmm4, xmm3
    LONG $0xd4720f66; BYTE $0x0e // psrld    xmm4, 14
    LONG $0xc76f0f66             // movdqa    xmm0, xmm7
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xdb0f4166; BYTE $0xf8 // pand    xmm7, xmm8
    LONG $0xc1f50f66             // pmaddwd    xmm0, xmm1
    LONG $0xfaf50f66             // pmaddwd    xmm7, xmm2
    LONG $0xf8fe0f66             // paddd    xmm7, xmm0
    LONG $0xfbfe0f66             // paddd    xmm7, xmm3
    LONG $0xd7720f66; BYTE $0x0e // psrld    xmm7, 14
    LONG $0xe76b0f66             // packssdw    xmm4, xmm7
    LONG $0xc56f0f66             // movdqa    xmm0, xmm5
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xdb0f4166; BYTE $0xe8 // pand    xmm5, xmm8
    LONG $0xc1f50f66             // pmaddwd    xmm0, xmm1
    LONG $0xeaf50f66             // pmaddwd    xmm5, xmm2
    LONG $0xe8fe0f66             // paddd    xmm5, xmm0
    LONG $0xebfe0f66             // paddd    xmm5, xmm3
    LONG $0xd5720f66; BYTE $0x0e // psrld    xmm5, 14
    LONG $0xc66f0f66             // movdqa    xmm0, xmm6
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xdb0f4166; BYTE $0xf0 // pand    xmm6, xmm8
    LONG $0xc1f50f66             // pmaddwd    xmm0, xmm1
    LONG $0xf2f50f66             // pmaddwd    xmm6, xmm2
    LONG $0xf0fe0f66             // paddd    xmm6, xmm0
    LONG $0xf3fe0f66             // paddd    xmm6, xmm3
    LONG $0xd6720f66; BYTE $0x0e // psrld    xmm6, 14
    LONG $0xee6b0f66             // packssdw    xmm5, xmm6
    LONG $0xe5670f66             // packuswb    xmm4, xmm5
    LONG $0x7f0f41f3; WORD $0x0024 // movdqu    [r8 + rax], xmm4
    LONG $0x10c08348             // add    rax, 16
    WORD $0x394c; BYTE $0xd8     // cmp    rax, r11
	JB    LBB0_17
LBB0_12:                                
    WORD $0x3949; BYTE $0xf3     // cmp    r11, rsi
	JE    LBB0_14
    LONG $0x646f0ff3; WORD $0xc0b7 // movdqu    xmm4, [rdi + 4*rsi - 64]
    LONG $0x446f0ff3; WORD $0xd0b7 // movdqu    xmm0, [rdi + 4*rsi - 48]
    LONG $0x6c6f0ff3; WORD $0xe0b7 // movdqu    xmm5, [rdi + 4*rsi - 32]
    LONG $0x746f0ff3; WORD $0xf0b7 // movdqu    xmm6, [rdi + 4*rsi - 16]
    LONG $0xfc6f0f66             // movdqa    xmm7, xmm4
    LONG $0xd7710f66; BYTE $0x08 // psrlw    xmm7, 8
    LONG $0xdb0f4166; BYTE $0xe0 // pand    xmm4, xmm8
    LONG $0xf9f50f66             // pmaddwd    xmm7, xmm1
    LONG $0xe2f50f66             // pmaddwd    xmm4, xmm2
    LONG $0xe7fe0f66             // paddd    xmm4, xmm7
    LONG $0xe3fe0f66             // paddd    xmm4, xmm3
    LONG $0xd4720f66; BYTE $0x0e // psrld    xmm4, 14
    LONG $0xf86f0f66             // movdqa    xmm7, xmm0
    LONG $0xd7710f66; BYTE $0x08 // psrlw    xmm7, 8
    LONG $0xdb0f4166; BYTE $0xc0 // pand    xmm0, xmm8
    LONG $0xf9f50f66             // pmaddwd    xmm7, xmm1
    LONG $0xc2f50f66             // pmaddwd    xmm0, xmm2
    LONG $0xc7fe0f66             // paddd    xmm0, xmm7
    LONG $0xc3fe0f66             // paddd    xmm0, xmm3
    LONG $0xd0720f66; BYTE $0x0e // psrld    xmm0, 14
    LONG $0xe06b0f66             // packssdw    xmm4, xmm0
    LONG $0xc56f0f66             // movdqa    xmm0, xmm5
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xdb0f4166; BYTE $0xe8 // pand    xmm5, xmm8
    LONG $0xc1f50f66             // pmaddwd    xmm0, xmm1
    LONG $0xeaf50f66             // pmaddwd    xmm5, xmm2
    LONG $0xe8fe0f66             // paddd    xmm5, xmm0
    LONG $0xebfe0f66             // paddd    xmm5, xmm3
    LONG $0xd5720f66; BYTE $0x0e // psrld    xmm5, 14
    LONG $0xc66f0f66             // movdqa    xmm0, xmm6
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xdb0f4166; BYTE $0xf0 // pand    xmm6, xmm8
    LONG $0xc1f50f66             // pmaddwd    xmm0, xmm1
    LONG $0xf2f50f66             // pmaddwd    xmm6, xmm2
    LONG $0xf0fe0f66             // paddd    xmm6, xmm0
    LONG $0xf3fe0f66             // paddd    xmm6, xmm3
    LONG $0xd6720f66; BYTE $0x0e // psrld    xmm6, 14
    LONG $0xee6b0f66             // packssdw    xmm5, xmm6
    LONG $0xe5670f66             // packuswb    xmm4, xmm5
    LONG $0x7f0f41f3; WORD $0x3064; BYTE $0xf0 // movdqu    [r8 + rsi - 16], xmm4
LBB0_14:                                
    WORD $0x0148; BYTE $0xcf     // add    rdi, rcx
    WORD $0x014d; BYTE $0xc8     // add    r8, r9
    WORD $0xff49; BYTE $0xc2     // inc    r10
    WORD $0x3949; BYTE $0xd2     // cmp    r10, rdx
	JNE    LBB0_11
LBB0_15:                                
    RET
