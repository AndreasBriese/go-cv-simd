//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x008(SB)/8, $0xffffffff00000000
DATA LCDATA1<>+0x010(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x018(SB)/8, $0xffff000000000000
GLOBL LCDATA1<>(SB), 8, $32

TEXT Â·_SimdSse2MedianFilterRhomb3x3(SB), 7, $8-56

	MOVQ src+0(FP), DI
	MOVQ srcStride+8(FP), SI
	MOVQ width+16(FP), DX
	MOVQ height+24(FP), CX
	MOVQ channelCount+32(FP), R8
	MOVQ dst+40(FP), R9
	MOVQ dstStride+48(FP), R10
	LEAQ LCDATA1<>(SB), BP
	ADDQ $8, SP
	MOVQ R10, 0(SP)

	WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
	LONG $0xf0e08348             // and    rax, -16
	WORD $0x3948; BYTE $0xf8     // cmp    rax, rdi
	JNE  LBB0_33
	WORD $0x8948; BYTE $0xd3     // mov    rbx, rdx
	WORD $0x0948; BYTE $0xf3     // or    rbx, rsi
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0xf0e08348             // and    rax, -16
	WORD $0x3948; BYTE $0xd8     // cmp    rax, rbx
	JNE  LBB0_33
	LONG $0x24448b48; BYTE $0x00 // mov    rax, qword 56[rsp] /* [rbp + 16] */
	WORD $0x8948; BYTE $0xc3     // mov    rbx, rax
	LONG $0xf0e08348             // and    rax, -16
	WORD $0x3948; BYTE $0xd8     // cmp    rax, rbx
	JNE  LBB0_33
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	LONG $0xf0e08348             // and    rax, -16
	WORD $0x394c; BYTE $0xc8     // cmp    rax, r9
	JNE  LBB0_33
	LONG $0x02f88349             // cmp    r8, 2
	JG   LBB0_13
	LONG $0x01f88349             // cmp    r8, 1
	JE   LBB0_21
	LONG $0x02f88349             // cmp    r8, 2
	JNE  LBB0_62
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB0_62
	LONG $0x121c8d4c             // lea    r11, [rdx + rdx]
	LONG $0x12548d4c; BYTE $0xff // lea    r10, [rdx + rdx - 1]
	LONG $0xf0e28349             // and    r10, -16
	LONG $0xff418d4c             // lea    r8, [rcx - 1]
	LONG $0x12778d4c             // lea    r14, [rdi + 18]
	WORD $0x3145; BYTE $0xff     // xor    r15d, r15d
	LONG $0x00ffffb8; BYTE $0x00 // mov    eax, 65535
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0x4d6f0f66; BYTE $0x10 // movdqa    xmm1, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_9:
	LONG $0xff478d49               // lea    rax, [r15 - 1]
	LONG $0xc6af0f48               // imul    rax, rsi
	WORD $0x0148; BYTE $0xf8       // add    rax, rdi
	LONG $0x30248d4c               // lea    r12, [rax + rsi]
	LONG $0x342c8d4d               // lea    r13, [r12 + rsi]
	WORD $0x854d; BYTE $0xff       // test    r15, r15
	LONG $0x146f0f66; BYTE $0x06   // movdqa    xmm2, oword [rsi + rax]
	LONG $0x5c6f0ff3; WORD $0x0206 // movdqu    xmm3, oword [rsi + rax + 2]
	LONG $0xc4440f49               // cmove    rax, r12
	WORD $0x394d; BYTE $0xc7       // cmp    r15, r8
	LONG $0xec430f4d               // cmovae    r13, r12
	LONG $0xe26f0f66               // movdqa    xmm4, xmm2
	LONG $0xfc730f66; BYTE $0x02   // pslldq    xmm4, 2
	LONG $0xea6f0f66               // movdqa    xmm5, xmm2
	LONG $0xe8db0f66               // pand    xmm5, xmm0
	LONG $0xeceb0f66               // por    xmm5, xmm4
	LONG $0xe26f0f66               // movdqa    xmm4, xmm2
	LONG $0xe3da0f66               // pminub    xmm4, xmm3
	LONG $0xd3de0f66               // pmaxub    xmm2, xmm3
	LONG $0xdd6f0f66               // movdqa    xmm3, xmm5
	LONG $0xdcda0f66               // pminub    xmm3, xmm4
	LONG $0xe5de0f66               // pmaxub    xmm4, xmm5
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xeada0f66               // pminub    xmm5, xmm2
	LONG $0xe2de0f66               // pmaxub    xmm4, xmm2
	LONG $0xde0f4166; WORD $0x005d // pmaxub    xmm3, oword [r13]
	LONG $0x20da0f66               // pminub    xmm4, oword [rax]
	LONG $0xd56f0f66               // movdqa    xmm2, xmm5
	LONG $0xd4da0f66               // pminub    xmm2, xmm4
	LONG $0xe5de0f66               // pmaxub    xmm4, xmm5
	LONG $0xd3de0f66               // pmaxub    xmm2, xmm3
	LONG $0xd4da0f66               // pminub    xmm2, xmm4
	LONG $0x7f0f4166; BYTE $0x11   // movdqa    oword [r9], xmm2
	LONG $0x11fa8349               // cmp    r10, 17
	JB   LBB0_12
	WORD $0x894c; BYTE $0xf2       // mov    rdx, r14
	LONG $0x000010bb; BYTE $0x00   // mov    ebx, 16

LBB0_11:
	LONG $0x526f0ff3; BYTE $0xfc               // movdqu    xmm2, oword [rdx - 4]
	LONG $0x5a6f0f66; BYTE $0xfe               // movdqa    xmm3, oword [rdx - 2]
	LONG $0x226f0ff3                           // movdqu    xmm4, oword [rdx]
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                           // pminub    xmm4, xmm5
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xd56f0f66                           // movdqa    xmm2, xmm5
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xde0f4166; WORD $0x1d64; BYTE $0x00 // pmaxub    xmm4, oword [r13 + rbx]
	LONG $0x2cda0f66; BYTE $0x18               // pminub    xmm5, oword [rax + rbx]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0x7f0f4166; WORD $0x191c             // movdqa    oword [r9 + rbx], xmm3
	LONG $0x10c38348                           // add    rbx, 16
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x394c; BYTE $0xd3                   // cmp    rbx, r10
	JB   LBB0_11

LBB0_12:
	LONG $0x6f0f43f3; WORD $0x1c54; BYTE $0xee // movdqu    xmm2, oword [r12 + r11 - 18]
	LONG $0x6f0f4366; WORD $0x1c5c; BYTE $0xf0 // movdqa    xmm3, oword [r12 + r11 - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xdc730f66; BYTE $0x02               // psrldq    xmm4, 2
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe9db0f66                           // pand    xmm5, xmm1
	LONG $0xeceb0f66                           // por    xmm5, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe5da0f66                           // pminub    xmm4, xmm5
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xde0f4366; WORD $0x1d5c; BYTE $0xf0 // pmaxub    xmm3, oword [r13 + r11 - 16]
	LONG $0xda0f4266; WORD $0x1864; BYTE $0xf0 // pminub    xmm4, oword [rax + r11 - 16]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0x7f0f4366; WORD $0x196c; BYTE $0xf0 // movdqa    oword [r9 + r11 - 16], xmm5
	WORD $0xff49; BYTE $0xc7                   // inc    r15
	LONG $0x244c034c; BYTE $0x00               // add    r9, qword 56[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	WORD $0x3949; BYTE $0xcf                   // cmp    r15, rcx
	JNE  LBB0_9
	JMP  LBB0_62

LBB0_33:
	LONG $0x02f88349             // cmp    r8, 2
	JG   LBB0_42
	LONG $0x01f88349             // cmp    r8, 1
	JE   LBB0_50
	LONG $0x02f88349             // cmp    r8, 2
	JNE  LBB0_62
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB0_62
	LONG $0x121c8d4c             // lea    r11, [rdx + rdx]
	LONG $0x126c8d4c; BYTE $0xff // lea    r13, [rdx + rdx - 1]
	LONG $0xf0e58349             // and    r13, -16
	LONG $0xff418d4c             // lea    r8, [rcx - 1]
	LONG $0x12778d4c             // lea    r14, [rdi + 18]
	WORD $0x3145; BYTE $0xe4     // xor    r12d, r12d
	LONG $0x00ffffb8; BYTE $0x00 // mov    eax, 65535
	LONG $0xc06e0f66             // movd    xmm0, eax
	LONG $0x4d6f0f66; BYTE $0x10 // movdqa    xmm1, oword 16[rbp] /* [rip + .LCPI0_1] */

LBB0_38:
	LONG $0x24448d49; BYTE $0xff   // lea    rax, [r12 - 1]
	LONG $0xc6af0f48               // imul    rax, rsi
	WORD $0x0148; BYTE $0xf8       // add    rax, rdi
	LONG $0x303c8d4c               // lea    r15, [rax + rsi]
	LONG $0x37148d4d               // lea    r10, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4       // test    r12, r12
	LONG $0x146f0ff3; BYTE $0x06   // movdqu    xmm2, oword [rsi + rax]
	LONG $0x5c6f0ff3; WORD $0x0206 // movdqu    xmm3, oword [rsi + rax + 2]
	LONG $0xc7440f49               // cmove    rax, r15
	WORD $0x394d; BYTE $0xc4       // cmp    r12, r8
	LONG $0xd7430f4d               // cmovae    r10, r15
	LONG $0x206f0ff3               // movdqu    xmm4, oword [rax]
	LONG $0xea6f0f66               // movdqa    xmm5, xmm2
	LONG $0xfd730f66; BYTE $0x02   // pslldq    xmm5, 2
	LONG $0xf26f0f66               // movdqa    xmm6, xmm2
	LONG $0xf0db0f66               // pand    xmm6, xmm0
	LONG $0xf5eb0f66               // por    xmm6, xmm5
	LONG $0x6f0f41f3; BYTE $0x2a   // movdqu    xmm5, oword [r10]
	LONG $0xfa6f0f66               // movdqa    xmm7, xmm2
	LONG $0xfbda0f66               // pminub    xmm7, xmm3
	LONG $0xd3de0f66               // pmaxub    xmm2, xmm3
	LONG $0xde6f0f66               // movdqa    xmm3, xmm6
	LONG $0xdfda0f66               // pminub    xmm3, xmm7
	LONG $0xfede0f66               // pmaxub    xmm7, xmm6
	LONG $0xf76f0f66               // movdqa    xmm6, xmm7
	LONG $0xf2da0f66               // pminub    xmm6, xmm2
	LONG $0xfade0f66               // pmaxub    xmm7, xmm2
	LONG $0xddde0f66               // pmaxub    xmm3, xmm5
	LONG $0xfcda0f66               // pminub    xmm7, xmm4
	LONG $0xd66f0f66               // movdqa    xmm2, xmm6
	LONG $0xd7da0f66               // pminub    xmm2, xmm7
	LONG $0xfede0f66               // pmaxub    xmm7, xmm6
	LONG $0xd3de0f66               // pmaxub    xmm2, xmm3
	LONG $0xd7da0f66               // pminub    xmm2, xmm7
	LONG $0x7f0f41f3; BYTE $0x11   // movdqu    oword [r9], xmm2
	LONG $0x11fd8349               // cmp    r13, 17
	JB   LBB0_41
	WORD $0x894c; BYTE $0xf2       // mov    rdx, r14
	LONG $0x000010bb; BYTE $0x00   // mov    ebx, 16

LBB0_40:
	LONG $0x146f0ff3; BYTE $0x18   // movdqu    xmm2, oword [rax + rbx]
	LONG $0x5a6f0ff3; BYTE $0xfc   // movdqu    xmm3, oword [rdx - 4]
	LONG $0x626f0ff3; BYTE $0xfe   // movdqu    xmm4, oword [rdx - 2]
	LONG $0x2a6f0ff3               // movdqu    xmm5, oword [rdx]
	LONG $0x6f0f41f3; WORD $0x1a34 // movdqu    xmm6, oword [r10 + rbx]
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0xfdda0f66               // pminub    xmm7, xmm5
	LONG $0xe5de0f66               // pmaxub    xmm4, xmm5
	LONG $0xeb6f0f66               // movdqa    xmm5, xmm3
	LONG $0xefda0f66               // pminub    xmm5, xmm7
	LONG $0xfbde0f66               // pmaxub    xmm7, xmm3
	LONG $0xdf6f0f66               // movdqa    xmm3, xmm7
	LONG $0xdcda0f66               // pminub    xmm3, xmm4
	LONG $0xfcde0f66               // pmaxub    xmm7, xmm4
	LONG $0xeede0f66               // pmaxub    xmm5, xmm6
	LONG $0xfada0f66               // pminub    xmm7, xmm2
	LONG $0xd36f0f66               // movdqa    xmm2, xmm3
	LONG $0xd7da0f66               // pminub    xmm2, xmm7
	LONG $0xfbde0f66               // pmaxub    xmm7, xmm3
	LONG $0xd5de0f66               // pmaxub    xmm2, xmm5
	LONG $0xd7da0f66               // pminub    xmm2, xmm7
	LONG $0x7f0f41f3; WORD $0x1914 // movdqu    oword [r9 + rbx], xmm2
	LONG $0x10c38348               // add    rbx, 16
	LONG $0x10c28348               // add    rdx, 16
	WORD $0x394c; BYTE $0xeb       // cmp    rbx, r13
	JB   LBB0_40

LBB0_41:
	LONG $0x6f0f42f3; WORD $0x1854; BYTE $0xf0 // movdqu    xmm2, oword [rax + r11 - 16]
	LONG $0x6f0f43f3; WORD $0x1f5c; BYTE $0xee // movdqu    xmm3, oword [r15 + r11 - 18]
	LONG $0x6f0f43f3; WORD $0x1f64; BYTE $0xf0 // movdqu    xmm4, oword [r15 + r11 - 16]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xdd730f66; BYTE $0x02               // psrldq    xmm5, 2
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf1db0f66                           // pand    xmm6, xmm1
	LONG $0xf5eb0f66                           // por    xmm6, xmm5
	LONG $0x6f0f43f3; WORD $0x1a6c; BYTE $0xf0 // movdqu    xmm5, oword [r10 + r11 - 16]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xfeda0f66                           // pminub    xmm7, xmm6
	LONG $0xf4de0f66                           // pmaxub    xmm6, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xdeda0f66                           // pminub    xmm3, xmm6
	LONG $0xfede0f66                           // pmaxub    xmm7, xmm6
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xfada0f66                           // pminub    xmm7, xmm2
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd7da0f66                           // pminub    xmm2, xmm7
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xd7da0f66                           // pminub    xmm2, xmm7
	LONG $0x7f0f43f3; WORD $0x1954; BYTE $0xf0 // movdqu    oword [r9 + r11 - 16], xmm2
	WORD $0xff49; BYTE $0xc4                   // inc    r12
	LONG $0x244c034c; BYTE $0x00               // add    r9, qword 56[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	WORD $0x3949; BYTE $0xcc                   // cmp    r12, rcx
	JNE  LBB0_38
	JMP  LBB0_62

LBB0_42:
	LONG $0x03f88349                   // cmp    r8, 3
	JE   LBB0_56
	LONG $0x04f88349                   // cmp    r8, 4
	JNE  LBB0_62
	WORD $0x8548; BYTE $0xc9           // test    rcx, rcx
	JE   LBB0_62
	LONG $0x95248d4c; LONG $0xffffffff // lea    r12, [4*rdx - 1]
	LONG $0x02e2c148                   // shl    rdx, 2
	LONG $0xf0e48349                   // and    r12, -16
	LONG $0xff418d4c                   // lea    r8, [rcx - 1]
	LONG $0x145f8d4c                   // lea    r11, [rdi + 20]
	WORD $0x3145; BYTE $0xf6           // xor    r14d, r14d
	LONG $0x456f0f66; BYTE $0x00       // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_46:
	LONG $0xff568d4d                           // lea    r10, [r14 - 1]
	LONG $0xd6af0f4c                           // imul    r10, rsi
	WORD $0x0149; BYTE $0xfa                   // add    r10, rdi
	LONG $0x323c8d4d                           // lea    r15, [r10 + rsi]
	LONG $0x372c8d4d                           // lea    r13, [r15 + rsi]
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	LONG $0x6f0f42f3; WORD $0x160c             // movdqu    xmm1, oword [rsi + r10]
	LONG $0x6f0f42f3; WORD $0x1654; BYTE $0x04 // movdqu    xmm2, oword [rsi + r10 + 4]
	LONG $0xd7440f4d                           // cmove    r10, r15
	WORD $0x394d; BYTE $0xc6                   // cmp    r14, r8
	LONG $0xef430f4d                           // cmovae    r13, r15
	LONG $0x6f0f41f3; BYTE $0x1a               // movdqu    xmm3, oword [r10]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xfc730f66; BYTE $0x04               // pslldq    xmm4, 4
	WORD $0x570f; BYTE $0xed                   // xorps    xmm5, xmm5
	LONG $0xe9100ff3                           // movss    xmm5, xmm1
	WORD $0x560f; BYTE $0xec                   // orps    xmm5, xmm4
	LONG $0x6f0f41f3; WORD $0x0065             // movdqu    xmm4, oword [r13]
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xf2da0f66                           // pminub    xmm6, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	WORD $0x280f; BYTE $0xd5                   // movaps    xmm2, xmm5
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xf5de0f66                           // pmaxub    xmm6, xmm5
	LONG $0xee6f0f66                           // movdqa    xmm5, xmm6
	LONG $0xe9da0f66                           // pminub    xmm5, xmm1
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xf3da0f66                           // pminub    xmm6, xmm3
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xf5de0f66                           // pmaxub    xmm6, xmm5
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0x7f0f41f3; BYTE $0x09               // movdqu    oword [r9], xmm1
	LONG $0x11fc8349                           // cmp    r12, 17
	JB   LBB0_49
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x000010b8; BYTE $0x00               // mov    eax, 16

LBB0_48:
	LONG $0x6f0f41f3; WORD $0x020c             // movdqu    xmm1, oword [r10 + rax]
	LONG $0x536f0ff3; BYTE $0xf8               // movdqu    xmm2, oword [rbx - 8]
	LONG $0x5b6f0ff3; BYTE $0xfc               // movdqu    xmm3, oword [rbx - 4]
	LONG $0x236f0ff3                           // movdqu    xmm4, oword [rbx]
	LONG $0x6f0f41f3; WORD $0x056c; BYTE $0x00 // movdqu    xmm5, oword [r13 + rax]
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf4da0f66                           // pminub    xmm6, xmm4
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0x7f0f41f3; WORD $0x010c             // movdqu    oword [r9 + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB0_48

LBB0_49:
	LONG $0x6f0f41f3; WORD $0x124c; BYTE $0xf0 // movdqu    xmm1, oword [r10 + rdx - 16]
	LONG $0x6f0f41f3; WORD $0x1754; BYTE $0xec // movdqu    xmm2, oword [r15 + rdx - 20]
	LONG $0x6f0f41f3; WORD $0x175c; BYTE $0xf0 // movdqu    xmm3, oword [r15 + rdx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xdc730f66; BYTE $0x04               // psrldq    xmm4, 4
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe8db0f66                           // pand    xmm5, xmm0
	LONG $0xeceb0f66                           // por    xmm5, xmm4
	LONG $0x6f0f41f3; WORD $0x1564; BYTE $0xf0 // movdqu    xmm4, oword [r13 + rdx - 16]
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf5da0f66                           // pminub    xmm6, xmm5
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdeda0f66                           // pminub    xmm3, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xf5de0f66                           // pmaxub    xmm6, xmm5
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0x7f0f41f3; WORD $0x114c; BYTE $0xf0 // movdqu    oword [r9 + rdx - 16], xmm1
	WORD $0xff49; BYTE $0xc6                   // inc    r14
	LONG $0x244c034c; BYTE $0x00               // add    r9, qword 56[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	WORD $0x3949; BYTE $0xce                   // cmp    r14, rcx
	JNE  LBB0_46
	JMP  LBB0_62

LBB0_50:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB0_62
	LONG $0xff628d4c         // lea    r12, [rdx - 1]
	LONG $0xf0e48349         // and    r12, -16
	LONG $0xff418d4c         // lea    r8, [rcx - 1]
	LONG $0x115f8d4c         // lea    r11, [rdi + 17]
	WORD $0x3145; BYTE $0xf6 // xor    r14d, r14d
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_52:
	LONG $0xff468d49               // lea    rax, [r14 - 1]
	LONG $0xc6af0f48               // imul    rax, rsi
	WORD $0x0148; BYTE $0xf8       // add    rax, rdi
	LONG $0x303c8d4c               // lea    r15, [rax + rsi]
	LONG $0x372c8d4d               // lea    r13, [r15 + rsi]
	WORD $0x854d; BYTE $0xf6       // test    r14, r14
	LONG $0x0c6f0ff3; BYTE $0x06   // movdqu    xmm1, oword [rsi + rax]
	LONG $0x546f0ff3; WORD $0x0106 // movdqu    xmm2, oword [rsi + rax + 1]
	LONG $0xc7440f49               // cmove    rax, r15
	WORD $0x394d; BYTE $0xc6       // cmp    r14, r8
	LONG $0xef430f4d               // cmovae    r13, r15
	LONG $0x186f0ff3               // movdqu    xmm3, oword [rax]
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xec700f66; BYTE $0x27   // pshufd    xmm5, xmm4, 39
	LONG $0xdc730f66; BYTE $0x0e   // psrldq    xmm4, 14
	LONG $0xf16f0f66               // movdqa    xmm6, xmm1
	LONG $0xf0680f66               // punpckhbw    xmm6, xmm0
	LONG $0xfe730f66; BYTE $0x02   // pslldq    xmm6, 2
	LONG $0xf4eb0f66               // por    xmm6, xmm4
	LONG $0xe5700ff2; BYTE $0xec   // pshuflw    xmm4, xmm5, 236
	LONG $0xe4700f66; BYTE $0x27   // pshufd    xmm4, xmm4, 39
	LONG $0xe4700ff2; BYTE $0x90   // pshuflw    xmm4, xmm4, 144
	LONG $0xe4700ff3; BYTE $0x93   // pshufhw    xmm4, xmm4, 147
	LONG $0xe6670f66               // packuswb    xmm4, xmm6
	LONG $0x6f0f41f3; WORD $0x006d // movdqu    xmm5, oword [r13]
	LONG $0xf16f0f66               // movdqa    xmm6, xmm1
	LONG $0xf2da0f66               // pminub    xmm6, xmm2
	LONG $0xcade0f66               // pmaxub    xmm1, xmm2
	LONG $0xd46f0f66               // movdqa    xmm2, xmm4
	LONG $0xd6da0f66               // pminub    xmm2, xmm6
	LONG $0xf4de0f66               // pmaxub    xmm6, xmm4
	LONG $0xe66f0f66               // movdqa    xmm4, xmm6
	LONG $0xe1da0f66               // pminub    xmm4, xmm1
	LONG $0xf1de0f66               // pmaxub    xmm6, xmm1
	LONG $0xd5de0f66               // pmaxub    xmm2, xmm5
	LONG $0xf3da0f66               // pminub    xmm6, xmm3
	LONG $0xcc6f0f66               // movdqa    xmm1, xmm4
	LONG $0xceda0f66               // pminub    xmm1, xmm6
	LONG $0xf4de0f66               // pmaxub    xmm6, xmm4
	LONG $0xcade0f66               // pmaxub    xmm1, xmm2
	LONG $0xceda0f66               // pminub    xmm1, xmm6
	LONG $0x7f0f41f3; BYTE $0x09   // movdqu    oword [r9], xmm1
	LONG $0x11fc8349               // cmp    r12, 17
	JB   LBB0_55
	WORD $0x894c; BYTE $0xdb       // mov    rbx, r11
	LONG $0x0010ba41; WORD $0x0000 // mov    r10d, 16

LBB0_54:
	LONG $0x6f0f42f3; WORD $0x100c             // movdqu    xmm1, oword [rax + r10]
	LONG $0x536f0ff3; BYTE $0xfe               // movdqu    xmm2, oword [rbx - 2]
	LONG $0x5b6f0ff3; BYTE $0xff               // movdqu    xmm3, oword [rbx - 1]
	LONG $0x236f0ff3                           // movdqu    xmm4, oword [rbx]
	LONG $0x6f0f43f3; WORD $0x156c; BYTE $0x00 // movdqu    xmm5, oword [r13 + r10]
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf4da0f66                           // pminub    xmm6, xmm4
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0x7f0f43f3; WORD $0x110c             // movdqu    oword [r9 + r10], xmm1
	LONG $0x10c28349                           // add    r10, 16
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x394d; BYTE $0xe2                   // cmp    r10, r12
	JB   LBB0_54

LBB0_55:
	LONG $0x4c6f0ff3; WORD $0xf010             // movdqu    xmm1, oword [rax + rdx - 16]
	LONG $0x6f0f41f3; WORD $0x1754; BYTE $0xef // movdqu    xmm2, oword [r15 + rdx - 17]
	LONG $0x6f0f41f3; WORD $0x175c; BYTE $0xf0 // movdqu    xmm3, oword [r15 + rdx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xdc730f66; BYTE $0x02               // psrldq    xmm4, 2
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe8680f66                           // punpckhbw    xmm5, xmm0
	LONG $0xf5700f66; BYTE $0x27               // pshufd    xmm6, xmm5, 39
	LONG $0xfd730f66; BYTE $0x0e               // pslldq    xmm5, 14
	LONG $0xeceb0f66                           // por    xmm5, xmm4
	LONG $0xe6700ff3; BYTE $0xc4               // pshufhw    xmm4, xmm6, 196
	LONG $0xe4700f66; BYTE $0x27               // pshufd    xmm4, xmm4, 39
	LONG $0xe4700ff2; BYTE $0x39               // pshuflw    xmm4, xmm4, 57
	LONG $0xe4700ff3; BYTE $0xf9               // pshufhw    xmm4, xmm4, 249
	LONG $0xec670f66                           // packuswb    xmm5, xmm4
	LONG $0x6f0f41f3; WORD $0x1564; BYTE $0xf0 // movdqu    xmm4, oword [r13 + rdx - 16]
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf5da0f66                           // pminub    xmm6, xmm5
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdeda0f66                           // pminub    xmm3, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xf5de0f66                           // pmaxub    xmm6, xmm5
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0x7f0f41f3; WORD $0x114c; BYTE $0xf0 // movdqu    oword [r9 + rdx - 16], xmm1
	WORD $0xff49; BYTE $0xc6                   // inc    r14
	LONG $0x244c034c; BYTE $0x00               // add    r9, qword 56[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	WORD $0x3949; BYTE $0xce                   // cmp    r14, rcx
	JNE  LBB0_52
	JMP  LBB0_62

LBB0_56:
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB0_62
	LONG $0x521c8d4c             // lea    r11, [rdx + 2*rdx]
	LONG $0x526c8d4c; BYTE $0xff // lea    r13, [rdx + 2*rdx - 1]
	LONG $0xf0e58349             // and    r13, -16
	LONG $0xff418d4c             // lea    r8, [rcx - 1]
	LONG $0x13778d4c             // lea    r14, [rdi + 19]
	WORD $0x3145; BYTE $0xe4     // xor    r12d, r12d
	LONG $0xc0ef0f66             // pxor    xmm0, xmm0

LBB0_58:
	LONG $0x245c8d49; BYTE $0xff   // lea    rbx, [r12 - 1]
	LONG $0xdeaf0f48               // imul    rbx, rsi
	WORD $0x0148; BYTE $0xfb       // add    rbx, rdi
	LONG $0x333c8d4c               // lea    r15, [rbx + rsi]
	LONG $0x37148d4d               // lea    r10, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4       // test    r12, r12
	LONG $0x0c6f0ff3; BYTE $0x1e   // movdqu    xmm1, oword [rsi + rbx]
	LONG $0x546f0ff3; WORD $0x031e // movdqu    xmm2, oword [rsi + rbx + 3]
	LONG $0xdf440f49               // cmove    rbx, r15
	WORD $0x394d; BYTE $0xc4       // cmp    r12, r8
	LONG $0xd7430f4d               // cmovae    r10, r15
	LONG $0x1b6f0ff3               // movdqu    xmm3, oword [rbx]
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xec700f66; BYTE $0x27   // pshufd    xmm5, xmm4, 39
	LONG $0xdc730f66; BYTE $0x0a   // psrldq    xmm4, 10
	LONG $0xf16f0f66               // movdqa    xmm6, xmm1
	LONG $0xf0680f66               // punpckhbw    xmm6, xmm0
	LONG $0xfe730f66; BYTE $0x06   // pslldq    xmm6, 6
	LONG $0xf4eb0f66               // por    xmm6, xmm4
	LONG $0xe5700ff3; BYTE $0xec   // pshufhw    xmm4, xmm5, 236
	LONG $0xe4700f66; BYTE $0x67   // pshufd    xmm4, xmm4, 103
	LONG $0xe4700ff2; BYTE $0x24   // pshuflw    xmm4, xmm4, 36
	LONG $0xe4700ff3; BYTE $0x39   // pshufhw    xmm4, xmm4, 57
	LONG $0xe6670f66               // packuswb    xmm4, xmm6
	LONG $0x6f0f41f3; BYTE $0x2a   // movdqu    xmm5, oword [r10]
	LONG $0xf16f0f66               // movdqa    xmm6, xmm1
	LONG $0xf2da0f66               // pminub    xmm6, xmm2
	LONG $0xcade0f66               // pmaxub    xmm1, xmm2
	LONG $0xd46f0f66               // movdqa    xmm2, xmm4
	LONG $0xd6da0f66               // pminub    xmm2, xmm6
	LONG $0xf4de0f66               // pmaxub    xmm6, xmm4
	LONG $0xe66f0f66               // movdqa    xmm4, xmm6
	LONG $0xe1da0f66               // pminub    xmm4, xmm1
	LONG $0xf1de0f66               // pmaxub    xmm6, xmm1
	LONG $0xd5de0f66               // pmaxub    xmm2, xmm5
	LONG $0xf3da0f66               // pminub    xmm6, xmm3
	LONG $0xcc6f0f66               // movdqa    xmm1, xmm4
	LONG $0xceda0f66               // pminub    xmm1, xmm6
	LONG $0xf4de0f66               // pmaxub    xmm6, xmm4
	LONG $0xcade0f66               // pmaxub    xmm1, xmm2
	LONG $0xceda0f66               // pminub    xmm1, xmm6
	LONG $0x7f0f41f3; BYTE $0x09   // movdqu    oword [r9], xmm1
	LONG $0x11fd8349               // cmp    r13, 17
	JB   LBB0_61
	WORD $0x894c; BYTE $0xf2       // mov    rdx, r14
	LONG $0x000010b8; BYTE $0x00   // mov    eax, 16

LBB0_60:
	LONG $0x0c6f0ff3; BYTE $0x03   // movdqu    xmm1, oword [rbx + rax]
	LONG $0x526f0ff3; BYTE $0xfa   // movdqu    xmm2, oword [rdx - 6]
	LONG $0x5a6f0ff3; BYTE $0xfd   // movdqu    xmm3, oword [rdx - 3]
	LONG $0x226f0ff3               // movdqu    xmm4, oword [rdx]
	LONG $0x6f0f41f3; WORD $0x022c // movdqu    xmm5, oword [r10 + rax]
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf4da0f66               // pminub    xmm6, xmm4
	LONG $0xdcde0f66               // pmaxub    xmm3, xmm4
	LONG $0xe26f0f66               // movdqa    xmm4, xmm2
	LONG $0xe6da0f66               // pminub    xmm4, xmm6
	LONG $0xf2de0f66               // pmaxub    xmm6, xmm2
	LONG $0xd66f0f66               // movdqa    xmm2, xmm6
	LONG $0xd3da0f66               // pminub    xmm2, xmm3
	LONG $0xf3de0f66               // pmaxub    xmm6, xmm3
	LONG $0xe5de0f66               // pmaxub    xmm4, xmm5
	LONG $0xf1da0f66               // pminub    xmm6, xmm1
	LONG $0xca6f0f66               // movdqa    xmm1, xmm2
	LONG $0xceda0f66               // pminub    xmm1, xmm6
	LONG $0xf2de0f66               // pmaxub    xmm6, xmm2
	LONG $0xccde0f66               // pmaxub    xmm1, xmm4
	LONG $0xceda0f66               // pminub    xmm1, xmm6
	LONG $0x7f0f41f3; WORD $0x010c // movdqu    oword [r9 + rax], xmm1
	LONG $0x10c08348               // add    rax, 16
	LONG $0x10c28348               // add    rdx, 16
	WORD $0x394c; BYTE $0xe8       // cmp    rax, r13
	JB   LBB0_60

LBB0_61:
	LONG $0x6f0f42f3; WORD $0x1b4c; BYTE $0xf0 // movdqu    xmm1, oword [rbx + r11 - 16]
	LONG $0x6f0f43f3; WORD $0x1f54; BYTE $0xed // movdqu    xmm2, oword [r15 + r11 - 19]
	LONG $0x6f0f43f3; WORD $0x1f5c; BYTE $0xf0 // movdqu    xmm3, oword [r15 + r11 - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xdc730f66; BYTE $0x06               // psrldq    xmm4, 6
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe8680f66                           // punpckhbw    xmm5, xmm0
	LONG $0xf5700f66; BYTE $0x27               // pshufd    xmm6, xmm5, 39
	LONG $0xfd730f66; BYTE $0x0a               // pslldq    xmm5, 10
	LONG $0xeceb0f66                           // por    xmm5, xmm4
	LONG $0xe6700ff2; BYTE $0x4c               // pshuflw    xmm4, xmm6, 76
	LONG $0xe4700f66; BYTE $0x68               // pshufd    xmm4, xmm4, 104
	LONG $0xe4700ff2; BYTE $0x39               // pshuflw    xmm4, xmm4, 57
	LONG $0xe4700ff3; BYTE $0xe7               // pshufhw    xmm4, xmm4, 231
	LONG $0xec670f66                           // packuswb    xmm5, xmm4
	LONG $0x6f0f43f3; WORD $0x1a64; BYTE $0xf0 // movdqu    xmm4, oword [r10 + r11 - 16]
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf5da0f66                           // pminub    xmm6, xmm5
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdeda0f66                           // pminub    xmm3, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xf5de0f66                           // pmaxub    xmm6, xmm5
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0x7f0f43f3; WORD $0x194c; BYTE $0xf0 // movdqu    oword [r9 + r11 - 16], xmm1
	WORD $0xff49; BYTE $0xc4                   // inc    r12
	LONG $0x244c034c; BYTE $0x00               // add    r9, qword 56[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	WORD $0x3949; BYTE $0xcc                   // cmp    r12, rcx
	JNE  LBB0_58
	JMP  LBB0_62

LBB0_13:
	LONG $0x03f88349                   // cmp    r8, 3
	JE   LBB0_27
	LONG $0x04f88349                   // cmp    r8, 4
	JNE  LBB0_62
	WORD $0x8548; BYTE $0xc9           // test    rcx, rcx
	JE   LBB0_62
	LONG $0x953c8d4c; LONG $0xffffffff // lea    r15, [4*rdx - 1]
	LONG $0x02e2c148                   // shl    rdx, 2
	LONG $0xf0e78349                   // and    r15, -16
	LONG $0xff418d4c                   // lea    r8, [rcx - 1]
	LONG $0x145f8d4c                   // lea    r11, [rdi + 20]
	WORD $0x3145; BYTE $0xf6           // xor    r14d, r14d
	LONG $0x456f0f66; BYTE $0x00       // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI0_0] */

LBB0_17:
	LONG $0xff6e8d4d                           // lea    r13, [r14 - 1]
	LONG $0xeeaf0f4c                           // imul    r13, rsi
	WORD $0x0149; BYTE $0xfd                   // add    r13, rdi
	LONG $0x35648d4d; BYTE $0x00               // lea    r12, [r13 + rsi]
	LONG $0x34148d4d                           // lea    r10, [r12 + rsi]
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	LONG $0x6f0f4266; WORD $0x2e0c             // movdqa    xmm1, oword [rsi + r13]
	LONG $0x6f0f42f3; WORD $0x2e54; BYTE $0x04 // movdqu    xmm2, oword [rsi + r13 + 4]
	LONG $0xec440f4d                           // cmove    r13, r12
	WORD $0x394d; BYTE $0xc6                   // cmp    r14, r8
	LONG $0xd4430f4d                           // cmovae    r10, r12
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x04               // pslldq    xmm3, 4
	WORD $0x570f; BYTE $0xe4                   // xorps    xmm4, xmm4
	LONG $0xe1100ff3                           // movss    xmm4, xmm1
	WORD $0x560f; BYTE $0xe3                   // orps    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	WORD $0x280f; BYTE $0xd4                   // movaps    xmm2, xmm4
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0x12               // pmaxub    xmm2, oword [r10]
	LONG $0xda0f4166; WORD $0x005d             // pminub    xmm3, oword [r13]
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0x7f0f4166; BYTE $0x09               // movdqa    oword [r9], xmm1
	LONG $0x11ff8349                           // cmp    r15, 17
	JB   LBB0_20
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x000010b8; BYTE $0x00               // mov    eax, 16

LBB0_19:
	LONG $0x4b6f0ff3; BYTE $0xf8               // movdqu    xmm1, oword [rbx - 8]
	LONG $0x536f0f66; BYTE $0xfc               // movdqa    xmm2, oword [rbx - 4]
	LONG $0x1b6f0ff3                           // movdqu    xmm3, oword [rbx]
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xde0f4166; WORD $0x021c             // pmaxub    xmm3, oword [r10 + rax]
	LONG $0xda0f4166; WORD $0x0564; BYTE $0x00 // pminub    xmm4, oword [r13 + rax]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0x7f0f4166; WORD $0x0114             // movdqa    oword [r9 + rax], xmm2
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x394c; BYTE $0xf8                   // cmp    rax, r15
	JB   LBB0_19

LBB0_20:
	LONG $0x6f0f41f3; WORD $0x144c; BYTE $0xec // movdqu    xmm1, oword [r12 + rdx - 20]
	LONG $0x6f0f4166; WORD $0x1454; BYTE $0xf0 // movdqa    xmm2, oword [r12 + rdx - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdb730f66; BYTE $0x04               // psrldq    xmm3, 4
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xde0f4166; WORD $0x1254; BYTE $0xf0 // pmaxub    xmm2, oword [r10 + rdx - 16]
	LONG $0xda0f4166; WORD $0x155c; BYTE $0xf0 // pminub    xmm3, oword [r13 + rdx - 16]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1164; BYTE $0xf0 // movdqa    oword [r9 + rdx - 16], xmm4
	WORD $0xff49; BYTE $0xc6                   // inc    r14
	LONG $0x244c034c; BYTE $0x00               // add    r9, qword 56[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	WORD $0x3949; BYTE $0xce                   // cmp    r14, rcx
	JNE  LBB0_17
	JMP  LBB0_62

LBB0_21:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB0_62
	LONG $0xff7a8d4c         // lea    r15, [rdx - 1]
	LONG $0xf0e78349         // and    r15, -16
	LONG $0xff418d4c         // lea    r8, [rcx - 1]
	LONG $0x115f8d4c         // lea    r11, [rdi + 17]
	WORD $0x3145; BYTE $0xf6 // xor    r14d, r14d
	LONG $0xc0ef0f66         // pxor    xmm0, xmm0

LBB0_23:
	LONG $0xff6e8d4d                           // lea    r13, [r14 - 1]
	LONG $0xeeaf0f4c                           // imul    r13, rsi
	WORD $0x0149; BYTE $0xfd                   // add    r13, rdi
	LONG $0x35648d4d; BYTE $0x00               // lea    r12, [r13 + rsi]
	LONG $0x34148d4d                           // lea    r10, [r12 + rsi]
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	LONG $0x6f0f4266; WORD $0x2e0c             // movdqa    xmm1, oword [rsi + r13]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd0600f66                           // punpcklbw    xmm2, xmm0
	LONG $0xda700f66; BYTE $0x27               // pshufd    xmm3, xmm2, 39
	LONG $0xda730f66; BYTE $0x0e               // psrldq    xmm2, 14
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe0680f66                           // punpckhbw    xmm4, xmm0
	LONG $0xfc730f66; BYTE $0x02               // pslldq    xmm4, 2
	LONG $0xe2eb0f66                           // por    xmm4, xmm2
	LONG $0x6f0f42f3; WORD $0x2e54; BYTE $0x01 // movdqu    xmm2, oword [rsi + r13 + 1]
	LONG $0xec440f4d                           // cmove    r13, r12
	WORD $0x394d; BYTE $0xc6                   // cmp    r14, r8
	LONG $0xd4430f4d                           // cmovae    r10, r12
	LONG $0xdb700ff2; BYTE $0xec               // pshuflw    xmm3, xmm3, 236
	LONG $0xdb700f66; BYTE $0x27               // pshufd    xmm3, xmm3, 39
	LONG $0xdb700ff2; BYTE $0x90               // pshuflw    xmm3, xmm3, 144
	LONG $0xdb700ff3; BYTE $0x93               // pshufhw    xmm3, xmm3, 147
	LONG $0xdc670f66                           // packuswb    xmm3, xmm4
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0x12               // pmaxub    xmm2, oword [r10]
	LONG $0xda0f4166; WORD $0x0065             // pminub    xmm4, oword [r13]
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0x7f0f4166; BYTE $0x09               // movdqa    oword [r9], xmm1
	LONG $0x11ff8349                           // cmp    r15, 17
	JB   LBB0_26
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x000010b8; BYTE $0x00               // mov    eax, 16

LBB0_25:
	LONG $0x4b6f0ff3; BYTE $0xfe               // movdqu    xmm1, oword [rbx - 2]
	LONG $0x536f0f66; BYTE $0xff               // movdqa    xmm2, oword [rbx - 1]
	LONG $0x1b6f0ff3                           // movdqu    xmm3, oword [rbx]
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xde0f4166; WORD $0x021c             // pmaxub    xmm3, oword [r10 + rax]
	LONG $0xda0f4166; WORD $0x0564; BYTE $0x00 // pminub    xmm4, oword [r13 + rax]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0x7f0f4166; WORD $0x0114             // movdqa    oword [r9 + rax], xmm2
	LONG $0x10c08348                           // add    rax, 16
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x394c; BYTE $0xf8                   // cmp    rax, r15
	JB   LBB0_25

LBB0_26:
	LONG $0x6f0f41f3; WORD $0x144c; BYTE $0xef // movdqu    xmm1, oword [r12 + rdx - 17]
	LONG $0x6f0f4166; WORD $0x1454; BYTE $0xf0 // movdqa    xmm2, oword [r12 + rdx - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xdb730f66; BYTE $0x02               // psrldq    xmm3, 2
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe0680f66                           // punpckhbw    xmm4, xmm0
	LONG $0xec700f66; BYTE $0x27               // pshufd    xmm5, xmm4, 39
	LONG $0xfc730f66; BYTE $0x0e               // pslldq    xmm4, 14
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0xdd700ff3; BYTE $0xc4               // pshufhw    xmm3, xmm5, 196
	LONG $0xdb700f66; BYTE $0x27               // pshufd    xmm3, xmm3, 39
	LONG $0xdb700ff2; BYTE $0x39               // pshuflw    xmm3, xmm3, 57
	LONG $0xdb700ff3; BYTE $0xf9               // pshufhw    xmm3, xmm3, 249
	LONG $0xe3670f66                           // packuswb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xde0f4166; WORD $0x1254; BYTE $0xf0 // pmaxub    xmm2, oword [r10 + rdx - 16]
	LONG $0xda0f4166; WORD $0x155c; BYTE $0xf0 // pminub    xmm3, oword [r13 + rdx - 16]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1164; BYTE $0xf0 // movdqa    oword [r9 + rdx - 16], xmm4
	WORD $0xff49; BYTE $0xc6                   // inc    r14
	LONG $0x244c034c; BYTE $0x00               // add    r9, qword 56[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	WORD $0x3949; BYTE $0xce                   // cmp    r14, rcx
	JNE  LBB0_23
	JMP  LBB0_62

LBB0_27:
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB0_62
	LONG $0x521c8d4c             // lea    r11, [rdx + 2*rdx]
	LONG $0x52548d4c; BYTE $0xff // lea    r10, [rdx + 2*rdx - 1]
	LONG $0xf0e28349             // and    r10, -16
	LONG $0xff418d4c             // lea    r8, [rcx - 1]
	LONG $0x13778d4c             // lea    r14, [rdi + 19]
	WORD $0x3145; BYTE $0xff     // xor    r15d, r15d
	LONG $0xc0ef0f66             // pxor    xmm0, xmm0

LBB0_29:
	LONG $0xff478d49               // lea    rax, [r15 - 1]
	LONG $0xc6af0f48               // imul    rax, rsi
	WORD $0x0148; BYTE $0xf8       // add    rax, rdi
	LONG $0x30248d4c               // lea    r12, [rax + rsi]
	LONG $0x342c8d4d               // lea    r13, [r12 + rsi]
	WORD $0x854d; BYTE $0xff       // test    r15, r15
	LONG $0x0c6f0f66; BYTE $0x06   // movdqa    xmm1, oword [rsi + rax]
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xd0600f66               // punpcklbw    xmm2, xmm0
	LONG $0xda700f66; BYTE $0x27   // pshufd    xmm3, xmm2, 39
	LONG $0xda730f66; BYTE $0x0a   // psrldq    xmm2, 10
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xfc730f66; BYTE $0x06   // pslldq    xmm4, 6
	LONG $0xe2eb0f66               // por    xmm4, xmm2
	LONG $0x546f0ff3; WORD $0x0306 // movdqu    xmm2, oword [rsi + rax + 3]
	LONG $0xc4440f49               // cmove    rax, r12
	WORD $0x394d; BYTE $0xc7       // cmp    r15, r8
	LONG $0xec430f4d               // cmovae    r13, r12
	LONG $0xdb700ff3; BYTE $0xec   // pshufhw    xmm3, xmm3, 236
	LONG $0xdb700f66; BYTE $0x67   // pshufd    xmm3, xmm3, 103
	LONG $0xdb700ff2; BYTE $0x24   // pshuflw    xmm3, xmm3, 36
	LONG $0xdb700ff3; BYTE $0x39   // pshufhw    xmm3, xmm3, 57
	LONG $0xdc670f66               // packuswb    xmm3, xmm4
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe2da0f66               // pminub    xmm4, xmm2
	LONG $0xcade0f66               // pmaxub    xmm1, xmm2
	LONG $0xd36f0f66               // movdqa    xmm2, xmm3
	LONG $0xd4da0f66               // pminub    xmm2, xmm4
	LONG $0xe3de0f66               // pmaxub    xmm4, xmm3
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9da0f66               // pminub    xmm3, xmm1
	LONG $0xe1de0f66               // pmaxub    xmm4, xmm1
	LONG $0xde0f4166; WORD $0x0055 // pmaxub    xmm2, oword [r13]
	LONG $0x20da0f66               // pminub    xmm4, oword [rax]
	LONG $0xcb6f0f66               // movdqa    xmm1, xmm3
	LONG $0xccda0f66               // pminub    xmm1, xmm4
	LONG $0xe3de0f66               // pmaxub    xmm4, xmm3
	LONG $0xcade0f66               // pmaxub    xmm1, xmm2
	LONG $0xccda0f66               // pminub    xmm1, xmm4
	LONG $0x7f0f4166; BYTE $0x09   // movdqa    oword [r9], xmm1
	LONG $0x11fa8349               // cmp    r10, 17
	JB   LBB0_32
	WORD $0x894c; BYTE $0xf2       // mov    rdx, r14
	LONG $0x000010bb; BYTE $0x00   // mov    ebx, 16

LBB0_31:
	LONG $0x4a6f0ff3; BYTE $0xfa               // movdqu    xmm1, oword [rdx - 6]
	LONG $0x526f0f66; BYTE $0xfd               // movdqa    xmm2, oword [rdx - 3]
	LONG $0x1a6f0ff3                           // movdqu    xmm3, oword [rdx]
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xde0f4166; WORD $0x1d5c; BYTE $0x00 // pmaxub    xmm3, oword [r13 + rbx]
	LONG $0x24da0f66; BYTE $0x18               // pminub    xmm4, oword [rax + rbx]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0x7f0f4166; WORD $0x1914             // movdqa    oword [r9 + rbx], xmm2
	LONG $0x10c38348                           // add    rbx, 16
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x394c; BYTE $0xd3                   // cmp    rbx, r10
	JB   LBB0_31

LBB0_32:
	LONG $0x6f0f43f3; WORD $0x1c4c; BYTE $0xed // movdqu    xmm1, oword [r12 + r11 - 19]
	LONG $0x6f0f4366; WORD $0x1c54; BYTE $0xf0 // movdqa    xmm2, oword [r12 + r11 - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xdb730f66; BYTE $0x06               // psrldq    xmm3, 6
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe0680f66                           // punpckhbw    xmm4, xmm0
	LONG $0xec700f66; BYTE $0x27               // pshufd    xmm5, xmm4, 39
	LONG $0xfc730f66; BYTE $0x0a               // pslldq    xmm4, 10
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0xdd700ff2; BYTE $0x4c               // pshuflw    xmm3, xmm5, 76
	LONG $0xdb700f66; BYTE $0x68               // pshufd    xmm3, xmm3, 104
	LONG $0xdb700ff2; BYTE $0x39               // pshuflw    xmm3, xmm3, 57
	LONG $0xdb700ff3; BYTE $0xe7               // pshufhw    xmm3, xmm3, 231
	LONG $0xe3670f66                           // packuswb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xde0f4366; WORD $0x1d54; BYTE $0xf0 // pmaxub    xmm2, oword [r13 + r11 - 16]
	LONG $0xda0f4266; WORD $0x185c; BYTE $0xf0 // pminub    xmm3, oword [rax + r11 - 16]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0x7f0f4366; WORD $0x1964; BYTE $0xf0 // movdqa    oword [r9 + r11 - 16], xmm4
	WORD $0xff49; BYTE $0xc7                   // inc    r15
	LONG $0x244c034c; BYTE $0x00               // add    r9, qword 56[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	WORD $0x3949; BYTE $0xcf                   // cmp    r15, rcx
	JNE  LBB0_29

LBB0_62:
	SUBQ $8, SP
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x008(SB)/8, $0xffffffff00000000
DATA LCDATA2<>+0x010(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x018(SB)/8, $0xffff000000000000
GLOBL LCDATA2<>(SB), 8, $32

TEXT Â·_SimdSse2MedianFilterSquare3x3(SB), 7, $16-56

	MOVQ src+0(FP), DI
	MOVQ srcStride+8(FP), SI
	MOVQ width+16(FP), DX
	MOVQ height+24(FP), CX
	MOVQ channelCount+32(FP), R8
	MOVQ dst+40(FP), R9
	MOVQ dstStride+48(FP), R10
	LEAQ LCDATA2<>(SB), BP
	ADDQ $8, SP
	MOVQ R10, 8(SP)

	LONG $0x240c8948               // mov    qword [rsp], rcx
	WORD $0x8948; BYTE $0xf9       // mov    rcx, rdi
	WORD $0x8948; BYTE $0xc8       // mov    rax, rcx
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB1_33
	WORD $0x8948; BYTE $0xd3       // mov    rbx, rdx
	WORD $0x0948; BYTE $0xf3       // or    rbx, rsi
	WORD $0x8948; BYTE $0xd8       // mov    rax, rbx
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xd8       // cmp    rax, rbx
	JNE  LBB1_33
	LONG $0x24448b48; BYTE $0x08   // mov    rax, qword 64[rsp] /* [rbp + 16] */
	WORD $0x8948; BYTE $0xc7       // mov    rdi, rax
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JNE  LBB1_33
	WORD $0x894c; BYTE $0xc8       // mov    rax, r9
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x394c; BYTE $0xc8       // cmp    rax, r9
	JNE  LBB1_33
	LONG $0x02f88349               // cmp    r8, 2
	JG   LBB1_13
	LONG $0x01f88349               // cmp    r8, 1
	JE   LBB1_21
	LONG $0x02f88349               // cmp    r8, 2
	JNE  LBB1_62
	LONG $0x243c8348; BYTE $0x00   // cmp    qword [rsp], 0
	JE   LBB1_62
	LONG $0x12348d4c               // lea    r14, [rdx + rdx]
	LONG $0x126c8d4c; BYTE $0xff   // lea    r13, [rdx + rdx - 1]
	LONG $0xf0e58349               // and    r13, -16
	LONG $0x24048b48               // mov    rax, qword [rsp]
	LONG $0xff788d48               // lea    rdi, [rax - 1]
	LONG $0x12598d4c               // lea    r11, [rcx + 18]
	WORD $0x3145; BYTE $0xe4       // xor    r12d, r12d
	LONG $0x00ffffb8; BYTE $0x00   // mov    eax, 65535
	LONG $0x6e0f4466; BYTE $0xc8   // movd    xmm9, eax
	LONG $0x6f0f4466; WORD $0x1045 // movdqa    xmm8, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_9:
	LONG $0x245c8d49; BYTE $0xff   // lea    rbx, [r12 - 1]
	LONG $0xdeaf0f48               // imul    rbx, rsi
	WORD $0x0148; BYTE $0xcb       // add    rbx, rcx
	LONG $0x333c8d4c               // lea    r15, [rbx + rsi]
	LONG $0x37148d4d               // lea    r10, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4       // test    r12, r12
	LONG $0x6f0f4466; WORD $0x1e14 // movdqa    xmm10, oword [rsi + rbx]
	LONG $0x5c6f0ff3; WORD $0x021e // movdqu    xmm3, oword [rsi + rbx + 2]
	LONG $0xdf440f49               // cmove    rbx, r15
	WORD $0x3949; BYTE $0xfc       // cmp    r12, rdi
	LONG $0xd7430f4d               // cmovae    r10, r15
	LONG $0x036f0f66               // movdqa    xmm0, oword [rbx]
	LONG $0xc86f0f66               // movdqa    xmm1, xmm0
	LONG $0xf9730f66; BYTE $0x02   // pslldq    xmm1, 2
	LONG $0xe86f0f66               // movdqa    xmm5, xmm0
	LONG $0xdb0f4166; BYTE $0xe9   // pand    xmm5, xmm9
	LONG $0xe9eb0f66               // por    xmm5, xmm1
	LONG $0x4b6f0ff3; BYTE $0x02   // movdqu    xmm1, oword [rbx + 2]
	LONG $0x6f0f4166; BYTE $0xe2   // movdqa    xmm4, xmm10
	LONG $0xfc730f66; BYTE $0x02   // pslldq    xmm4, 2
	LONG $0x6f0f4166; BYTE $0xfa   // movdqa    xmm7, xmm10
	LONG $0xdb0f4166; BYTE $0xf9   // pand    xmm7, xmm9
	LONG $0xfceb0f66               // por    xmm7, xmm4
	LONG $0x6f0f4166; BYTE $0x12   // movdqa    xmm2, oword [r10]
	LONG $0xe26f0f66               // movdqa    xmm4, xmm2
	LONG $0xfc730f66; BYTE $0x02   // pslldq    xmm4, 2
	LONG $0xf26f0f66               // movdqa    xmm6, xmm2
	LONG $0xdb0f4166; BYTE $0xf1   // pand    xmm6, xmm9
	LONG $0xf4eb0f66               // por    xmm6, xmm4
	LONG $0x6f0f45f3; WORD $0x025a // movdqu    xmm11, oword [r10 + 2]
	LONG $0xe06f0f66               // movdqa    xmm4, xmm0
	LONG $0xe1da0f66               // pminub    xmm4, xmm1
	LONG $0xc1de0f66               // pmaxub    xmm0, xmm1
	LONG $0x6f0f4166; BYTE $0xca   // movdqa    xmm1, xmm10
	LONG $0xcbda0f66               // pminub    xmm1, xmm3
	LONG $0xde0f4466; BYTE $0xd3   // pmaxub    xmm10, xmm3
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xda0f4166; BYTE $0xdb   // pminub    xmm3, xmm11
	LONG $0xde0f4166; BYTE $0xd3   // pmaxub    xmm2, xmm11
	LONG $0x6f0f4466; BYTE $0xdd   // movdqa    xmm11, xmm5
	LONG $0xda0f4466; BYTE $0xdc   // pminub    xmm11, xmm4
	LONG $0xe5de0f66               // pmaxub    xmm4, xmm5
	LONG $0xef6f0f66               // movdqa    xmm5, xmm7
	LONG $0xe9da0f66               // pminub    xmm5, xmm1
	LONG $0xcfde0f66               // pmaxub    xmm1, xmm7
	LONG $0x6f0f4466; BYTE $0xe6   // movdqa    xmm12, xmm6
	LONG $0xda0f4466; BYTE $0xe3   // pminub    xmm12, xmm3
	LONG $0xdede0f66               // pmaxub    xmm3, xmm6
	LONG $0xf46f0f66               // movdqa    xmm6, xmm4
	LONG $0xf0da0f66               // pminub    xmm6, xmm0
	LONG $0xe0de0f66               // pmaxub    xmm4, xmm0
	LONG $0xc16f0f66               // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc2   // pminub    xmm0, xmm10
	LONG $0xde0f4166; BYTE $0xca   // pmaxub    xmm1, xmm10
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xfada0f66               // pminub    xmm7, xmm2
	LONG $0xdade0f66               // pmaxub    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xeb   // pmaxub    xmm5, xmm11
	LONG $0xd9da0f66               // pminub    xmm3, xmm1
	LONG $0xc86f0f66               // movdqa    xmm1, xmm0
	LONG $0xcfda0f66               // pminub    xmm1, xmm7
	LONG $0xf8de0f66               // pmaxub    xmm7, xmm0
	LONG $0xde0f4166; BYTE $0xec   // pmaxub    xmm5, xmm12
	LONG $0xcede0f66               // pmaxub    xmm1, xmm6
	LONG $0xdcda0f66               // pminub    xmm3, xmm4
	LONG $0xcfda0f66               // pminub    xmm1, xmm7
	LONG $0xc16f0f66               // movdqa    xmm0, xmm1
	LONG $0xc3da0f66               // pminub    xmm0, xmm3
	LONG $0xcbde0f66               // pmaxub    xmm1, xmm3
	LONG $0xc5de0f66               // pmaxub    xmm0, xmm5
	LONG $0xc1da0f66               // pminub    xmm0, xmm1
	LONG $0x7f0f4166; BYTE $0x01   // movdqa    oword [r9], xmm0
	LONG $0x11fd8349               // cmp    r13, 17
	JB   LBB1_12
	WORD $0x894c; BYTE $0xda       // mov    rdx, r11
	LONG $0x0012b841; WORD $0x0000 // mov    r8d, 18

LBB1_11:
	LONG $0x6f0f46f3; WORD $0x0364; BYTE $0xfc // movdqu    xmm12, oword [rbx + r8 - 4]
	LONG $0x6f0f4266; WORD $0x037c; BYTE $0xfe // movdqa    xmm7, oword [rbx + r8 - 2]
	LONG $0x6f0f42f3; WORD $0x031c             // movdqu    xmm3, oword [rbx + r8]
	LONG $0x6f0f44f3; WORD $0xfc52             // movdqu    xmm10, oword [rdx - 4]
	LONG $0x4a6f0f66; BYTE $0xfe               // movdqa    xmm1, oword [rdx - 2]
	LONG $0x226f0ff3                           // movdqu    xmm4, oword [rdx]
	LONG $0x6f0f47f3; WORD $0x025c; BYTE $0xfc // movdqu    xmm11, oword [r10 + r8 - 4]
	LONG $0x6f0f4366; WORD $0x026c; BYTE $0xfe // movdqa    xmm5, oword [r10 + r8 - 2]
	LONG $0x6f0f43f3; WORD $0x0204             // movdqu    xmm0, oword [r10 + r8]
	LONG $0xd76f0f66                           // movdqa    xmm2, xmm7
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xf4da0f66                           // pminub    xmm6, xmm4
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0x6f0f4566; BYTE $0xec               // movdqa    xmm13, xmm12
	LONG $0xda0f4466; BYTE $0xea               // pminub    xmm13, xmm2
	LONG $0xde0f4166; BYTE $0xd4               // pmaxub    xmm2, xmm12
	LONG $0x6f0f4166; BYTE $0xe2               // movdqa    xmm4, xmm10
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xde0f4166; BYTE $0xf2               // pmaxub    xmm6, xmm10
	LONG $0x6f0f4566; BYTE $0xd3               // movdqa    xmm10, xmm11
	LONG $0xda0f4466; BYTE $0xd3               // pminub    xmm10, xmm3
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xf9da0f66                           // pminub    xmm7, xmm1
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xcdda0f66                           // pminub    xmm1, xmm5
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xde0f4166; BYTE $0xe5               // pmaxub    xmm4, xmm13
	LONG $0xdeda0f66                           // pminub    xmm3, xmm6
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0xe9da0f66                           // pminub    xmm5, xmm1
	LONG $0xcfde0f66                           // pmaxub    xmm1, xmm7
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xe9da0f66                           // pminub    xmm5, xmm1
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0x7f0f4366; WORD $0x0144; BYTE $0xfe // movdqa    oword [r9 + r8 - 2], xmm0
	LONG $0x10408d49                           // lea    rax, [r8 + 16]
	LONG $0x0ec08349                           // add    r8, 14
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x394d; BYTE $0xe8                   // cmp    r8, r13
	WORD $0x8949; BYTE $0xc0                   // mov    r8, rax
	JB   LBB1_11

LBB1_12:
	LONG $0x6f0f46f3; WORD $0x335c; BYTE $0xee // movdqu    xmm11, oword [rbx + r14 - 18]
	LONG $0x6f0f4266; WORD $0x3344; BYTE $0xf0 // movdqa    xmm0, oword [rbx + r14 - 16]
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xd9730f66; BYTE $0x02               // psrldq    xmm1, 2
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xd9eb0f66                           // por    xmm3, xmm1
	LONG $0x6f0f47f3; WORD $0x3754; BYTE $0xee // movdqu    xmm10, oword [r15 + r14 - 18]
	LONG $0x6f0f4366; WORD $0x3764; BYTE $0xf0 // movdqa    xmm4, oword [r15 + r14 - 16]
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xda730f66; BYTE $0x02               // psrldq    xmm2, 2
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xdb0f4166; BYTE $0xe8               // pand    xmm5, xmm8
	LONG $0xeaeb0f66                           // por    xmm5, xmm2
	LONG $0x6f0f47f3; WORD $0x3264; BYTE $0xee // movdqu    xmm12, oword [r10 + r14 - 18]
	LONG $0x6f0f4366; WORD $0x3274; BYTE $0xf0 // movdqa    xmm6, oword [r10 + r14 - 16]
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xda730f66; BYTE $0x02               // psrldq    xmm2, 2
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xfaeb0f66                           // por    xmm7, xmm2
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xecde0f66                           // pmaxub    xmm5, xmm4
	LONG $0xe66f0f66                           // movdqa    xmm4, xmm6
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xfede0f66                           // pmaxub    xmm7, xmm6
	LONG $0x6f0f4566; BYTE $0xeb               // movdqa    xmm13, xmm11
	LONG $0xda0f4466; BYTE $0xea               // pminub    xmm13, xmm2
	LONG $0xde0f4166; BYTE $0xd3               // pmaxub    xmm2, xmm11
	LONG $0x6f0f4166; BYTE $0xf2               // movdqa    xmm6, xmm10
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0x6f0f4566; BYTE $0xd4               // movdqa    xmm10, xmm12
	LONG $0xda0f4466; BYTE $0xd4               // pminub    xmm10, xmm4
	LONG $0xde0f4166; BYTE $0xe4               // pmaxub    xmm4, xmm12
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0xc5de0f66                           // pmaxub    xmm0, xmm5
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xefda0f66                           // pminub    xmm5, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xde0f4166; BYTE $0xf2               // pmaxub    xmm6, xmm10
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0x7f0f4366; WORD $0x314c; BYTE $0xf0 // movdqa    oword [r9 + r14 - 16], xmm1
	WORD $0xff49; BYTE $0xc4                   // inc    r12
	LONG $0x244c034c; BYTE $0x08               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	LONG $0x24243b4c                           // cmp    r12, qword [rsp]
	JNE  LBB1_9
	JMP  LBB1_62

LBB1_33:
	LONG $0x02f88349               // cmp    r8, 2
	JG   LBB1_42
	LONG $0x01f88349               // cmp    r8, 1
	JE   LBB1_50
	LONG $0x02f88349               // cmp    r8, 2
	JNE  LBB1_62
	LONG $0x243c8348; BYTE $0x00   // cmp    qword [rsp], 0
	JE   LBB1_62
	LONG $0x12348d4c               // lea    r14, [rdx + rdx]
	LONG $0x126c8d4c; BYTE $0xff   // lea    r13, [rdx + rdx - 1]
	LONG $0xf0e58349               // and    r13, -16
	LONG $0x24048b48               // mov    rax, qword [rsp]
	LONG $0xff408d4c               // lea    r8, [rax - 1]
	LONG $0x12598d4c               // lea    r11, [rcx + 18]
	WORD $0x3145; BYTE $0xe4       // xor    r12d, r12d
	LONG $0x00ffffb8; BYTE $0x00   // mov    eax, 65535
	LONG $0x6e0f4466; BYTE $0xc8   // movd    xmm9, eax
	LONG $0x6f0f4466; WORD $0x1045 // movdqa    xmm8, oword 16[rbp] /* [rip + .LCPI1_1] */

LBB1_38:
	LONG $0x245c8d49; BYTE $0xff   // lea    rbx, [r12 - 1]
	LONG $0xdeaf0f48               // imul    rbx, rsi
	WORD $0x0148; BYTE $0xcb       // add    rbx, rcx
	LONG $0x333c8d4c               // lea    r15, [rbx + rsi]
	LONG $0x37148d4d               // lea    r10, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4       // test    r12, r12
	LONG $0x6f0f44f3; WORD $0x1e1c // movdqu    xmm11, oword [rsi + rbx]
	LONG $0x646f0ff3; WORD $0x021e // movdqu    xmm4, oword [rsi + rbx + 2]
	LONG $0xdf440f49               // cmove    rbx, r15
	WORD $0x394d; BYTE $0xc4       // cmp    r12, r8
	LONG $0xd7430f4d               // cmovae    r10, r15
	LONG $0x3b6f0ff3               // movdqu    xmm7, oword [rbx]
	LONG $0x5b6f0ff3; BYTE $0x02   // movdqu    xmm3, oword [rbx + 2]
	LONG $0xd76f0f66               // movdqa    xmm2, xmm7
	LONG $0xfa730f66; BYTE $0x02   // pslldq    xmm2, 2
	LONG $0xf76f0f66               // movdqa    xmm6, xmm7
	LONG $0xdb0f4166; BYTE $0xf1   // pand    xmm6, xmm9
	LONG $0xf2eb0f66               // por    xmm6, xmm2
	LONG $0x6f0f4166; BYTE $0xd3   // movdqa    xmm2, xmm11
	LONG $0xfa730f66; BYTE $0x02   // pslldq    xmm2, 2
	LONG $0x6f0f4166; BYTE $0xcb   // movdqa    xmm1, xmm11
	LONG $0xdb0f4166; BYTE $0xc9   // pand    xmm1, xmm9
	LONG $0xcaeb0f66               // por    xmm1, xmm2
	LONG $0x6f0f41f3; BYTE $0x02   // movdqu    xmm0, oword [r10]
	LONG $0x6f0f45f3; WORD $0x0252 // movdqu    xmm10, oword [r10 + 2]
	LONG $0xd06f0f66               // movdqa    xmm2, xmm0
	LONG $0xfa730f66; BYTE $0x02   // pslldq    xmm2, 2
	LONG $0xe86f0f66               // movdqa    xmm5, xmm0
	LONG $0xdb0f4166; BYTE $0xe9   // pand    xmm5, xmm9
	LONG $0xeaeb0f66               // por    xmm5, xmm2
	LONG $0xd76f0f66               // movdqa    xmm2, xmm7
	LONG $0xd3da0f66               // pminub    xmm2, xmm3
	LONG $0xfbde0f66               // pmaxub    xmm7, xmm3
	LONG $0x6f0f4166; BYTE $0xdb   // movdqa    xmm3, xmm11
	LONG $0xdcda0f66               // pminub    xmm3, xmm4
	LONG $0xde0f4466; BYTE $0xdc   // pmaxub    xmm11, xmm4
	LONG $0xe06f0f66               // movdqa    xmm4, xmm0
	LONG $0xda0f4166; BYTE $0xe2   // pminub    xmm4, xmm10
	LONG $0xde0f4166; BYTE $0xc2   // pmaxub    xmm0, xmm10
	LONG $0x6f0f4466; BYTE $0xd6   // movdqa    xmm10, xmm6
	LONG $0xda0f4466; BYTE $0xd2   // pminub    xmm10, xmm2
	LONG $0xd6de0f66               // pmaxub    xmm2, xmm6
	LONG $0xf16f0f66               // movdqa    xmm6, xmm1
	LONG $0xf3da0f66               // pminub    xmm6, xmm3
	LONG $0xd9de0f66               // pmaxub    xmm3, xmm1
	LONG $0x6f0f4466; BYTE $0xe5   // movdqa    xmm12, xmm5
	LONG $0xda0f4466; BYTE $0xe4   // pminub    xmm12, xmm4
	LONG $0xe5de0f66               // pmaxub    xmm4, xmm5
	LONG $0xea6f0f66               // movdqa    xmm5, xmm2
	LONG $0xefda0f66               // pminub    xmm5, xmm7
	LONG $0xd7de0f66               // pmaxub    xmm2, xmm7
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xfb   // pminub    xmm7, xmm11
	LONG $0xde0f4166; BYTE $0xdb   // pmaxub    xmm3, xmm11
	LONG $0xcc6f0f66               // movdqa    xmm1, xmm4
	LONG $0xc8da0f66               // pminub    xmm1, xmm0
	LONG $0xe0de0f66               // pmaxub    xmm4, xmm0
	LONG $0xde0f4166; BYTE $0xf2   // pmaxub    xmm6, xmm10
	LONG $0xe3da0f66               // pminub    xmm4, xmm3
	LONG $0xc76f0f66               // movdqa    xmm0, xmm7
	LONG $0xc1da0f66               // pminub    xmm0, xmm1
	LONG $0xcfde0f66               // pmaxub    xmm1, xmm7
	LONG $0xde0f4166; BYTE $0xf4   // pmaxub    xmm6, xmm12
	LONG $0xc5de0f66               // pmaxub    xmm0, xmm5
	LONG $0xe2da0f66               // pminub    xmm4, xmm2
	LONG $0xc1da0f66               // pminub    xmm0, xmm1
	LONG $0xc86f0f66               // movdqa    xmm1, xmm0
	LONG $0xccda0f66               // pminub    xmm1, xmm4
	LONG $0xc4de0f66               // pmaxub    xmm0, xmm4
	LONG $0xcede0f66               // pmaxub    xmm1, xmm6
	LONG $0xc8da0f66               // pminub    xmm1, xmm0
	LONG $0x7f0f41f3; BYTE $0x09   // movdqu    oword [r9], xmm1
	LONG $0x11fd8349               // cmp    r13, 17
	JB   LBB1_41
	WORD $0x894c; BYTE $0xda       // mov    rdx, r11
	LONG $0x000012b8; BYTE $0x00   // mov    eax, 18

LBB1_40:
	LONG $0x6f0f44f3; WORD $0x0364; BYTE $0xfc // movdqu    xmm12, oword [rbx + rax - 4]
	LONG $0x4c6f0ff3; WORD $0xfe03             // movdqu    xmm1, oword [rbx + rax - 2]
	LONG $0x1c6f0ff3; BYTE $0x03               // movdqu    xmm3, oword [rbx + rax]
	LONG $0x6f0f44f3; WORD $0xfc52             // movdqu    xmm10, oword [rdx - 4]
	LONG $0x726f0ff3; BYTE $0xfe               // movdqu    xmm6, oword [rdx - 2]
	LONG $0x226f0ff3                           // movdqu    xmm4, oword [rdx]
	LONG $0x6f0f45f3; WORD $0x025c; BYTE $0xfc // movdqu    xmm11, oword [r10 + rax - 4]
	LONG $0x6f0f41f3; WORD $0x026c; BYTE $0xfe // movdqu    xmm5, oword [r10 + rax - 2]
	LONG $0x6f0f41f3; WORD $0x0204             // movdqu    xmm0, oword [r10 + rax]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xfcda0f66                           // pminub    xmm7, xmm4
	LONG $0xf4de0f66                           // pmaxub    xmm6, xmm4
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0x6f0f4566; BYTE $0xec               // movdqa    xmm13, xmm12
	LONG $0xda0f4466; BYTE $0xea               // pminub    xmm13, xmm2
	LONG $0xde0f4166; BYTE $0xd4               // pmaxub    xmm2, xmm12
	LONG $0x6f0f4166; BYTE $0xe2               // movdqa    xmm4, xmm10
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xfa               // pmaxub    xmm7, xmm10
	LONG $0x6f0f4566; BYTE $0xd3               // movdqa    xmm10, xmm11
	LONG $0xda0f4466; BYTE $0xd3               // pminub    xmm10, xmm3
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xcf6f0f66                           // movdqa    xmm1, xmm7
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xfede0f66                           // pmaxub    xmm7, xmm6
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf5da0f66                           // pminub    xmm6, xmm5
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xde0f4166; BYTE $0xe5               // pmaxub    xmm4, xmm13
	LONG $0xdfda0f66                           // pminub    xmm3, xmm7
	LONG $0xe96f0f66                           // movdqa    xmm5, xmm1
	LONG $0xeeda0f66                           // pminub    xmm5, xmm6
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xeeda0f66                           // pminub    xmm5, xmm6
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0x7f0f41f3; WORD $0x0144; BYTE $0xfe // movdqu    oword [r9 + rax - 2], xmm0
	LONG $0x10788d48                           // lea    rdi, [rax + 16]
	LONG $0x0ec08348                           // add    rax, 14
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x394c; BYTE $0xe8                   // cmp    rax, r13
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	JB   LBB1_40

LBB1_41:
	LONG $0x6f0f46f3; WORD $0x335c; BYTE $0xee // movdqu    xmm11, oword [rbx + r14 - 18]
	LONG $0x6f0f42f3; WORD $0x3344; BYTE $0xf0 // movdqu    xmm0, oword [rbx + r14 - 16]
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xd9730f66; BYTE $0x02               // psrldq    xmm1, 2
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xd9eb0f66                           // por    xmm3, xmm1
	LONG $0x6f0f47f3; WORD $0x3754; BYTE $0xee // movdqu    xmm10, oword [r15 + r14 - 18]
	LONG $0x6f0f43f3; WORD $0x3764; BYTE $0xf0 // movdqu    xmm4, oword [r15 + r14 - 16]
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xda730f66; BYTE $0x02               // psrldq    xmm2, 2
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xdb0f4166; BYTE $0xe8               // pand    xmm5, xmm8
	LONG $0xeaeb0f66                           // por    xmm5, xmm2
	LONG $0x6f0f47f3; WORD $0x3264; BYTE $0xee // movdqu    xmm12, oword [r10 + r14 - 18]
	LONG $0x6f0f43f3; WORD $0x3274; BYTE $0xf0 // movdqu    xmm6, oword [r10 + r14 - 16]
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xda730f66; BYTE $0x02               // psrldq    xmm2, 2
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xfaeb0f66                           // por    xmm7, xmm2
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xecde0f66                           // pmaxub    xmm5, xmm4
	LONG $0xe66f0f66                           // movdqa    xmm4, xmm6
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xfede0f66                           // pmaxub    xmm7, xmm6
	LONG $0x6f0f4566; BYTE $0xeb               // movdqa    xmm13, xmm11
	LONG $0xda0f4466; BYTE $0xea               // pminub    xmm13, xmm2
	LONG $0xde0f4166; BYTE $0xd3               // pmaxub    xmm2, xmm11
	LONG $0x6f0f4166; BYTE $0xf2               // movdqa    xmm6, xmm10
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0x6f0f4566; BYTE $0xd4               // movdqa    xmm10, xmm12
	LONG $0xda0f4466; BYTE $0xd4               // pminub    xmm10, xmm4
	LONG $0xde0f4166; BYTE $0xe4               // pmaxub    xmm4, xmm12
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0xc5de0f66                           // pmaxub    xmm0, xmm5
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xefda0f66                           // pminub    xmm5, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xde0f4166; BYTE $0xf2               // pmaxub    xmm6, xmm10
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0x7f0f43f3; WORD $0x314c; BYTE $0xf0 // movdqu    oword [r9 + r14 - 16], xmm1
	WORD $0xff49; BYTE $0xc4                   // inc    r12
	LONG $0x244c034c; BYTE $0x08               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	LONG $0x24243b4c                           // cmp    r12, qword [rsp]
	JNE  LBB1_38
	JMP  LBB1_62

LBB1_42:
	LONG $0x03f88349                   // cmp    r8, 3
	JE   LBB1_56
	LONG $0x04f88349                   // cmp    r8, 4
	JNE  LBB1_62
	LONG $0x243c8348; BYTE $0x00       // cmp    qword [rsp], 0
	JE   LBB1_62
	LONG $0x95248d4c; LONG $0xffffffff // lea    r12, [4*rdx - 1]
	LONG $0x02e2c148                   // shl    rdx, 2
	LONG $0xf0e48349                   // and    r12, -16
	LONG $0x24048b48                   // mov    rax, qword [rsp]
	LONG $0xff408d4c                   // lea    r8, [rax - 1]
	LONG $0x14598d4c                   // lea    r11, [rcx + 20]
	WORD $0x3145; BYTE $0xf6           // xor    r14d, r14d
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_46:
	LONG $0xff568d4d                           // lea    r10, [r14 - 1]
	LONG $0xd6af0f4c                           // imul    r10, rsi
	WORD $0x0149; BYTE $0xca                   // add    r10, rcx
	LONG $0x323c8d4d                           // lea    r15, [r10 + rsi]
	LONG $0x372c8d4d                           // lea    r13, [r15 + rsi]
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	LONG $0x6f0f46f3; WORD $0x161c             // movdqu    xmm11, oword [rsi + r10]
	LONG $0x6f0f46f3; WORD $0x164c; BYTE $0x04 // movdqu    xmm9, oword [rsi + r10 + 4]
	LONG $0xd7440f4d                           // cmove    r10, r15
	WORD $0x394d; BYTE $0xc6                   // cmp    r14, r8
	LONG $0xef430f4d                           // cmovae    r13, r15
	LONG $0x6f0f41f3; BYTE $0x32               // movdqu    xmm6, oword [r10]
	LONG $0x6f0f41f3; WORD $0x045a             // movdqu    xmm3, oword [r10 + 4]
	LONG $0xce6f0f66                           // movdqa    xmm1, xmm6
	LONG $0xf9730f66; BYTE $0x04               // pslldq    xmm1, 4
	WORD $0x570f; BYTE $0xed                   // xorps    xmm5, xmm5
	LONG $0xee100ff3                           // movss    xmm5, xmm6
	WORD $0x560f; BYTE $0xe9                   // orps    xmm5, xmm1
	LONG $0x6f0f4166; BYTE $0xcb               // movdqa    xmm1, xmm11
	LONG $0xf9730f66; BYTE $0x04               // pslldq    xmm1, 4
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0x100f41f3; BYTE $0xc3               // movss    xmm0, xmm11
	WORD $0x560f; BYTE $0xc1                   // orps    xmm0, xmm1
	LONG $0x6f0f41f3; WORD $0x0065             // movdqu    xmm4, oword [r13]
	LONG $0x6f0f45f3; WORD $0x0455             // movdqu    xmm10, oword [r13 + 4]
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xf9730f66; BYTE $0x04               // pslldq    xmm1, 4
	WORD $0x570f; BYTE $0xd2                   // xorps    xmm2, xmm2
	LONG $0xd4100ff3                           // movss    xmm2, xmm4
	WORD $0x560f; BYTE $0xd1                   // orps    xmm2, xmm1
	LONG $0xce6f0f66                           // movdqa    xmm1, xmm6
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0x6f0f4166; BYTE $0xfb               // movdqa    xmm7, xmm11
	LONG $0xda0f4166; BYTE $0xf9               // pminub    xmm7, xmm9
	LONG $0xde0f4566; BYTE $0xd9               // pmaxub    xmm11, xmm9
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xda0f4166; BYTE $0xda               // pminub    xmm3, xmm10
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0xcd280f44                           // movaps    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc9               // pminub    xmm9, xmm1
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	WORD $0x280f; BYTE $0xe8                   // movaps    xmm5, xmm0
	LONG $0xefda0f66                           // pminub    xmm5, xmm7
	LONG $0xf8de0f66                           // pmaxub    xmm7, xmm0
	LONG $0xd2280f44                           // movaps    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd3               // pminub    xmm10, xmm3
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xda0f4166; BYTE $0xf3               // pminub    xmm6, xmm11
	LONG $0xde0f4166; BYTE $0xfb               // pmaxub    xmm7, xmm11
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xdfda0f66                           // pminub    xmm3, xmm7
	LONG $0xe66f0f66                           // movdqa    xmm4, xmm6
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc6de0f66                           // pmaxub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xea               // pmaxub    xmm5, xmm10
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xc5de0f66                           // pmaxub    xmm0, xmm5
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0x7f0f41f3; BYTE $0x01               // movdqu    oword [r9], xmm0
	LONG $0x11fc8349                           // cmp    r12, 17
	JB   LBB1_49
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x000014b8; BYTE $0x00               // mov    eax, 20

LBB1_48:
	LONG $0x6f0f45f3; WORD $0x025c; BYTE $0xf8 // movdqu    xmm11, oword [r10 + rax - 8]
	LONG $0x6f0f41f3; WORD $0x0274; BYTE $0xfc // movdqu    xmm6, oword [r10 + rax - 4]
	LONG $0x6f0f41f3; WORD $0x0214             // movdqu    xmm2, oword [r10 + rax]
	LONG $0x6f0f44f3; WORD $0xf84b             // movdqu    xmm9, oword [rbx - 8]
	LONG $0x6b6f0ff3; BYTE $0xfc               // movdqu    xmm5, oword [rbx - 4]
	LONG $0x1b6f0ff3                           // movdqu    xmm3, oword [rbx]
	LONG $0x6f0f45f3; WORD $0x0554; BYTE $0xf8 // movdqu    xmm10, oword [r13 + rax - 8]
	LONG $0x6f0f41f3; WORD $0x0564; BYTE $0xfc // movdqu    xmm4, oword [r13 + rax - 4]
	LONG $0x6f0f41f3; WORD $0x0544; BYTE $0x00 // movdqu    xmm0, oword [r13 + rax]
	LONG $0xce6f0f66                           // movdqa    xmm1, xmm6
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfbda0f66                           // pminub    xmm7, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x6f0f4566; BYTE $0xe3               // movdqa    xmm12, xmm11
	LONG $0xda0f4466; BYTE $0xe1               // pminub    xmm12, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0x6f0f4166; BYTE $0xd9               // movdqa    xmm3, xmm9
	LONG $0xdfda0f66                           // pminub    xmm3, xmm7
	LONG $0xde0f4166; BYTE $0xf9               // pmaxub    xmm7, xmm9
	LONG $0x6f0f4566; BYTE $0xca               // movdqa    xmm9, xmm10
	LONG $0xda0f4466; BYTE $0xca               // pminub    xmm9, xmm2
	LONG $0xde0f4166; BYTE $0xd2               // pmaxub    xmm2, xmm10
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xf5da0f66                           // pminub    xmm6, xmm5
	LONG $0xfdde0f66                           // pmaxub    xmm7, xmm5
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xdc               // pmaxub    xmm3, xmm12
	LONG $0xd7da0f66                           // pminub    xmm2, xmm7
	LONG $0xe66f0f66                           // movdqa    xmm4, xmm6
	LONG $0xe5da0f66                           // pminub    xmm4, xmm5
	LONG $0xeede0f66                           // pmaxub    xmm5, xmm6
	LONG $0xde0f4166; BYTE $0xd9               // pmaxub    xmm3, xmm9
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xe5da0f66                           // pminub    xmm4, xmm5
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0x7f0f41f3; WORD $0x0144; BYTE $0xfc // movdqu    oword [r9 + rax - 4], xmm0
	LONG $0x10788d48                           // lea    rdi, [rax + 16]
	LONG $0x0cc08348                           // add    rax, 12
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	JB   LBB1_48

LBB1_49:
	LONG $0x6f0f45f3; WORD $0x1254; BYTE $0xec // movdqu    xmm10, oword [r10 + rdx - 20]
	LONG $0x6f0f41f3; WORD $0x1244; BYTE $0xf0 // movdqu    xmm0, oword [r10 + rdx - 16]
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0xd1eb0f66                           // por    xmm2, xmm1
	LONG $0x6f0f45f3; WORD $0x174c; BYTE $0xec // movdqu    xmm9, oword [r15 + rdx - 20]
	LONG $0x6f0f41f3; WORD $0x175c; BYTE $0xf0 // movdqu    xmm3, oword [r15 + rdx - 16]
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0x6f0f45f3; WORD $0x155c; BYTE $0xec // movdqu    xmm11, oword [r13 + rdx - 20]
	LONG $0x6f0f41f3; WORD $0x156c; BYTE $0xf0 // movdqu    xmm5, oword [r13 + rdx - 16]
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xdb0f4166; BYTE $0xf0               // pand    xmm6, xmm8
	LONG $0xf1eb0f66                           // por    xmm6, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdeda0f66                           // pminub    xmm3, xmm6
	LONG $0xf5de0f66                           // pmaxub    xmm6, xmm5
	LONG $0x6f0f4566; BYTE $0xe2               // movdqa    xmm12, xmm10
	LONG $0xda0f4466; BYTE $0xe1               // pminub    xmm12, xmm1
	LONG $0xde0f4166; BYTE $0xca               // pmaxub    xmm1, xmm10
	LONG $0x6f0f4166; BYTE $0xe9               // movdqa    xmm5, xmm9
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0x6f0f4566; BYTE $0xcb               // movdqa    xmm9, xmm11
	LONG $0xda0f4466; BYTE $0xcb               // pminub    xmm9, xmm3
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xfada0f66                           // pminub    xmm7, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0xde0f4166; BYTE $0xec               // pmaxub    xmm5, xmm12
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x114c; BYTE $0xf0 // movdqu    oword [r9 + rdx - 16], xmm1
	WORD $0xff49; BYTE $0xc6                   // inc    r14
	LONG $0x244c034c; BYTE $0x08               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	LONG $0x24343b4c                           // cmp    r14, qword [rsp]
	JNE  LBB1_46
	JMP  LBB1_62

LBB1_50:
	LONG $0x243c8348; BYTE $0x00 // cmp    qword [rsp], 0
	JE   LBB1_62
	LONG $0xff628d4c             // lea    r12, [rdx - 1]
	LONG $0xf0e48349             // and    r12, -16
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0xff788d48             // lea    rdi, [rax - 1]
	LONG $0x11598d4c             // lea    r11, [rcx + 17]
	WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d
	LONG $0xef0f4566; BYTE $0xc0 // pxor    xmm8, xmm8

LBB1_52:
	LONG $0xff468d49                           // lea    rax, [r14 - 1]
	LONG $0xc6af0f48                           // imul    rax, rsi
	WORD $0x0148; BYTE $0xc8                   // add    rax, rcx
	LONG $0x303c8d4c                           // lea    r15, [rax + rsi]
	LONG $0x372c8d4d                           // lea    r13, [r15 + rsi]
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	LONG $0x6f0f44f3; WORD $0x0624             // movdqu    xmm12, oword [rsi + rax]
	LONG $0x6f0f44f3; WORD $0x0654; BYTE $0x01 // movdqu    xmm10, oword [rsi + rax + 1]
	LONG $0xc7440f49                           // cmove    rax, r15
	WORD $0x3949; BYTE $0xfe                   // cmp    r14, rdi
	LONG $0xef430f4d                           // cmovae    r13, r15
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0x786f0ff3; BYTE $0x01               // movdqu    xmm7, oword [rax + 1]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8700f66; BYTE $0x27               // pshufd    xmm3, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e               // psrldq    xmm0, 14
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0x680f4166; BYTE $0xe0               // punpckhbw    xmm4, xmm8
	LONG $0xfc730f66; BYTE $0x02               // pslldq    xmm4, 2
	LONG $0xe0eb0f66                           // por    xmm4, xmm0
	LONG $0xc3700ff2; BYTE $0xec               // pshuflw    xmm0, xmm3, 236
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90               // pshuflw    xmm0, xmm0, 144
	LONG $0xc0700ff3; BYTE $0x93               // pshufhw    xmm0, xmm0, 147
	LONG $0xc4670f66                           // packuswb    xmm0, xmm4
	LONG $0x6f0f4166; BYTE $0xdc               // movdqa    xmm3, xmm12
	LONG $0x600f4166; BYTE $0xd8               // punpcklbw    xmm3, xmm8
	LONG $0xe3700f66; BYTE $0x27               // pshufd    xmm4, xmm3, 39
	LONG $0xdb730f66; BYTE $0x0e               // psrldq    xmm3, 14
	LONG $0x6f0f4166; BYTE $0xcc               // movdqa    xmm1, xmm12
	LONG $0x680f4166; BYTE $0xc8               // punpckhbw    xmm1, xmm8
	LONG $0xf9730f66; BYTE $0x02               // pslldq    xmm1, 2
	LONG $0xcbeb0f66                           // por    xmm1, xmm3
	LONG $0xdc700ff2; BYTE $0xec               // pshuflw    xmm3, xmm4, 236
	LONG $0xdb700f66; BYTE $0x27               // pshufd    xmm3, xmm3, 39
	LONG $0xdb700ff2; BYTE $0x90               // pshuflw    xmm3, xmm3, 144
	LONG $0x700f44f3; WORD $0x93cb             // pshufhw    xmm9, xmm3, 147
	LONG $0x670f4466; BYTE $0xc9               // packuswb    xmm9, xmm1
	LONG $0x6f0f41f3; WORD $0x004d             // movdqu    xmm1, oword [r13]
	LONG $0x6f0f45f3; WORD $0x015d             // movdqu    xmm11, oword [r13 + 1]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0x600f4166; BYTE $0xe0               // punpcklbw    xmm4, xmm8
	LONG $0xec700f66; BYTE $0x27               // pshufd    xmm5, xmm4, 39
	LONG $0xdc730f66; BYTE $0x0e               // psrldq    xmm4, 14
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0xfb730f66; BYTE $0x02               // pslldq    xmm3, 2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0xe5700ff2; BYTE $0xec               // pshuflw    xmm4, xmm5, 236
	LONG $0xe4700f66; BYTE $0x27               // pshufd    xmm4, xmm4, 39
	LONG $0xe4700ff2; BYTE $0x90               // pshuflw    xmm4, xmm4, 144
	LONG $0xf4700ff3; BYTE $0x93               // pshufhw    xmm6, xmm4, 147
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0x6f0f4166; BYTE $0xfc               // movdqa    xmm7, xmm12
	LONG $0xda0f4166; BYTE $0xfa               // pminub    xmm7, xmm10
	LONG $0xde0f4566; BYTE $0xe2               // pmaxub    xmm12, xmm10
	LONG $0xe96f0f66                           // movdqa    xmm5, xmm1
	LONG $0xda0f4166; BYTE $0xeb               // pminub    xmm5, xmm11
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0x6f0f4466; BYTE $0xd0               // movdqa    xmm10, xmm0
	LONG $0xda0f4466; BYTE $0xd4               // pminub    xmm10, xmm4
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xde0f4166; BYTE $0xf9               // pmaxub    xmm7, xmm9
	LONG $0x6f0f4466; BYTE $0xce               // movdqa    xmm9, xmm6
	LONG $0xda0f4466; BYTE $0xcd               // pminub    xmm9, xmm5
	LONG $0xeede0f66                           // pmaxub    xmm5, xmm6
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2da0f66                           // pminub    xmm6, xmm2
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xd76f0f66                           // movdqa    xmm2, xmm7
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0xde0f4166; BYTE $0xfc               // pmaxub    xmm7, xmm12
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xe9de0f66                           // pmaxub    xmm5, xmm1
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0xefda0f66                           // pminub    xmm5, xmm7
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0x7f0f41f3; BYTE $0x11               // movdqu    oword [r9], xmm2
	LONG $0x11fc8349                           // cmp    r12, 17
	JB   LBB1_55
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x0011ba41; WORD $0x0000             // mov    r10d, 17

LBB1_54:
	LONG $0x6f0f46f3; WORD $0x105c; BYTE $0xfe // movdqu    xmm11, oword [rax + r10 - 2]
	LONG $0x6f0f42f3; WORD $0x106c; BYTE $0xff // movdqu    xmm5, oword [rax + r10 - 1]
	LONG $0x6f0f42f3; WORD $0x1014             // movdqu    xmm2, oword [rax + r10]
	LONG $0x6f0f44f3; WORD $0xfe4b             // movdqu    xmm9, oword [rbx - 2]
	LONG $0x636f0ff3; BYTE $0xff               // movdqu    xmm4, oword [rbx - 1]
	LONG $0x3b6f0ff3                           // movdqu    xmm7, oword [rbx]
	LONG $0x6f0f47f3; WORD $0x1554; BYTE $0xfe // movdqu    xmm10, oword [r13 + r10 - 2]
	LONG $0x6f0f43f3; WORD $0x155c; BYTE $0xff // movdqu    xmm3, oword [r13 + r10 - 1]
	LONG $0x6f0f43f3; WORD $0x1544; BYTE $0x00 // movdqu    xmm0, oword [r13 + r10]
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x6f0f4566; BYTE $0xe3               // movdqa    xmm12, xmm11
	LONG $0xda0f4466; BYTE $0xe1               // pminub    xmm12, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xf1               // pmaxub    xmm6, xmm9
	LONG $0x6f0f4566; BYTE $0xca               // movdqa    xmm9, xmm10
	LONG $0xda0f4466; BYTE $0xca               // pminub    xmm9, xmm2
	LONG $0xde0f4166; BYTE $0xd2               // pmaxub    xmm2, xmm10
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xfdda0f66                           // pminub    xmm7, xmm5
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xee6f0f66                           // movdqa    xmm5, xmm6
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xf4de0f66                           // pmaxub    xmm6, xmm4
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xc4               // pmaxub    xmm0, xmm12
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0xdfde0f66                           // pmaxub    xmm3, xmm7
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0x7f0f43f3; WORD $0x114c; BYTE $0xff // movdqu    oword [r9 + r10 - 1], xmm1
	LONG $0x10428d4d                           // lea    r8, [r10 + 16]
	LONG $0x0fc28349                           // add    r10, 15
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x394d; BYTE $0xe2                   // cmp    r10, r12
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	JB   LBB1_54

LBB1_55:
	LONG $0x6f0f44f3; WORD $0x104c; BYTE $0xef // movdqu    xmm9, oword [rax + rdx - 17]
	LONG $0x646f0ff3; WORD $0xf010             // movdqu    xmm4, oword [rax + rdx - 16]
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x02               // psrldq    xmm0, 2
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0x680f4166; BYTE $0xc8               // punpckhbw    xmm1, xmm8
	LONG $0xd1700f66; BYTE $0x27               // pshufd    xmm2, xmm1, 39
	LONG $0xf9730f66; BYTE $0x0e               // pslldq    xmm1, 14
	LONG $0xc8eb0f66                           // por    xmm1, xmm0
	LONG $0xc2700ff3; BYTE $0xc4               // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9               // pshufhw    xmm0, xmm0, 249
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x6f0f45f3; WORD $0x1754; BYTE $0xef // movdqu    xmm10, oword [r15 + rdx - 17]
	LONG $0x6f0f41f3; WORD $0x176c; BYTE $0xf0 // movdqu    xmm5, oword [r15 + rdx - 16]
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x02               // psrldq    xmm0, 2
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0xd3700f66; BYTE $0x27               // pshufd    xmm2, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0e               // pslldq    xmm3, 14
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0xc2700ff3; BYTE $0xc4               // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9               // pshufhw    xmm0, xmm0, 249
	LONG $0xd8670f66                           // packuswb    xmm3, xmm0
	LONG $0x6f0f45f3; WORD $0x155c; BYTE $0xef // movdqu    xmm11, oword [r13 + rdx - 17]
	LONG $0x6f0f41f3; WORD $0x1554; BYTE $0xf0 // movdqu    xmm2, oword [r13 + rdx - 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x02               // psrldq    xmm0, 2
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0xf7700f66; BYTE $0x27               // pshufd    xmm6, xmm7, 39
	LONG $0xff730f66; BYTE $0x0e               // pslldq    xmm7, 14
	LONG $0xf8eb0f66                           // por    xmm7, xmm0
	LONG $0xc6700ff3; BYTE $0xc4               // pshufhw    xmm0, xmm6, 196
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9               // pshufhw    xmm0, xmm0, 249
	LONG $0xf8670f66                           // packuswb    xmm7, xmm0
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xfade0f66                           // pmaxub    xmm7, xmm2
	LONG $0x6f0f4566; BYTE $0xe1               // movdqa    xmm12, xmm9
	LONG $0xda0f4466; BYTE $0xe6               // pminub    xmm12, xmm6
	LONG $0xde0f4166; BYTE $0xf1               // pmaxub    xmm6, xmm9
	LONG $0x6f0f4166; BYTE $0xea               // movdqa    xmm5, xmm10
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0x6f0f4566; BYTE $0xcb               // movdqa    xmm9, xmm11
	LONG $0xda0f4466; BYTE $0xcc               // pminub    xmm9, xmm4
	LONG $0xde0f4166; BYTE $0xe3               // pmaxub    xmm4, xmm11
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xdfda0f66                           // pminub    xmm3, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xec               // pmaxub    xmm5, xmm12
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x114c; BYTE $0xf0 // movdqu    oword [r9 + rdx - 16], xmm1
	WORD $0xff49; BYTE $0xc6                   // inc    r14
	LONG $0x244c034c; BYTE $0x08               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	LONG $0x24343b4c                           // cmp    r14, qword [rsp]
	JNE  LBB1_52
	JMP  LBB1_62

LBB1_56:
	LONG $0x243c8348; BYTE $0x00 // cmp    qword [rsp], 0
	JE   LBB1_62
	LONG $0x52348d4c             // lea    r14, [rdx + 2*rdx]
	LONG $0x526c8d4c; BYTE $0xff // lea    r13, [rdx + 2*rdx - 1]
	LONG $0xf0e58349             // and    r13, -16
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0xff408d4c             // lea    r8, [rax - 1]
	LONG $0x13598d4c             // lea    r11, [rcx + 19]
	WORD $0x3145; BYTE $0xe4     // xor    r12d, r12d
	LONG $0xef0f4566; BYTE $0xc0 // pxor    xmm8, xmm8

LBB1_58:
	LONG $0x245c8d49; BYTE $0xff               // lea    rbx, [r12 - 1]
	LONG $0xdeaf0f48                           // imul    rbx, rsi
	WORD $0x0148; BYTE $0xcb                   // add    rbx, rcx
	LONG $0x333c8d4c                           // lea    r15, [rbx + rsi]
	LONG $0x37148d4d                           // lea    r10, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	LONG $0x6f0f44f3; WORD $0x1e24             // movdqu    xmm12, oword [rsi + rbx]
	LONG $0x6f0f44f3; WORD $0x1e54; BYTE $0x03 // movdqu    xmm10, oword [rsi + rbx + 3]
	LONG $0xdf440f49                           // cmove    rbx, r15
	WORD $0x394d; BYTE $0xc4                   // cmp    r12, r8
	LONG $0xd7430f4d                           // cmovae    r10, r15
	LONG $0x136f0ff3                           // movdqu    xmm2, oword [rbx]
	LONG $0x7b6f0ff3; BYTE $0x03               // movdqu    xmm7, oword [rbx + 3]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8700f66; BYTE $0x27               // pshufd    xmm3, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a               // psrldq    xmm0, 10
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0x680f4166; BYTE $0xe0               // punpckhbw    xmm4, xmm8
	LONG $0xfc730f66; BYTE $0x06               // pslldq    xmm4, 6
	LONG $0xe0eb0f66                           // por    xmm4, xmm0
	LONG $0xc3700ff3; BYTE $0xec               // pshufhw    xmm0, xmm3, 236
	LONG $0xc0700f66; BYTE $0x67               // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24               // pshuflw    xmm0, xmm0, 36
	LONG $0xc0700ff3; BYTE $0x39               // pshufhw    xmm0, xmm0, 57
	LONG $0xc4670f66                           // packuswb    xmm0, xmm4
	LONG $0x6f0f4166; BYTE $0xdc               // movdqa    xmm3, xmm12
	LONG $0x600f4166; BYTE $0xd8               // punpcklbw    xmm3, xmm8
	LONG $0xe3700f66; BYTE $0x27               // pshufd    xmm4, xmm3, 39
	LONG $0xdb730f66; BYTE $0x0a               // psrldq    xmm3, 10
	LONG $0x6f0f4166; BYTE $0xcc               // movdqa    xmm1, xmm12
	LONG $0x680f4166; BYTE $0xc8               // punpckhbw    xmm1, xmm8
	LONG $0xf9730f66; BYTE $0x06               // pslldq    xmm1, 6
	LONG $0xcbeb0f66                           // por    xmm1, xmm3
	LONG $0xdc700ff3; BYTE $0xec               // pshufhw    xmm3, xmm4, 236
	LONG $0xdb700f66; BYTE $0x67               // pshufd    xmm3, xmm3, 103
	LONG $0xdb700ff2; BYTE $0x24               // pshuflw    xmm3, xmm3, 36
	LONG $0x700f44f3; WORD $0x39cb             // pshufhw    xmm9, xmm3, 57
	LONG $0x670f4466; BYTE $0xc9               // packuswb    xmm9, xmm1
	LONG $0x6f0f41f3; BYTE $0x0a               // movdqu    xmm1, oword [r10]
	LONG $0x6f0f45f3; WORD $0x035a             // movdqu    xmm11, oword [r10 + 3]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0x600f4166; BYTE $0xe0               // punpcklbw    xmm4, xmm8
	LONG $0xec700f66; BYTE $0x27               // pshufd    xmm5, xmm4, 39
	LONG $0xdc730f66; BYTE $0x0a               // psrldq    xmm4, 10
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0xfb730f66; BYTE $0x06               // pslldq    xmm3, 6
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0xe5700ff3; BYTE $0xec               // pshufhw    xmm4, xmm5, 236
	LONG $0xe4700f66; BYTE $0x67               // pshufd    xmm4, xmm4, 103
	LONG $0xe4700ff2; BYTE $0x24               // pshuflw    xmm4, xmm4, 36
	LONG $0xf4700ff3; BYTE $0x39               // pshufhw    xmm6, xmm4, 57
	LONG $0xf3670f66                           // packuswb    xmm6, xmm3
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0x6f0f4166; BYTE $0xfc               // movdqa    xmm7, xmm12
	LONG $0xda0f4166; BYTE $0xfa               // pminub    xmm7, xmm10
	LONG $0xde0f4566; BYTE $0xe2               // pmaxub    xmm12, xmm10
	LONG $0xe96f0f66                           // movdqa    xmm5, xmm1
	LONG $0xda0f4166; BYTE $0xeb               // pminub    xmm5, xmm11
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0x6f0f4466; BYTE $0xd0               // movdqa    xmm10, xmm0
	LONG $0xda0f4466; BYTE $0xd4               // pminub    xmm10, xmm4
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xde0f4166; BYTE $0xf9               // pmaxub    xmm7, xmm9
	LONG $0x6f0f4466; BYTE $0xce               // movdqa    xmm9, xmm6
	LONG $0xda0f4466; BYTE $0xcd               // pminub    xmm9, xmm5
	LONG $0xeede0f66                           // pmaxub    xmm5, xmm6
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf2da0f66                           // pminub    xmm6, xmm2
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xd76f0f66                           // movdqa    xmm2, xmm7
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0xde0f4166; BYTE $0xfc               // pmaxub    xmm7, xmm12
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xe9de0f66                           // pmaxub    xmm5, xmm1
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0xefda0f66                           // pminub    xmm5, xmm7
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0x7f0f41f3; BYTE $0x11               // movdqu    oword [r9], xmm2
	LONG $0x11fd8349                           // cmp    r13, 17
	JB   LBB1_61
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0x000013b8; BYTE $0x00               // mov    eax, 19

LBB1_60:
	LONG $0x6f0f44f3; WORD $0x035c; BYTE $0xfa // movdqu    xmm11, oword [rbx + rax - 6]
	LONG $0x6c6f0ff3; WORD $0xfd03             // movdqu    xmm5, oword [rbx + rax - 3]
	LONG $0x146f0ff3; BYTE $0x03               // movdqu    xmm2, oword [rbx + rax]
	LONG $0x6f0f44f3; WORD $0xfa4a             // movdqu    xmm9, oword [rdx - 6]
	LONG $0x626f0ff3; BYTE $0xfd               // movdqu    xmm4, oword [rdx - 3]
	LONG $0x3a6f0ff3                           // movdqu    xmm7, oword [rdx]
	LONG $0x6f0f45f3; WORD $0x0254; BYTE $0xfa // movdqu    xmm10, oword [r10 + rax - 6]
	LONG $0x6f0f41f3; WORD $0x025c; BYTE $0xfd // movdqu    xmm3, oword [r10 + rax - 3]
	LONG $0x6f0f41f3; WORD $0x0204             // movdqu    xmm0, oword [r10 + rax]
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x6f0f4566; BYTE $0xe3               // movdqa    xmm12, xmm11
	LONG $0xda0f4466; BYTE $0xe1               // pminub    xmm12, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xf1               // pmaxub    xmm6, xmm9
	LONG $0x6f0f4566; BYTE $0xca               // movdqa    xmm9, xmm10
	LONG $0xda0f4466; BYTE $0xca               // pminub    xmm9, xmm2
	LONG $0xde0f4166; BYTE $0xd2               // pmaxub    xmm2, xmm10
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xfdda0f66                           // pminub    xmm7, xmm5
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xee6f0f66                           // movdqa    xmm5, xmm6
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xf4de0f66                           // pmaxub    xmm6, xmm4
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xc4               // pmaxub    xmm0, xmm12
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0xdfde0f66                           // pmaxub    xmm3, xmm7
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0x7f0f41f3; WORD $0x014c; BYTE $0xfd // movdqu    oword [r9 + rax - 3], xmm1
	LONG $0x10788d48                           // lea    rdi, [rax + 16]
	LONG $0x0dc08348                           // add    rax, 13
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x394c; BYTE $0xe8                   // cmp    rax, r13
	WORD $0x8948; BYTE $0xf8                   // mov    rax, rdi
	JB   LBB1_60

LBB1_61:
	LONG $0x6f0f46f3; WORD $0x334c; BYTE $0xed // movdqu    xmm9, oword [rbx + r14 - 19]
	LONG $0x6f0f42f3; WORD $0x3364; BYTE $0xf0 // movdqu    xmm4, oword [rbx + r14 - 16]
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x06               // psrldq    xmm0, 6
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0x680f4166; BYTE $0xc8               // punpckhbw    xmm1, xmm8
	LONG $0xd1700f66; BYTE $0x27               // pshufd    xmm2, xmm1, 39
	LONG $0xf9730f66; BYTE $0x0a               // pslldq    xmm1, 10
	LONG $0xc8eb0f66                           // por    xmm1, xmm0
	LONG $0xc2700ff2; BYTE $0x4c               // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68               // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7               // pshufhw    xmm0, xmm0, 231
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x6f0f47f3; WORD $0x3754; BYTE $0xed // movdqu    xmm10, oword [r15 + r14 - 19]
	LONG $0x6f0f43f3; WORD $0x376c; BYTE $0xf0 // movdqu    xmm5, oword [r15 + r14 - 16]
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x06               // psrldq    xmm0, 6
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0xd3700f66; BYTE $0x27               // pshufd    xmm2, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0a               // pslldq    xmm3, 10
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0xc2700ff2; BYTE $0x4c               // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68               // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7               // pshufhw    xmm0, xmm0, 231
	LONG $0xd8670f66                           // packuswb    xmm3, xmm0
	LONG $0x6f0f47f3; WORD $0x325c; BYTE $0xed // movdqu    xmm11, oword [r10 + r14 - 19]
	LONG $0x6f0f43f3; WORD $0x3254; BYTE $0xf0 // movdqu    xmm2, oword [r10 + r14 - 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x06               // psrldq    xmm0, 6
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0xf7700f66; BYTE $0x27               // pshufd    xmm6, xmm7, 39
	LONG $0xff730f66; BYTE $0x0a               // pslldq    xmm7, 10
	LONG $0xf8eb0f66                           // por    xmm7, xmm0
	LONG $0xc6700ff2; BYTE $0x4c               // pshuflw    xmm0, xmm6, 76
	LONG $0xc0700f66; BYTE $0x68               // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7               // pshufhw    xmm0, xmm0, 231
	LONG $0xf8670f66                           // packuswb    xmm7, xmm0
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xfade0f66                           // pmaxub    xmm7, xmm2
	LONG $0x6f0f4566; BYTE $0xe1               // movdqa    xmm12, xmm9
	LONG $0xda0f4466; BYTE $0xe6               // pminub    xmm12, xmm6
	LONG $0xde0f4166; BYTE $0xf1               // pmaxub    xmm6, xmm9
	LONG $0x6f0f4166; BYTE $0xea               // movdqa    xmm5, xmm10
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0x6f0f4566; BYTE $0xcb               // movdqa    xmm9, xmm11
	LONG $0xda0f4466; BYTE $0xcc               // pminub    xmm9, xmm4
	LONG $0xde0f4166; BYTE $0xe3               // pmaxub    xmm4, xmm11
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xdfda0f66                           // pminub    xmm3, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xec               // pmaxub    xmm5, xmm12
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0x7f0f43f3; WORD $0x314c; BYTE $0xf0 // movdqu    oword [r9 + r14 - 16], xmm1
	WORD $0xff49; BYTE $0xc4                   // inc    r12
	LONG $0x244c034c; BYTE $0x08               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	LONG $0x24243b4c                           // cmp    r12, qword [rsp]
	JNE  LBB1_58
	JMP  LBB1_62

LBB1_13:
	LONG $0x03f88349                   // cmp    r8, 3
	JE   LBB1_27
	LONG $0x04f88349                   // cmp    r8, 4
	JNE  LBB1_62
	LONG $0x243c8348; BYTE $0x00       // cmp    qword [rsp], 0
	JE   LBB1_62
	LONG $0x95248d4c; LONG $0xffffffff // lea    r12, [4*rdx - 1]
	LONG $0x02e2c148                   // shl    rdx, 2
	LONG $0xf0e48349                   // and    r12, -16
	LONG $0x24048b48                   // mov    rax, qword [rsp]
	LONG $0xff788d48                   // lea    rdi, [rax - 1]
	LONG $0x14598d4c                   // lea    r11, [rcx + 20]
	WORD $0x3145; BYTE $0xf6           // xor    r14d, r14d
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_17:
	LONG $0xff468d49               // lea    rax, [r14 - 1]
	LONG $0xc6af0f48               // imul    rax, rsi
	WORD $0x0148; BYTE $0xc8       // add    rax, rcx
	LONG $0x303c8d4c               // lea    r15, [rax + rsi]
	LONG $0x372c8d4d               // lea    r13, [r15 + rsi]
	WORD $0x854d; BYTE $0xf6       // test    r14, r14
	LONG $0x6f0f4466; WORD $0x060c // movdqa    xmm9, oword [rsi + rax]
	LONG $0x546f0ff3; WORD $0x0406 // movdqu    xmm2, oword [rsi + rax + 4]
	LONG $0xc7440f49               // cmove    rax, r15
	WORD $0x3949; BYTE $0xfe       // cmp    r14, rdi
	LONG $0xef430f4d               // cmovae    r13, r15
	LONG $0x006f0f66               // movdqa    xmm0, oword [rax]
	LONG $0xd86f0f66               // movdqa    xmm3, xmm0
	LONG $0xfb730f66; BYTE $0x04   // pslldq    xmm3, 4
	WORD $0x570f; BYTE $0xe4       // xorps    xmm4, xmm4
	LONG $0xe0100ff3               // movss    xmm4, xmm0
	WORD $0x560f; BYTE $0xe3       // orps    xmm4, xmm3
	LONG $0x706f0ff3; BYTE $0x04   // movdqu    xmm6, oword [rax + 4]
	LONG $0x6f0f4166; BYTE $0xd9   // movdqa    xmm3, xmm9
	LONG $0xfb730f66; BYTE $0x04   // pslldq    xmm3, 4
	WORD $0x570f; BYTE $0xff       // xorps    xmm7, xmm7
	LONG $0x100f41f3; BYTE $0xf9   // movss    xmm7, xmm9
	WORD $0x560f; BYTE $0xfb       // orps    xmm7, xmm3
	LONG $0x6f0f4166; WORD $0x006d // movdqa    xmm5, oword [r13]
	LONG $0xdd6f0f66               // movdqa    xmm3, xmm5
	LONG $0xfb730f66; BYTE $0x04   // pslldq    xmm3, 4
	WORD $0x570f; BYTE $0xc9       // xorps    xmm1, xmm1
	LONG $0xcd100ff3               // movss    xmm1, xmm5
	WORD $0x560f; BYTE $0xcb       // orps    xmm1, xmm3
	LONG $0x6f0f45f3; WORD $0x0455 // movdqu    xmm10, oword [r13 + 4]
	LONG $0xd86f0f66               // movdqa    xmm3, xmm0
	LONG $0xdeda0f66               // pminub    xmm3, xmm6
	LONG $0xc6de0f66               // pmaxub    xmm0, xmm6
	LONG $0x6f0f4166; BYTE $0xf1   // movdqa    xmm6, xmm9
	LONG $0xf2da0f66               // pminub    xmm6, xmm2
	LONG $0xde0f4466; BYTE $0xca   // pmaxub    xmm9, xmm2
	LONG $0xd56f0f66               // movdqa    xmm2, xmm5
	LONG $0xda0f4166; BYTE $0xd2   // pminub    xmm2, xmm10
	LONG $0xde0f4166; BYTE $0xea   // pmaxub    xmm5, xmm10
	LONG $0xd4280f44               // movaps    xmm10, xmm4
	LONG $0xda0f4466; BYTE $0xd3   // pminub    xmm10, xmm3
	LONG $0xdcde0f66               // pmaxub    xmm3, xmm4
	WORD $0x280f; BYTE $0xe7       // movaps    xmm4, xmm7
	LONG $0xe6da0f66               // pminub    xmm4, xmm6
	LONG $0xf7de0f66               // pmaxub    xmm6, xmm7
	LONG $0xd9280f44               // movaps    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xda   // pminub    xmm11, xmm2
	LONG $0xd1de0f66               // pmaxub    xmm2, xmm1
	LONG $0xcb6f0f66               // movdqa    xmm1, xmm3
	LONG $0xc8da0f66               // pminub    xmm1, xmm0
	LONG $0xd8de0f66               // pmaxub    xmm3, xmm0
	LONG $0xc66f0f66               // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc1   // pminub    xmm0, xmm9
	LONG $0xde0f4166; BYTE $0xf1   // pmaxub    xmm6, xmm9
	LONG $0xfa6f0f66               // movdqa    xmm7, xmm2
	LONG $0xfdda0f66               // pminub    xmm7, xmm5
	LONG $0xd5de0f66               // pmaxub    xmm2, xmm5
	LONG $0xde0f4166; BYTE $0xe2   // pmaxub    xmm4, xmm10
	LONG $0xd6da0f66               // pminub    xmm2, xmm6
	LONG $0xe86f0f66               // movdqa    xmm5, xmm0
	LONG $0xefda0f66               // pminub    xmm5, xmm7
	LONG $0xf8de0f66               // pmaxub    xmm7, xmm0
	LONG $0xde0f4166; BYTE $0xe3   // pmaxub    xmm4, xmm11
	LONG $0xe9de0f66               // pmaxub    xmm5, xmm1
	LONG $0xd3da0f66               // pminub    xmm2, xmm3
	LONG $0xefda0f66               // pminub    xmm5, xmm7
	LONG $0xc56f0f66               // movdqa    xmm0, xmm5
	LONG $0xc2da0f66               // pminub    xmm0, xmm2
	LONG $0xeade0f66               // pmaxub    xmm5, xmm2
	LONG $0xc4de0f66               // pmaxub    xmm0, xmm4
	LONG $0xc5da0f66               // pminub    xmm0, xmm5
	LONG $0x7f0f4166; BYTE $0x01   // movdqa    oword [r9], xmm0
	LONG $0x11fc8349               // cmp    r12, 17
	JB   LBB1_20
	WORD $0x894c; BYTE $0xdb       // mov    rbx, r11
	LONG $0x0014b841; WORD $0x0000 // mov    r8d, 20

LBB1_19:
	LONG $0x6f0f46f3; WORD $0x005c; BYTE $0xf8 // movdqu    xmm11, oword [rax + r8 - 8]
	LONG $0x6f0f4266; WORD $0x0074; BYTE $0xfc // movdqa    xmm6, oword [rax + r8 - 4]
	LONG $0x6f0f42f3; WORD $0x0014             // movdqu    xmm2, oword [rax + r8]
	LONG $0x6f0f44f3; WORD $0xf84b             // movdqu    xmm9, oword [rbx - 8]
	LONG $0x6b6f0f66; BYTE $0xfc               // movdqa    xmm5, oword [rbx - 4]
	LONG $0x1b6f0ff3                           // movdqu    xmm3, oword [rbx]
	LONG $0x6f0f47f3; WORD $0x0554; BYTE $0xf8 // movdqu    xmm10, oword [r13 + r8 - 8]
	LONG $0x6f0f4366; WORD $0x0564; BYTE $0xfc // movdqa    xmm4, oword [r13 + r8 - 4]
	LONG $0x6f0f43f3; WORD $0x0544; BYTE $0x00 // movdqu    xmm0, oword [r13 + r8]
	LONG $0xce6f0f66                           // movdqa    xmm1, xmm6
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfbda0f66                           // pminub    xmm7, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x6f0f4566; BYTE $0xe3               // movdqa    xmm12, xmm11
	LONG $0xda0f4466; BYTE $0xe1               // pminub    xmm12, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0x6f0f4166; BYTE $0xd9               // movdqa    xmm3, xmm9
	LONG $0xdfda0f66                           // pminub    xmm3, xmm7
	LONG $0xde0f4166; BYTE $0xf9               // pmaxub    xmm7, xmm9
	LONG $0x6f0f4566; BYTE $0xca               // movdqa    xmm9, xmm10
	LONG $0xda0f4466; BYTE $0xca               // pminub    xmm9, xmm2
	LONG $0xde0f4166; BYTE $0xd2               // pmaxub    xmm2, xmm10
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xf5da0f66                           // pminub    xmm6, xmm5
	LONG $0xfdde0f66                           // pmaxub    xmm7, xmm5
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xdc               // pmaxub    xmm3, xmm12
	LONG $0xd7da0f66                           // pminub    xmm2, xmm7
	LONG $0xe66f0f66                           // movdqa    xmm4, xmm6
	LONG $0xe5da0f66                           // pminub    xmm4, xmm5
	LONG $0xeede0f66                           // pmaxub    xmm5, xmm6
	LONG $0xde0f4166; BYTE $0xd9               // pmaxub    xmm3, xmm9
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xe5da0f66                           // pminub    xmm4, xmm5
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0x7f0f4366; WORD $0x0144; BYTE $0xfc // movdqa    oword [r9 + r8 - 4], xmm0
	LONG $0x10508d4d                           // lea    r10, [r8 + 16]
	LONG $0x0cc08349                           // add    r8, 12
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x394d; BYTE $0xe0                   // cmp    r8, r12
	WORD $0x894d; BYTE $0xd0                   // mov    r8, r10
	JB   LBB1_19

LBB1_20:
	LONG $0x6f0f44f3; WORD $0x1054; BYTE $0xec // movdqu    xmm10, oword [rax + rdx - 20]
	LONG $0x446f0f66; WORD $0xf010             // movdqa    xmm0, oword [rax + rdx - 16]
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0xd1eb0f66                           // por    xmm2, xmm1
	LONG $0x6f0f45f3; WORD $0x174c; BYTE $0xec // movdqu    xmm9, oword [r15 + rdx - 20]
	LONG $0x6f0f4166; WORD $0x175c; BYTE $0xf0 // movdqa    xmm3, oword [r15 + rdx - 16]
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0x6f0f45f3; WORD $0x155c; BYTE $0xec // movdqu    xmm11, oword [r13 + rdx - 20]
	LONG $0x6f0f4166; WORD $0x156c; BYTE $0xf0 // movdqa    xmm5, oword [r13 + rdx - 16]
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xdb0f4166; BYTE $0xf0               // pand    xmm6, xmm8
	LONG $0xf1eb0f66                           // por    xmm6, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdeda0f66                           // pminub    xmm3, xmm6
	LONG $0xf5de0f66                           // pmaxub    xmm6, xmm5
	LONG $0x6f0f4566; BYTE $0xe2               // movdqa    xmm12, xmm10
	LONG $0xda0f4466; BYTE $0xe1               // pminub    xmm12, xmm1
	LONG $0xde0f4166; BYTE $0xca               // pmaxub    xmm1, xmm10
	LONG $0x6f0f4166; BYTE $0xe9               // movdqa    xmm5, xmm9
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0x6f0f4566; BYTE $0xcb               // movdqa    xmm9, xmm11
	LONG $0xda0f4466; BYTE $0xcb               // pminub    xmm9, xmm3
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xfada0f66                           // pminub    xmm7, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0xde0f4166; BYTE $0xec               // pmaxub    xmm5, xmm12
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0x7f0f4166; WORD $0x114c; BYTE $0xf0 // movdqa    oword [r9 + rdx - 16], xmm1
	WORD $0xff49; BYTE $0xc6                   // inc    r14
	LONG $0x244c034c; BYTE $0x08               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	LONG $0x24343b4c                           // cmp    r14, qword [rsp]
	JNE  LBB1_17
	JMP  LBB1_62

LBB1_21:
	LONG $0x243c8348; BYTE $0x00 // cmp    qword [rsp], 0
	JE   LBB1_62
	LONG $0xff628d4c             // lea    r12, [rdx - 1]
	LONG $0xf0e48349             // and    r12, -16
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0xff788d48             // lea    rdi, [rax - 1]
	LONG $0x11598d4c             // lea    r11, [rcx + 17]
	WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d
	LONG $0xef0f4566; BYTE $0xc0 // pxor    xmm8, xmm8

LBB1_23:
	LONG $0xff468d49                           // lea    rax, [r14 - 1]
	LONG $0xc6af0f48                           // imul    rax, rsi
	WORD $0x0148; BYTE $0xc8                   // add    rax, rcx
	LONG $0x303c8d4c                           // lea    r15, [rax + rsi]
	LONG $0x372c8d4d                           // lea    r13, [r15 + rsi]
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	LONG $0x6f0f4466; WORD $0x061c             // movdqa    xmm11, oword [rsi + rax]
	LONG $0x6f0f44f3; WORD $0x064c; BYTE $0x01 // movdqu    xmm9, oword [rsi + rax + 1]
	LONG $0xc7440f49                           // cmove    rax, r15
	WORD $0x3949; BYTE $0xfe                   // cmp    r14, rdi
	LONG $0xef430f4d                           // cmovae    r13, r15
	LONG $0x186f0f66                           // movdqa    xmm3, oword [rax]
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xe0700f66; BYTE $0x27               // pshufd    xmm4, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e               // psrldq    xmm0, 14
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0x680f4166; BYTE $0xe8               // punpckhbw    xmm5, xmm8
	LONG $0xfd730f66; BYTE $0x02               // pslldq    xmm5, 2
	LONG $0xe8eb0f66                           // por    xmm5, xmm0
	LONG $0xc4700ff2; BYTE $0xec               // pshuflw    xmm0, xmm4, 236
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90               // pshuflw    xmm0, xmm0, 144
	LONG $0xe0700ff3; BYTE $0x93               // pshufhw    xmm4, xmm0, 147
	LONG $0xe5670f66                           // packuswb    xmm4, xmm5
	LONG $0x506f0ff3; BYTE $0x01               // movdqu    xmm2, oword [rax + 1]
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xe8700f66; BYTE $0x27               // pshufd    xmm5, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e               // psrldq    xmm0, 14
	LONG $0x6f0f4166; BYTE $0xfb               // movdqa    xmm7, xmm11
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0xff730f66; BYTE $0x02               // pslldq    xmm7, 2
	LONG $0xf8eb0f66                           // por    xmm7, xmm0
	LONG $0xc5700ff2; BYTE $0xec               // pshuflw    xmm0, xmm5, 236
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90               // pshuflw    xmm0, xmm0, 144
	LONG $0xf0700ff3; BYTE $0x93               // pshufhw    xmm6, xmm0, 147
	LONG $0xf7670f66                           // packuswb    xmm6, xmm7
	LONG $0x6f0f4166; WORD $0x007d             // movdqa    xmm7, oword [r13]
	LONG $0xc76f0f66                           // movdqa    xmm0, xmm7
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0x700f4466; WORD $0x27d0             // pshufd    xmm10, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e               // psrldq    xmm0, 14
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0x680f4166; BYTE $0xe8               // punpckhbw    xmm5, xmm8
	LONG $0xfd730f66; BYTE $0x02               // pslldq    xmm5, 2
	LONG $0xe8eb0f66                           // por    xmm5, xmm0
	LONG $0x700f41f2; WORD $0xecc2             // pshuflw    xmm0, xmm10, 236
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90               // pshuflw    xmm0, xmm0, 144
	LONG $0xc8700ff3; BYTE $0x93               // pshufhw    xmm1, xmm0, 147
	LONG $0xcd670f66                           // packuswb    xmm1, xmm5
	LONG $0x6f0f45f3; WORD $0x0155             // movdqu    xmm10, oword [r13 + 1]
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0x6f0f4166; BYTE $0xeb               // movdqa    xmm5, xmm11
	LONG $0xda0f4166; BYTE $0xe9               // pminub    xmm5, xmm9
	LONG $0xde0f4566; BYTE $0xd9               // pmaxub    xmm11, xmm9
	LONG $0xd76f0f66                           // movdqa    xmm2, xmm7
	LONG $0xda0f4166; BYTE $0xd2               // pminub    xmm2, xmm10
	LONG $0xde0f4166; BYTE $0xfa               // pmaxub    xmm7, xmm10
	LONG $0x6f0f4466; BYTE $0xcc               // movdqa    xmm9, xmm4
	LONG $0xda0f4466; BYTE $0xc8               // pminub    xmm9, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe66f0f66                           // movdqa    xmm4, xmm6
	LONG $0xe5da0f66                           // pminub    xmm4, xmm5
	LONG $0xeede0f66                           // pmaxub    xmm5, xmm6
	LONG $0x6f0f4466; BYTE $0xd1               // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd2               // pminub    xmm10, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xda0f4166; BYTE $0xdb               // pminub    xmm3, xmm11
	LONG $0xde0f4166; BYTE $0xeb               // pmaxub    xmm5, xmm11
	LONG $0xf26f0f66                           // movdqa    xmm6, xmm2
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xde0f4166; BYTE $0xe1               // pmaxub    xmm4, xmm9
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xeeda0f66                           // pminub    xmm5, xmm6
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0xe9de0f66                           // pmaxub    xmm5, xmm1
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xeeda0f66                           // pminub    xmm5, xmm6
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0x7f0f4166; BYTE $0x01               // movdqa    oword [r9], xmm0
	LONG $0x11fc8349                           // cmp    r12, 17
	JB   LBB1_26
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	LONG $0x0011b841; WORD $0x0000             // mov    r8d, 17

LBB1_25:
	LONG $0x6f0f46f3; WORD $0x005c; BYTE $0xfe // movdqu    xmm11, oword [rax + r8 - 2]
	LONG $0x6f0f4266; WORD $0x006c; BYTE $0xff // movdqa    xmm5, oword [rax + r8 - 1]
	LONG $0x6f0f42f3; WORD $0x0014             // movdqu    xmm2, oword [rax + r8]
	LONG $0x6f0f44f3; WORD $0xfe4b             // movdqu    xmm9, oword [rbx - 2]
	LONG $0x636f0f66; BYTE $0xff               // movdqa    xmm4, oword [rbx - 1]
	LONG $0x3b6f0ff3                           // movdqu    xmm7, oword [rbx]
	LONG $0x6f0f47f3; WORD $0x0554; BYTE $0xfe // movdqu    xmm10, oword [r13 + r8 - 2]
	LONG $0x6f0f4366; WORD $0x055c; BYTE $0xff // movdqa    xmm3, oword [r13 + r8 - 1]
	LONG $0x6f0f43f3; WORD $0x0544; BYTE $0x00 // movdqu    xmm0, oword [r13 + r8]
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x6f0f4566; BYTE $0xe3               // movdqa    xmm12, xmm11
	LONG $0xda0f4466; BYTE $0xe1               // pminub    xmm12, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xf1               // pmaxub    xmm6, xmm9
	LONG $0x6f0f4566; BYTE $0xca               // movdqa    xmm9, xmm10
	LONG $0xda0f4466; BYTE $0xca               // pminub    xmm9, xmm2
	LONG $0xde0f4166; BYTE $0xd2               // pmaxub    xmm2, xmm10
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xfdda0f66                           // pminub    xmm7, xmm5
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xee6f0f66                           // movdqa    xmm5, xmm6
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xf4de0f66                           // pmaxub    xmm6, xmm4
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xc4               // pmaxub    xmm0, xmm12
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0xdfde0f66                           // pmaxub    xmm3, xmm7
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0x7f0f4366; WORD $0x014c; BYTE $0xff // movdqa    oword [r9 + r8 - 1], xmm1
	LONG $0x10508d4d                           // lea    r10, [r8 + 16]
	LONG $0x0fc08349                           // add    r8, 15
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x394d; BYTE $0xe0                   // cmp    r8, r12
	WORD $0x894d; BYTE $0xd0                   // mov    r8, r10
	JB   LBB1_25

LBB1_26:
	LONG $0x6f0f44f3; WORD $0x104c; BYTE $0xef // movdqu    xmm9, oword [rax + rdx - 17]
	LONG $0x646f0f66; WORD $0xf010             // movdqa    xmm4, oword [rax + rdx - 16]
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x02               // psrldq    xmm0, 2
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0x680f4166; BYTE $0xc8               // punpckhbw    xmm1, xmm8
	LONG $0xd1700f66; BYTE $0x27               // pshufd    xmm2, xmm1, 39
	LONG $0xf9730f66; BYTE $0x0e               // pslldq    xmm1, 14
	LONG $0xc8eb0f66                           // por    xmm1, xmm0
	LONG $0xc2700ff3; BYTE $0xc4               // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9               // pshufhw    xmm0, xmm0, 249
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x6f0f45f3; WORD $0x1754; BYTE $0xef // movdqu    xmm10, oword [r15 + rdx - 17]
	LONG $0x6f0f4166; WORD $0x176c; BYTE $0xf0 // movdqa    xmm5, oword [r15 + rdx - 16]
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x02               // psrldq    xmm0, 2
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0xd3700f66; BYTE $0x27               // pshufd    xmm2, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0e               // pslldq    xmm3, 14
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0xc2700ff3; BYTE $0xc4               // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9               // pshufhw    xmm0, xmm0, 249
	LONG $0xd8670f66                           // packuswb    xmm3, xmm0
	LONG $0x6f0f45f3; WORD $0x155c; BYTE $0xef // movdqu    xmm11, oword [r13 + rdx - 17]
	LONG $0x6f0f4166; WORD $0x1554; BYTE $0xf0 // movdqa    xmm2, oword [r13 + rdx - 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x02               // psrldq    xmm0, 2
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0xf7700f66; BYTE $0x27               // pshufd    xmm6, xmm7, 39
	LONG $0xff730f66; BYTE $0x0e               // pslldq    xmm7, 14
	LONG $0xf8eb0f66                           // por    xmm7, xmm0
	LONG $0xc6700ff3; BYTE $0xc4               // pshufhw    xmm0, xmm6, 196
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9               // pshufhw    xmm0, xmm0, 249
	LONG $0xf8670f66                           // packuswb    xmm7, xmm0
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xfade0f66                           // pmaxub    xmm7, xmm2
	LONG $0x6f0f4566; BYTE $0xe1               // movdqa    xmm12, xmm9
	LONG $0xda0f4466; BYTE $0xe6               // pminub    xmm12, xmm6
	LONG $0xde0f4166; BYTE $0xf1               // pmaxub    xmm6, xmm9
	LONG $0x6f0f4166; BYTE $0xea               // movdqa    xmm5, xmm10
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0x6f0f4566; BYTE $0xcb               // movdqa    xmm9, xmm11
	LONG $0xda0f4466; BYTE $0xcc               // pminub    xmm9, xmm4
	LONG $0xde0f4166; BYTE $0xe3               // pmaxub    xmm4, xmm11
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xdfda0f66                           // pminub    xmm3, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xec               // pmaxub    xmm5, xmm12
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0x7f0f4166; WORD $0x114c; BYTE $0xf0 // movdqa    oword [r9 + rdx - 16], xmm1
	WORD $0xff49; BYTE $0xc6                   // inc    r14
	LONG $0x244c034c; BYTE $0x08               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	LONG $0x24343b4c                           // cmp    r14, qword [rsp]
	JNE  LBB1_23
	JMP  LBB1_62

LBB1_27:
	LONG $0x243c8348; BYTE $0x00 // cmp    qword [rsp], 0
	JE   LBB1_62
	LONG $0x52348d4c             // lea    r14, [rdx + 2*rdx]
	LONG $0x526c8d4c; BYTE $0xff // lea    r13, [rdx + 2*rdx - 1]
	LONG $0xf0e58349             // and    r13, -16
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0xff788d48             // lea    rdi, [rax - 1]
	LONG $0x13598d4c             // lea    r11, [rcx + 19]
	WORD $0x3145; BYTE $0xe4     // xor    r12d, r12d
	LONG $0xef0f4566; BYTE $0xc0 // pxor    xmm8, xmm8

LBB1_29:
	LONG $0x245c8d49; BYTE $0xff               // lea    rbx, [r12 - 1]
	LONG $0xdeaf0f48                           // imul    rbx, rsi
	WORD $0x0148; BYTE $0xcb                   // add    rbx, rcx
	LONG $0x333c8d4c                           // lea    r15, [rbx + rsi]
	LONG $0x37148d4d                           // lea    r10, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	LONG $0x6f0f4466; WORD $0x1e1c             // movdqa    xmm11, oword [rsi + rbx]
	LONG $0x6f0f44f3; WORD $0x1e4c; BYTE $0x03 // movdqu    xmm9, oword [rsi + rbx + 3]
	LONG $0xdf440f49                           // cmove    rbx, r15
	WORD $0x3949; BYTE $0xfc                   // cmp    r12, rdi
	LONG $0xd7430f4d                           // cmovae    r10, r15
	LONG $0x1b6f0f66                           // movdqa    xmm3, oword [rbx]
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xe0700f66; BYTE $0x27               // pshufd    xmm4, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a               // psrldq    xmm0, 10
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0x680f4166; BYTE $0xe8               // punpckhbw    xmm5, xmm8
	LONG $0xfd730f66; BYTE $0x06               // pslldq    xmm5, 6
	LONG $0xe8eb0f66                           // por    xmm5, xmm0
	LONG $0xc4700ff3; BYTE $0xec               // pshufhw    xmm0, xmm4, 236
	LONG $0xc0700f66; BYTE $0x67               // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24               // pshuflw    xmm0, xmm0, 36
	LONG $0xe0700ff3; BYTE $0x39               // pshufhw    xmm4, xmm0, 57
	LONG $0xe5670f66                           // packuswb    xmm4, xmm5
	LONG $0x536f0ff3; BYTE $0x03               // movdqu    xmm2, oword [rbx + 3]
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xe8700f66; BYTE $0x27               // pshufd    xmm5, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a               // psrldq    xmm0, 10
	LONG $0x6f0f4166; BYTE $0xfb               // movdqa    xmm7, xmm11
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0xff730f66; BYTE $0x06               // pslldq    xmm7, 6
	LONG $0xf8eb0f66                           // por    xmm7, xmm0
	LONG $0xc5700ff3; BYTE $0xec               // pshufhw    xmm0, xmm5, 236
	LONG $0xc0700f66; BYTE $0x67               // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24               // pshuflw    xmm0, xmm0, 36
	LONG $0xf0700ff3; BYTE $0x39               // pshufhw    xmm6, xmm0, 57
	LONG $0xf7670f66                           // packuswb    xmm6, xmm7
	LONG $0x6f0f4166; BYTE $0x3a               // movdqa    xmm7, oword [r10]
	LONG $0xc76f0f66                           // movdqa    xmm0, xmm7
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0x700f4466; WORD $0x27d0             // pshufd    xmm10, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a               // psrldq    xmm0, 10
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0x680f4166; BYTE $0xe8               // punpckhbw    xmm5, xmm8
	LONG $0xfd730f66; BYTE $0x06               // pslldq    xmm5, 6
	LONG $0xe8eb0f66                           // por    xmm5, xmm0
	LONG $0x700f41f3; WORD $0xecc2             // pshufhw    xmm0, xmm10, 236
	LONG $0xc0700f66; BYTE $0x67               // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24               // pshuflw    xmm0, xmm0, 36
	LONG $0xc8700ff3; BYTE $0x39               // pshufhw    xmm1, xmm0, 57
	LONG $0xcd670f66                           // packuswb    xmm1, xmm5
	LONG $0x6f0f45f3; WORD $0x0352             // movdqu    xmm10, oword [r10 + 3]
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0x6f0f4166; BYTE $0xeb               // movdqa    xmm5, xmm11
	LONG $0xda0f4166; BYTE $0xe9               // pminub    xmm5, xmm9
	LONG $0xde0f4566; BYTE $0xd9               // pmaxub    xmm11, xmm9
	LONG $0xd76f0f66                           // movdqa    xmm2, xmm7
	LONG $0xda0f4166; BYTE $0xd2               // pminub    xmm2, xmm10
	LONG $0xde0f4166; BYTE $0xfa               // pmaxub    xmm7, xmm10
	LONG $0x6f0f4466; BYTE $0xcc               // movdqa    xmm9, xmm4
	LONG $0xda0f4466; BYTE $0xc8               // pminub    xmm9, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe66f0f66                           // movdqa    xmm4, xmm6
	LONG $0xe5da0f66                           // pminub    xmm4, xmm5
	LONG $0xeede0f66                           // pmaxub    xmm5, xmm6
	LONG $0x6f0f4466; BYTE $0xd1               // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd2               // pminub    xmm10, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xda0f4166; BYTE $0xdb               // pminub    xmm3, xmm11
	LONG $0xde0f4166; BYTE $0xeb               // pmaxub    xmm5, xmm11
	LONG $0xf26f0f66                           // movdqa    xmm6, xmm2
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xde0f4166; BYTE $0xe1               // pmaxub    xmm4, xmm9
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xeeda0f66                           // pminub    xmm5, xmm6
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0xe9de0f66                           // pmaxub    xmm5, xmm1
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xeeda0f66                           // pminub    xmm5, xmm6
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0x7f0f4166; BYTE $0x01               // movdqa    oword [r9], xmm0
	LONG $0x11fd8349                           // cmp    r13, 17
	JB   LBB1_32
	WORD $0x894c; BYTE $0xda                   // mov    rdx, r11
	LONG $0x0013b841; WORD $0x0000             // mov    r8d, 19

LBB1_31:
	LONG $0x6f0f46f3; WORD $0x035c; BYTE $0xfa // movdqu    xmm11, oword [rbx + r8 - 6]
	LONG $0x6f0f4266; WORD $0x036c; BYTE $0xfd // movdqa    xmm5, oword [rbx + r8 - 3]
	LONG $0x6f0f42f3; WORD $0x0314             // movdqu    xmm2, oword [rbx + r8]
	LONG $0x6f0f44f3; WORD $0xfa4a             // movdqu    xmm9, oword [rdx - 6]
	LONG $0x626f0f66; BYTE $0xfd               // movdqa    xmm4, oword [rdx - 3]
	LONG $0x3a6f0ff3                           // movdqu    xmm7, oword [rdx]
	LONG $0x6f0f47f3; WORD $0x0254; BYTE $0xfa // movdqu    xmm10, oword [r10 + r8 - 6]
	LONG $0x6f0f4366; WORD $0x025c; BYTE $0xfd // movdqa    xmm3, oword [r10 + r8 - 3]
	LONG $0x6f0f43f3; WORD $0x0204             // movdqu    xmm0, oword [r10 + r8]
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x6f0f4566; BYTE $0xe3               // movdqa    xmm12, xmm11
	LONG $0xda0f4466; BYTE $0xe1               // pminub    xmm12, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xf1               // pmaxub    xmm6, xmm9
	LONG $0x6f0f4566; BYTE $0xca               // movdqa    xmm9, xmm10
	LONG $0xda0f4466; BYTE $0xca               // pminub    xmm9, xmm2
	LONG $0xde0f4166; BYTE $0xd2               // pmaxub    xmm2, xmm10
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xfdda0f66                           // pminub    xmm7, xmm5
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xee6f0f66                           // movdqa    xmm5, xmm6
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xf4de0f66                           // pmaxub    xmm6, xmm4
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xc4               // pmaxub    xmm0, xmm12
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0xdfde0f66                           // pmaxub    xmm3, xmm7
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0x7f0f4366; WORD $0x014c; BYTE $0xfd // movdqa    oword [r9 + r8 - 3], xmm1
	LONG $0x10408d49                           // lea    rax, [r8 + 16]
	LONG $0x0dc08349                           // add    r8, 13
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x394d; BYTE $0xe8                   // cmp    r8, r13
	WORD $0x8949; BYTE $0xc0                   // mov    r8, rax
	JB   LBB1_31

LBB1_32:
	LONG $0x6f0f46f3; WORD $0x334c; BYTE $0xed // movdqu    xmm9, oword [rbx + r14 - 19]
	LONG $0x6f0f4266; WORD $0x3364; BYTE $0xf0 // movdqa    xmm4, oword [rbx + r14 - 16]
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x06               // psrldq    xmm0, 6
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0x680f4166; BYTE $0xc8               // punpckhbw    xmm1, xmm8
	LONG $0xd1700f66; BYTE $0x27               // pshufd    xmm2, xmm1, 39
	LONG $0xf9730f66; BYTE $0x0a               // pslldq    xmm1, 10
	LONG $0xc8eb0f66                           // por    xmm1, xmm0
	LONG $0xc2700ff2; BYTE $0x4c               // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68               // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7               // pshufhw    xmm0, xmm0, 231
	LONG $0xc8670f66                           // packuswb    xmm1, xmm0
	LONG $0x6f0f47f3; WORD $0x3754; BYTE $0xed // movdqu    xmm10, oword [r15 + r14 - 19]
	LONG $0x6f0f4366; WORD $0x376c; BYTE $0xf0 // movdqa    xmm5, oword [r15 + r14 - 16]
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x06               // psrldq    xmm0, 6
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0xd3700f66; BYTE $0x27               // pshufd    xmm2, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0a               // pslldq    xmm3, 10
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0xc2700ff2; BYTE $0x4c               // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68               // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7               // pshufhw    xmm0, xmm0, 231
	LONG $0xd8670f66                           // packuswb    xmm3, xmm0
	LONG $0x6f0f47f3; WORD $0x325c; BYTE $0xed // movdqu    xmm11, oword [r10 + r14 - 19]
	LONG $0x6f0f4366; WORD $0x3254; BYTE $0xf0 // movdqa    xmm2, oword [r10 + r14 - 16]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd8730f66; BYTE $0x06               // psrldq    xmm0, 6
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0xf7700f66; BYTE $0x27               // pshufd    xmm6, xmm7, 39
	LONG $0xff730f66; BYTE $0x0a               // pslldq    xmm7, 10
	LONG $0xf8eb0f66                           // por    xmm7, xmm0
	LONG $0xc6700ff2; BYTE $0x4c               // pshuflw    xmm0, xmm6, 76
	LONG $0xc0700f66; BYTE $0x68               // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7               // pshufhw    xmm0, xmm0, 231
	LONG $0xf8670f66                           // packuswb    xmm7, xmm0
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xfade0f66                           // pmaxub    xmm7, xmm2
	LONG $0x6f0f4566; BYTE $0xe1               // movdqa    xmm12, xmm9
	LONG $0xda0f4466; BYTE $0xe6               // pminub    xmm12, xmm6
	LONG $0xde0f4166; BYTE $0xf1               // pmaxub    xmm6, xmm9
	LONG $0x6f0f4166; BYTE $0xea               // movdqa    xmm5, xmm10
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0x6f0f4566; BYTE $0xcb               // movdqa    xmm9, xmm11
	LONG $0xda0f4466; BYTE $0xcc               // pminub    xmm9, xmm4
	LONG $0xde0f4166; BYTE $0xe3               // pmaxub    xmm4, xmm11
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xdfda0f66                           // pminub    xmm3, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xec               // pmaxub    xmm5, xmm12
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0x7f0f4366; WORD $0x314c; BYTE $0xf0 // movdqa    oword [r9 + r14 - 16], xmm1
	WORD $0xff49; BYTE $0xc4                   // inc    r12
	LONG $0x244c034c; BYTE $0x08               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf3                   // add    r11, rsi
	LONG $0x24243b4c                           // cmp    r12, qword [rsp]
	JNE  LBB1_29

LBB1_62:
	SUBQ $8, SP
	RET

DATA LCDATA3<>+0x000(SB)/8, $0x0000000000000000
DATA LCDATA3<>+0x008(SB)/8, $0xffffffff00000000
DATA LCDATA3<>+0x010(SB)/8, $0x0000000000000000
DATA LCDATA3<>+0x018(SB)/8, $0xffff000000000000
GLOBL LCDATA3<>(SB), 8, $32

TEXT Â·_SimdSse2MedianFilterRhomb5x5(SB), $96-56

	MOVQ src+0(FP), DI
	MOVQ srcStride+8(FP), SI
	MOVQ width+16(FP), DX
	MOVQ height+24(FP), CX
	MOVQ channelCount+32(FP), R8
	MOVQ dst+40(FP), R9
	MOVQ dstStride+48(FP), R10

//	MOVQ SP, BP
//	ANDQ $-16, BP
//	MOVQ SP, 88(BP)
//	MOVQ R10, 80(BP)
//	LEAQ LCDATA3<>(SB), BP
//	ADDQ $16, SP
//	ANDQ $-16, SP

    MOVQ SP, BP
    ADDQ $16, SP
    ANDQ $-16, SP
    MOVQ BP, 72(SP)
    MOVQ R10, 64(SP)
    LEAQ LCDATA3<>(SB), BP

	LONG $0x240c8948               // mov    qword [rsp], rcx
	WORD $0x8948; BYTE $0xf8       // mov    rax, rdi
	LONG $0xf0e08348               // and    rax, -16
	LONG $0x247c8948; BYTE $0x08   // mov    qword [rsp + 8], rdi
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JNE  LBB2_33
	WORD $0x8948; BYTE $0xd0       // mov    rax, rdx
	WORD $0x0948; BYTE $0xf0       // or    rax, rsi
	WORD $0x8948; BYTE $0xc1       // mov    rcx, rax
	LONG $0xf0e18348               // and    rcx, -16
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB2_33
	LONG $0x24448b48; BYTE $0x40   // mov    rax, qword 64[rsp] /* [rbp + 16] */
	WORD $0x8948; BYTE $0xc1       // mov    rcx, rax
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB2_33
	WORD $0x894c; BYTE $0xc8       // mov    rax, r9
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x394c; BYTE $0xc8       // cmp    rax, r9
	JNE  LBB2_33
	LONG $0x02f88349               // cmp    r8, 2
	JG   LBB2_13
	LONG $0x01f88349               // cmp    r8, 1
	JE   LBB2_21
	LONG $0x02f88349               // cmp    r8, 2
	JNE  LBB2_62
	LONG $0x243c8348; BYTE $0x00   // cmp    qword [rsp], 0
	JE   LBB2_62
	LONG $0x12148d4c               // lea    r10, [rdx + rdx]
	LONG $0x126c8d4c; BYTE $0xff   // lea    r13, [rdx + rdx - 1]
	LONG $0xf0e58349               // and    r13, -16
	LONG $0x24048b48               // mov    rax, qword [rsp]
	LONG $0xfe488d48               // lea    rcx, [rax - 2]
	LONG $0x244c8948; BYTE $0x18   // mov    qword [rsp + 24], rcx
	WORD $0xff48; BYTE $0xc8       // dec    rax
	LONG $0x24448948; BYTE $0x10   // mov    qword [rsp + 16], rax
	LONG $0x24448b48; BYTE $0x08   // mov    rax, qword [rsp + 8]
	LONG $0x14708d4c               // lea    r14, [rax + 20]
	WORD $0x3145; BYTE $0xe4       // xor    r12d, r12d
	LONG $0x00ffffb8; BYTE $0x00   // mov    eax, 65535
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0x447f0f66; WORD $0x2024 // movdqa    oword [rsp + 32], xmm0

LBB2_9:
	LONG $0x24448d49; BYTE $0xfe               // lea    rax, [r12 - 2]
	LONG $0xc6af0f48                           // imul    rax, rsi
	LONG $0x24440348; BYTE $0x08               // add    rax, qword [rsp + 8]
	LONG $0x301c8d48                           // lea    rbx, [rax + rsi]
	LONG $0x333c8d4c                           // lea    r15, [rbx + rsi]
	LONG $0x37148d49                           // lea    rdx, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	WORD $0x8948; BYTE $0xdf                   // mov    rdi, rbx
	LONG $0x1c6f0f66; BYTE $0x1e               // movdqa    xmm3, oword [rsi + rbx]
	LONG $0x6f0f44f3; WORD $0x1e6c; BYTE $0x02 // movdqu    xmm13, oword [rsi + rbx + 2]
	LONG $0x6f0f44f3; WORD $0x1e64; BYTE $0x04 // movdqu    xmm12, oword [rsi + rbx + 4]
	LONG $0xdf440f49                           // cmove    rbx, r15
	LONG $0x02fc8349                           // cmp    r12, 2
	LONG $0xfb420f48                           // cmovb    rdi, rbx
	LONG $0xd8430f48                           // cmovae    rbx, rax
	LONG $0x24643b4c; BYTE $0x10               // cmp    r12, qword [rsp + 16]
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0xc2420f48                           // cmovb    rax, rdx
	LONG $0x24643b4c; BYTE $0x18               // cmp    r12, qword [rsp + 24]
	WORD $0x8948; BYTE $0xc1                   // mov    rcx, rax
	LONG $0xca420f48                           // cmovb    rcx, rdx
	LONG $0x32148d48                           // lea    rdx, [rdx + rsi]
	LONG $0xc2420f48                           // cmovb    rax, rdx
	LONG $0x6f0f4466; BYTE $0x33               // movdqa    xmm14, oword [rbx]
	LONG $0x176f0f66                           // movdqa    xmm2, oword [rdi]
	LONG $0x6f0f4466; BYTE $0xda               // movdqa    xmm11, xmm2
	LONG $0x676f0ff3; BYTE $0x02               // movdqu    xmm4, oword [rdi + 2]
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xf8730f66; BYTE $0x02               // pslldq    xmm0, 2
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x20 // movdqa    xmm8, oword [rsp + 32]
	LONG $0xdb0f4166; BYTE $0xf0               // pand    xmm6, xmm8
	LONG $0xf0eb0f66                           // por    xmm6, xmm0
	LONG $0xc66f0f66                           // movdqa    xmm0, xmm6
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xdd               // pmaxub    xmm3, xmm13
	LONG $0xee6f0f66                           // movdqa    xmm5, xmm6
	LONG $0xebda0f66                           // pminub    xmm5, xmm3
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0xfe730f66; BYTE $0x02               // pslldq    xmm6, 2
	LONG $0xdb0f4166; BYTE $0xc0               // pand    xmm0, xmm8
	LONG $0xc6eb0f66                           // por    xmm0, xmm6
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xfa730f66; BYTE $0x02               // pslldq    xmm2, 2
	LONG $0xdb0f4566; BYTE $0xd8               // pand    xmm11, xmm8
	LONG $0xeb0f4466; BYTE $0xda               // por    xmm11, xmm2
	LONG $0x396f0f66                           // movdqa    xmm7, oword [rcx]
	LONG $0x6f0f4466; BYTE $0xd7               // movdqa    xmm10, xmm7
	LONG $0x730f4166; WORD $0x02fa             // pslldq    xmm10, 2
	LONG $0xd76f0f66                           // movdqa    xmm2, xmm7
	LONG $0xdb0f4166; BYTE $0xd0               // pand    xmm2, xmm8
	LONG $0xeb0f4166; BYTE $0xd2               // por    xmm2, xmm10
	LONG $0x6f0f44f3; WORD $0x0279             // movdqu    xmm15, oword [rcx + 2]
	LONG $0x6f0f4566; BYTE $0xd6               // movdqa    xmm10, xmm14
	LONG $0xda0f4566; BYTE $0xd3               // pminub    xmm10, xmm11
	LONG $0xde0f4566; BYTE $0xde               // pmaxub    xmm11, xmm14
	LONG $0x6f0f4466; BYTE $0xf4               // movdqa    xmm14, xmm4
	LONG $0xda0f4466; BYTE $0xf6               // pminub    xmm14, xmm6
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0x6f0f4466; BYTE $0x00               // movdqa    xmm8, oword [rax]
	LONG $0xda0f4166; BYTE $0xcd               // pminub    xmm1, xmm13
	LONG $0x6f0f4466; BYTE $0xed               // movdqa    xmm13, xmm5
	LONG $0xda0f4466; BYTE $0xe9               // pminub    xmm13, xmm1
	LONG $0xe9de0f66                           // pmaxub    xmm5, xmm1
	LONG $0x6f0f4466; BYTE $0xca               // movdqa    xmm9, xmm2
	LONG $0xda0f4466; BYTE $0xcf               // pminub    xmm9, xmm7
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0x6f0f4166; BYTE $0xcc               // movdqa    xmm1, xmm12
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xde0f4166; BYTE $0xd4               // pmaxub    xmm2, xmm12
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xda0f4166; BYTE $0xf1               // pminub    xmm6, xmm9
	LONG $0xde0f4166; BYTE $0xc9               // pmaxub    xmm1, xmm9
	LONG $0x6f0f4566; BYTE $0xe7               // movdqa    xmm12, xmm15
	LONG $0xda0f4566; BYTE $0xe0               // pminub    xmm12, xmm8
	LONG $0xde0f4566; BYTE $0xf8               // pmaxub    xmm15, xmm8
	LONG $0x6f0f4166; BYTE $0xfd               // movdqa    xmm7, xmm13
	LONG $0xfeda0f66                           // pminub    xmm7, xmm6
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0x6f0f4566; BYTE $0xc6               // movdqa    xmm8, xmm14
	LONG $0xda0f4466; BYTE $0xc6               // pminub    xmm8, xmm6
	LONG $0xde0f4166; BYTE $0xf6               // pmaxub    xmm6, xmm14
	LONG $0x6f0f4566; BYTE $0xe8               // movdqa    xmm13, xmm8
	LONG $0xda0f4466; BYTE $0xef               // pminub    xmm13, xmm7
	LONG $0xde0f4466; BYTE $0xc7               // pmaxub    xmm8, xmm7
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xf9da0f66                           // pminub    xmm7, xmm1
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xe9da0f66                           // pminub    xmm5, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0x6f0f4466; BYTE $0xf5               // movdqa    xmm14, xmm5
	LONG $0xda0f4466; BYTE $0xf7               // pminub    xmm14, xmm7
	LONG $0xefde0f66                           // pmaxub    xmm5, xmm7
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0x6f0f4166; BYTE $0xe6               // movdqa    xmm4, xmm14
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xde0f4566; BYTE $0xf7               // pmaxub    xmm14, xmm15
	LONG $0x6f0f4166; BYTE $0xfa               // movdqa    xmm7, xmm10
	LONG $0xf9da0f66                           // pminub    xmm7, xmm1
	LONG $0xde0f4166; BYTE $0xca               // pmaxub    xmm1, xmm10
	LONG $0xda0f4166; BYTE $0xd3               // pminub    xmm2, xmm11
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xde0f4566; BYTE $0xc4               // pmaxub    xmm8, xmm12
	LONG $0xde0f4466; BYTE $0xc4               // pmaxub    xmm8, xmm4
	LONG $0xde0f4566; BYTE $0xc5               // pmaxub    xmm8, xmm13
	LONG $0xcf6f0f66                           // movdqa    xmm1, xmm7
	LONG $0xcdda0f66                           // pminub    xmm1, xmm5
	LONG $0xfdde0f66                           // pmaxub    xmm7, xmm5
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdeda0f66                           // pminub    xmm3, xmm6
	LONG $0xd6de0f66                           // pmaxub    xmm2, xmm6
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xe0               // pmaxub    xmm4, xmm8
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xda0f4166; BYTE $0xce               // pminub    xmm1, xmm14
	LONG $0xde0f4166; BYTE $0xc6               // pmaxub    xmm0, xmm14
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0x7f0f4166; BYTE $0x01               // movdqa    oword [r9], xmm0
	LONG $0x11fd8349                           // cmp    r13, 17
	JB   LBB2_12
	WORD $0x894c; BYTE $0xf2                   // mov    rdx, r14
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d

LBB2_11:
	LONG $0x6f0f4666; WORD $0x0354; BYTE $0x10 // movdqa    xmm10, oword [rbx + r8 + 16]
	LONG $0x6f0f42f3; WORD $0x0744; BYTE $0x0e // movdqu    xmm0, oword [rdi + r8 + 14]
	LONG $0x6f0f4266; WORD $0x077c; BYTE $0x10 // movdqa    xmm7, oword [rdi + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x077c; BYTE $0x12 // movdqu    xmm15, oword [rdi + r8 + 18]
	LONG $0x726f0ff3; BYTE $0xf8               // movdqu    xmm6, oword [rdx - 8]
	LONG $0x5a6f0ff3; BYTE $0xfa               // movdqu    xmm3, oword [rdx - 6]
	LONG $0x4a6f0f66; BYTE $0xfc               // movdqa    xmm1, oword [rdx - 4]
	LONG $0x626f0ff3; BYTE $0xfe               // movdqu    xmm4, oword [rdx - 2]
	LONG $0x6f0f44f3; BYTE $0x0a               // movdqu    xmm9, oword [rdx]
	LONG $0x6f0f42f3; WORD $0x0154; BYTE $0x0e // movdqu    xmm2, oword [rcx + r8 + 14]
	LONG $0x6f0f4666; WORD $0x0164; BYTE $0x10 // movdqa    xmm12, oword [rcx + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x016c; BYTE $0x12 // movdqu    xmm13, oword [rcx + r8 + 18]
	LONG $0x6f0f4666; WORD $0x0044; BYTE $0x10 // movdqa    xmm8, oword [rax + r8 + 16]
	LONG $0x6f0f4566; BYTE $0xda               // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xd8               // pminub    xmm11, xmm0
	LONG $0xde0f4466; BYTE $0xd0               // pmaxub    xmm10, xmm0
	LONG $0x6f0f4166; BYTE $0xc7               // movdqa    xmm0, xmm15
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xde0f4466; BYTE $0xfe               // pmaxub    xmm15, xmm6
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xda0f4166; BYTE $0xf7               // pminub    xmm6, xmm15
	LONG $0xde0f4466; BYTE $0xff               // pmaxub    xmm15, xmm7
	LONG $0x6f0f4466; BYTE $0xf6               // movdqa    xmm14, xmm6
	LONG $0xda0f4466; BYTE $0xf0               // pminub    xmm14, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xfcda0f66                           // pminub    xmm7, xmm4
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0xe86f0f66                           // movdqa    xmm5, xmm0
	LONG $0xefda0f66                           // pminub    xmm5, xmm7
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xda0f4166; BYTE $0xfc               // pminub    xmm7, xmm12
	LONG $0xde0f4166; BYTE $0xd4               // pmaxub    xmm2, xmm12
	LONG $0x6f0f4166; BYTE $0xe1               // movdqa    xmm4, xmm9
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xde0f4166; BYTE $0xd1               // pmaxub    xmm2, xmm9
	LONG $0x6f0f4466; BYTE $0xcc               // movdqa    xmm9, xmm4
	LONG $0xda0f4466; BYTE $0xcf               // pminub    xmm9, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0x6f0f4566; BYTE $0xe5               // movdqa    xmm12, xmm13
	LONG $0xda0f4566; BYTE $0xe0               // pminub    xmm12, xmm8
	LONG $0xde0f4566; BYTE $0xe8               // pmaxub    xmm13, xmm8
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xda0f4166; BYTE $0xd9               // pminub    xmm3, xmm9
	LONG $0xde0f4466; BYTE $0xcd               // pmaxub    xmm9, xmm5
	LONG $0x6f0f4166; BYTE $0xfe               // movdqa    xmm7, xmm14
	LONG $0xda0f4166; BYTE $0xf9               // pminub    xmm7, xmm9
	LONG $0xde0f4566; BYTE $0xce               // pmaxub    xmm9, xmm14
	LONG $0x6f0f4466; BYTE $0xf7               // movdqa    xmm14, xmm7
	LONG $0xda0f4466; BYTE $0xf3               // pminub    xmm14, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc66f0f66                           // movdqa    xmm0, xmm6
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xf3da0f66                           // pminub    xmm6, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0x6f0f4166; BYTE $0xef               // movdqa    xmm5, xmm15
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xde0f4166; BYTE $0xd7               // pmaxub    xmm2, xmm15
	LONG $0x6f0f4466; BYTE $0xc5               // movdqa    xmm8, xmm5
	LONG $0xda0f4466; BYTE $0xc3               // pminub    xmm8, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xda0f4166; BYTE $0xdd               // pminub    xmm3, xmm13
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0x6f0f4166; BYTE $0xcb               // movdqa    xmm1, xmm11
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xde0f4166; BYTE $0xe3               // pmaxub    xmm4, xmm11
	LONG $0xda0f4166; BYTE $0xd2               // pminub    xmm2, xmm10
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xfc               // pmaxub    xmm7, xmm12
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xfe               // pmaxub    xmm7, xmm14
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xda0f4166; BYTE $0xc1               // pminub    xmm0, xmm9
	LONG $0xde0f4166; BYTE $0xd1               // pmaxub    xmm2, xmm9
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xda0f4166; BYTE $0xd0               // pminub    xmm2, xmm8
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0x7f0f4366; WORD $0x014c; BYTE $0x10 // movdqa    oword [r9 + r8 + 16], xmm1
	LONG $0x10588d4d                           // lea    r11, [r8 + 16]
	LONG $0x20c08349                           // add    r8, 32
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x394d; BYTE $0xe8                   // cmp    r8, r13
	WORD $0x894d; BYTE $0xd8                   // mov    r8, r11
	JB   LBB2_11

LBB2_12:
	LONG $0x6f0f46f3; WORD $0x1364; BYTE $0xf0 // movdqu    xmm12, oword [rbx + r10 - 16]
	LONG $0x6f0f46f3; WORD $0x1754; BYTE $0xee // movdqu    xmm10, oword [rdi + r10 - 18]
	LONG $0x6f0f46f3; WORD $0x1744; BYTE $0xf0 // movdqu    xmm8, oword [rdi + r10 - 16]
	LONG $0x6f0f4166; BYTE $0xc8               // movdqa    xmm1, xmm8
	LONG $0xd9730f66; BYTE $0x02               // psrldq    xmm1, 2
	LONG $0x6f0f4166; BYTE $0xe0               // movdqa    xmm4, xmm8
	LONG $0x756f0f66; BYTE $0x10               // movdqa    xmm6, oword 16[rbp] /* [rip + .LCPI2_1] */
	LONG $0xe6db0f66                           // pand    xmm4, xmm6
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0x6f0f47f3; WORD $0x1774; BYTE $0xec // movdqu    xmm14, oword [r15 + r10 - 20]
	LONG $0x6f0f47f3; WORD $0x175c; BYTE $0xee // movdqu    xmm11, oword [r15 + r10 - 18]
	LONG $0x6f0f47f3; WORD $0x174c; BYTE $0xf0 // movdqu    xmm9, oword [r15 + r10 - 16]
	LONG $0x6f0f4166; BYTE $0xd1               // movdqa    xmm2, xmm9
	LONG $0xda730f66; BYTE $0x02               // psrldq    xmm2, 2
	LONG $0x6f0f4166; BYTE $0xe9               // movdqa    xmm5, xmm9
	LONG $0xeedb0f66                           // pand    xmm5, xmm6
	LONG $0xeaeb0f66                           // por    xmm5, xmm2
	LONG $0xd56f0f66                           // movdqa    xmm2, xmm5
	LONG $0xda730f66; BYTE $0x02               // psrldq    xmm2, 2
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xfedb0f66                           // pand    xmm7, xmm6
	LONG $0xfaeb0f66                           // por    xmm7, xmm2
	LONG $0x6f0f42f3; WORD $0x1154; BYTE $0xee // movdqu    xmm2, oword [rcx + r10 - 18]
	LONG $0x6f0f42f3; WORD $0x115c; BYTE $0xf0 // movdqu    xmm3, oword [rcx + r10 - 16]
	LONG $0x6f0f4466; BYTE $0xfb               // movdqa    xmm15, xmm3
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xdb730f66; BYTE $0x02               // psrldq    xmm3, 2
	LONG $0xdb0f4466; BYTE $0xfe               // pand    xmm15, xmm6
	LONG $0xeb0f4466; BYTE $0xfb               // por    xmm15, xmm3
	LONG $0x6f0f42f3; WORD $0x104c; BYTE $0xf0 // movdqu    xmm1, oword [rax + r10 - 16]
	LONG $0x6f0f4566; BYTE $0xec               // movdqa    xmm13, xmm12
	LONG $0xda0f4566; BYTE $0xea               // pminub    xmm13, xmm10
	LONG $0xde0f4566; BYTE $0xe2               // pmaxub    xmm12, xmm10
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xda0f4166; BYTE $0xde               // pminub    xmm3, xmm14
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0x6f0f4566; BYTE $0xf0               // movdqa    xmm14, xmm8
	LONG $0xda0f4466; BYTE $0xf4               // pminub    xmm14, xmm4
	LONG $0xde0f4166; BYTE $0xe0               // pmaxub    xmm4, xmm8
	LONG $0x6f0f4566; BYTE $0xc6               // movdqa    xmm8, xmm14
	LONG $0xda0f4466; BYTE $0xc3               // pminub    xmm8, xmm3
	LONG $0xde0f4466; BYTE $0xf3               // pmaxub    xmm14, xmm3
	LONG $0x6f0f4166; BYTE $0xd9               // movdqa    xmm3, xmm9
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0x6f0f4166; BYTE $0xf3               // movdqa    xmm6, xmm11
	LONG $0xf5da0f66                           // pminub    xmm6, xmm5
	LONG $0xde0f4166; BYTE $0xeb               // pmaxub    xmm5, xmm11
	LONG $0x6f0f4466; BYTE $0xce               // movdqa    xmm9, xmm6
	LONG $0xda0f4466; BYTE $0xcb               // pminub    xmm9, xmm3
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xf8da0f66                           // pminub    xmm7, xmm0
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x6f0f4566; BYTE $0xd7               // movdqa    xmm10, xmm15
	LONG $0xda0f4466; BYTE $0xd1               // pminub    xmm10, xmm1
	LONG $0xde0f4466; BYTE $0xf9               // pmaxub    xmm15, xmm1
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xde0f4166; BYTE $0xf9               // pmaxub    xmm7, xmm9
	LONG $0x6f0f4166; BYTE $0xc8               // movdqa    xmm1, xmm8
	LONG $0xcfda0f66                           // pminub    xmm1, xmm7
	LONG $0xde0f4166; BYTE $0xf8               // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xd8               // pminub    xmm11, xmm0
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc66f0f66                           // movdqa    xmm0, xmm6
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0x6f0f4166; BYTE $0xf6               // movdqa    xmm6, xmm14
	LONG $0xf3da0f66                           // pminub    xmm6, xmm3
	LONG $0xde0f4166; BYTE $0xde               // pmaxub    xmm3, xmm14
	LONG $0x6f0f4466; BYTE $0xf6               // movdqa    xmm14, xmm6
	LONG $0xda0f4466; BYTE $0xf0               // pminub    xmm14, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0x6f0f4466; BYTE $0xc5               // movdqa    xmm8, xmm5
	LONG $0xda0f4466; BYTE $0xc0               // pminub    xmm8, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0x6f0f4166; BYTE $0xc6               // movdqa    xmm0, xmm14
	LONG $0xda0f4166; BYTE $0xc7               // pminub    xmm0, xmm15
	LONG $0xde0f4566; BYTE $0xf7               // pmaxub    xmm14, xmm15
	LONG $0x6f0f4166; BYTE $0xe5               // movdqa    xmm4, xmm13
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xdd               // pmaxub    xmm3, xmm13
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xca               // pmaxub    xmm1, xmm10
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdfda0f66                           // pminub    xmm3, xmm7
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd0               // pminub    xmm2, xmm8
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe9de0f66                           // pmaxub    xmm5, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xcdda0f66                           // pminub    xmm1, xmm5
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xebda0f66                           // pminub    xmm5, xmm3
	LONG $0xd56f0f66                           // movdqa    xmm2, xmm5
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4166; BYTE $0xce               // pmaxub    xmm1, xmm14
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xcdda0f66                           // pminub    xmm1, xmm5
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0x7f0f43f3; WORD $0x114c; BYTE $0xf0 // movdqu    oword [r9 + r10 - 16], xmm1
	WORD $0xff49; BYTE $0xc4                   // inc    r12
	LONG $0x244c034c; BYTE $0x40               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	LONG $0x24243b4c                           // cmp    r12, qword [rsp]
	JNE  LBB2_9
	JMP  LBB2_62

LBB2_33:
	LONG $0x02f88349               // cmp    r8, 2
	JG   LBB2_42
	LONG $0x01f88349               // cmp    r8, 1
	JE   LBB2_50
	LONG $0x02f88349               // cmp    r8, 2
	JNE  LBB2_62
	LONG $0x243c8348; BYTE $0x00   // cmp    qword [rsp], 0
	JE   LBB2_62
	LONG $0x12148d4c               // lea    r10, [rdx + rdx]
	LONG $0x126c8d4c; BYTE $0xff   // lea    r13, [rdx + rdx - 1]
	LONG $0xf0e58349               // and    r13, -16
	LONG $0x24048b48               // mov    rax, qword [rsp]
	LONG $0xfe488d48               // lea    rcx, [rax - 2]
	LONG $0x244c8948; BYTE $0x18   // mov    qword [rsp + 24], rcx
	WORD $0xff48; BYTE $0xc8       // dec    rax
	LONG $0x24448948; BYTE $0x10   // mov    qword [rsp + 16], rax
	LONG $0x24448b48; BYTE $0x08   // mov    rax, qword [rsp + 8]
	LONG $0x14708d4c               // lea    r14, [rax + 20]
	WORD $0x3145; BYTE $0xe4       // xor    r12d, r12d
	LONG $0x00ffffb8; BYTE $0x00   // mov    eax, 65535
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0x447f0f66; WORD $0x2024 // movdqa    oword [rsp + 32], xmm0

LBB2_38:
	LONG $0x24448d49; BYTE $0xfe               // lea    rax, [r12 - 2]
	LONG $0xc6af0f48                           // imul    rax, rsi
	LONG $0x24440348; BYTE $0x08               // add    rax, qword [rsp + 8]
	LONG $0x301c8d48                           // lea    rbx, [rax + rsi]
	LONG $0x333c8d4c                           // lea    r15, [rbx + rsi]
	LONG $0x37148d49                           // lea    rdx, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	WORD $0x8948; BYTE $0xdf                   // mov    rdi, rbx
	LONG $0x6f0f44f3; WORD $0x1e3c             // movdqu    xmm15, oword [rsi + rbx]
	LONG $0x6f0f44f3; WORD $0x1e6c; BYTE $0x02 // movdqu    xmm13, oword [rsi + rbx + 2]
	LONG $0x6f0f44f3; WORD $0x1e64; BYTE $0x04 // movdqu    xmm12, oword [rsi + rbx + 4]
	LONG $0xdf440f49                           // cmove    rbx, r15
	LONG $0x02fc8349                           // cmp    r12, 2
	LONG $0xfb420f48                           // cmovb    rdi, rbx
	LONG $0xd8430f48                           // cmovae    rbx, rax
	LONG $0x24643b4c; BYTE $0x10               // cmp    r12, qword [rsp + 16]
	WORD $0x894c; BYTE $0xf8                   // mov    rax, r15
	LONG $0xc2420f48                           // cmovb    rax, rdx
	LONG $0x24643b4c; BYTE $0x18               // cmp    r12, qword [rsp + 24]
	WORD $0x8948; BYTE $0xc1                   // mov    rcx, rax
	LONG $0xca420f48                           // cmovb    rcx, rdx
	LONG $0x32148d48                           // lea    rdx, [rdx + rsi]
	LONG $0xc2420f48                           // cmovb    rax, rdx
	LONG $0x6f0f44f3; BYTE $0x03               // movdqu    xmm8, oword [rbx]
	LONG $0x376f0ff3                           // movdqu    xmm6, oword [rdi]
	LONG $0x5f6f0ff3; BYTE $0x02               // movdqu    xmm3, oword [rdi + 2]
	LONG $0x6f0f4466; BYTE $0xde               // movdqa    xmm11, xmm6
	LONG $0x6f0f4166; BYTE $0xef               // movdqa    xmm5, xmm15
	LONG $0xfd730f66; BYTE $0x02               // pslldq    xmm5, 2
	LONG $0x6f0f4166; BYTE $0xd7               // movdqa    xmm2, xmm15
	LONG $0x446f0f66; WORD $0x2024             // movdqa    xmm0, oword [rsp + 32]
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0xd5eb0f66                           // por    xmm2, xmm5
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0x6f0f4166; BYTE $0xe7               // movdqa    xmm4, xmm15
	LONG $0xde0f4566; BYTE $0xfd               // pmaxub    xmm15, xmm13
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xde0f4466; BYTE $0xfa               // pmaxub    xmm15, xmm2
	LONG $0xfa730f66; BYTE $0x02               // pslldq    xmm2, 2
	LONG $0xe8db0f66                           // pand    xmm5, xmm0
	LONG $0xeaeb0f66                           // por    xmm5, xmm2
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xcdda0f66                           // pminub    xmm1, xmm5
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xeede0f66                           // pmaxub    xmm5, xmm6
	LONG $0xfe730f66; BYTE $0x02               // pslldq    xmm6, 2
	LONG $0xdb0f4466; BYTE $0xd8               // pand    xmm11, xmm0
	LONG $0xeb0f4466; BYTE $0xde               // por    xmm11, xmm6
	LONG $0x316f0ff3                           // movdqu    xmm6, oword [rcx]
	LONG $0x6f0f44f3; WORD $0x0271             // movdqu    xmm14, oword [rcx + 2]
	LONG $0x6f0f4466; BYTE $0xd6               // movdqa    xmm10, xmm6
	LONG $0x730f4166; WORD $0x02fa             // pslldq    xmm10, 2
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xeb0f4166; BYTE $0xda               // por    xmm3, xmm10
	LONG $0x6f0f4566; BYTE $0xd0               // movdqa    xmm10, xmm8
	LONG $0xda0f4566; BYTE $0xd3               // pminub    xmm10, xmm11
	LONG $0xde0f4566; BYTE $0xd8               // pmaxub    xmm11, xmm8
	LONG $0x6f0f4466; BYTE $0xc2               // movdqa    xmm8, xmm2
	LONG $0xda0f4466; BYTE $0xc1               // pminub    xmm8, xmm1
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0x086f0ff3                           // movdqu    xmm1, oword [rax]
	LONG $0xda0f4166; BYTE $0xe5               // pminub    xmm4, xmm13
	LONG $0x6f0f4466; BYTE $0xef               // movdqa    xmm13, xmm7
	LONG $0xda0f4466; BYTE $0xec               // pminub    xmm13, xmm4
	LONG $0xfcde0f66                           // pmaxub    xmm7, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0x6f0f4166; BYTE $0xc4               // movdqa    xmm0, xmm12
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdc               // pmaxub    xmm3, xmm12
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xf4da0f66                           // pminub    xmm6, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0x6f0f4566; BYTE $0xe6               // movdqa    xmm12, xmm14
	LONG $0xda0f4466; BYTE $0xe1               // pminub    xmm12, xmm1
	LONG $0xde0f4466; BYTE $0xf1               // pmaxub    xmm14, xmm1
	LONG $0x6f0f4166; BYTE $0xe5               // movdqa    xmm4, xmm13
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0x6f0f4166; BYTE $0xc8               // movdqa    xmm1, xmm8
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xde0f4166; BYTE $0xf0               // pmaxub    xmm6, xmm8
	LONG $0x6f0f4466; BYTE $0xe9               // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xec               // pminub    xmm13, xmm4
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xf8da0f66                           // pminub    xmm7, xmm0
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0x6f0f4466; BYTE $0xc7               // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc4               // pminub    xmm8, xmm4
	LONG $0xfcde0f66                           // pmaxub    xmm7, xmm4
	LONG $0x6f0f4166; BYTE $0xe7               // movdqa    xmm4, xmm15
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xd56f0f66                           // movdqa    xmm2, xmm5
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0x6f0f4466; BYTE $0xfa               // movdqa    xmm15, xmm2
	LONG $0xda0f4466; BYTE $0xfc               // pminub    xmm15, xmm4
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0x6f0f4166; BYTE $0xe0               // movdqa    xmm4, xmm8
	LONG $0xda0f4166; BYTE $0xe6               // pminub    xmm4, xmm14
	LONG $0xde0f4566; BYTE $0xc6               // pmaxub    xmm8, xmm14
	LONG $0x6f0f4166; BYTE $0xea               // movdqa    xmm5, xmm10
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xdb               // pminub    xmm3, xmm11
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xde0f4166; BYTE $0xcc               // pmaxub    xmm1, xmm12
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xde0f4166; BYTE $0xcd               // pmaxub    xmm1, xmm13
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xefde0f66                           // pmaxub    xmm5, xmm7
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xe86f0f66                           // movdqa    xmm5, xmm0
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc5de0f66                           // pmaxub    xmm0, xmm5
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc0               // pminub    xmm0, xmm8
	LONG $0xde0f4166; BYTE $0xc8               // pmaxub    xmm1, xmm8
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0x7f0f41f3; BYTE $0x09               // movdqu    oword [r9], xmm1
	LONG $0x11fd8349                           // cmp    r13, 17
	JB   LBB2_41
	WORD $0x894c; BYTE $0xf2                   // mov    rdx, r14
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d

LBB2_40:
	LONG $0x6f0f46f3; WORD $0x0354; BYTE $0x10 // movdqu    xmm10, oword [rbx + r8 + 16]
	LONG $0x6f0f42f3; WORD $0x0744; BYTE $0x0e // movdqu    xmm0, oword [rdi + r8 + 14]
	LONG $0x6f0f42f3; WORD $0x077c; BYTE $0x10 // movdqu    xmm7, oword [rdi + r8 + 16]
	LONG $0x6f0f42f3; WORD $0x076c; BYTE $0x12 // movdqu    xmm5, oword [rdi + r8 + 18]
	LONG $0x726f0ff3; BYTE $0xf8               // movdqu    xmm6, oword [rdx - 8]
	LONG $0x5a6f0ff3; BYTE $0xfa               // movdqu    xmm3, oword [rdx - 6]
	LONG $0x4a6f0ff3; BYTE $0xfc               // movdqu    xmm1, oword [rdx - 4]
	LONG $0x626f0ff3; BYTE $0xfe               // movdqu    xmm4, oword [rdx - 2]
	LONG $0x6f0f44f3; BYTE $0x22               // movdqu    xmm12, oword [rdx]
	LONG $0x6f0f42f3; WORD $0x0154; BYTE $0x0e // movdqu    xmm2, oword [rcx + r8 + 14]
	LONG $0x6f0f46f3; WORD $0x017c; BYTE $0x10 // movdqu    xmm15, oword [rcx + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x016c; BYTE $0x12 // movdqu    xmm13, oword [rcx + r8 + 18]
	LONG $0x6f0f46f3; WORD $0x0044; BYTE $0x10 // movdqu    xmm8, oword [rax + r8 + 16]
	LONG $0x6f0f4566; BYTE $0xda               // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xd8               // pminub    xmm11, xmm0
	LONG $0xde0f4466; BYTE $0xd0               // pmaxub    xmm10, xmm0
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xeede0f66                           // pmaxub    xmm5, xmm6
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xf5da0f66                           // pminub    xmm6, xmm5
	LONG $0xefde0f66                           // pmaxub    xmm5, xmm7
	LONG $0x6f0f4466; BYTE $0xf6               // movdqa    xmm14, xmm6
	LONG $0xda0f4466; BYTE $0xf0               // pminub    xmm14, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xfcda0f66                           // pminub    xmm7, xmm4
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0x6f0f4466; BYTE $0xc8               // movdqa    xmm9, xmm0
	LONG $0xda0f4466; BYTE $0xcf               // pminub    xmm9, xmm7
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xde0f4166; BYTE $0xd7               // pmaxub    xmm2, xmm15
	LONG $0x6f0f4166; BYTE $0xe4               // movdqa    xmm4, xmm12
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xde0f4166; BYTE $0xd4               // pmaxub    xmm2, xmm12
	LONG $0x6f0f4466; BYTE $0xfc               // movdqa    xmm15, xmm4
	LONG $0xda0f4466; BYTE $0xff               // pminub    xmm15, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0x6f0f4566; BYTE $0xe5               // movdqa    xmm12, xmm13
	LONG $0xda0f4566; BYTE $0xe0               // pminub    xmm12, xmm8
	LONG $0xde0f4566; BYTE $0xe8               // pmaxub    xmm13, xmm8
	LONG $0x6f0f4166; BYTE $0xd9               // movdqa    xmm3, xmm9
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xde0f4566; BYTE $0xf9               // pmaxub    xmm15, xmm9
	LONG $0x6f0f4166; BYTE $0xfe               // movdqa    xmm7, xmm14
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xde0f4566; BYTE $0xfe               // pmaxub    xmm15, xmm14
	LONG $0x6f0f4466; BYTE $0xf7               // movdqa    xmm14, xmm7
	LONG $0xda0f4466; BYTE $0xf3               // pminub    xmm14, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc66f0f66                           // movdqa    xmm0, xmm6
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xf3da0f66                           // pminub    xmm6, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0x6f0f4466; BYTE $0xc1               // movdqa    xmm8, xmm1
	LONG $0xda0f4466; BYTE $0xc3               // pminub    xmm8, xmm3
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xda0f4166; BYTE $0xdd               // pminub    xmm3, xmm13
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0x6f0f4166; BYTE $0xeb               // movdqa    xmm5, xmm11
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xde0f4166; BYTE $0xe3               // pmaxub    xmm4, xmm11
	LONG $0xda0f4166; BYTE $0xd2               // pminub    xmm2, xmm10
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xfc               // pmaxub    xmm7, xmm12
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xfe               // pmaxub    xmm7, xmm14
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xda0f4166; BYTE $0xc7               // pminub    xmm0, xmm15
	LONG $0xde0f4166; BYTE $0xd7               // pmaxub    xmm2, xmm15
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xda0f4166; BYTE $0xd0               // pminub    xmm2, xmm8
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xdfde0f66                           // pmaxub    xmm3, xmm7
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0x7f0f43f3; WORD $0x0164; BYTE $0x10 // movdqu    oword [r9 + r8 + 16], xmm4
	LONG $0x10588d4d                           // lea    r11, [r8 + 16]
	LONG $0x20c08349                           // add    r8, 32
	LONG $0x10c28348                           // add    rdx, 16
	WORD $0x394d; BYTE $0xe8                   // cmp    r8, r13
	WORD $0x894d; BYTE $0xd8                   // mov    r8, r11
	JB   LBB2_40

LBB2_41:
	LONG $0x6f0f46f3; WORD $0x1364; BYTE $0xf0 // movdqu    xmm12, oword [rbx + r10 - 16]
	LONG $0x6f0f46f3; WORD $0x1754; BYTE $0xee // movdqu    xmm10, oword [rdi + r10 - 18]
	LONG $0x6f0f46f3; WORD $0x1744; BYTE $0xf0 // movdqu    xmm8, oword [rdi + r10 - 16]
	LONG $0x6f0f4166; BYTE $0xc8               // movdqa    xmm1, xmm8
	LONG $0xd9730f66; BYTE $0x02               // psrldq    xmm1, 2
	LONG $0x6f0f4166; BYTE $0xe0               // movdqa    xmm4, xmm8
	LONG $0x6f0f4466; WORD $0x104d             // movdqa    xmm9, oword 16[rbp] /* [rip + .LCPI2_1] */
	LONG $0xdb0f4166; BYTE $0xe1               // pand    xmm4, xmm9
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0x6f0f47f3; WORD $0x1774; BYTE $0xec // movdqu    xmm14, oword [r15 + r10 - 20]
	LONG $0x6f0f47f3; WORD $0x175c; BYTE $0xee // movdqu    xmm11, oword [r15 + r10 - 18]
	LONG $0x6f0f47f3; WORD $0x177c; BYTE $0xf0 // movdqu    xmm15, oword [r15 + r10 - 16]
	LONG $0x6f0f4166; BYTE $0xd7               // movdqa    xmm2, xmm15
	LONG $0xda730f66; BYTE $0x02               // psrldq    xmm2, 2
	LONG $0x6f0f4166; BYTE $0xef               // movdqa    xmm5, xmm15
	LONG $0xdb0f4166; BYTE $0xe9               // pand    xmm5, xmm9
	LONG $0xeaeb0f66                           // por    xmm5, xmm2
	LONG $0xd56f0f66                           // movdqa    xmm2, xmm5
	LONG $0xda730f66; BYTE $0x02               // psrldq    xmm2, 2
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0xdb0f4166; BYTE $0xf9               // pand    xmm7, xmm9
	LONG $0xfaeb0f66                           // por    xmm7, xmm2
	LONG $0x6f0f42f3; WORD $0x1154; BYTE $0xee // movdqu    xmm2, oword [rcx + r10 - 18]
	LONG $0x6f0f42f3; WORD $0x115c; BYTE $0xf0 // movdqu    xmm3, oword [rcx + r10 - 16]
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xdb730f66; BYTE $0x02               // psrldq    xmm3, 2
	LONG $0xdb0f4166; BYTE $0xf1               // pand    xmm6, xmm9
	LONG $0xf3eb0f66                           // por    xmm6, xmm3
	LONG $0x6f0f42f3; WORD $0x104c; BYTE $0xf0 // movdqu    xmm1, oword [rax + r10 - 16]
	LONG $0x6f0f4566; BYTE $0xec               // movdqa    xmm13, xmm12
	LONG $0xda0f4566; BYTE $0xea               // pminub    xmm13, xmm10
	LONG $0xde0f4566; BYTE $0xe2               // pmaxub    xmm12, xmm10
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xda0f4166; BYTE $0xde               // pminub    xmm3, xmm14
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0x6f0f4566; BYTE $0xf0               // movdqa    xmm14, xmm8
	LONG $0xda0f4466; BYTE $0xf4               // pminub    xmm14, xmm4
	LONG $0xde0f4166; BYTE $0xe0               // pmaxub    xmm4, xmm8
	LONG $0x6f0f4566; BYTE $0xc6               // movdqa    xmm8, xmm14
	LONG $0xda0f4466; BYTE $0xc3               // pminub    xmm8, xmm3
	LONG $0xde0f4466; BYTE $0xf3               // pmaxub    xmm14, xmm3
	LONG $0x6f0f4166; BYTE $0xdf               // movdqa    xmm3, xmm15
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0xde0f4166; BYTE $0xef               // pmaxub    xmm5, xmm15
	LONG $0x6f0f4566; BYTE $0xfb               // movdqa    xmm15, xmm11
	LONG $0xda0f4466; BYTE $0xfd               // pminub    xmm15, xmm5
	LONG $0xde0f4166; BYTE $0xeb               // pmaxub    xmm5, xmm11
	LONG $0x6f0f4566; BYTE $0xdf               // movdqa    xmm11, xmm15
	LONG $0xda0f4466; BYTE $0xdb               // pminub    xmm11, xmm3
	LONG $0xde0f4466; BYTE $0xfb               // pmaxub    xmm15, xmm3
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xf8da0f66                           // pminub    xmm7, xmm0
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x6f0f4466; BYTE $0xd6               // movdqa    xmm10, xmm6
	LONG $0xda0f4466; BYTE $0xd1               // pminub    xmm10, xmm1
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xde0f4166; BYTE $0xfb               // pmaxub    xmm7, xmm11
	LONG $0x6f0f4166; BYTE $0xc8               // movdqa    xmm1, xmm8
	LONG $0xcfda0f66                           // pminub    xmm1, xmm7
	LONG $0xde0f4166; BYTE $0xf8               // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xd8               // pminub    xmm11, xmm0
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc7               // movdqa    xmm0, xmm15
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0x6f0f4566; BYTE $0xc6               // movdqa    xmm8, xmm14
	LONG $0xda0f4466; BYTE $0xc3               // pminub    xmm8, xmm3
	LONG $0xde0f4166; BYTE $0xde               // pmaxub    xmm3, xmm14
	LONG $0x6f0f4566; BYTE $0xf0               // movdqa    xmm14, xmm8
	LONG $0xda0f4466; BYTE $0xf0               // pminub    xmm14, xmm0
	LONG $0xde0f4466; BYTE $0xc0               // pmaxub    xmm8, xmm0
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0x6f0f4166; BYTE $0xc6               // movdqa    xmm0, xmm14
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xde0f4466; BYTE $0xf6               // pmaxub    xmm14, xmm6
	LONG $0x6f0f4166; BYTE $0xf5               // movdqa    xmm6, xmm13
	LONG $0xf3da0f66                           // pminub    xmm6, xmm3
	LONG $0xde0f4166; BYTE $0xdd               // pmaxub    xmm3, xmm13
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0xd5da0f66                           // pminub    xmm2, xmm5
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xca               // pmaxub    xmm1, xmm10
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0xc66f0f66                           // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc0               // pminub    xmm0, xmm8
	LONG $0xde0f4166; BYTE $0xf0               // pmaxub    xmm6, xmm8
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdfda0f66                           // pminub    xmm3, xmm7
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xee6f0f66                           // movdqa    xmm5, xmm6
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xd6de0f66                           // pmaxub    xmm2, xmm6
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe9de0f66                           // pmaxub    xmm5, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xcdda0f66                           // pminub    xmm1, xmm5
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xebda0f66                           // pminub    xmm5, xmm3
	LONG $0xd56f0f66                           // movdqa    xmm2, xmm5
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4166; BYTE $0xce               // pmaxub    xmm1, xmm14
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xcdda0f66                           // pminub    xmm1, xmm5
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0x7f0f43f3; WORD $0x114c; BYTE $0xf0 // movdqu    oword [r9 + r10 - 16], xmm1
	WORD $0xff49; BYTE $0xc4                   // inc    r12
	LONG $0x244c034c; BYTE $0x40               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	LONG $0x24243b4c                           // cmp    r12, qword [rsp]
	JNE  LBB2_38
	JMP  LBB2_62

LBB2_42:
	LONG $0x03f88349                   // cmp    r8, 3
	JE   LBB2_56
	LONG $0x04f88349                   // cmp    r8, 4
	JNE  LBB2_62
	LONG $0x243c8348; BYTE $0x00       // cmp    qword [rsp], 0
	JE   LBB2_62
	LONG $0x95248d4c; LONG $0xffffffff // lea    r12, [4*rdx - 1]
	LONG $0x02e2c148                   // shl    rdx, 2
	LONG $0xf0e48349                   // and    r12, -16
	LONG $0x24048b48                   // mov    rax, qword [rsp]
	LONG $0xfe488d48                   // lea    rcx, [rax - 2]
	LONG $0x244c8948; BYTE $0x18       // mov    qword [rsp + 24], rcx
	WORD $0xff48; BYTE $0xc8           // dec    rax
	LONG $0x24448948; BYTE $0x10       // mov    qword [rsp + 16], rax
	LONG $0x24448b48; BYTE $0x08       // mov    rax, qword [rsp + 8]
	LONG $0x18708d4c                   // lea    r14, [rax + 24]
	WORD $0x3145; BYTE $0xd2           // xor    r10d, r10d

LBB2_46:
	LONG $0xfe4a8d49                           // lea    rcx, [r10 - 2]
	LONG $0xceaf0f48                           // imul    rcx, rsi
	LONG $0x244c0348; BYTE $0x08               // add    rcx, qword [rsp + 8]
	LONG $0x31048d48                           // lea    rax, [rcx + rsi]
	LONG $0x303c8d4c                           // lea    r15, [rax + rsi]
	LONG $0x37048d4d                           // lea    r8, [r15 + rsi]
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	WORD $0x8948; BYTE $0xc7                   // mov    rdi, rax
	LONG $0x6f0f44f3; WORD $0x0634             // movdqu    xmm14, oword [rsi + rax]
	LONG $0x6f0f44f3; WORD $0x0664; BYTE $0x04 // movdqu    xmm12, oword [rsi + rax + 4]
	LONG $0x6f0f44f3; WORD $0x065c; BYTE $0x08 // movdqu    xmm11, oword [rsi + rax + 8]
	LONG $0xc7440f49                           // cmove    rax, r15
	LONG $0x02fa8349                           // cmp    r10, 2
	LONG $0xf8420f48                           // cmovb    rdi, rax
	LONG $0xc1430f48                           // cmovae    rax, rcx
	LONG $0x24543b4c; BYTE $0x10               // cmp    r10, qword [rsp + 16]
	WORD $0x894d; BYTE $0xfd                   // mov    r13, r15
	LONG $0xe8420f4d                           // cmovb    r13, r8
	LONG $0x24543b4c; BYTE $0x18               // cmp    r10, qword [rsp + 24]
	WORD $0x894c; BYTE $0xeb                   // mov    rbx, r13
	LONG $0xd8420f49                           // cmovb    rbx, r8
	LONG $0x300c8d49                           // lea    rcx, [r8 + rsi]
	LONG $0xe9420f4c                           // cmovb    r13, rcx
	LONG $0x6f0f44f3; BYTE $0x38               // movdqu    xmm15, oword [rax]
	WORD $0x100f; BYTE $0x37                   // movups    xmm6, oword [rdi]
	LONG $0x576f0ff3; BYTE $0x04               // movdqu    xmm2, oword [rdi + 4]
	LONG $0xd2570f45                           // xorps    xmm10, xmm10
	LONG $0x100f44f3; BYTE $0xd6               // movss    xmm10, xmm6
	LONG $0x6f0f4166; BYTE $0xe6               // movdqa    xmm4, xmm14
	LONG $0xfc730f66; BYTE $0x04               // pslldq    xmm4, 4
	WORD $0x570f; BYTE $0xc9                   // xorps    xmm1, xmm1
	LONG $0x100f41f3; BYTE $0xce               // movss    xmm1, xmm14
	WORD $0x560f; BYTE $0xcc                   // orps    xmm1, xmm4
	WORD $0x570f; BYTE $0xe4                   // xorps    xmm4, xmm4
	LONG $0xe1100ff3                           // movss    xmm4, xmm1
	LONG $0x6f0f4166; BYTE $0xde               // movdqa    xmm3, xmm14
	LONG $0xde0f4566; BYTE $0xf4               // pmaxub    xmm14, xmm12
	WORD $0x280f; BYTE $0xf9                   // movaps    xmm7, xmm1
	LONG $0xda0f4166; BYTE $0xfe               // pminub    xmm7, xmm14
	LONG $0xde0f4466; BYTE $0xf1               // pmaxub    xmm14, xmm1
	LONG $0xf9730f66; BYTE $0x04               // pslldq    xmm1, 4
	WORD $0x560f; BYTE $0xe1                   // orps    xmm4, xmm1
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	WORD $0x280f; BYTE $0xce                   // movaps    xmm1, xmm6
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0xfe730f66; BYTE $0x04               // pslldq    xmm6, 4
	LONG $0xd6560f44                           // orps    xmm10, xmm6
	LONG $0x036f0ff3                           // movdqu    xmm0, oword [rbx]
	LONG $0x6f0f44f3; WORD $0x046b             // movdqu    xmm13, oword [rbx + 4]
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xfe730f66; BYTE $0x04               // pslldq    xmm6, 4
	LONG $0xd2ef0f66                           // pxor    xmm2, xmm2
	LONG $0xd0100ff3                           // movss    xmm2, xmm0
	WORD $0x560f; BYTE $0xd6                   // orps    xmm2, xmm6
	LONG $0x6f0f4566; BYTE $0xcf               // movdqa    xmm9, xmm15
	LONG $0xda0f4566; BYTE $0xca               // pminub    xmm9, xmm10
	LONG $0xde0f4566; BYTE $0xd7               // pmaxub    xmm10, xmm15
	LONG $0x6f0f4466; BYTE $0xf9               // movdqa    xmm15, xmm1
	LONG $0xda0f4466; BYTE $0xfd               // pminub    xmm15, xmm5
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0x6f0f41f3; WORD $0x006d             // movdqu    xmm5, oword [r13]
	LONG $0xda0f4166; BYTE $0xdc               // pminub    xmm3, xmm12
	LONG $0x6f0f4466; BYTE $0xe7               // movdqa    xmm12, xmm7
	LONG $0xda0f4466; BYTE $0xe3               // pminub    xmm12, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	WORD $0x280f; BYTE $0xda                   // movaps    xmm3, xmm2
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xde0f4166; BYTE $0xd3               // pmaxub    xmm2, xmm11
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xf3da0f66                           // pminub    xmm6, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0x6f0f4566; BYTE $0xdd               // movdqa    xmm11, xmm13
	LONG $0xda0f4466; BYTE $0xdd               // pminub    xmm11, xmm5
	LONG $0xde0f4466; BYTE $0xed               // pmaxub    xmm13, xmm5
	LONG $0x6f0f4166; BYTE $0xdc               // movdqa    xmm3, xmm12
	LONG $0xdeda0f66                           // pminub    xmm3, xmm6
	LONG $0xde0f4166; BYTE $0xf4               // pmaxub    xmm6, xmm12
	LONG $0x6f0f4166; BYTE $0xef               // movdqa    xmm5, xmm15
	LONG $0xeeda0f66                           // pminub    xmm5, xmm6
	LONG $0xde0f4166; BYTE $0xf7               // pmaxub    xmm6, xmm15
	LONG $0x6f0f4466; BYTE $0xe5               // movdqa    xmm12, xmm5
	LONG $0xda0f4466; BYTE $0xe3               // pminub    xmm12, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xf8da0f66                           // pminub    xmm7, xmm0
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0x6f0f4466; BYTE $0xff               // movdqa    xmm15, xmm7
	LONG $0xda0f4466; BYTE $0xfb               // pminub    xmm15, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0x6f0f4166; BYTE $0xde               // movdqa    xmm3, xmm14
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xd6               // pmaxub    xmm2, xmm14
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0x6f0f4466; BYTE $0xf1               // movdqa    xmm14, xmm1
	LONG $0xda0f4466; BYTE $0xf3               // pminub    xmm14, xmm3
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0x6f0f4166; BYTE $0xdf               // movdqa    xmm3, xmm15
	LONG $0xda0f4166; BYTE $0xdd               // pminub    xmm3, xmm13
	LONG $0xde0f4566; BYTE $0xfd               // pmaxub    xmm15, xmm13
	LONG $0x6f0f4166; BYTE $0xe1               // movdqa    xmm4, xmm9
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0xda0f4166; BYTE $0xd2               // pminub    xmm2, xmm10
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xeb               // pmaxub    xmm5, xmm11
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xde0f4166; BYTE $0xec               // pmaxub    xmm5, xmm12
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xd6de0f66                           // pmaxub    xmm2, xmm6
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd6               // pminub    xmm2, xmm14
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xda0f4166; BYTE $0xc7               // pminub    xmm0, xmm15
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x7f0f41f3; BYTE $0x21               // movdqu    oword [r9], xmm4
	LONG $0x11fc8349                           // cmp    r12, 17
	JB   LBB2_49
	WORD $0x894c; BYTE $0xf1                   // mov    rcx, r14
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d

LBB2_48:
	LONG $0x6f0f46f3; WORD $0x004c; BYTE $0x10 // movdqu    xmm9, oword [rax + r8 + 16]
	LONG $0x6f0f42f3; WORD $0x0744; BYTE $0x0c // movdqu    xmm0, oword [rdi + r8 + 12]
	LONG $0x6f0f42f3; WORD $0x0774; BYTE $0x10 // movdqu    xmm6, oword [rdi + r8 + 16]
	LONG $0x6f0f42f3; WORD $0x0764; BYTE $0x14 // movdqu    xmm4, oword [rdi + r8 + 20]
	LONG $0x696f0ff3; BYTE $0xf0               // movdqu    xmm5, oword [rcx - 16]
	LONG $0x516f0ff3; BYTE $0xf4               // movdqu    xmm2, oword [rcx - 12]
	LONG $0x796f0ff3; BYTE $0xf8               // movdqu    xmm7, oword [rcx - 8]
	LONG $0x596f0ff3; BYTE $0xfc               // movdqu    xmm3, oword [rcx - 4]
	LONG $0x6f0f44f3; BYTE $0x19               // movdqu    xmm11, oword [rcx]
	LONG $0x6f0f42f3; WORD $0x034c; BYTE $0x0c // movdqu    xmm1, oword [rbx + r8 + 12]
	LONG $0x6f0f46f3; WORD $0x037c; BYTE $0x10 // movdqu    xmm15, oword [rbx + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x0364; BYTE $0x14 // movdqu    xmm12, oword [rbx + r8 + 20]
	LONG $0x6f0f47f3; WORD $0x0574; BYTE $0x10 // movdqu    xmm14, oword [r13 + r8 + 16]
	LONG $0x6f0f4566; BYTE $0xd1               // movdqa    xmm10, xmm9
	LONG $0xda0f4466; BYTE $0xd0               // pminub    xmm10, xmm0
	LONG $0xde0f4466; BYTE $0xc8               // pmaxub    xmm9, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xee6f0f66                           // movdqa    xmm5, xmm6
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0x6f0f4466; BYTE $0xed               // movdqa    xmm13, xmm5
	LONG $0xda0f4466; BYTE $0xe8               // pminub    xmm13, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xf3da0f66                           // pminub    xmm6, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xfade0f66                           // pmaxub    xmm7, xmm2
	LONG $0x6f0f4466; BYTE $0xc0               // movdqa    xmm8, xmm0
	LONG $0xda0f4466; BYTE $0xc6               // pminub    xmm8, xmm6
	LONG $0xc6de0f66                           // pmaxub    xmm0, xmm6
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xda0f4166; BYTE $0xf7               // pminub    xmm6, xmm15
	LONG $0xde0f4166; BYTE $0xcf               // pmaxub    xmm1, xmm15
	LONG $0x6f0f4166; BYTE $0xdb               // movdqa    xmm3, xmm11
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0x6f0f4466; BYTE $0xfb               // movdqa    xmm15, xmm3
	LONG $0xda0f4466; BYTE $0xfe               // pminub    xmm15, xmm6
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0x6f0f4566; BYTE $0xdc               // movdqa    xmm11, xmm12
	LONG $0xda0f4566; BYTE $0xde               // pminub    xmm11, xmm14
	LONG $0xde0f4566; BYTE $0xe6               // pmaxub    xmm12, xmm14
	LONG $0x6f0f4166; BYTE $0xd0               // movdqa    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd7               // pminub    xmm2, xmm15
	LONG $0xde0f4566; BYTE $0xf8               // pmaxub    xmm15, xmm8
	LONG $0x6f0f4166; BYTE $0xf5               // movdqa    xmm6, xmm13
	LONG $0xda0f4166; BYTE $0xf7               // pminub    xmm6, xmm15
	LONG $0xde0f4566; BYTE $0xfd               // pmaxub    xmm15, xmm13
	LONG $0x6f0f4466; BYTE $0xee               // movdqa    xmm13, xmm6
	LONG $0xda0f4466; BYTE $0xea               // pminub    xmm13, xmm2
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xe86f0f66                           // movdqa    xmm5, xmm0
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xd76f0f66                           // movdqa    xmm2, xmm7
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xcfde0f66                           // pmaxub    xmm1, xmm7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xf9da0f66                           // pminub    xmm7, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0x6f0f4466; BYTE $0xc7               // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc2               // pminub    xmm8, xmm2
	LONG $0xfade0f66                           // pmaxub    xmm7, xmm2
	LONG $0xd56f0f66                           // movdqa    xmm2, xmm5
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0xde0f4166; BYTE $0xec               // pmaxub    xmm5, xmm12
	LONG $0x6f0f4166; BYTE $0xe2               // movdqa    xmm4, xmm10
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xda               // pmaxub    xmm3, xmm10
	LONG $0xda0f4166; BYTE $0xc9               // pminub    xmm1, xmm9
	LONG $0xcfda0f66                           // pminub    xmm1, xmm7
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xf3               // pmaxub    xmm6, xmm11
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc7               // pminub    xmm0, xmm15
	LONG $0xde0f4166; BYTE $0xcf               // pmaxub    xmm1, xmm15
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xcdda0f66                           // pminub    xmm1, xmm5
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0x7f0f43f3; WORD $0x0164; BYTE $0x10 // movdqu    oword [r9 + r8 + 16], xmm4
	LONG $0x10588d4d                           // lea    r11, [r8 + 16]
	LONG $0x20c08349                           // add    r8, 32
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394d; BYTE $0xe0                   // cmp    r8, r12
	WORD $0x894d; BYTE $0xd8                   // mov    r8, r11
	JB   LBB2_48

LBB2_49:
	LONG $0x6f0f44f3; WORD $0x105c; BYTE $0xf0 // movdqu    xmm11, oword [rax + rdx - 16]
	LONG $0x6f0f44f3; WORD $0x174c; BYTE $0xec // movdqu    xmm9, oword [rdi + rdx - 20]
	LONG $0x6f0f44f3; WORD $0x1774; BYTE $0xf0 // movdqu    xmm14, oword [rdi + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xce               // movdqa    xmm1, xmm14
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0x6f0f4166; BYTE $0xde               // movdqa    xmm3, xmm14
	LONG $0x756f0f66; BYTE $0x00               // movdqa    xmm6, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xdedb0f66                           // pand    xmm3, xmm6
	LONG $0xd9eb0f66                           // por    xmm3, xmm1
	LONG $0x6f0f45f3; WORD $0x176c; BYTE $0xe8 // movdqu    xmm13, oword [r15 + rdx - 24]
	LONG $0x6f0f45f3; WORD $0x1754; BYTE $0xec // movdqu    xmm10, oword [r15 + rdx - 20]
	LONG $0x6f0f45f3; WORD $0x177c; BYTE $0xf0 // movdqu    xmm15, oword [r15 + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xcf               // movdqa    xmm1, xmm15
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0x6f0f4166; BYTE $0xe7               // movdqa    xmm4, xmm15
	LONG $0xe6db0f66                           // pand    xmm4, xmm6
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xfedb0f66                           // pand    xmm7, xmm6
	LONG $0xf9eb0f66                           // por    xmm7, xmm1
	LONG $0x4c6f0ff3; WORD $0xec13             // movdqu    xmm1, oword [rbx + rdx - 20]
	LONG $0x546f0ff3; WORD $0xf013             // movdqu    xmm2, oword [rbx + rdx - 16]
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xda730f66; BYTE $0x04               // psrldq    xmm2, 4
	LONG $0xeedb0f66                           // pand    xmm5, xmm6
	LONG $0xeaeb0f66                           // por    xmm5, xmm2
	LONG $0x6f0f41f3; WORD $0x1574; BYTE $0xf0 // movdqu    xmm6, oword [r13 + rdx - 16]
	LONG $0x6f0f4566; BYTE $0xe3               // movdqa    xmm12, xmm11
	LONG $0xda0f4566; BYTE $0xe1               // pminub    xmm12, xmm9
	LONG $0xde0f4566; BYTE $0xd9               // pmaxub    xmm11, xmm9
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xda0f4166; BYTE $0xd5               // pminub    xmm2, xmm13
	LONG $0xde0f4166; BYTE $0xdd               // pmaxub    xmm3, xmm13
	LONG $0x6f0f4566; BYTE $0xee               // movdqa    xmm13, xmm14
	LONG $0xda0f4466; BYTE $0xeb               // pminub    xmm13, xmm3
	LONG $0xde0f4166; BYTE $0xde               // pmaxub    xmm3, xmm14
	LONG $0x6f0f4566; BYTE $0xf5               // movdqa    xmm14, xmm13
	LONG $0xda0f4466; BYTE $0xf2               // pminub    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xea               // pmaxub    xmm13, xmm2
	LONG $0x6f0f4166; BYTE $0xd7               // movdqa    xmm2, xmm15
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0x6f0f4566; BYTE $0xfa               // movdqa    xmm15, xmm10
	LONG $0xda0f4466; BYTE $0xfc               // pminub    xmm15, xmm4
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0x6f0f4566; BYTE $0xd7               // movdqa    xmm10, xmm15
	LONG $0xda0f4466; BYTE $0xd2               // pminub    xmm10, xmm2
	LONG $0xde0f4466; BYTE $0xfa               // pmaxub    xmm15, xmm2
	LONG $0xd76f0f66                           // movdqa    xmm2, xmm7
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xcfde0f66                           // pmaxub    xmm1, xmm7
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xf8da0f66                           // pminub    xmm7, xmm0
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0x6f0f4466; BYTE $0xcd               // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xce               // pminub    xmm9, xmm6
	LONG $0xeede0f66                           // pmaxub    xmm5, xmm6
	LONG $0x6f0f4166; BYTE $0xc2               // movdqa    xmm0, xmm10
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xde0f4166; BYTE $0xfa               // pmaxub    xmm7, xmm10
	LONG $0x6f0f4166; BYTE $0xf6               // movdqa    xmm6, xmm14
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xfe               // pmaxub    xmm7, xmm14
	LONG $0x6f0f4466; BYTE $0xd6               // movdqa    xmm10, xmm6
	LONG $0xda0f4466; BYTE $0xd0               // pminub    xmm10, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0x6f0f4166; BYTE $0xc7               // movdqa    xmm0, xmm15
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xde0f4166; BYTE $0xd7               // pmaxub    xmm2, xmm15
	LONG $0x6f0f4566; BYTE $0xf5               // movdqa    xmm14, xmm13
	LONG $0xda0f4466; BYTE $0xf2               // pminub    xmm14, xmm2
	LONG $0xde0f4166; BYTE $0xd5               // pmaxub    xmm2, xmm13
	LONG $0x6f0f4566; BYTE $0xee               // movdqa    xmm13, xmm14
	LONG $0xda0f4466; BYTE $0xe8               // pminub    xmm13, xmm0
	LONG $0xde0f4466; BYTE $0xf0               // pmaxub    xmm14, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc5               // movdqa    xmm0, xmm13
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xde0f4466; BYTE $0xed               // pmaxub    xmm13, xmm5
	LONG $0x6f0f4166; BYTE $0xec               // movdqa    xmm5, xmm12
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xde0f4166; BYTE $0xd4               // pmaxub    xmm2, xmm12
	LONG $0xda0f4166; BYTE $0xcb               // pminub    xmm1, xmm11
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xde0f4166; BYTE $0xf1               // pmaxub    xmm6, xmm9
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xde0f4166; BYTE $0xf2               // pmaxub    xmm6, xmm10
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4166; BYTE $0xee               // pmaxub    xmm5, xmm14
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd7da0f66                           // pminub    xmm2, xmm7
	LONG $0xcfde0f66                           // pmaxub    xmm1, xmm7
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xda0f4166; BYTE $0xc5               // pminub    xmm0, xmm13
	LONG $0xde0f4166; BYTE $0xdd               // pmaxub    xmm3, xmm13
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x7f0f41f3; WORD $0x115c; BYTE $0xf0 // movdqu    oword [r9 + rdx - 16], xmm3
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	LONG $0x244c034c; BYTE $0x40               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	LONG $0x24143b4c                           // cmp    r10, qword [rsp]
	JNE  LBB2_46
	JMP  LBB2_62

LBB2_50:
	LONG $0x243c8348; BYTE $0x00 // cmp    qword [rsp], 0
	JE   LBB2_62
	LONG $0xff6a8d4c             // lea    r13, [rdx - 1]
	LONG $0xf0e58349             // and    r13, -16
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0xfe488d48             // lea    rcx, [rax - 2]
	LONG $0x244c8948; BYTE $0x18 // mov    qword [rsp + 24], rcx
	WORD $0xff48; BYTE $0xc8     // dec    rax
	LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x12708d4c             // lea    r14, [rax + 18]
	WORD $0x3145; BYTE $0xff     // xor    r15d, r15d
	LONG $0xef0f4566; BYTE $0xc0 // pxor    xmm8, xmm8

LBB2_52:
	LONG $0xfe478d49                           // lea    rax, [r15 - 2]
	LONG $0xc6af0f48                           // imul    rax, rsi
	LONG $0x24440348; BYTE $0x08               // add    rax, qword [rsp + 8]
	LONG $0x30048d4c                           // lea    r8, [rax + rsi]
	LONG $0x30248d4d                           // lea    r12, [r8 + rsi]
	LONG $0x340c8d49                           // lea    rcx, [r12 + rsi]
	WORD $0x854d; BYTE $0xff                   // test    r15, r15
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0x6f0f46f3; WORD $0x0624             // movdqu    xmm12, oword [rsi + r8]
	LONG $0x6f0f46f3; WORD $0x0654; BYTE $0x01 // movdqu    xmm10, oword [rsi + r8 + 1]
	LONG $0x6f0f46f3; WORD $0x064c; BYTE $0x02 // movdqu    xmm9, oword [rsi + r8 + 2]
	LONG $0xc4440f4d                           // cmove    r8, r12
	LONG $0x02ff8349                           // cmp    r15, 2
	LONG $0xd0420f4d                           // cmovb    r10, r8
	LONG $0xc0430f4c                           // cmovae    r8, rax
	LONG $0x247c3b4c; BYTE $0x10               // cmp    r15, qword [rsp + 16]
	WORD $0x894c; BYTE $0xe0                   // mov    rax, r12
	LONG $0xc1420f48                           // cmovb    rax, rcx
	LONG $0x247c3b4c; BYTE $0x18               // cmp    r15, qword [rsp + 24]
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	LONG $0xd9420f48                           // cmovb    rbx, rcx
	LONG $0x310c8d48                           // lea    rcx, [rcx + rsi]
	LONG $0xc1420f48                           // cmovb    rax, rcx
	LONG $0x6f0f45f3; BYTE $0x18               // movdqu    xmm11, oword [r8]
	LONG $0x6f0f41f3; BYTE $0x2a               // movdqu    xmm5, oword [r10]
	LONG $0x6f0f41f3; WORD $0x014a             // movdqu    xmm1, oword [r10 + 1]
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0x6f0f4166; BYTE $0xc4               // movdqa    xmm0, xmm12
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd0700f66; BYTE $0x27               // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e               // psrldq    xmm0, 14
	LONG $0x6f0f4166; BYTE $0xdc               // movdqa    xmm3, xmm12
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0xfb730f66; BYTE $0x02               // pslldq    xmm3, 2
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0xc2700ff2; BYTE $0xec               // pshuflw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90               // pshuflw    xmm0, xmm0, 144
	LONG $0xd0700ff3; BYTE $0x93               // pshufhw    xmm2, xmm0, 147
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0x6f0f4166; BYTE $0xdc               // movdqa    xmm3, xmm12
	LONG $0xde0f4566; BYTE $0xe2               // pmaxub    xmm12, xmm10
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xda0f4166; BYTE $0xc4               // pminub    xmm0, xmm12
	LONG $0xde0f4466; BYTE $0xe2               // pmaxub    xmm12, xmm2
	LONG $0x600f4166; BYTE $0xd0               // punpcklbw    xmm2, xmm8
	LONG $0xf2700f66; BYTE $0x27               // pshufd    xmm6, xmm2, 39
	LONG $0xda730f66; BYTE $0x0e               // psrldq    xmm2, 14
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0xff730f66; BYTE $0x02               // pslldq    xmm7, 2
	LONG $0xfaeb0f66                           // por    xmm7, xmm2
	LONG $0xd6700ff2; BYTE $0xec               // pshuflw    xmm2, xmm6, 236
	LONG $0xd2700f66; BYTE $0x27               // pshufd    xmm2, xmm2, 39
	LONG $0xd2700ff2; BYTE $0x90               // pshuflw    xmm2, xmm2, 144
	LONG $0xf2700ff3; BYTE $0x93               // pshufhw    xmm6, xmm2, 147
	LONG $0xf7670f66                           // packuswb    xmm6, xmm7
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xf5de0f66                           // pmaxub    xmm6, xmm5
	LONG $0x600f4166; BYTE $0xe8               // punpcklbw    xmm5, xmm8
	LONG $0xfd700f66; BYTE $0x27               // pshufd    xmm7, xmm5, 39
	LONG $0xdd730f66; BYTE $0x0e               // psrldq    xmm5, 14
	LONG $0x680f4166; BYTE $0xe0               // punpckhbw    xmm4, xmm8
	LONG $0xfc730f66; BYTE $0x02               // pslldq    xmm4, 2
	LONG $0xe5eb0f66                           // por    xmm4, xmm5
	LONG $0xef700ff2; BYTE $0xec               // pshuflw    xmm5, xmm7, 236
	LONG $0xed700f66; BYTE $0x27               // pshufd    xmm5, xmm5, 39
	LONG $0xed700ff2; BYTE $0x90               // pshuflw    xmm5, xmm5, 144
	LONG $0x700f44f3; WORD $0x93f5             // pshufhw    xmm14, xmm5, 147
	LONG $0x670f4466; BYTE $0xf4               // packuswb    xmm14, xmm4
	LONG $0x2b6f0ff3                           // movdqu    xmm5, oword [rbx]
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0x600f4166; BYTE $0xe0               // punpcklbw    xmm4, xmm8
	LONG $0x700f4466; WORD $0x27ec             // pshufd    xmm13, xmm4, 39
	LONG $0xdc730f66; BYTE $0x0e               // psrldq    xmm4, 14
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0xff730f66; BYTE $0x02               // pslldq    xmm7, 2
	LONG $0xfceb0f66                           // por    xmm7, xmm4
	LONG $0x6f0f44f3; WORD $0x017b             // movdqu    xmm15, oword [rbx + 1]
	LONG $0x700f41f2; WORD $0xece5             // pshuflw    xmm4, xmm13, 236
	LONG $0xe4700f66; BYTE $0x27               // pshufd    xmm4, xmm4, 39
	LONG $0xe4700ff2; BYTE $0x90               // pshuflw    xmm4, xmm4, 144
	LONG $0xe4700ff3; BYTE $0x93               // pshufhw    xmm4, xmm4, 147
	LONG $0xe7670f66                           // packuswb    xmm4, xmm7
	LONG $0x6f0f4566; BYTE $0xeb               // movdqa    xmm13, xmm11
	LONG $0xda0f4566; BYTE $0xee               // pminub    xmm13, xmm14
	LONG $0xde0f4566; BYTE $0xf3               // pmaxub    xmm14, xmm11
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xda               // pminub    xmm11, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0xda0f4166; BYTE $0xda               // pminub    xmm3, xmm10
	LONG $0x6f0f4466; BYTE $0xd0               // movdqa    xmm10, xmm0
	LONG $0xda0f4466; BYTE $0xd3               // pminub    xmm10, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0x6f0f4466; BYTE $0xc4               // movdqa    xmm8, xmm4
	LONG $0xda0f4466; BYTE $0xc5               // pminub    xmm8, xmm5
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0x6f0f4166; BYTE $0xf9               // movdqa    xmm7, xmm9
	LONG $0xfcda0f66                           // pminub    xmm7, xmm4
	LONG $0xde0f4166; BYTE $0xe1               // pmaxub    xmm4, xmm9
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xd8               // pminub    xmm3, xmm8
	LONG $0xde0f4166; BYTE $0xf8               // pmaxub    xmm7, xmm8
	LONG $0x6f0f4566; BYTE $0xcf               // movdqa    xmm9, xmm15
	LONG $0xda0f4466; BYTE $0xca               // pminub    xmm9, xmm2
	LONG $0xde0f4466; BYTE $0xfa               // pmaxub    xmm15, xmm2
	LONG $0x6f0f4166; BYTE $0xea               // movdqa    xmm5, xmm10
	LONG $0xebda0f66                           // pminub    xmm5, xmm3
	LONG $0xde0f4166; BYTE $0xda               // pmaxub    xmm3, xmm10
	LONG $0x6f0f4166; BYTE $0xd3               // movdqa    xmm2, xmm11
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0x6f0f4466; BYTE $0xd2               // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd5               // pminub    xmm10, xmm5
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xe86f0f66                           // movdqa    xmm5, xmm0
	LONG $0xefda0f66                           // pminub    xmm5, xmm7
	LONG $0xf8de0f66                           // pmaxub    xmm7, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xf9de0f66                           // pmaxub    xmm7, xmm1
	LONG $0x6f0f4466; BYTE $0xc0               // movdqa    xmm8, xmm0
	LONG $0xda0f4466; BYTE $0xc5               // pminub    xmm8, xmm5
	LONG $0xc5de0f66                           // pmaxub    xmm0, xmm5
	LONG $0x6f0f4166; BYTE $0xec               // movdqa    xmm5, xmm12
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xde0f4166; BYTE $0xe4               // pmaxub    xmm4, xmm12
	LONG $0xce6f0f66                           // movdqa    xmm1, xmm6
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xdd               // pminub    xmm11, xmm5
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0x6f0f4166; BYTE $0xe8               // movdqa    xmm5, xmm8
	LONG $0xda0f4166; BYTE $0xef               // pminub    xmm5, xmm15
	LONG $0xde0f4566; BYTE $0xc7               // pmaxub    xmm8, xmm15
	LONG $0x6f0f4166; BYTE $0xf5               // movdqa    xmm6, xmm13
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xfd               // pmaxub    xmm7, xmm13
	LONG $0xda0f4166; BYTE $0xe6               // pminub    xmm4, xmm14
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xd1               // pmaxub    xmm2, xmm9
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xde0f4166; BYTE $0xd2               // pmaxub    xmm2, xmm10
	LONG $0xce6f0f66                           // movdqa    xmm1, xmm6
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0xda0f4166; BYTE $0xe3               // pminub    xmm4, xmm11
	LONG $0xe96f0f66                           // movdqa    xmm5, xmm1
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xde0f4166; BYTE $0xd0               // pmaxub    xmm2, xmm8
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0x7f0f41f3; BYTE $0x11               // movdqu    oword [r9], xmm2
	LONG $0x11fd8349                           // cmp    r13, 17
	JB   LBB2_55
	WORD $0x894c; BYTE $0xf1                   // mov    rcx, r14
	WORD $0xff31                               // xor    edi, edi

LBB2_54:
	LONG $0x6f0f45f3; WORD $0x384c; BYTE $0x10 // movdqu    xmm9, oword [r8 + rdi + 16]
	LONG $0x6f0f41f3; WORD $0x3a64; BYTE $0x0f // movdqu    xmm4, oword [r10 + rdi + 15]
	LONG $0x6f0f41f3; WORD $0x3a7c; BYTE $0x10 // movdqu    xmm7, oword [r10 + rdi + 16]
	LONG $0x6f0f45f3; WORD $0x3a7c; BYTE $0x11 // movdqu    xmm15, oword [r10 + rdi + 17]
	LONG $0x696f0ff3; BYTE $0xfc               // movdqu    xmm5, oword [rcx - 4]
	LONG $0x516f0ff3; BYTE $0xfd               // movdqu    xmm2, oword [rcx - 3]
	LONG $0x716f0ff3; BYTE $0xfe               // movdqu    xmm6, oword [rcx - 2]
	LONG $0x416f0ff3; BYTE $0xff               // movdqu    xmm0, oword [rcx - 1]
	LONG $0x6f0f44f3; BYTE $0x19               // movdqu    xmm11, oword [rcx]
	LONG $0x4c6f0ff3; WORD $0x0f3b             // movdqu    xmm1, oword [rbx + rdi + 15]
	LONG $0x6f0f44f3; WORD $0x3b74; BYTE $0x10 // movdqu    xmm14, oword [rbx + rdi + 16]
	LONG $0x6f0f44f3; WORD $0x3b64; BYTE $0x11 // movdqu    xmm12, oword [rbx + rdi + 17]
	LONG $0x6f0f44f3; WORD $0x3844; BYTE $0x10 // movdqu    xmm8, oword [rax + rdi + 16]
	LONG $0x6f0f4566; BYTE $0xd1               // movdqa    xmm10, xmm9
	LONG $0xda0f4466; BYTE $0xd4               // pminub    xmm10, xmm4
	LONG $0xde0f4466; BYTE $0xcc               // pmaxub    xmm9, xmm4
	LONG $0x6f0f4166; BYTE $0xdf               // movdqa    xmm3, xmm15
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0xde0f4466; BYTE $0xfd               // pmaxub    xmm15, xmm5
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xde0f4466; BYTE $0xff               // pmaxub    xmm15, xmm7
	LONG $0x6f0f4466; BYTE $0xec               // movdqa    xmm13, xmm4
	LONG $0xda0f4466; BYTE $0xeb               // pminub    xmm13, xmm3
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xfeda0f66                           // pminub    xmm7, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0xebda0f66                           // pminub    xmm5, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xda0f4166; BYTE $0xde               // pminub    xmm3, xmm14
	LONG $0xde0f4166; BYTE $0xce               // pmaxub    xmm1, xmm14
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0x6f0f4566; BYTE $0xdc               // movdqa    xmm11, xmm12
	LONG $0xda0f4566; BYTE $0xd8               // pminub    xmm11, xmm8
	LONG $0xde0f4566; BYTE $0xe0               // pmaxub    xmm12, xmm8
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0x6f0f4166; BYTE $0xed               // movdqa    xmm5, xmm13
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xde0f4166; BYTE $0xd5               // pmaxub    xmm2, xmm13
	LONG $0x6f0f4466; BYTE $0xed               // movdqa    xmm13, xmm5
	LONG $0xda0f4466; BYTE $0xeb               // pminub    xmm13, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xf8da0f66                           // pminub    xmm7, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0x6f0f4466; BYTE $0xf7               // movdqa    xmm14, xmm7
	LONG $0xda0f4466; BYTE $0xf3               // pminub    xmm14, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0x6f0f4166; BYTE $0xf7               // movdqa    xmm6, xmm15
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xde0f4166; BYTE $0xcf               // pmaxub    xmm1, xmm15
	LONG $0x6f0f4466; BYTE $0xc6               // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3               // pminub    xmm8, xmm3
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0x6f0f4166; BYTE $0xde               // movdqa    xmm3, xmm14
	LONG $0xda0f4166; BYTE $0xdc               // pminub    xmm3, xmm12
	LONG $0xde0f4566; BYTE $0xf4               // pmaxub    xmm14, xmm12
	LONG $0x6f0f4166; BYTE $0xe2               // movdqa    xmm4, xmm10
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xc9               // pminub    xmm1, xmm9
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xeb               // pmaxub    xmm5, xmm11
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xde0f4166; BYTE $0xed               // pmaxub    xmm5, xmm13
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x7f0f41f3; WORD $0x3964; BYTE $0x10 // movdqu    oword [r9 + rdi + 16], xmm4
	LONG $0x105f8d4c                           // lea    r11, [rdi + 16]
	LONG $0x20c78348                           // add    rdi, 32
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394c; BYTE $0xef                   // cmp    rdi, r13
	WORD $0x894c; BYTE $0xdf                   // mov    rdi, r11
	JB   LBB2_54

LBB2_55:
	LONG $0x6f0f45f3; WORD $0x1064; BYTE $0xf0 // movdqu    xmm12, oword [r8 + rdx - 16]
	LONG $0x6f0f45f3; WORD $0x124c; BYTE $0xef // movdqu    xmm9, oword [r10 + rdx - 17]
	LONG $0x6f0f45f3; WORD $0x1244; BYTE $0xf0 // movdqu    xmm8, oword [r10 + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xc0               // movdqa    xmm0, xmm8
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0xc6600f66                           // punpcklbw    xmm0, xmm6
	LONG $0xd8730f66; BYTE $0x02               // psrldq    xmm0, 2
	LONG $0x6f0f4166; BYTE $0xd8               // movdqa    xmm3, xmm8
	LONG $0xde680f66                           // punpckhbw    xmm3, xmm6
	LONG $0xcb700f66; BYTE $0x27               // pshufd    xmm1, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0e               // pslldq    xmm3, 14
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0xc1700ff3; BYTE $0xc4               // pshufhw    xmm0, xmm1, 196
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9               // pshufhw    xmm0, xmm0, 249
	LONG $0xd8670f66                           // packuswb    xmm3, xmm0
	LONG $0x6f0f45f3; WORD $0x145c; BYTE $0xee // movdqu    xmm11, oword [r12 + rdx - 18]
	LONG $0x6f0f45f3; WORD $0x1454; BYTE $0xef // movdqu    xmm10, oword [r12 + rdx - 17]
	LONG $0x6f0f45f3; WORD $0x1474; BYTE $0xf0 // movdqu    xmm14, oword [r12 + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xce               // movdqa    xmm1, xmm14
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x02               // psrldq    xmm1, 2
	LONG $0x6f0f4166; BYTE $0xe6               // movdqa    xmm4, xmm14
	LONG $0xe6680f66                           // punpckhbw    xmm4, xmm6
	LONG $0xd4700f66; BYTE $0x27               // pshufd    xmm2, xmm4, 39
	LONG $0xfc730f66; BYTE $0x0e               // pslldq    xmm4, 14
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0xca700ff3; BYTE $0xc4               // pshufhw    xmm1, xmm2, 196
	LONG $0xc9700f66; BYTE $0x27               // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xf9               // pshufhw    xmm1, xmm1, 249
	LONG $0xe1670f66                           // packuswb    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x02               // psrldq    xmm1, 2
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xee680f66                           // punpckhbw    xmm5, xmm6
	LONG $0xd5700f66; BYTE $0x27               // pshufd    xmm2, xmm5, 39
	LONG $0xfd730f66; BYTE $0x0e               // pslldq    xmm5, 14
	LONG $0xe9eb0f66                           // por    xmm5, xmm1
	LONG $0xca700ff3; BYTE $0xc4               // pshufhw    xmm1, xmm2, 196
	LONG $0xc9700f66; BYTE $0x27               // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xf9               // pshufhw    xmm1, xmm1, 249
	LONG $0xe9670f66                           // packuswb    xmm5, xmm1
	LONG $0x546f0ff3; WORD $0xef13             // movdqu    xmm2, oword [rbx + rdx - 17]
	LONG $0x4c6f0ff3; WORD $0xf013             // movdqu    xmm1, oword [rbx + rdx - 16]
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x02               // psrldq    xmm1, 2
	LONG $0xfe680f66                           // punpckhbw    xmm7, xmm6
	LONG $0xf7700f66; BYTE $0x27               // pshufd    xmm6, xmm7, 39
	LONG $0xff730f66; BYTE $0x0e               // pslldq    xmm7, 14
	LONG $0xf9eb0f66                           // por    xmm7, xmm1
	LONG $0xce700ff3; BYTE $0xc4               // pshufhw    xmm1, xmm6, 196
	LONG $0xc9700f66; BYTE $0x27               // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xf9               // pshufhw    xmm1, xmm1, 249
	LONG $0xf9670f66                           // packuswb    xmm7, xmm1
	LONG $0x6f0f44f3; WORD $0x107c; BYTE $0xf0 // movdqu    xmm15, oword [rax + rdx - 16]
	LONG $0x6f0f4566; BYTE $0xec               // movdqa    xmm13, xmm12
	LONG $0xda0f4566; BYTE $0xe9               // pminub    xmm13, xmm9
	LONG $0xde0f4566; BYTE $0xe1               // pmaxub    xmm12, xmm9
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xda0f4166; BYTE $0xcb               // pminub    xmm1, xmm11
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0x6f0f4566; BYTE $0xd8               // movdqa    xmm11, xmm8
	LONG $0xda0f4466; BYTE $0xdb               // pminub    xmm11, xmm3
	LONG $0xde0f4166; BYTE $0xd8               // pmaxub    xmm3, xmm8
	LONG $0x6f0f4566; BYTE $0xc3               // movdqa    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc1               // pminub    xmm8, xmm1
	LONG $0xde0f4466; BYTE $0xd9               // pmaxub    xmm11, xmm1
	LONG $0x6f0f4166; BYTE $0xf6               // movdqa    xmm6, xmm14
	LONG $0xf4da0f66                           // pminub    xmm6, xmm4
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0x6f0f4166; BYTE $0xca               // movdqa    xmm1, xmm10
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0x6f0f4466; BYTE $0xd1               // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd6               // pminub    xmm10, xmm6
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf2da0f66                           // pminub    xmm6, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0x6f0f4466; BYTE $0xf6               // movdqa    xmm14, xmm6
	LONG $0xda0f4466; BYTE $0xf0               // pminub    xmm14, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0x6f0f4466; BYTE $0xcf               // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xcf               // pminub    xmm9, xmm15
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0x6f0f4166; BYTE $0xc2               // movdqa    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xf2               // pmaxub    xmm14, xmm10
	LONG $0x6f0f4166; BYTE $0xe8               // movdqa    xmm5, xmm8
	LONG $0xda0f4166; BYTE $0xee               // pminub    xmm5, xmm14
	LONG $0xde0f4566; BYTE $0xf0               // pmaxub    xmm14, xmm8
	LONG $0xef0f4566; BYTE $0xc0               // pxor    xmm8, xmm8
	LONG $0x6f0f4466; BYTE $0xd5               // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd0               // pminub    xmm10, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0x6f0f4166; BYTE $0xcb               // movdqa    xmm1, xmm11
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xde0f4166; BYTE $0xf3               // pmaxub    xmm6, xmm11
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xd8               // pminub    xmm11, xmm0
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xde0f4466; BYTE $0xdf               // pmaxub    xmm11, xmm7
	LONG $0x6f0f4166; BYTE $0xfd               // movdqa    xmm7, xmm13
	LONG $0xfeda0f66                           // pminub    xmm7, xmm6
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xea               // pmaxub    xmm5, xmm10
	LONG $0xc76f0f66                           // movdqa    xmm0, xmm7
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xf9de0f66                           // pmaxub    xmm7, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xce               // pminub    xmm1, xmm14
	LONG $0xde0f4166; BYTE $0xd6               // pmaxub    xmm2, xmm14
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xda0f4166; BYTE $0xc3               // pminub    xmm0, xmm11
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x7f0f41f3; WORD $0x115c; BYTE $0xf0 // movdqu    oword [r9 + rdx - 16], xmm3
	WORD $0xff49; BYTE $0xc7                   // inc    r15
	LONG $0x244c034c; BYTE $0x40               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	LONG $0x243c3b4c                           // cmp    r15, qword [rsp]
	JNE  LBB2_52
	JMP  LBB2_62

LBB2_56:
	LONG $0x243c8348; BYTE $0x00 // cmp    qword [rsp], 0
	JE   LBB2_62
	LONG $0x523c8d4c             // lea    r15, [rdx + 2*rdx]
	LONG $0x52548d4c; BYTE $0xff // lea    r10, [rdx + 2*rdx - 1]
	LONG $0xf0e28349             // and    r10, -16
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0xfe488d48             // lea    rcx, [rax - 2]
	LONG $0x244c8948; BYTE $0x18 // mov    qword [rsp + 24], rcx
	WORD $0xff48; BYTE $0xc8     // dec    rax
	LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x16708d4c             // lea    r14, [rax + 22]
	WORD $0x3145; BYTE $0xed     // xor    r13d, r13d
	LONG $0xef0f4566; BYTE $0xc0 // pxor    xmm8, xmm8

LBB2_58:
	LONG $0xfe458d49                           // lea    rax, [r13 - 2]
	LONG $0xc6af0f48                           // imul    rax, rsi
	LONG $0x24440348; BYTE $0x08               // add    rax, qword [rsp + 8]
	LONG $0x303c8d48                           // lea    rdi, [rax + rsi]
	LONG $0x37248d4c                           // lea    r12, [rdi + rsi]
	LONG $0x340c8d49                           // lea    rcx, [r12 + rsi]
	WORD $0x854d; BYTE $0xed                   // test    r13, r13
	WORD $0x8948; BYTE $0xfa                   // mov    rdx, rdi
	LONG $0x6f0f44f3; WORD $0x3e24             // movdqu    xmm12, oword [rsi + rdi]
	LONG $0x6f0f44f3; WORD $0x3e54; BYTE $0x03 // movdqu    xmm10, oword [rsi + rdi + 3]
	LONG $0x6f0f44f3; WORD $0x3e4c; BYTE $0x06 // movdqu    xmm9, oword [rsi + rdi + 6]
	LONG $0xfc440f49                           // cmove    rdi, r12
	LONG $0x02fd8349                           // cmp    r13, 2
	LONG $0xd7420f48                           // cmovb    rdx, rdi
	LONG $0xf8430f48                           // cmovae    rdi, rax
	LONG $0x246c3b4c; BYTE $0x10               // cmp    r13, qword [rsp + 16]
	WORD $0x894c; BYTE $0xe3                   // mov    rbx, r12
	LONG $0xd9420f48                           // cmovb    rbx, rcx
	LONG $0x246c3b4c; BYTE $0x18               // cmp    r13, qword [rsp + 24]
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0xc1420f48                           // cmovb    rax, rcx
	LONG $0x310c8d48                           // lea    rcx, [rcx + rsi]
	LONG $0xd9420f48                           // cmovb    rbx, rcx
	LONG $0x6f0f44f3; BYTE $0x1f               // movdqu    xmm11, oword [rdi]
	LONG $0x2a6f0ff3                           // movdqu    xmm5, oword [rdx]
	LONG $0x4a6f0ff3; BYTE $0x03               // movdqu    xmm1, oword [rdx + 3]
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0x6f0f4166; BYTE $0xc4               // movdqa    xmm0, xmm12
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0xd0700f66; BYTE $0x27               // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a               // psrldq    xmm0, 10
	LONG $0x6f0f4166; BYTE $0xdc               // movdqa    xmm3, xmm12
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0xfb730f66; BYTE $0x06               // pslldq    xmm3, 6
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0xc2700ff3; BYTE $0xec               // pshufhw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x67               // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24               // pshuflw    xmm0, xmm0, 36
	LONG $0xd0700ff3; BYTE $0x39               // pshufhw    xmm2, xmm0, 57
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0x6f0f4166; BYTE $0xdc               // movdqa    xmm3, xmm12
	LONG $0xde0f4566; BYTE $0xe2               // pmaxub    xmm12, xmm10
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xda0f4166; BYTE $0xc4               // pminub    xmm0, xmm12
	LONG $0xde0f4466; BYTE $0xe2               // pmaxub    xmm12, xmm2
	LONG $0x600f4166; BYTE $0xd0               // punpcklbw    xmm2, xmm8
	LONG $0xf2700f66; BYTE $0x27               // pshufd    xmm6, xmm2, 39
	LONG $0xda730f66; BYTE $0x0a               // psrldq    xmm2, 10
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0xff730f66; BYTE $0x06               // pslldq    xmm7, 6
	LONG $0xfaeb0f66                           // por    xmm7, xmm2
	LONG $0xd6700ff3; BYTE $0xec               // pshufhw    xmm2, xmm6, 236
	LONG $0xd2700f66; BYTE $0x67               // pshufd    xmm2, xmm2, 103
	LONG $0xd2700ff2; BYTE $0x24               // pshuflw    xmm2, xmm2, 36
	LONG $0xf2700ff3; BYTE $0x39               // pshufhw    xmm6, xmm2, 57
	LONG $0xf7670f66                           // packuswb    xmm6, xmm7
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0xcd6f0f66                           // movdqa    xmm1, xmm5
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xf5de0f66                           // pmaxub    xmm6, xmm5
	LONG $0x600f4166; BYTE $0xe8               // punpcklbw    xmm5, xmm8
	LONG $0xfd700f66; BYTE $0x27               // pshufd    xmm7, xmm5, 39
	LONG $0xdd730f66; BYTE $0x0a               // psrldq    xmm5, 10
	LONG $0x680f4166; BYTE $0xe0               // punpckhbw    xmm4, xmm8
	LONG $0xfc730f66; BYTE $0x06               // pslldq    xmm4, 6
	LONG $0xe5eb0f66                           // por    xmm4, xmm5
	LONG $0xef700ff3; BYTE $0xec               // pshufhw    xmm5, xmm7, 236
	LONG $0xed700f66; BYTE $0x67               // pshufd    xmm5, xmm5, 103
	LONG $0xed700ff2; BYTE $0x24               // pshuflw    xmm5, xmm5, 36
	LONG $0x700f44f3; WORD $0x39f5             // pshufhw    xmm14, xmm5, 57
	LONG $0x670f4466; BYTE $0xf4               // packuswb    xmm14, xmm4
	LONG $0x286f0ff3                           // movdqu    xmm5, oword [rax]
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0x600f4166; BYTE $0xe0               // punpcklbw    xmm4, xmm8
	LONG $0x700f4466; WORD $0x27ec             // pshufd    xmm13, xmm4, 39
	LONG $0xdc730f66; BYTE $0x0a               // psrldq    xmm4, 10
	LONG $0xfd6f0f66                           // movdqa    xmm7, xmm5
	LONG $0x680f4166; BYTE $0xf8               // punpckhbw    xmm7, xmm8
	LONG $0xff730f66; BYTE $0x06               // pslldq    xmm7, 6
	LONG $0xfceb0f66                           // por    xmm7, xmm4
	LONG $0x6f0f44f3; WORD $0x0378             // movdqu    xmm15, oword [rax + 3]
	LONG $0x700f41f3; WORD $0xece5             // pshufhw    xmm4, xmm13, 236
	LONG $0xe4700f66; BYTE $0x67               // pshufd    xmm4, xmm4, 103
	LONG $0xe4700ff2; BYTE $0x24               // pshuflw    xmm4, xmm4, 36
	LONG $0xe4700ff3; BYTE $0x39               // pshufhw    xmm4, xmm4, 57
	LONG $0xe7670f66                           // packuswb    xmm4, xmm7
	LONG $0x6f0f4566; BYTE $0xeb               // movdqa    xmm13, xmm11
	LONG $0xda0f4566; BYTE $0xee               // pminub    xmm13, xmm14
	LONG $0xde0f4566; BYTE $0xf3               // pmaxub    xmm14, xmm11
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xda               // pminub    xmm11, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0x136f0ff3                           // movdqu    xmm2, oword [rbx]
	LONG $0xda0f4166; BYTE $0xda               // pminub    xmm3, xmm10
	LONG $0x6f0f4466; BYTE $0xd0               // movdqa    xmm10, xmm0
	LONG $0xda0f4466; BYTE $0xd3               // pminub    xmm10, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0x6f0f4466; BYTE $0xc4               // movdqa    xmm8, xmm4
	LONG $0xda0f4466; BYTE $0xc5               // pminub    xmm8, xmm5
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0x6f0f4166; BYTE $0xf9               // movdqa    xmm7, xmm9
	LONG $0xfcda0f66                           // pminub    xmm7, xmm4
	LONG $0xde0f4166; BYTE $0xe1               // pmaxub    xmm4, xmm9
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xd8               // pminub    xmm3, xmm8
	LONG $0xde0f4166; BYTE $0xf8               // pmaxub    xmm7, xmm8
	LONG $0x6f0f4566; BYTE $0xcf               // movdqa    xmm9, xmm15
	LONG $0xda0f4466; BYTE $0xca               // pminub    xmm9, xmm2
	LONG $0xde0f4466; BYTE $0xfa               // pmaxub    xmm15, xmm2
	LONG $0x6f0f4166; BYTE $0xea               // movdqa    xmm5, xmm10
	LONG $0xebda0f66                           // pminub    xmm5, xmm3
	LONG $0xde0f4166; BYTE $0xda               // pmaxub    xmm3, xmm10
	LONG $0x6f0f4166; BYTE $0xd3               // movdqa    xmm2, xmm11
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0x6f0f4466; BYTE $0xd2               // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd5               // pminub    xmm10, xmm5
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xe86f0f66                           // movdqa    xmm5, xmm0
	LONG $0xefda0f66                           // pminub    xmm5, xmm7
	LONG $0xf8de0f66                           // pmaxub    xmm7, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xf9de0f66                           // pmaxub    xmm7, xmm1
	LONG $0x6f0f4466; BYTE $0xc0               // movdqa    xmm8, xmm0
	LONG $0xda0f4466; BYTE $0xc5               // pminub    xmm8, xmm5
	LONG $0xc5de0f66                           // pmaxub    xmm0, xmm5
	LONG $0x6f0f4166; BYTE $0xec               // movdqa    xmm5, xmm12
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xde0f4166; BYTE $0xe4               // pmaxub    xmm4, xmm12
	LONG $0xce6f0f66                           // movdqa    xmm1, xmm6
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xdd               // pminub    xmm11, xmm5
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0x6f0f4166; BYTE $0xe8               // movdqa    xmm5, xmm8
	LONG $0xda0f4166; BYTE $0xef               // pminub    xmm5, xmm15
	LONG $0xde0f4566; BYTE $0xc7               // pmaxub    xmm8, xmm15
	LONG $0x6f0f4166; BYTE $0xf5               // movdqa    xmm6, xmm13
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xfd               // pmaxub    xmm7, xmm13
	LONG $0xda0f4166; BYTE $0xe6               // pminub    xmm4, xmm14
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xd1               // pmaxub    xmm2, xmm9
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xde0f4166; BYTE $0xd2               // pmaxub    xmm2, xmm10
	LONG $0xce6f0f66                           // movdqa    xmm1, xmm6
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0xda0f4166; BYTE $0xe3               // pminub    xmm4, xmm11
	LONG $0xe96f0f66                           // movdqa    xmm5, xmm1
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xdcde0f66                           // pmaxub    xmm3, xmm4
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xde0f4166; BYTE $0xd0               // pmaxub    xmm2, xmm8
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0x7f0f41f3; BYTE $0x11               // movdqu    oword [r9], xmm2
	LONG $0x11fa8349                           // cmp    r10, 17
	JB   LBB2_61
	WORD $0x894c; BYTE $0xf1                   // mov    rcx, r14
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d

LBB2_60:
	LONG $0x6f0f46f3; WORD $0x074c; BYTE $0x10 // movdqu    xmm9, oword [rdi + r8 + 16]
	LONG $0x6f0f42f3; WORD $0x0264; BYTE $0x0d // movdqu    xmm4, oword [rdx + r8 + 13]
	LONG $0x6f0f42f3; WORD $0x027c; BYTE $0x10 // movdqu    xmm7, oword [rdx + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x027c; BYTE $0x13 // movdqu    xmm15, oword [rdx + r8 + 19]
	LONG $0x696f0ff3; BYTE $0xf4               // movdqu    xmm5, oword [rcx - 12]
	LONG $0x516f0ff3; BYTE $0xf7               // movdqu    xmm2, oword [rcx - 9]
	LONG $0x716f0ff3; BYTE $0xfa               // movdqu    xmm6, oword [rcx - 6]
	LONG $0x416f0ff3; BYTE $0xfd               // movdqu    xmm0, oword [rcx - 3]
	LONG $0x6f0f44f3; BYTE $0x19               // movdqu    xmm11, oword [rcx]
	LONG $0x6f0f42f3; WORD $0x004c; BYTE $0x0d // movdqu    xmm1, oword [rax + r8 + 13]
	LONG $0x6f0f46f3; WORD $0x0074; BYTE $0x10 // movdqu    xmm14, oword [rax + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x0064; BYTE $0x13 // movdqu    xmm12, oword [rax + r8 + 19]
	LONG $0x6f0f46f3; WORD $0x0344; BYTE $0x10 // movdqu    xmm8, oword [rbx + r8 + 16]
	LONG $0x6f0f4566; BYTE $0xd1               // movdqa    xmm10, xmm9
	LONG $0xda0f4466; BYTE $0xd4               // pminub    xmm10, xmm4
	LONG $0xde0f4466; BYTE $0xcc               // pmaxub    xmm9, xmm4
	LONG $0x6f0f4166; BYTE $0xdf               // movdqa    xmm3, xmm15
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0xde0f4466; BYTE $0xfd               // pmaxub    xmm15, xmm5
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xde0f4466; BYTE $0xff               // pmaxub    xmm15, xmm7
	LONG $0x6f0f4466; BYTE $0xec               // movdqa    xmm13, xmm4
	LONG $0xda0f4466; BYTE $0xeb               // pminub    xmm13, xmm3
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xfeda0f66                           // pminub    xmm7, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0xebda0f66                           // pminub    xmm5, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xda0f4166; BYTE $0xde               // pminub    xmm3, xmm14
	LONG $0xde0f4166; BYTE $0xce               // pmaxub    xmm1, xmm14
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0x6f0f4566; BYTE $0xdc               // movdqa    xmm11, xmm12
	LONG $0xda0f4566; BYTE $0xd8               // pminub    xmm11, xmm8
	LONG $0xde0f4566; BYTE $0xe0               // pmaxub    xmm12, xmm8
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0x6f0f4166; BYTE $0xed               // movdqa    xmm5, xmm13
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xde0f4166; BYTE $0xd5               // pmaxub    xmm2, xmm13
	LONG $0x6f0f4466; BYTE $0xed               // movdqa    xmm13, xmm5
	LONG $0xda0f4466; BYTE $0xeb               // pminub    xmm13, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xf8da0f66                           // pminub    xmm7, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0x6f0f4466; BYTE $0xf7               // movdqa    xmm14, xmm7
	LONG $0xda0f4466; BYTE $0xf3               // pminub    xmm14, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0x6f0f4166; BYTE $0xf7               // movdqa    xmm6, xmm15
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xde0f4166; BYTE $0xcf               // pmaxub    xmm1, xmm15
	LONG $0x6f0f4466; BYTE $0xc6               // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3               // pminub    xmm8, xmm3
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0x6f0f4166; BYTE $0xde               // movdqa    xmm3, xmm14
	LONG $0xda0f4166; BYTE $0xdc               // pminub    xmm3, xmm12
	LONG $0xde0f4566; BYTE $0xf4               // pmaxub    xmm14, xmm12
	LONG $0x6f0f4166; BYTE $0xe2               // movdqa    xmm4, xmm10
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xc9               // pminub    xmm1, xmm9
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xeb               // pmaxub    xmm5, xmm11
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xde0f4166; BYTE $0xed               // pmaxub    xmm5, xmm13
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x7f0f43f3; WORD $0x0164; BYTE $0x10 // movdqu    oword [r9 + r8 + 16], xmm4
	LONG $0x10588d4d                           // lea    r11, [r8 + 16]
	LONG $0x20c08349                           // add    r8, 32
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	WORD $0x894d; BYTE $0xd8                   // mov    r8, r11
	JB   LBB2_60

LBB2_61:
	LONG $0x6f0f46f3; WORD $0x3f64; BYTE $0xf0 // movdqu    xmm12, oword [rdi + r15 - 16]
	LONG $0x6f0f46f3; WORD $0x3a4c; BYTE $0xed // movdqu    xmm9, oword [rdx + r15 - 19]
	LONG $0x6f0f46f3; WORD $0x3a44; BYTE $0xf0 // movdqu    xmm8, oword [rdx + r15 - 16]
	LONG $0x6f0f4166; BYTE $0xc0               // movdqa    xmm0, xmm8
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0xc6600f66                           // punpcklbw    xmm0, xmm6
	LONG $0xd8730f66; BYTE $0x06               // psrldq    xmm0, 6
	LONG $0x6f0f4166; BYTE $0xd8               // movdqa    xmm3, xmm8
	LONG $0xde680f66                           // punpckhbw    xmm3, xmm6
	LONG $0xcb700f66; BYTE $0x27               // pshufd    xmm1, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0a               // pslldq    xmm3, 10
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0xc1700ff2; BYTE $0x4c               // pshuflw    xmm0, xmm1, 76
	LONG $0xc0700f66; BYTE $0x68               // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7               // pshufhw    xmm0, xmm0, 231
	LONG $0xd8670f66                           // packuswb    xmm3, xmm0
	LONG $0x6f0f47f3; WORD $0x3c5c; BYTE $0xea // movdqu    xmm11, oword [r12 + r15 - 22]
	LONG $0x6f0f47f3; WORD $0x3c54; BYTE $0xed // movdqu    xmm10, oword [r12 + r15 - 19]
	LONG $0x6f0f47f3; WORD $0x3c74; BYTE $0xf0 // movdqu    xmm14, oword [r12 + r15 - 16]
	LONG $0x6f0f4166; BYTE $0xce               // movdqa    xmm1, xmm14
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x06               // psrldq    xmm1, 6
	LONG $0x6f0f4166; BYTE $0xe6               // movdqa    xmm4, xmm14
	LONG $0xe6680f66                           // punpckhbw    xmm4, xmm6
	LONG $0xd4700f66; BYTE $0x27               // pshufd    xmm2, xmm4, 39
	LONG $0xfc730f66; BYTE $0x0a               // pslldq    xmm4, 10
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0xca700ff2; BYTE $0x4c               // pshuflw    xmm1, xmm2, 76
	LONG $0xc9700f66; BYTE $0x68               // pshufd    xmm1, xmm1, 104
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xe7               // pshufhw    xmm1, xmm1, 231
	LONG $0xe1670f66                           // packuswb    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x06               // psrldq    xmm1, 6
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xee680f66                           // punpckhbw    xmm5, xmm6
	LONG $0xd5700f66; BYTE $0x27               // pshufd    xmm2, xmm5, 39
	LONG $0xfd730f66; BYTE $0x0a               // pslldq    xmm5, 10
	LONG $0xe9eb0f66                           // por    xmm5, xmm1
	LONG $0xca700ff2; BYTE $0x4c               // pshuflw    xmm1, xmm2, 76
	LONG $0xc9700f66; BYTE $0x68               // pshufd    xmm1, xmm1, 104
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xe7               // pshufhw    xmm1, xmm1, 231
	LONG $0xe9670f66                           // packuswb    xmm5, xmm1
	LONG $0x6f0f42f3; WORD $0x3854; BYTE $0xed // movdqu    xmm2, oword [rax + r15 - 19]
	LONG $0x6f0f42f3; WORD $0x384c; BYTE $0xf0 // movdqu    xmm1, oword [rax + r15 - 16]
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x06               // psrldq    xmm1, 6
	LONG $0xfe680f66                           // punpckhbw    xmm7, xmm6
	LONG $0xf7700f66; BYTE $0x27               // pshufd    xmm6, xmm7, 39
	LONG $0xff730f66; BYTE $0x0a               // pslldq    xmm7, 10
	LONG $0xf9eb0f66                           // por    xmm7, xmm1
	LONG $0xce700ff2; BYTE $0x4c               // pshuflw    xmm1, xmm6, 76
	LONG $0xc9700f66; BYTE $0x68               // pshufd    xmm1, xmm1, 104
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xe7               // pshufhw    xmm1, xmm1, 231
	LONG $0xf9670f66                           // packuswb    xmm7, xmm1
	LONG $0x6f0f46f3; WORD $0x3b7c; BYTE $0xf0 // movdqu    xmm15, oword [rbx + r15 - 16]
	LONG $0x6f0f4566; BYTE $0xec               // movdqa    xmm13, xmm12
	LONG $0xda0f4566; BYTE $0xe9               // pminub    xmm13, xmm9
	LONG $0xde0f4566; BYTE $0xe1               // pmaxub    xmm12, xmm9
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xda0f4166; BYTE $0xcb               // pminub    xmm1, xmm11
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0x6f0f4566; BYTE $0xd8               // movdqa    xmm11, xmm8
	LONG $0xda0f4466; BYTE $0xdb               // pminub    xmm11, xmm3
	LONG $0xde0f4166; BYTE $0xd8               // pmaxub    xmm3, xmm8
	LONG $0x6f0f4566; BYTE $0xc3               // movdqa    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc1               // pminub    xmm8, xmm1
	LONG $0xde0f4466; BYTE $0xd9               // pmaxub    xmm11, xmm1
	LONG $0x6f0f4166; BYTE $0xf6               // movdqa    xmm6, xmm14
	LONG $0xf4da0f66                           // pminub    xmm6, xmm4
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0x6f0f4166; BYTE $0xca               // movdqa    xmm1, xmm10
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0x6f0f4466; BYTE $0xd1               // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd6               // pminub    xmm10, xmm6
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf2da0f66                           // pminub    xmm6, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0x6f0f4466; BYTE $0xf6               // movdqa    xmm14, xmm6
	LONG $0xda0f4466; BYTE $0xf0               // pminub    xmm14, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0x6f0f4466; BYTE $0xcf               // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xcf               // pminub    xmm9, xmm15
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0x6f0f4166; BYTE $0xc2               // movdqa    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xf2               // pmaxub    xmm14, xmm10
	LONG $0x6f0f4166; BYTE $0xe8               // movdqa    xmm5, xmm8
	LONG $0xda0f4166; BYTE $0xee               // pminub    xmm5, xmm14
	LONG $0xde0f4566; BYTE $0xf0               // pmaxub    xmm14, xmm8
	LONG $0xef0f4566; BYTE $0xc0               // pxor    xmm8, xmm8
	LONG $0x6f0f4466; BYTE $0xd5               // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd0               // pminub    xmm10, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0x6f0f4166; BYTE $0xcb               // movdqa    xmm1, xmm11
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xde0f4166; BYTE $0xf3               // pmaxub    xmm6, xmm11
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xd8               // pminub    xmm11, xmm0
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xde0f4466; BYTE $0xdf               // pmaxub    xmm11, xmm7
	LONG $0x6f0f4166; BYTE $0xfd               // movdqa    xmm7, xmm13
	LONG $0xfeda0f66                           // pminub    xmm7, xmm6
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xea               // pmaxub    xmm5, xmm10
	LONG $0xc76f0f66                           // movdqa    xmm0, xmm7
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xf9de0f66                           // pmaxub    xmm7, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xce               // pminub    xmm1, xmm14
	LONG $0xde0f4166; BYTE $0xd6               // pmaxub    xmm2, xmm14
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xda0f4166; BYTE $0xc3               // pminub    xmm0, xmm11
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x7f0f43f3; WORD $0x395c; BYTE $0xf0 // movdqu    oword [r9 + r15 - 16], xmm3
	WORD $0xff49; BYTE $0xc5                   // inc    r13
	LONG $0x244c034c; BYTE $0x40               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	LONG $0x242c3b4c                           // cmp    r13, qword [rsp]
	JNE  LBB2_58
	JMP  LBB2_62

LBB2_13:
	LONG $0x03f88349                   // cmp    r8, 3
	JE   LBB2_27
	LONG $0x04f88349                   // cmp    r8, 4
	JNE  LBB2_62
	LONG $0x243c8348; BYTE $0x00       // cmp    qword [rsp], 0
	JE   LBB2_62
	LONG $0x95248d4c; LONG $0xffffffff // lea    r12, [4*rdx - 1]
	LONG $0x02e2c148                   // shl    rdx, 2
	LONG $0xf0e48349                   // and    r12, -16
	LONG $0x24048b48                   // mov    rax, qword [rsp]
	LONG $0xfe488d48                   // lea    rcx, [rax - 2]
	LONG $0x244c8948; BYTE $0x18       // mov    qword [rsp + 24], rcx
	WORD $0xff48; BYTE $0xc8           // dec    rax
	LONG $0x24448948; BYTE $0x10       // mov    qword [rsp + 16], rax
	LONG $0x24448b48; BYTE $0x08       // mov    rax, qword [rsp + 8]
	LONG $0x18708d4c                   // lea    r14, [rax + 24]
	WORD $0x3145; BYTE $0xd2           // xor    r10d, r10d

LBB2_17:
	LONG $0xfe4a8d49                           // lea    rcx, [r10 - 2]
	LONG $0xceaf0f48                           // imul    rcx, rsi
	LONG $0x244c0348; BYTE $0x08               // add    rcx, qword [rsp + 8]
	LONG $0x31048d48                           // lea    rax, [rcx + rsi]
	LONG $0x303c8d4c                           // lea    r15, [rax + rsi]
	LONG $0x371c8d49                           // lea    rbx, [r15 + rsi]
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	WORD $0x8948; BYTE $0xc7                   // mov    rdi, rax
	LONG $0x6f0f4466; WORD $0x063c             // movdqa    xmm15, oword [rsi + rax]
	LONG $0x6f0f44f3; WORD $0x0664; BYTE $0x04 // movdqu    xmm12, oword [rsi + rax + 4]
	LONG $0x6f0f44f3; WORD $0x065c; BYTE $0x08 // movdqu    xmm11, oword [rsi + rax + 8]
	LONG $0xc7440f49                           // cmove    rax, r15
	LONG $0x02fa8349                           // cmp    r10, 2
	LONG $0xf8420f48                           // cmovb    rdi, rax
	LONG $0xc1430f48                           // cmovae    rax, rcx
	LONG $0x24543b4c; BYTE $0x10               // cmp    r10, qword [rsp + 16]
	WORD $0x894d; BYTE $0xfd                   // mov    r13, r15
	LONG $0xeb420f4c                           // cmovb    r13, rbx
	LONG $0x24543b4c; BYTE $0x18               // cmp    r10, qword [rsp + 24]
	WORD $0x894c; BYTE $0xe9                   // mov    rcx, r13
	LONG $0xcb420f48                           // cmovb    rcx, rbx
	LONG $0x331c8d48                           // lea    rbx, [rbx + rsi]
	LONG $0xeb420f4c                           // cmovb    r13, rbx
	LONG $0x6f0f4466; BYTE $0x28               // movdqa    xmm13, oword [rax]
	WORD $0x280f; BYTE $0x0f                   // movaps    xmm1, oword [rdi]
	LONG $0xd2570f45                           // xorps    xmm10, xmm10
	LONG $0x100f44f3; BYTE $0xd1               // movss    xmm10, xmm1
	LONG $0x5f6f0ff3; BYTE $0x04               // movdqu    xmm3, oword [rdi + 4]
	LONG $0x6f0f4166; BYTE $0xc7               // movdqa    xmm0, xmm15
	LONG $0xf8730f66; BYTE $0x04               // pslldq    xmm0, 4
	WORD $0x570f; BYTE $0xf6                   // xorps    xmm6, xmm6
	LONG $0x100f41f3; BYTE $0xf7               // movss    xmm6, xmm15
	WORD $0x560f; BYTE $0xf0                   // orps    xmm6, xmm0
	WORD $0x570f; BYTE $0xc0                   // xorps    xmm0, xmm0
	LONG $0xc6100ff3                           // movss    xmm0, xmm6
	LONG $0x6f0f4166; BYTE $0xd7               // movdqa    xmm2, xmm15
	LONG $0xde0f4566; BYTE $0xfc               // pmaxub    xmm15, xmm12
	WORD $0x280f; BYTE $0xee                   // movaps    xmm5, xmm6
	LONG $0xda0f4166; BYTE $0xef               // pminub    xmm5, xmm15
	LONG $0xde0f4466; BYTE $0xfe               // pmaxub    xmm15, xmm6
	LONG $0xfe730f66; BYTE $0x04               // pslldq    xmm6, 4
	WORD $0x560f; BYTE $0xc6                   // orps    xmm0, xmm6
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf0da0f66                           // pminub    xmm6, xmm0
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	WORD $0x280f; BYTE $0xd9                   // movaps    xmm3, xmm1
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xf9730f66; BYTE $0x04               // pslldq    xmm1, 4
	LONG $0xd1560f44                           // orps    xmm10, xmm1
	LONG $0x396f0f66                           // movdqa    xmm7, oword [rcx]
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xfc730f66; BYTE $0x04               // pslldq    xmm4, 4
	WORD $0x570f; BYTE $0xc9                   // xorps    xmm1, xmm1
	LONG $0xcf100ff3                           // movss    xmm1, xmm7
	WORD $0x560f; BYTE $0xcc                   // orps    xmm1, xmm4
	LONG $0x6f0f44f3; WORD $0x0471             // movdqu    xmm14, oword [rcx + 4]
	LONG $0x6f0f4566; BYTE $0xcd               // movdqa    xmm9, xmm13
	LONG $0xda0f4566; BYTE $0xca               // pminub    xmm9, xmm10
	LONG $0xde0f4566; BYTE $0xd5               // pmaxub    xmm10, xmm13
	LONG $0x6f0f4466; BYTE $0xeb               // movdqa    xmm13, xmm3
	LONG $0xda0f4466; BYTE $0xee               // pminub    xmm13, xmm6
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0x6f0f4566; WORD $0x0045             // movdqa    xmm8, oword [r13]
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0x6f0f4466; BYTE $0xe5               // movdqa    xmm12, xmm5
	LONG $0xda0f4466; BYTE $0xe2               // pminub    xmm12, xmm2
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	WORD $0x280f; BYTE $0xf1                   // movaps    xmm6, xmm1
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xcfde0f66                           // pmaxub    xmm1, xmm7
	LONG $0x6f0f4166; BYTE $0xe3               // movdqa    xmm4, xmm11
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0x6f0f4566; BYTE $0xde               // movdqa    xmm11, xmm14
	LONG $0xda0f4566; BYTE $0xd8               // pminub    xmm11, xmm8
	LONG $0xde0f4566; BYTE $0xf0               // pmaxub    xmm14, xmm8
	LONG $0x6f0f4166; BYTE $0xf4               // movdqa    xmm6, xmm12
	LONG $0xf2da0f66                           // pminub    xmm6, xmm2
	LONG $0xde0f4166; BYTE $0xd4               // pmaxub    xmm2, xmm12
	LONG $0x6f0f4166; BYTE $0xfd               // movdqa    xmm7, xmm13
	LONG $0xfada0f66                           // pminub    xmm7, xmm2
	LONG $0xde0f4166; BYTE $0xd5               // pmaxub    xmm2, xmm13
	LONG $0x6f0f4466; BYTE $0xe7               // movdqa    xmm12, xmm7
	LONG $0xda0f4466; BYTE $0xe6               // pminub    xmm12, xmm6
	LONG $0xfede0f66                           // pmaxub    xmm7, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf4da0f66                           // pminub    xmm6, xmm4
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0x6f0f4466; BYTE $0xed               // movdqa    xmm13, xmm5
	LONG $0xda0f4466; BYTE $0xee               // pminub    xmm13, xmm6
	LONG $0xeede0f66                           // pmaxub    xmm5, xmm6
	LONG $0x6f0f4166; BYTE $0xdf               // movdqa    xmm3, xmm15
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xcf               // pmaxub    xmm1, xmm15
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0x6f0f4466; BYTE $0xc6               // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3               // pminub    xmm8, xmm3
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0x6f0f4166; BYTE $0xdd               // movdqa    xmm3, xmm13
	LONG $0xda0f4166; BYTE $0xde               // pminub    xmm3, xmm14
	LONG $0xde0f4566; BYTE $0xee               // pmaxub    xmm13, xmm14
	LONG $0x6f0f4166; BYTE $0xc1               // movdqa    xmm0, xmm9
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xde0f4166; BYTE $0xe1               // pmaxub    xmm4, xmm9
	LONG $0xda0f4166; BYTE $0xca               // pminub    xmm1, xmm10
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xde0f4166; BYTE $0xfb               // pmaxub    xmm7, xmm11
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xfc               // pmaxub    xmm7, xmm12
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0xc5de0f66                           // pmaxub    xmm0, xmm5
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xda0f4166; BYTE $0xdd               // pminub    xmm3, xmm13
	LONG $0xde0f4166; BYTE $0xc5               // pmaxub    xmm0, xmm13
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0x7f0f4166; BYTE $0x01               // movdqa    oword [r9], xmm0
	LONG $0x11fc8349                           // cmp    r12, 17
	JB   LBB2_20
	WORD $0x894c; BYTE $0xf3                   // mov    rbx, r14
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d

LBB2_19:
	LONG $0x6f0f4666; WORD $0x004c; BYTE $0x10 // movdqa    xmm9, oword [rax + r8 + 16]
	LONG $0x6f0f42f3; WORD $0x0744; BYTE $0x0c // movdqu    xmm0, oword [rdi + r8 + 12]
	LONG $0x6f0f4266; WORD $0x0774; BYTE $0x10 // movdqa    xmm6, oword [rdi + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x077c; BYTE $0x14 // movdqu    xmm15, oword [rdi + r8 + 20]
	LONG $0x6b6f0ff3; BYTE $0xf0               // movdqu    xmm5, oword [rbx - 16]
	LONG $0x536f0ff3; BYTE $0xf4               // movdqu    xmm2, oword [rbx - 12]
	LONG $0x7b6f0f66; BYTE $0xf8               // movdqa    xmm7, oword [rbx - 8]
	LONG $0x5b6f0ff3; BYTE $0xfc               // movdqu    xmm3, oword [rbx - 4]
	LONG $0x6f0f44f3; BYTE $0x1b               // movdqu    xmm11, oword [rbx]
	LONG $0x6f0f42f3; WORD $0x014c; BYTE $0x0c // movdqu    xmm1, oword [rcx + r8 + 12]
	LONG $0x6f0f4666; WORD $0x0174; BYTE $0x10 // movdqa    xmm14, oword [rcx + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x0164; BYTE $0x14 // movdqu    xmm12, oword [rcx + r8 + 20]
	LONG $0x6f0f4766; WORD $0x0544; BYTE $0x10 // movdqa    xmm8, oword [r13 + r8 + 16]
	LONG $0x6f0f4566; BYTE $0xd1               // movdqa    xmm10, xmm9
	LONG $0xda0f4466; BYTE $0xd0               // pminub    xmm10, xmm0
	LONG $0xde0f4466; BYTE $0xc8               // pmaxub    xmm9, xmm0
	LONG $0x6f0f4166; BYTE $0xc7               // movdqa    xmm0, xmm15
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xde0f4466; BYTE $0xfd               // pmaxub    xmm15, xmm5
	LONG $0xee6f0f66                           // movdqa    xmm5, xmm6
	LONG $0xda0f4166; BYTE $0xef               // pminub    xmm5, xmm15
	LONG $0xde0f4466; BYTE $0xfe               // pmaxub    xmm15, xmm6
	LONG $0x6f0f4466; BYTE $0xed               // movdqa    xmm13, xmm5
	LONG $0xda0f4466; BYTE $0xe8               // pminub    xmm13, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xf3da0f66                           // pminub    xmm6, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xfade0f66                           // pmaxub    xmm7, xmm2
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe6da0f66                           // pminub    xmm4, xmm6
	LONG $0xc6de0f66                           // pmaxub    xmm0, xmm6
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xda0f4166; BYTE $0xf6               // pminub    xmm6, xmm14
	LONG $0xde0f4166; BYTE $0xce               // pmaxub    xmm1, xmm14
	LONG $0x6f0f4166; BYTE $0xdb               // movdqa    xmm3, xmm11
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0x6f0f4466; BYTE $0xf3               // movdqa    xmm14, xmm3
	LONG $0xda0f4466; BYTE $0xf6               // pminub    xmm14, xmm6
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0x6f0f4566; BYTE $0xdc               // movdqa    xmm11, xmm12
	LONG $0xda0f4566; BYTE $0xd8               // pminub    xmm11, xmm8
	LONG $0xde0f4566; BYTE $0xe0               // pmaxub    xmm12, xmm8
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd6               // pminub    xmm2, xmm14
	LONG $0xde0f4466; BYTE $0xf4               // pmaxub    xmm14, xmm4
	LONG $0x6f0f4166; BYTE $0xf5               // movdqa    xmm6, xmm13
	LONG $0xda0f4166; BYTE $0xf6               // pminub    xmm6, xmm14
	LONG $0xde0f4566; BYTE $0xf5               // pmaxub    xmm14, xmm13
	LONG $0x6f0f4466; BYTE $0xee               // movdqa    xmm13, xmm6
	LONG $0xda0f4466; BYTE $0xea               // pminub    xmm13, xmm2
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                           // pminub    xmm0, xmm3
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xe86f0f66                           // movdqa    xmm5, xmm0
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xd76f0f66                           // movdqa    xmm2, xmm7
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xcfde0f66                           // pmaxub    xmm1, xmm7
	LONG $0x6f0f4166; BYTE $0xff               // movdqa    xmm7, xmm15
	LONG $0xf9da0f66                           // pminub    xmm7, xmm1
	LONG $0xde0f4166; BYTE $0xcf               // pmaxub    xmm1, xmm15
	LONG $0x6f0f4466; BYTE $0xc7               // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc2               // pminub    xmm8, xmm2
	LONG $0xfade0f66                           // pmaxub    xmm7, xmm2
	LONG $0xd56f0f66                           // movdqa    xmm2, xmm5
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0xde0f4166; BYTE $0xec               // pmaxub    xmm5, xmm12
	LONG $0x6f0f4166; BYTE $0xe2               // movdqa    xmm4, xmm10
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xda               // pmaxub    xmm3, xmm10
	LONG $0xda0f4166; BYTE $0xc9               // pminub    xmm1, xmm9
	LONG $0xcfda0f66                           // pminub    xmm1, xmm7
	LONG $0xcbda0f66                           // pminub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xf3               // pmaxub    xmm6, xmm11
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4166; BYTE $0xce               // pmaxub    xmm1, xmm14
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xdede0f66                           // pmaxub    xmm3, xmm6
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xcdda0f66                           // pminub    xmm1, xmm5
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0x7f0f4366; WORD $0x0164; BYTE $0x10 // movdqa    oword [r9 + r8 + 16], xmm4
	LONG $0x10588d4d                           // lea    r11, [r8 + 16]
	LONG $0x20c08349                           // add    r8, 32
	LONG $0x10c38348                           // add    rbx, 16
	WORD $0x394d; BYTE $0xe0                   // cmp    r8, r12
	WORD $0x894d; BYTE $0xd8                   // mov    r8, r11
	JB   LBB2_19

LBB2_20:
	LONG $0x6f0f44f3; WORD $0x105c; BYTE $0xf0 // movdqu    xmm11, oword [rax + rdx - 16]
	LONG $0x6f0f44f3; WORD $0x174c; BYTE $0xec // movdqu    xmm9, oword [rdi + rdx - 20]
	LONG $0x6f0f44f3; WORD $0x1744; BYTE $0xf0 // movdqu    xmm8, oword [rdi + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xc8               // movdqa    xmm1, xmm8
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0x6f0f4166; BYTE $0xd8               // movdqa    xmm3, xmm8
	LONG $0x6d6f0f66; BYTE $0x00               // movdqa    xmm5, oword 0[rbp] /* [rip + .LCPI2_0] */
	LONG $0xdddb0f66                           // pand    xmm3, xmm5
	LONG $0xd9eb0f66                           // por    xmm3, xmm1
	LONG $0x6f0f45f3; WORD $0x176c; BYTE $0xe8 // movdqu    xmm13, oword [r15 + rdx - 24]
	LONG $0x6f0f45f3; WORD $0x1754; BYTE $0xec // movdqu    xmm10, oword [r15 + rdx - 20]
	LONG $0x6f0f45f3; WORD $0x1774; BYTE $0xf0 // movdqu    xmm14, oword [r15 + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xce               // movdqa    xmm1, xmm14
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0x6f0f4166; BYTE $0xe6               // movdqa    xmm4, xmm14
	LONG $0xe5db0f66                           // pand    xmm4, xmm5
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xd9730f66; BYTE $0x04               // psrldq    xmm1, 4
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xfddb0f66                           // pand    xmm7, xmm5
	LONG $0xf9eb0f66                           // por    xmm7, xmm1
	LONG $0x4c6f0ff3; WORD $0xec11             // movdqu    xmm1, oword [rcx + rdx - 20]
	LONG $0x546f0ff3; WORD $0xf011             // movdqu    xmm2, oword [rcx + rdx - 16]
	LONG $0x6f0f4466; BYTE $0xfa               // movdqa    xmm15, xmm2
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xda730f66; BYTE $0x04               // psrldq    xmm2, 4
	LONG $0xdb0f4466; BYTE $0xfd               // pand    xmm15, xmm5
	LONG $0xeb0f4466; BYTE $0xfa               // por    xmm15, xmm2
	LONG $0x6f0f41f3; WORD $0x1574; BYTE $0xf0 // movdqu    xmm6, oword [r13 + rdx - 16]
	LONG $0x6f0f4566; BYTE $0xe3               // movdqa    xmm12, xmm11
	LONG $0xda0f4566; BYTE $0xe1               // pminub    xmm12, xmm9
	LONG $0xde0f4566; BYTE $0xd9               // pmaxub    xmm11, xmm9
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0xda0f4166; BYTE $0xd5               // pminub    xmm2, xmm13
	LONG $0xde0f4166; BYTE $0xdd               // pmaxub    xmm3, xmm13
	LONG $0x6f0f4566; BYTE $0xe8               // movdqa    xmm13, xmm8
	LONG $0xda0f4466; BYTE $0xeb               // pminub    xmm13, xmm3
	LONG $0xde0f4166; BYTE $0xd8               // pmaxub    xmm3, xmm8
	LONG $0x6f0f4566; BYTE $0xc5               // movdqa    xmm8, xmm13
	LONG $0xda0f4466; BYTE $0xc2               // pminub    xmm8, xmm2
	LONG $0xde0f4466; BYTE $0xea               // pmaxub    xmm13, xmm2
	LONG $0x6f0f4166; BYTE $0xd6               // movdqa    xmm2, xmm14
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0x6f0f4166; BYTE $0xea               // movdqa    xmm5, xmm10
	LONG $0xecda0f66                           // pminub    xmm5, xmm4
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0x6f0f4466; BYTE $0xd5               // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd2               // pminub    xmm10, xmm2
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0xd76f0f66                           // movdqa    xmm2, xmm7
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xcfde0f66                           // pmaxub    xmm1, xmm7
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xf8da0f66                           // pminub    xmm7, xmm0
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0x6f0f4566; BYTE $0xcf               // movdqa    xmm9, xmm15
	LONG $0xda0f4466; BYTE $0xce               // pminub    xmm9, xmm6
	LONG $0xde0f4466; BYTE $0xfe               // pmaxub    xmm15, xmm6
	LONG $0x6f0f4166; BYTE $0xc2               // movdqa    xmm0, xmm10
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xde0f4166; BYTE $0xfa               // pmaxub    xmm7, xmm10
	LONG $0x6f0f4166; BYTE $0xf0               // movdqa    xmm6, xmm8
	LONG $0xf7da0f66                           // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xf8               // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xd6               // movdqa    xmm10, xmm6
	LONG $0xda0f4466; BYTE $0xd0               // pminub    xmm10, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xc56f0f66                           // movdqa    xmm0, xmm5
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0x6f0f4166; BYTE $0xed               // movdqa    xmm5, xmm13
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xde0f4166; BYTE $0xd5               // pmaxub    xmm2, xmm13
	LONG $0x6f0f4466; BYTE $0xed               // movdqa    xmm13, xmm5
	LONG $0xda0f4466; BYTE $0xe8               // pminub    xmm13, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0x6f0f4466; BYTE $0xc4               // movdqa    xmm8, xmm4
	LONG $0xda0f4466; BYTE $0xc0               // pminub    xmm8, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc5               // movdqa    xmm0, xmm13
	LONG $0xda0f4166; BYTE $0xc7               // pminub    xmm0, xmm15
	LONG $0xde0f4566; BYTE $0xef               // pmaxub    xmm13, xmm15
	LONG $0x6f0f4166; BYTE $0xdc               // movdqa    xmm3, xmm12
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xd4               // pmaxub    xmm2, xmm12
	LONG $0xda0f4166; BYTE $0xcb               // pminub    xmm1, xmm11
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xcada0f66                           // pminub    xmm1, xmm2
	LONG $0xde0f4166; BYTE $0xf1               // pmaxub    xmm6, xmm9
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xde0f4166; BYTE $0xf2               // pmaxub    xmm6, xmm10
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xddde0f66                           // pmaxub    xmm3, xmm5
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd7da0f66                           // pminub    xmm2, xmm7
	LONG $0xcfde0f66                           // pmaxub    xmm1, xmm7
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xcbde0f66                           // pmaxub    xmm1, xmm3
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xe6de0f66                           // pmaxub    xmm4, xmm6
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xda0f4166; BYTE $0xc5               // pminub    xmm0, xmm13
	LONG $0xde0f4166; BYTE $0xdd               // pmaxub    xmm3, xmm13
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x7f0f41f3; WORD $0x115c; BYTE $0xf0 // movdqu    oword [r9 + rdx - 16], xmm3
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	LONG $0x244c034c; BYTE $0x40               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	LONG $0x24143b4c                           // cmp    r10, qword [rsp]
	JNE  LBB2_17
	JMP  LBB2_62

LBB2_21:
	LONG $0x243c8348; BYTE $0x00 // cmp    qword [rsp], 0
	JE   LBB2_62
	LONG $0xff6a8d4c             // lea    r13, [rdx - 1]
	LONG $0xf0e58349             // and    r13, -16
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0xfe488d48             // lea    rcx, [rax - 2]
	LONG $0x244c8948; BYTE $0x18 // mov    qword [rsp + 24], rcx
	WORD $0xff48; BYTE $0xc8     // dec    rax
	LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x12708d4c             // lea    r14, [rax + 18]
	WORD $0x3145; BYTE $0xff     // xor    r15d, r15d
	LONG $0xef0f4566; BYTE $0xc0 // pxor    xmm8, xmm8

LBB2_23:
	LONG $0xfe7f8d49                           // lea    rdi, [r15 - 2]
	LONG $0xfeaf0f48                           // imul    rdi, rsi
	LONG $0x247c0348; BYTE $0x08               // add    rdi, qword [rsp + 8]
	LONG $0x370c8d48                           // lea    rcx, [rdi + rsi]
	LONG $0x31248d4c                           // lea    r12, [rcx + rsi]
	LONG $0x34048d4d                           // lea    r8, [r12 + rsi]
	WORD $0x854d; BYTE $0xff                   // test    r15, r15
	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	LONG $0x6f0f4466; WORD $0x0e14             // movdqa    xmm10, oword [rsi + rcx]
	LONG $0x6f0f44f3; WORD $0x0e6c; BYTE $0x01 // movdqu    xmm13, oword [rsi + rcx + 1]
	LONG $0x6f0f44f3; WORD $0x0e4c; BYTE $0x02 // movdqu    xmm9, oword [rsi + rcx + 2]
	LONG $0xcc440f49                           // cmove    rcx, r12
	LONG $0x02ff8349                           // cmp    r15, 2
	LONG $0xc1420f48                           // cmovb    rax, rcx
	LONG $0xcf430f48                           // cmovae    rcx, rdi
	LONG $0x247c3b4c; BYTE $0x10               // cmp    r15, qword [rsp + 16]
	WORD $0x894d; BYTE $0xe2                   // mov    r10, r12
	LONG $0xd0420f4d                           // cmovb    r10, r8
	LONG $0x247c3b4c; BYTE $0x18               // cmp    r15, qword [rsp + 24]
	WORD $0x894c; BYTE $0xd3                   // mov    rbx, r10
	LONG $0xd8420f49                           // cmovb    rbx, r8
	LONG $0x303c8d49                           // lea    rdi, [r8 + rsi]
	LONG $0xd7420f4c                           // cmovb    r10, rdi
	LONG $0x6f0f4466; BYTE $0x39               // movdqa    xmm15, oword [rcx]
	LONG $0x186f0f66                           // movdqa    xmm3, oword [rax]
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0x506f0ff3; BYTE $0x01               // movdqu    xmm2, oword [rax + 1]
	LONG $0x6f0f4166; BYTE $0xca               // movdqa    xmm1, xmm10
	LONG $0x600f4166; BYTE $0xc8               // punpcklbw    xmm1, xmm8
	LONG $0xe9700f66; BYTE $0x27               // pshufd    xmm5, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0e               // psrldq    xmm1, 14
	LONG $0x6f0f4166; BYTE $0xf2               // movdqa    xmm6, xmm10
	LONG $0x680f4166; BYTE $0xf0               // punpckhbw    xmm6, xmm8
	LONG $0xfe730f66; BYTE $0x02               // pslldq    xmm6, 2
	LONG $0xf1eb0f66                           // por    xmm6, xmm1
	LONG $0xcd700ff2; BYTE $0xec               // pshuflw    xmm1, xmm5, 236
	LONG $0xc9700f66; BYTE $0x27               // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x90               // pshuflw    xmm1, xmm1, 144
	LONG $0xf9700ff3; BYTE $0x93               // pshufhw    xmm7, xmm1, 147
	LONG $0xfe670f66                           // packuswb    xmm7, xmm6
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0x6f0f4166; BYTE $0xca               // movdqa    xmm1, xmm10
	LONG $0xde0f4566; BYTE $0xd5               // pmaxub    xmm10, xmm13
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xda0f4166; BYTE $0xf2               // pminub    xmm6, xmm10
	LONG $0xde0f4466; BYTE $0xd7               // pmaxub    xmm10, xmm7
	LONG $0x600f4166; BYTE $0xf8               // punpcklbw    xmm7, xmm8
	LONG $0xe7700f66; BYTE $0x27               // pshufd    xmm4, xmm7, 39
	LONG $0xdf730f66; BYTE $0x0e               // psrldq    xmm7, 14
	LONG $0x680f4166; BYTE $0xe8               // punpckhbw    xmm5, xmm8
	LONG $0xfd730f66; BYTE $0x02               // pslldq    xmm5, 2
	LONG $0xefeb0f66                           // por    xmm5, xmm7
	LONG $0xe4700ff2; BYTE $0xec               // pshuflw    xmm4, xmm4, 236
	LONG $0xe4700f66; BYTE $0x27               // pshufd    xmm4, xmm4, 39
	LONG $0xe4700ff2; BYTE $0x90               // pshuflw    xmm4, xmm4, 144
	LONG $0xfc700ff3; BYTE $0x93               // pshufhw    xmm7, xmm4, 147
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xfade0f66                           // pmaxub    xmm7, xmm2
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xefda0f66                           // pminub    xmm5, xmm7
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xd8               // punpcklbw    xmm3, xmm8
	LONG $0xd3700f66; BYTE $0x27               // pshufd    xmm2, xmm3, 39
	LONG $0xdb730f66; BYTE $0x0e               // psrldq    xmm3, 14
	LONG $0x680f4166; BYTE $0xc0               // punpckhbw    xmm0, xmm8
	LONG $0xf8730f66; BYTE $0x02               // pslldq    xmm0, 2
	LONG $0xc3eb0f66                           // por    xmm0, xmm3
	LONG $0xd2700ff2; BYTE $0xec               // pshuflw    xmm2, xmm2, 236
	LONG $0xd2700f66; BYTE $0x27               // pshufd    xmm2, xmm2, 39
	LONG $0xd2700ff2; BYTE $0x90               // pshuflw    xmm2, xmm2, 144
	LONG $0x700f44f3; WORD $0x93e2             // pshufhw    xmm12, xmm2, 147
	LONG $0x670f4466; BYTE $0xe0               // packuswb    xmm12, xmm0
	LONG $0x136f0f66                           // movdqa    xmm2, oword [rbx]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0x700f4466; WORD $0x27d8             // pshufd    xmm11, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e               // psrldq    xmm0, 14
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0xfb730f66; BYTE $0x02               // pslldq    xmm3, 2
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0x700f41f2; WORD $0xecc3             // pshuflw    xmm0, xmm11, 236
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90               // pshuflw    xmm0, xmm0, 144
	LONG $0xc0700ff3; BYTE $0x93               // pshufhw    xmm0, xmm0, 147
	LONG $0xc3670f66                           // packuswb    xmm0, xmm3
	LONG $0x6f0f44f3; WORD $0x0173             // movdqu    xmm14, oword [rbx + 1]
	LONG $0x6f0f4566; BYTE $0xdf               // movdqa    xmm11, xmm15
	LONG $0xda0f4566; BYTE $0xdc               // pminub    xmm11, xmm12
	LONG $0xde0f4566; BYTE $0xe7               // pmaxub    xmm12, xmm15
	LONG $0x6f0f4466; BYTE $0xfd               // movdqa    xmm15, xmm5
	LONG $0xda0f4466; BYTE $0xfc               // pminub    xmm15, xmm4
	LONG $0xecde0f66                           // pmaxub    xmm5, xmm4
	LONG $0x6f0f4166; BYTE $0x1a               // movdqa    xmm3, oword [r10]
	LONG $0xda0f4166; BYTE $0xcd               // pminub    xmm1, xmm13
	LONG $0x6f0f4466; BYTE $0xee               // movdqa    xmm13, xmm6
	LONG $0xda0f4466; BYTE $0xe9               // pminub    xmm13, xmm1
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0x6f0f4466; BYTE $0xc0               // movdqa    xmm8, xmm0
	LONG $0xda0f4466; BYTE $0xc2               // pminub    xmm8, xmm2
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0x6f0f4166; BYTE $0xc9               // movdqa    xmm1, xmm9
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xda0f4166; BYTE $0xe0               // pminub    xmm4, xmm8
	LONG $0xde0f4166; BYTE $0xc8               // pmaxub    xmm1, xmm8
	LONG $0x6f0f4566; BYTE $0xce               // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xcb               // pminub    xmm9, xmm3
	LONG $0xde0f4466; BYTE $0xf3               // pmaxub    xmm14, xmm3
	LONG $0x6f0f4166; BYTE $0xd5               // movdqa    xmm2, xmm13
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xe5               // pmaxub    xmm4, xmm13
	LONG $0x6f0f4166; BYTE $0xdf               // movdqa    xmm3, xmm15
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0x6f0f4466; BYTE $0xeb               // movdqa    xmm13, xmm3
	LONG $0xda0f4466; BYTE $0xea               // pminub    xmm13, xmm2
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0x6f0f4466; BYTE $0xc6               // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc2               // pminub    xmm8, xmm2
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0x6f0f4166; BYTE $0xd2               // movdqa    xmm2, xmm10
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0x6f0f4466; BYTE $0xd5               // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd2               // pminub    xmm10, xmm2
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0x6f0f4166; BYTE $0xd0               // movdqa    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd6               // pminub    xmm2, xmm14
	LONG $0xde0f4566; BYTE $0xc6               // pmaxub    xmm8, xmm14
	LONG $0x6f0f4166; BYTE $0xfb               // movdqa    xmm7, xmm11
	LONG $0xf9da0f66                           // pminub    xmm7, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0xda0f4166; BYTE $0xc4               // pminub    xmm0, xmm12
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xde0f4166; BYTE $0xd9               // pmaxub    xmm3, xmm9
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xdd               // pmaxub    xmm3, xmm13
	LONG $0xcf6f0f66                           // movdqa    xmm1, xmm7
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xfede0f66                           // pmaxub    xmm7, xmm6
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xda0f4166; BYTE $0xc2               // pminub    xmm0, xmm10
	LONG $0xe96f0f66                           // movdqa    xmm5, xmm1
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xde0f4166; BYTE $0xd8               // pmaxub    xmm3, xmm8
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0x7f0f4166; BYTE $0x19               // movdqa    oword [r9], xmm3
	LONG $0x11fd8349                           // cmp    r13, 17
	JB   LBB2_26
	WORD $0x894c; BYTE $0xf7                   // mov    rdi, r14
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d

LBB2_25:
	LONG $0x6f0f4666; WORD $0x014c; BYTE $0x10 // movdqa    xmm9, oword [rcx + r8 + 16]
	LONG $0x6f0f42f3; WORD $0x0064; BYTE $0x0f // movdqu    xmm4, oword [rax + r8 + 15]
	LONG $0x6f0f4266; WORD $0x007c; BYTE $0x10 // movdqa    xmm7, oword [rax + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x007c; BYTE $0x11 // movdqu    xmm15, oword [rax + r8 + 17]
	LONG $0x6f6f0ff3; BYTE $0xfc               // movdqu    xmm5, oword [rdi - 4]
	LONG $0x576f0ff3; BYTE $0xfd               // movdqu    xmm2, oword [rdi - 3]
	LONG $0x776f0f66; BYTE $0xfe               // movdqa    xmm6, oword [rdi - 2]
	LONG $0x476f0ff3; BYTE $0xff               // movdqu    xmm0, oword [rdi - 1]
	LONG $0x6f0f44f3; BYTE $0x1f               // movdqu    xmm11, oword [rdi]
	LONG $0x6f0f42f3; WORD $0x034c; BYTE $0x0f // movdqu    xmm1, oword [rbx + r8 + 15]
	LONG $0x6f0f4666; WORD $0x0374; BYTE $0x10 // movdqa    xmm14, oword [rbx + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x0364; BYTE $0x11 // movdqu    xmm12, oword [rbx + r8 + 17]
	LONG $0x6f0f4766; WORD $0x0244; BYTE $0x10 // movdqa    xmm8, oword [r10 + r8 + 16]
	LONG $0x6f0f4566; BYTE $0xd1               // movdqa    xmm10, xmm9
	LONG $0xda0f4466; BYTE $0xd4               // pminub    xmm10, xmm4
	LONG $0xde0f4466; BYTE $0xcc               // pmaxub    xmm9, xmm4
	LONG $0x6f0f4166; BYTE $0xdf               // movdqa    xmm3, xmm15
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0xde0f4466; BYTE $0xfd               // pmaxub    xmm15, xmm5
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xde0f4466; BYTE $0xff               // pmaxub    xmm15, xmm7
	LONG $0x6f0f4466; BYTE $0xec               // movdqa    xmm13, xmm4
	LONG $0xda0f4466; BYTE $0xeb               // pminub    xmm13, xmm3
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xfeda0f66                           // pminub    xmm7, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0xebda0f66                           // pminub    xmm5, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xda0f4166; BYTE $0xde               // pminub    xmm3, xmm14
	LONG $0xde0f4166; BYTE $0xce               // pmaxub    xmm1, xmm14
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0x6f0f4566; BYTE $0xdc               // movdqa    xmm11, xmm12
	LONG $0xda0f4566; BYTE $0xd8               // pminub    xmm11, xmm8
	LONG $0xde0f4566; BYTE $0xe0               // pmaxub    xmm12, xmm8
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0x6f0f4166; BYTE $0xed               // movdqa    xmm5, xmm13
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xde0f4166; BYTE $0xd5               // pmaxub    xmm2, xmm13
	LONG $0x6f0f4466; BYTE $0xed               // movdqa    xmm13, xmm5
	LONG $0xda0f4466; BYTE $0xeb               // pminub    xmm13, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xf8da0f66                           // pminub    xmm7, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0x6f0f4466; BYTE $0xf7               // movdqa    xmm14, xmm7
	LONG $0xda0f4466; BYTE $0xf3               // pminub    xmm14, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0x6f0f4166; BYTE $0xf7               // movdqa    xmm6, xmm15
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xde0f4166; BYTE $0xcf               // pmaxub    xmm1, xmm15
	LONG $0x6f0f4466; BYTE $0xc6               // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3               // pminub    xmm8, xmm3
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0x6f0f4166; BYTE $0xde               // movdqa    xmm3, xmm14
	LONG $0xda0f4166; BYTE $0xdc               // pminub    xmm3, xmm12
	LONG $0xde0f4566; BYTE $0xf4               // pmaxub    xmm14, xmm12
	LONG $0x6f0f4166; BYTE $0xe2               // movdqa    xmm4, xmm10
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xc9               // pminub    xmm1, xmm9
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xeb               // pmaxub    xmm5, xmm11
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xde0f4166; BYTE $0xed               // pmaxub    xmm5, xmm13
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x7f0f4366; WORD $0x0164; BYTE $0x10 // movdqa    oword [r9 + r8 + 16], xmm4
	LONG $0x10588d4d                           // lea    r11, [r8 + 16]
	LONG $0x20c08349                           // add    r8, 32
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x394d; BYTE $0xe8                   // cmp    r8, r13
	WORD $0x894d; BYTE $0xd8                   // mov    r8, r11
	JB   LBB2_25

LBB2_26:
	LONG $0x6f0f44f3; WORD $0x1164; BYTE $0xf0 // movdqu    xmm12, oword [rcx + rdx - 16]
	LONG $0x6f0f44f3; WORD $0x104c; BYTE $0xef // movdqu    xmm9, oword [rax + rdx - 17]
	LONG $0x6f0f44f3; WORD $0x1044; BYTE $0xf0 // movdqu    xmm8, oword [rax + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xc0               // movdqa    xmm0, xmm8
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0xc6600f66                           // punpcklbw    xmm0, xmm6
	LONG $0xd8730f66; BYTE $0x02               // psrldq    xmm0, 2
	LONG $0x6f0f4166; BYTE $0xd8               // movdqa    xmm3, xmm8
	LONG $0xde680f66                           // punpckhbw    xmm3, xmm6
	LONG $0xcb700f66; BYTE $0x27               // pshufd    xmm1, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0e               // pslldq    xmm3, 14
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0xc1700ff3; BYTE $0xc4               // pshufhw    xmm0, xmm1, 196
	LONG $0xc0700f66; BYTE $0x27               // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9               // pshufhw    xmm0, xmm0, 249
	LONG $0xd8670f66                           // packuswb    xmm3, xmm0
	LONG $0x6f0f45f3; WORD $0x145c; BYTE $0xee // movdqu    xmm11, oword [r12 + rdx - 18]
	LONG $0x6f0f45f3; WORD $0x1454; BYTE $0xef // movdqu    xmm10, oword [r12 + rdx - 17]
	LONG $0x6f0f45f3; WORD $0x1474; BYTE $0xf0 // movdqu    xmm14, oword [r12 + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xce               // movdqa    xmm1, xmm14
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x02               // psrldq    xmm1, 2
	LONG $0x6f0f4166; BYTE $0xe6               // movdqa    xmm4, xmm14
	LONG $0xe6680f66                           // punpckhbw    xmm4, xmm6
	LONG $0xd4700f66; BYTE $0x27               // pshufd    xmm2, xmm4, 39
	LONG $0xfc730f66; BYTE $0x0e               // pslldq    xmm4, 14
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0xca700ff3; BYTE $0xc4               // pshufhw    xmm1, xmm2, 196
	LONG $0xc9700f66; BYTE $0x27               // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xf9               // pshufhw    xmm1, xmm1, 249
	LONG $0xe1670f66                           // packuswb    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x02               // psrldq    xmm1, 2
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xee680f66                           // punpckhbw    xmm5, xmm6
	LONG $0xd5700f66; BYTE $0x27               // pshufd    xmm2, xmm5, 39
	LONG $0xfd730f66; BYTE $0x0e               // pslldq    xmm5, 14
	LONG $0xe9eb0f66                           // por    xmm5, xmm1
	LONG $0xca700ff3; BYTE $0xc4               // pshufhw    xmm1, xmm2, 196
	LONG $0xc9700f66; BYTE $0x27               // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xf9               // pshufhw    xmm1, xmm1, 249
	LONG $0xe9670f66                           // packuswb    xmm5, xmm1
	LONG $0x546f0ff3; WORD $0xef13             // movdqu    xmm2, oword [rbx + rdx - 17]
	LONG $0x4c6f0ff3; WORD $0xf013             // movdqu    xmm1, oword [rbx + rdx - 16]
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x02               // psrldq    xmm1, 2
	LONG $0xfe680f66                           // punpckhbw    xmm7, xmm6
	LONG $0xf7700f66; BYTE $0x27               // pshufd    xmm6, xmm7, 39
	LONG $0xff730f66; BYTE $0x0e               // pslldq    xmm7, 14
	LONG $0xf9eb0f66                           // por    xmm7, xmm1
	LONG $0xce700ff3; BYTE $0xc4               // pshufhw    xmm1, xmm6, 196
	LONG $0xc9700f66; BYTE $0x27               // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xf9               // pshufhw    xmm1, xmm1, 249
	LONG $0xf9670f66                           // packuswb    xmm7, xmm1
	LONG $0x6f0f45f3; WORD $0x127c; BYTE $0xf0 // movdqu    xmm15, oword [r10 + rdx - 16]
	LONG $0x6f0f4566; BYTE $0xec               // movdqa    xmm13, xmm12
	LONG $0xda0f4566; BYTE $0xe9               // pminub    xmm13, xmm9
	LONG $0xde0f4566; BYTE $0xe1               // pmaxub    xmm12, xmm9
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xda0f4166; BYTE $0xcb               // pminub    xmm1, xmm11
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0x6f0f4566; BYTE $0xd8               // movdqa    xmm11, xmm8
	LONG $0xda0f4466; BYTE $0xdb               // pminub    xmm11, xmm3
	LONG $0xde0f4166; BYTE $0xd8               // pmaxub    xmm3, xmm8
	LONG $0x6f0f4566; BYTE $0xc3               // movdqa    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc1               // pminub    xmm8, xmm1
	LONG $0xde0f4466; BYTE $0xd9               // pmaxub    xmm11, xmm1
	LONG $0x6f0f4166; BYTE $0xf6               // movdqa    xmm6, xmm14
	LONG $0xf4da0f66                           // pminub    xmm6, xmm4
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0x6f0f4166; BYTE $0xca               // movdqa    xmm1, xmm10
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0x6f0f4466; BYTE $0xd1               // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd6               // pminub    xmm10, xmm6
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf2da0f66                           // pminub    xmm6, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0x6f0f4466; BYTE $0xf6               // movdqa    xmm14, xmm6
	LONG $0xda0f4466; BYTE $0xf0               // pminub    xmm14, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0x6f0f4466; BYTE $0xcf               // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xcf               // pminub    xmm9, xmm15
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0x6f0f4166; BYTE $0xc2               // movdqa    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xf2               // pmaxub    xmm14, xmm10
	LONG $0x6f0f4166; BYTE $0xe8               // movdqa    xmm5, xmm8
	LONG $0xda0f4166; BYTE $0xee               // pminub    xmm5, xmm14
	LONG $0xde0f4566; BYTE $0xf0               // pmaxub    xmm14, xmm8
	LONG $0xef0f4566; BYTE $0xc0               // pxor    xmm8, xmm8
	LONG $0x6f0f4466; BYTE $0xd5               // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd0               // pminub    xmm10, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0x6f0f4166; BYTE $0xcb               // movdqa    xmm1, xmm11
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xde0f4166; BYTE $0xf3               // pmaxub    xmm6, xmm11
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xd8               // pminub    xmm11, xmm0
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xde0f4466; BYTE $0xdf               // pmaxub    xmm11, xmm7
	LONG $0x6f0f4166; BYTE $0xfd               // movdqa    xmm7, xmm13
	LONG $0xfeda0f66                           // pminub    xmm7, xmm6
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xea               // pmaxub    xmm5, xmm10
	LONG $0xc76f0f66                           // movdqa    xmm0, xmm7
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xf9de0f66                           // pmaxub    xmm7, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xce               // pminub    xmm1, xmm14
	LONG $0xde0f4166; BYTE $0xd6               // pmaxub    xmm2, xmm14
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xda0f4166; BYTE $0xc3               // pminub    xmm0, xmm11
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x7f0f41f3; WORD $0x115c; BYTE $0xf0 // movdqu    oword [r9 + rdx - 16], xmm3
	WORD $0xff49; BYTE $0xc7                   // inc    r15
	LONG $0x244c034c; BYTE $0x40               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	LONG $0x243c3b4c                           // cmp    r15, qword [rsp]
	JNE  LBB2_23
	JMP  LBB2_62

LBB2_27:
	LONG $0x243c8348; BYTE $0x00 // cmp    qword [rsp], 0
	JE   LBB2_62
	LONG $0x523c8d4c             // lea    r15, [rdx + 2*rdx]
	LONG $0x52548d4c; BYTE $0xff // lea    r10, [rdx + 2*rdx - 1]
	LONG $0xf0e28349             // and    r10, -16
	LONG $0x24048b48             // mov    rax, qword [rsp]
	LONG $0xfe488d48             // lea    rcx, [rax - 2]
	LONG $0x244c8948; BYTE $0x18 // mov    qword [rsp + 24], rcx
	WORD $0xff48; BYTE $0xc8     // dec    rax
	LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x16708d4c             // lea    r14, [rax + 22]
	WORD $0x3145; BYTE $0xed     // xor    r13d, r13d
	LONG $0xef0f4566; BYTE $0xc0 // pxor    xmm8, xmm8

LBB2_29:
	LONG $0xfe458d49                           // lea    rax, [r13 - 2]
	LONG $0xc6af0f48                           // imul    rax, rsi
	LONG $0x24440348; BYTE $0x08               // add    rax, qword [rsp + 8]
	LONG $0x300c8d48                           // lea    rcx, [rax + rsi]
	LONG $0x31248d4c                           // lea    r12, [rcx + rsi]
	LONG $0x343c8d49                           // lea    rdi, [r12 + rsi]
	WORD $0x854d; BYTE $0xed                   // test    r13, r13
	WORD $0x8948; BYTE $0xcb                   // mov    rbx, rcx
	LONG $0x6f0f4466; WORD $0x0e14             // movdqa    xmm10, oword [rsi + rcx]
	LONG $0x6f0f44f3; WORD $0x0e6c; BYTE $0x03 // movdqu    xmm13, oword [rsi + rcx + 3]
	LONG $0x6f0f44f3; WORD $0x0e4c; BYTE $0x06 // movdqu    xmm9, oword [rsi + rcx + 6]
	LONG $0xcc440f49                           // cmove    rcx, r12
	LONG $0x02fd8349                           // cmp    r13, 2
	LONG $0xd9420f48                           // cmovb    rbx, rcx
	LONG $0xc8430f48                           // cmovae    rcx, rax
	LONG $0x246c3b4c; BYTE $0x10               // cmp    r13, qword [rsp + 16]
	WORD $0x894c; BYTE $0xe2                   // mov    rdx, r12
	LONG $0xd7420f48                           // cmovb    rdx, rdi
	LONG $0x246c3b4c; BYTE $0x18               // cmp    r13, qword [rsp + 24]
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	LONG $0xc7420f48                           // cmovb    rax, rdi
	LONG $0x373c8d48                           // lea    rdi, [rdi + rsi]
	LONG $0xd7420f48                           // cmovb    rdx, rdi
	LONG $0x6f0f4466; BYTE $0x39               // movdqa    xmm15, oword [rcx]
	LONG $0x1b6f0f66                           // movdqa    xmm3, oword [rbx]
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0x536f0ff3; BYTE $0x03               // movdqu    xmm2, oword [rbx + 3]
	LONG $0x6f0f4166; BYTE $0xca               // movdqa    xmm1, xmm10
	LONG $0x600f4166; BYTE $0xc8               // punpcklbw    xmm1, xmm8
	LONG $0xe9700f66; BYTE $0x27               // pshufd    xmm5, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0a               // psrldq    xmm1, 10
	LONG $0x6f0f4166; BYTE $0xf2               // movdqa    xmm6, xmm10
	LONG $0x680f4166; BYTE $0xf0               // punpckhbw    xmm6, xmm8
	LONG $0xfe730f66; BYTE $0x06               // pslldq    xmm6, 6
	LONG $0xf1eb0f66                           // por    xmm6, xmm1
	LONG $0xcd700ff3; BYTE $0xec               // pshufhw    xmm1, xmm5, 236
	LONG $0xc9700f66; BYTE $0x67               // pshufd    xmm1, xmm1, 103
	LONG $0xc9700ff2; BYTE $0x24               // pshuflw    xmm1, xmm1, 36
	LONG $0xf9700ff3; BYTE $0x39               // pshufhw    xmm7, xmm1, 57
	LONG $0xfe670f66                           // packuswb    xmm7, xmm6
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0x6f0f4166; BYTE $0xca               // movdqa    xmm1, xmm10
	LONG $0xde0f4566; BYTE $0xd5               // pmaxub    xmm10, xmm13
	LONG $0xf76f0f66                           // movdqa    xmm6, xmm7
	LONG $0xda0f4166; BYTE $0xf2               // pminub    xmm6, xmm10
	LONG $0xde0f4466; BYTE $0xd7               // pmaxub    xmm10, xmm7
	LONG $0x600f4166; BYTE $0xf8               // punpcklbw    xmm7, xmm8
	LONG $0xe7700f66; BYTE $0x27               // pshufd    xmm4, xmm7, 39
	LONG $0xdf730f66; BYTE $0x0a               // psrldq    xmm7, 10
	LONG $0x680f4166; BYTE $0xe8               // punpckhbw    xmm5, xmm8
	LONG $0xfd730f66; BYTE $0x06               // pslldq    xmm5, 6
	LONG $0xefeb0f66                           // por    xmm5, xmm7
	LONG $0xe4700ff3; BYTE $0xec               // pshufhw    xmm4, xmm4, 236
	LONG $0xe4700f66; BYTE $0x67               // pshufd    xmm4, xmm4, 103
	LONG $0xe4700ff2; BYTE $0x24               // pshuflw    xmm4, xmm4, 36
	LONG $0xfc700ff3; BYTE $0x39               // pshufhw    xmm7, xmm4, 57
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe7da0f66                           // pminub    xmm4, xmm7
	LONG $0xfade0f66                           // pmaxub    xmm7, xmm2
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xefda0f66                           // pminub    xmm5, xmm7
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xd8               // punpcklbw    xmm3, xmm8
	LONG $0xd3700f66; BYTE $0x27               // pshufd    xmm2, xmm3, 39
	LONG $0xdb730f66; BYTE $0x0a               // psrldq    xmm3, 10
	LONG $0x680f4166; BYTE $0xc0               // punpckhbw    xmm0, xmm8
	LONG $0xf8730f66; BYTE $0x06               // pslldq    xmm0, 6
	LONG $0xc3eb0f66                           // por    xmm0, xmm3
	LONG $0xd2700ff3; BYTE $0xec               // pshufhw    xmm2, xmm2, 236
	LONG $0xd2700f66; BYTE $0x67               // pshufd    xmm2, xmm2, 103
	LONG $0xd2700ff2; BYTE $0x24               // pshuflw    xmm2, xmm2, 36
	LONG $0x700f44f3; WORD $0x39e2             // pshufhw    xmm12, xmm2, 57
	LONG $0x670f4466; BYTE $0xe0               // packuswb    xmm12, xmm0
	LONG $0x106f0f66                           // movdqa    xmm2, oword [rax]
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc0               // punpcklbw    xmm0, xmm8
	LONG $0x700f4466; WORD $0x27d8             // pshufd    xmm11, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a               // psrldq    xmm0, 10
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0x680f4166; BYTE $0xd8               // punpckhbw    xmm3, xmm8
	LONG $0xfb730f66; BYTE $0x06               // pslldq    xmm3, 6
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0x700f41f3; WORD $0xecc3             // pshufhw    xmm0, xmm11, 236
	LONG $0xc0700f66; BYTE $0x67               // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24               // pshuflw    xmm0, xmm0, 36
	LONG $0xc0700ff3; BYTE $0x39               // pshufhw    xmm0, xmm0, 57
	LONG $0xc3670f66                           // packuswb    xmm0, xmm3
	LONG $0x6f0f44f3; WORD $0x0370             // movdqu    xmm14, oword [rax + 3]
	LONG $0x6f0f4566; BYTE $0xdf               // movdqa    xmm11, xmm15
	LONG $0xda0f4566; BYTE $0xdc               // pminub    xmm11, xmm12
	LONG $0xde0f4566; BYTE $0xe7               // pmaxub    xmm12, xmm15
	LONG $0x6f0f4466; BYTE $0xfd               // movdqa    xmm15, xmm5
	LONG $0xda0f4466; BYTE $0xfc               // pminub    xmm15, xmm4
	LONG $0xecde0f66                           // pmaxub    xmm5, xmm4
	LONG $0x1a6f0f66                           // movdqa    xmm3, oword [rdx]
	LONG $0xda0f4166; BYTE $0xcd               // pminub    xmm1, xmm13
	LONG $0x6f0f4466; BYTE $0xee               // movdqa    xmm13, xmm6
	LONG $0xda0f4466; BYTE $0xe9               // pminub    xmm13, xmm1
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0x6f0f4466; BYTE $0xc0               // movdqa    xmm8, xmm0
	LONG $0xda0f4466; BYTE $0xc2               // pminub    xmm8, xmm2
	LONG $0xc2de0f66                           // pmaxub    xmm0, xmm2
	LONG $0x6f0f4166; BYTE $0xc9               // movdqa    xmm1, xmm9
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xc1               // pmaxub    xmm0, xmm9
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xda0f4166; BYTE $0xe0               // pminub    xmm4, xmm8
	LONG $0xde0f4166; BYTE $0xc8               // pmaxub    xmm1, xmm8
	LONG $0x6f0f4566; BYTE $0xce               // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xcb               // pminub    xmm9, xmm3
	LONG $0xde0f4466; BYTE $0xf3               // pmaxub    xmm14, xmm3
	LONG $0x6f0f4166; BYTE $0xd5               // movdqa    xmm2, xmm13
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xe5               // pmaxub    xmm4, xmm13
	LONG $0x6f0f4166; BYTE $0xdf               // movdqa    xmm3, xmm15
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0x6f0f4466; BYTE $0xeb               // movdqa    xmm13, xmm3
	LONG $0xda0f4466; BYTE $0xea               // pminub    xmm13, xmm2
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xd66f0f66                           // movdqa    xmm2, xmm6
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0x6f0f4466; BYTE $0xc6               // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc2               // pminub    xmm8, xmm2
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0x6f0f4166; BYTE $0xd2               // movdqa    xmm2, xmm10
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0xe8da0f66                           // pminub    xmm5, xmm0
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0x6f0f4466; BYTE $0xd5               // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd2               // pminub    xmm10, xmm2
	LONG $0xeade0f66                           // pmaxub    xmm5, xmm2
	LONG $0x6f0f4166; BYTE $0xd0               // movdqa    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd6               // pminub    xmm2, xmm14
	LONG $0xde0f4566; BYTE $0xc6               // pmaxub    xmm8, xmm14
	LONG $0x6f0f4166; BYTE $0xfb               // movdqa    xmm7, xmm11
	LONG $0xf9da0f66                           // pminub    xmm7, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0xda0f4166; BYTE $0xc4               // pminub    xmm0, xmm12
	LONG $0xc5da0f66                           // pminub    xmm0, xmm5
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xde0f4166; BYTE $0xd9               // pmaxub    xmm3, xmm9
	LONG $0xdade0f66                           // pmaxub    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xdd               // pmaxub    xmm3, xmm13
	LONG $0xcf6f0f66                           // movdqa    xmm1, xmm7
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xfede0f66                           // pmaxub    xmm7, xmm6
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xda0f4166; BYTE $0xc2               // pminub    xmm0, xmm10
	LONG $0xe96f0f66                           // movdqa    xmm5, xmm1
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xe56f0f66                           // movdqa    xmm4, xmm5
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xcdde0f66                           // pmaxub    xmm1, xmm5
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xe1de0f66                           // pmaxub    xmm4, xmm1
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xde0f4166; BYTE $0xd8               // pmaxub    xmm3, xmm8
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xd9de0f66                           // pmaxub    xmm3, xmm1
	LONG $0x7f0f4166; BYTE $0x19               // movdqa    oword [r9], xmm3
	LONG $0x11fa8349                           // cmp    r10, 17
	JB   LBB2_32
	WORD $0x894c; BYTE $0xf7                   // mov    rdi, r14
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d

LBB2_31:
	LONG $0x6f0f4666; WORD $0x014c; BYTE $0x10 // movdqa    xmm9, oword [rcx + r8 + 16]
	LONG $0x6f0f42f3; WORD $0x0364; BYTE $0x0d // movdqu    xmm4, oword [rbx + r8 + 13]
	LONG $0x6f0f4266; WORD $0x037c; BYTE $0x10 // movdqa    xmm7, oword [rbx + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x037c; BYTE $0x13 // movdqu    xmm15, oword [rbx + r8 + 19]
	LONG $0x6f6f0ff3; BYTE $0xf4               // movdqu    xmm5, oword [rdi - 12]
	LONG $0x576f0ff3; BYTE $0xf7               // movdqu    xmm2, oword [rdi - 9]
	LONG $0x776f0f66; BYTE $0xfa               // movdqa    xmm6, oword [rdi - 6]
	LONG $0x476f0ff3; BYTE $0xfd               // movdqu    xmm0, oword [rdi - 3]
	LONG $0x6f0f44f3; BYTE $0x1f               // movdqu    xmm11, oword [rdi]
	LONG $0x6f0f42f3; WORD $0x004c; BYTE $0x0d // movdqu    xmm1, oword [rax + r8 + 13]
	LONG $0x6f0f4666; WORD $0x0074; BYTE $0x10 // movdqa    xmm14, oword [rax + r8 + 16]
	LONG $0x6f0f46f3; WORD $0x0064; BYTE $0x13 // movdqu    xmm12, oword [rax + r8 + 19]
	LONG $0x6f0f4666; WORD $0x0244; BYTE $0x10 // movdqa    xmm8, oword [rdx + r8 + 16]
	LONG $0x6f0f4566; BYTE $0xd1               // movdqa    xmm10, xmm9
	LONG $0xda0f4466; BYTE $0xd4               // pminub    xmm10, xmm4
	LONG $0xde0f4466; BYTE $0xcc               // pmaxub    xmm9, xmm4
	LONG $0x6f0f4166; BYTE $0xdf               // movdqa    xmm3, xmm15
	LONG $0xddda0f66                           // pminub    xmm3, xmm5
	LONG $0xde0f4466; BYTE $0xfd               // pmaxub    xmm15, xmm5
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xde0f4466; BYTE $0xff               // pmaxub    xmm15, xmm7
	LONG $0x6f0f4466; BYTE $0xec               // movdqa    xmm13, xmm4
	LONG $0xda0f4466; BYTE $0xeb               // pminub    xmm13, xmm3
	LONG $0xe3de0f66                           // pmaxub    xmm4, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xfeda0f66                           // pminub    xmm7, xmm6
	LONG $0xf2de0f66                           // pmaxub    xmm6, xmm2
	LONG $0xef6f0f66                           // movdqa    xmm5, xmm7
	LONG $0xebda0f66                           // pminub    xmm5, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xda0f4166; BYTE $0xde               // pminub    xmm3, xmm14
	LONG $0xde0f4166; BYTE $0xce               // pmaxub    xmm1, xmm14
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xde0f4166; BYTE $0xcb               // pmaxub    xmm1, xmm11
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0x6f0f4566; BYTE $0xdc               // movdqa    xmm11, xmm12
	LONG $0xda0f4566; BYTE $0xd8               // pminub    xmm11, xmm8
	LONG $0xde0f4566; BYTE $0xe0               // pmaxub    xmm12, xmm8
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0x6f0f4166; BYTE $0xed               // movdqa    xmm5, xmm13
	LONG $0xeada0f66                           // pminub    xmm5, xmm2
	LONG $0xde0f4166; BYTE $0xd5               // pmaxub    xmm2, xmm13
	LONG $0x6f0f4466; BYTE $0xed               // movdqa    xmm13, xmm5
	LONG $0xda0f4466; BYTE $0xeb               // pminub    xmm13, xmm3
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xc7de0f66                           // pmaxub    xmm0, xmm7
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0xf8da0f66                           // pminub    xmm7, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0x6f0f4466; BYTE $0xf7               // movdqa    xmm14, xmm7
	LONG $0xda0f4466; BYTE $0xf3               // pminub    xmm14, xmm3
	LONG $0xfbde0f66                           // pmaxub    xmm7, xmm3
	LONG $0xde6f0f66                           // movdqa    xmm3, xmm6
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0x6f0f4166; BYTE $0xf7               // movdqa    xmm6, xmm15
	LONG $0xf1da0f66                           // pminub    xmm6, xmm1
	LONG $0xde0f4166; BYTE $0xcf               // pmaxub    xmm1, xmm15
	LONG $0x6f0f4466; BYTE $0xc6               // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3               // pminub    xmm8, xmm3
	LONG $0xf3de0f66                           // pmaxub    xmm6, xmm3
	LONG $0x6f0f4166; BYTE $0xde               // movdqa    xmm3, xmm14
	LONG $0xda0f4166; BYTE $0xdc               // pminub    xmm3, xmm12
	LONG $0xde0f4566; BYTE $0xf4               // pmaxub    xmm14, xmm12
	LONG $0x6f0f4166; BYTE $0xe2               // movdqa    xmm4, xmm10
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xde0f4166; BYTE $0xc2               // pmaxub    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xc9               // pminub    xmm1, xmm9
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xeb               // pmaxub    xmm5, xmm11
	LONG $0xebde0f66                           // pmaxub    xmm5, xmm3
	LONG $0xde0f4166; BYTE $0xed               // pmaxub    xmm5, xmm13
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xe7de0f66                           // pmaxub    xmm4, xmm7
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdada0f66                           // pminub    xmm3, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd1da0f66                           // pminub    xmm2, xmm1
	LONG $0xccde0f66                           // pmaxub    xmm1, xmm4
	LONG $0xda0f4166; BYTE $0xc8               // pminub    xmm1, xmm8
	LONG $0xe06f0f66                           // movdqa    xmm4, xmm0
	LONG $0xe3da0f66                           // pminub    xmm4, xmm3
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xcade0f66                           // pmaxub    xmm1, xmm2
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                           // pminub    xmm2, xmm0
	LONG $0xc4de0f66                           // pmaxub    xmm0, xmm4
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xd0de0f66                           // pmaxub    xmm2, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x7f0f4366; WORD $0x0164; BYTE $0x10 // movdqa    oword [r9 + r8 + 16], xmm4
	LONG $0x10588d4d                           // lea    r11, [r8 + 16]
	LONG $0x20c08349                           // add    r8, 32
	LONG $0x10c78348                           // add    rdi, 16
	WORD $0x394d; BYTE $0xd0                   // cmp    r8, r10
	WORD $0x894d; BYTE $0xd8                   // mov    r8, r11
	JB   LBB2_31

LBB2_32:
	LONG $0x6f0f46f3; WORD $0x3964; BYTE $0xf0 // movdqu    xmm12, oword [rcx + r15 - 16]
	LONG $0x6f0f46f3; WORD $0x3b4c; BYTE $0xed // movdqu    xmm9, oword [rbx + r15 - 19]
	LONG $0x6f0f46f3; WORD $0x3b44; BYTE $0xf0 // movdqu    xmm8, oword [rbx + r15 - 16]
	LONG $0x6f0f4166; BYTE $0xc0               // movdqa    xmm0, xmm8
	LONG $0xf6ef0f66                           // pxor    xmm6, xmm6
	LONG $0xc6600f66                           // punpcklbw    xmm0, xmm6
	LONG $0xd8730f66; BYTE $0x06               // psrldq    xmm0, 6
	LONG $0x6f0f4166; BYTE $0xd8               // movdqa    xmm3, xmm8
	LONG $0xde680f66                           // punpckhbw    xmm3, xmm6
	LONG $0xcb700f66; BYTE $0x27               // pshufd    xmm1, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0a               // pslldq    xmm3, 10
	LONG $0xd8eb0f66                           // por    xmm3, xmm0
	LONG $0xc1700ff2; BYTE $0x4c               // pshuflw    xmm0, xmm1, 76
	LONG $0xc0700f66; BYTE $0x68               // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39               // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7               // pshufhw    xmm0, xmm0, 231
	LONG $0xd8670f66                           // packuswb    xmm3, xmm0
	LONG $0x6f0f47f3; WORD $0x3c5c; BYTE $0xea // movdqu    xmm11, oword [r12 + r15 - 22]
	LONG $0x6f0f47f3; WORD $0x3c54; BYTE $0xed // movdqu    xmm10, oword [r12 + r15 - 19]
	LONG $0x6f0f47f3; WORD $0x3c74; BYTE $0xf0 // movdqu    xmm14, oword [r12 + r15 - 16]
	LONG $0x6f0f4166; BYTE $0xce               // movdqa    xmm1, xmm14
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x06               // psrldq    xmm1, 6
	LONG $0x6f0f4166; BYTE $0xe6               // movdqa    xmm4, xmm14
	LONG $0xe6680f66                           // punpckhbw    xmm4, xmm6
	LONG $0xd4700f66; BYTE $0x27               // pshufd    xmm2, xmm4, 39
	LONG $0xfc730f66; BYTE $0x0a               // pslldq    xmm4, 10
	LONG $0xe1eb0f66                           // por    xmm4, xmm1
	LONG $0xca700ff2; BYTE $0x4c               // pshuflw    xmm1, xmm2, 76
	LONG $0xc9700f66; BYTE $0x68               // pshufd    xmm1, xmm1, 104
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xe7               // pshufhw    xmm1, xmm1, 231
	LONG $0xe1670f66                           // packuswb    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x06               // psrldq    xmm1, 6
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xee680f66                           // punpckhbw    xmm5, xmm6
	LONG $0xd5700f66; BYTE $0x27               // pshufd    xmm2, xmm5, 39
	LONG $0xfd730f66; BYTE $0x0a               // pslldq    xmm5, 10
	LONG $0xe9eb0f66                           // por    xmm5, xmm1
	LONG $0xca700ff2; BYTE $0x4c               // pshuflw    xmm1, xmm2, 76
	LONG $0xc9700f66; BYTE $0x68               // pshufd    xmm1, xmm1, 104
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xe7               // pshufhw    xmm1, xmm1, 231
	LONG $0xe9670f66                           // packuswb    xmm5, xmm1
	LONG $0x6f0f42f3; WORD $0x3854; BYTE $0xed // movdqu    xmm2, oword [rax + r15 - 19]
	LONG $0x6f0f42f3; WORD $0x384c; BYTE $0xf0 // movdqu    xmm1, oword [rax + r15 - 16]
	LONG $0xf96f0f66                           // movdqa    xmm7, xmm1
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xd1de0f66                           // pmaxub    xmm2, xmm1
	LONG $0xce600f66                           // punpcklbw    xmm1, xmm6
	LONG $0xd9730f66; BYTE $0x06               // psrldq    xmm1, 6
	LONG $0xfe680f66                           // punpckhbw    xmm7, xmm6
	LONG $0xf7700f66; BYTE $0x27               // pshufd    xmm6, xmm7, 39
	LONG $0xff730f66; BYTE $0x0a               // pslldq    xmm7, 10
	LONG $0xf9eb0f66                           // por    xmm7, xmm1
	LONG $0xce700ff2; BYTE $0x4c               // pshuflw    xmm1, xmm6, 76
	LONG $0xc9700f66; BYTE $0x68               // pshufd    xmm1, xmm1, 104
	LONG $0xc9700ff2; BYTE $0x39               // pshuflw    xmm1, xmm1, 57
	LONG $0xc9700ff3; BYTE $0xe7               // pshufhw    xmm1, xmm1, 231
	LONG $0xf9670f66                           // packuswb    xmm7, xmm1
	LONG $0x6f0f46f3; WORD $0x3a7c; BYTE $0xf0 // movdqu    xmm15, oword [rdx + r15 - 16]
	LONG $0x6f0f4566; BYTE $0xec               // movdqa    xmm13, xmm12
	LONG $0xda0f4566; BYTE $0xe9               // pminub    xmm13, xmm9
	LONG $0xde0f4566; BYTE $0xe1               // pmaxub    xmm12, xmm9
	LONG $0xcb6f0f66                           // movdqa    xmm1, xmm3
	LONG $0xda0f4166; BYTE $0xcb               // pminub    xmm1, xmm11
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0x6f0f4566; BYTE $0xd8               // movdqa    xmm11, xmm8
	LONG $0xda0f4466; BYTE $0xdb               // pminub    xmm11, xmm3
	LONG $0xde0f4166; BYTE $0xd8               // pmaxub    xmm3, xmm8
	LONG $0x6f0f4566; BYTE $0xc3               // movdqa    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc1               // pminub    xmm8, xmm1
	LONG $0xde0f4466; BYTE $0xd9               // pmaxub    xmm11, xmm1
	LONG $0x6f0f4166; BYTE $0xf6               // movdqa    xmm6, xmm14
	LONG $0xf4da0f66                           // pminub    xmm6, xmm4
	LONG $0xde0f4166; BYTE $0xe6               // pmaxub    xmm4, xmm14
	LONG $0x6f0f4166; BYTE $0xca               // movdqa    xmm1, xmm10
	LONG $0xccda0f66                           // pminub    xmm1, xmm4
	LONG $0xde0f4166; BYTE $0xe2               // pmaxub    xmm4, xmm10
	LONG $0x6f0f4466; BYTE $0xd1               // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd6               // pminub    xmm10, xmm6
	LONG $0xcede0f66                           // pmaxub    xmm1, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf2da0f66                           // pminub    xmm6, xmm2
	LONG $0xd5de0f66                           // pmaxub    xmm2, xmm5
	LONG $0x6f0f4466; BYTE $0xf6               // movdqa    xmm14, xmm6
	LONG $0xda0f4466; BYTE $0xf0               // pminub    xmm14, xmm0
	LONG $0xf0de0f66                           // pmaxub    xmm6, xmm0
	LONG $0x6f0f4466; BYTE $0xcf               // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xcf               // pminub    xmm9, xmm15
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0x6f0f4166; BYTE $0xc2               // movdqa    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xc6               // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xf2               // pmaxub    xmm14, xmm10
	LONG $0x6f0f4166; BYTE $0xe8               // movdqa    xmm5, xmm8
	LONG $0xda0f4166; BYTE $0xee               // pminub    xmm5, xmm14
	LONG $0xde0f4566; BYTE $0xf0               // pmaxub    xmm14, xmm8
	LONG $0xef0f4566; BYTE $0xc0               // pxor    xmm8, xmm8
	LONG $0x6f0f4466; BYTE $0xd5               // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd0               // pminub    xmm10, xmm0
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xc16f0f66                           // movdqa    xmm0, xmm1
	LONG $0xc6da0f66                           // pminub    xmm0, xmm6
	LONG $0xf1de0f66                           // pmaxub    xmm6, xmm1
	LONG $0x6f0f4166; BYTE $0xcb               // movdqa    xmm1, xmm11
	LONG $0xceda0f66                           // pminub    xmm1, xmm6
	LONG $0xde0f4166; BYTE $0xf3               // pmaxub    xmm6, xmm11
	LONG $0x6f0f4466; BYTE $0xd9               // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xd8               // pminub    xmm11, xmm0
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc46f0f66                           // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                           // pminub    xmm0, xmm2
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd3de0f66                           // pmaxub    xmm2, xmm3
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0xd8da0f66                           // pminub    xmm3, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc3               // movdqa    xmm0, xmm11
	LONG $0xc7da0f66                           // pminub    xmm0, xmm7
	LONG $0xde0f4466; BYTE $0xdf               // pmaxub    xmm11, xmm7
	LONG $0x6f0f4166; BYTE $0xfd               // movdqa    xmm7, xmm13
	LONG $0xfeda0f66                           // pminub    xmm7, xmm6
	LONG $0xde0f4166; BYTE $0xf5               // pmaxub    xmm6, xmm13
	LONG $0xda0f4166; BYTE $0xd4               // pminub    xmm2, xmm12
	LONG $0xd4da0f66                           // pminub    xmm2, xmm4
	LONG $0xd6da0f66                           // pminub    xmm2, xmm6
	LONG $0xde0f4166; BYTE $0xe9               // pmaxub    xmm5, xmm9
	LONG $0xe8de0f66                           // pmaxub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xea               // pmaxub    xmm5, xmm10
	LONG $0xc76f0f66                           // movdqa    xmm0, xmm7
	LONG $0xc1da0f66                           // pminub    xmm0, xmm1
	LONG $0xf9de0f66                           // pmaxub    xmm7, xmm1
	LONG $0xca6f0f66                           // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xce               // pminub    xmm1, xmm14
	LONG $0xde0f4166; BYTE $0xd6               // pmaxub    xmm2, xmm14
	LONG $0xe76f0f66                           // movdqa    xmm4, xmm7
	LONG $0xe2da0f66                           // pminub    xmm4, xmm2
	LONG $0xd7de0f66                           // pmaxub    xmm2, xmm7
	LONG $0xd3da0f66                           // pminub    xmm2, xmm3
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                           // pminub    xmm3, xmm1
	LONG $0xc8de0f66                           // pmaxub    xmm1, xmm0
	LONG $0xc26f0f66                           // movdqa    xmm0, xmm2
	LONG $0xc4da0f66                           // pminub    xmm0, xmm4
	LONG $0xd4de0f66                           // pmaxub    xmm2, xmm4
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xc3de0f66                           // pmaxub    xmm0, xmm3
	LONG $0xe5de0f66                           // pmaxub    xmm4, xmm5
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xe2de0f66                           // pmaxub    xmm4, xmm2
	LONG $0xe1da0f66                           // pminub    xmm4, xmm1
	LONG $0xcc6f0f66                           // movdqa    xmm1, xmm4
	LONG $0xc8da0f66                           // pminub    xmm1, xmm0
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xc36f0f66                           // movdqa    xmm0, xmm3
	LONG $0xda0f4166; BYTE $0xc3               // pminub    xmm0, xmm11
	LONG $0xde0f4166; BYTE $0xdb               // pmaxub    xmm3, xmm11
	LONG $0xc1de0f66                           // pmaxub    xmm0, xmm1
	LONG $0xdcda0f66                           // pminub    xmm3, xmm4
	LONG $0xd8de0f66                           // pmaxub    xmm3, xmm0
	LONG $0x7f0f43f3; WORD $0x395c; BYTE $0xf0 // movdqu    oword [r9 + r15 - 16], xmm3
	WORD $0xff49; BYTE $0xc5                   // inc    r13
	LONG $0x244c034c; BYTE $0x40               // add    r9, qword 64[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                   // add    r14, rsi
	LONG $0x242c3b4c                           // cmp    r13, qword [rsp]
	JNE  LBB2_29

LBB2_62:
	MOVQ 72(SP), SP
	RET

DATA LCDATA4<>+0x000(SB)/8, $0x0000000000000000
DATA LCDATA4<>+0x008(SB)/8, $0xffffffff00000000
DATA LCDATA4<>+0x010(SB)/8, $0x0000000000000000
DATA LCDATA4<>+0x018(SB)/8, $0xffff000000000000
GLOBL LCDATA4<>(SB), 8, $32

TEXT Â·_SimdSse2MedianFilterSquare5x5(SB), $384-56

	MOVQ src+0(FP), DI
	MOVQ srcStride+8(FP), SI
	MOVQ width+16(FP), DX
	MOVQ height+24(FP), CX
	MOVQ channelCount+32(FP), R8
	MOVQ dst+40(FP), R9
	MOVQ dstStride+48(FP), R10

//	MOVQ SP, BP
//	ANDQ $-16, BP
//	MOVQ SP, 376(BP)
//	MOVQ R10, 368(BP)
//	LEAQ LCDATA4<>(SB), BP
//	ADDQ $16, SP
//	ANDQ $-16, SP

    MOVQ SP, BP
    ADDQ $16, SP
    ANDQ $-16, SP
    MOVQ BP, 360(SP)
    MOVQ R10, 352(SP)
    LEAQ LCDATA4<>(SB), BP

	LONG $0x248c8948; LONG $0x000000f0             // mov    qword [rsp + 240], rcx
	WORD $0x8948; BYTE $0xf8                       // mov    rax, rdi
	LONG $0xf0e08348                               // and    rax, -16
	LONG $0x24bc8948; LONG $0x000000f8             // mov    qword [rsp + 248], rdi
	WORD $0x3948; BYTE $0xf8                       // cmp    rax, rdi
	JNE  LBB3_33
	WORD $0x8948; BYTE $0xd0                       // mov    rax, rdx
	WORD $0x0948; BYTE $0xf0                       // or    rax, rsi
	WORD $0x8948; BYTE $0xc1                       // mov    rcx, rax
	LONG $0xf0e18348                               // and    rcx, -16
	WORD $0x3948; BYTE $0xc1                       // cmp    rcx, rax
	JNE  LBB3_33
	LONG $0x24848b48; LONG $0x00000160             // mov    rax, qword 352[rsp] /* [rbp + 16] */
	WORD $0x8948; BYTE $0xc1                       // mov    rcx, rax
	LONG $0xf0e08348                               // and    rax, -16
	WORD $0x3948; BYTE $0xc8                       // cmp    rax, rcx
	JNE  LBB3_33
	WORD $0x894c; BYTE $0xc8                       // mov    rax, r9
	LONG $0xf0e08348                               // and    rax, -16
	WORD $0x394c; BYTE $0xc8                       // cmp    rax, r9
	JNE  LBB3_33
	LONG $0x02f88349                               // cmp    r8, 2
	JG   LBB3_13
	LONG $0x01f88349                               // cmp    r8, 1
	JE   LBB3_21
	LONG $0x02f88349                               // cmp    r8, 2
	JNE  LBB3_62
	LONG $0x24bc8348; LONG $0x000000f0; BYTE $0x00 // cmp    qword [rsp + 240], 0
	JE   LBB3_62
	LONG $0x12248d4c                               // lea    r12, [rdx + rdx]
	LONG $0x126c8d4c; BYTE $0xff                   // lea    r13, [rdx + rdx - 1]
	LONG $0xf0e58349                               // and    r13, -16
	LONG $0x24848b48; LONG $0x000000f0             // mov    rax, qword [rsp + 240]
	LONG $0xfe488d48                               // lea    rcx, [rax - 2]
	LONG $0x248c8948; LONG $0x00000120             // mov    qword [rsp + 288], rcx
	WORD $0xff48; BYTE $0xc8                       // dec    rax
	LONG $0x24848948; LONG $0x00000130             // mov    qword [rsp + 304], rax
	LONG $0x24848b48; LONG $0x000000f8             // mov    rax, qword [rsp + 248]
	LONG $0x14708d4c                               // lea    r14, [rax + 20]
	WORD $0x3145; BYTE $0xff                       // xor    r15d, r15d
	LONG $0x00ffffb8; BYTE $0x00                   // mov    eax, 65535
	LONG $0xc06e0f66                               // movd    xmm0, eax
	LONG $0x847f0f66; LONG $0x00014024; BYTE $0x00 // movdqa    oword [rsp + 320], xmm0

LBB3_9:
	LONG $0xfe4f8d49                                 // lea    rcx, [r15 - 2]
	LONG $0xceaf0f48                                 // imul    rcx, rsi
	LONG $0x248c0348; LONG $0x000000f8               // add    rcx, qword [rsp + 248]
	LONG $0x313c8d48                                 // lea    rdi, [rcx + rsi]
	LONG $0x37148d4c                                 // lea    r10, [rdi + rsi]
	LONG $0x32048d4d                                 // lea    r8, [r10 + rsi]
	WORD $0x854d; BYTE $0xff                         // test    r15, r15
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0x1c6f0f66; BYTE $0x3e                     // movdqa    xmm3, oword [rsi + rdi]
	LONG $0x7c6f0ff3; WORD $0x023e                   // movdqu    xmm7, oword [rsi + rdi + 2]
	LONG $0x7c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm7
	WORD $0x8948; BYTE $0xf8                         // mov    rax, rdi
	LONG $0xc2440f49                                 // cmove    rax, r10
	LONG $0x02ff8349                                 // cmp    r15, 2
	LONG $0xd8420f4c                                 // cmovb    r11, rax
	LONG $0xc1430f48                                 // cmovae    rax, rcx
	LONG $0x24bc3b4c; LONG $0x00000130               // cmp    r15, qword [rsp + 304]
	WORD $0x894c; BYTE $0xd1                         // mov    rcx, r10
	LONG $0xc8420f49                                 // cmovb    rcx, r8
	LONG $0x24bc3b4c; LONG $0x00000120               // cmp    r15, qword [rsp + 288]
	WORD $0x8948; BYTE $0xcb                         // mov    rbx, rcx
	LONG $0xd8420f49                                 // cmovb    rbx, r8
	LONG $0x086f0f66                                 // movdqa    xmm1, oword [rax]
	LONG $0xf16f0f66                                 // movdqa    xmm6, xmm1
	LONG $0x406f0ff3; BYTE $0x02                     // movdqu    xmm0, oword [rax + 2]
	LONG $0x506f0ff3; BYTE $0x04                     // movdqu    xmm2, oword [rax + 4]
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f4466; BYTE $0xc0                     // movdqa    xmm8, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xe8                     // pminub    xmm13, xmm0
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x847f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm0
	LONG $0xf9730f66; BYTE $0x02                     // pslldq    xmm1, 2
	LONG $0xa46f0f66; LONG $0x00014024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 320]
	LONG $0xf4db0f66                                 // pand    xmm6, xmm4
	LONG $0xf1eb0f66                                 // por    xmm6, xmm1
	LONG $0xce6f0f66                                 // movdqa    xmm1, xmm6
	LONG $0xf9730f66; BYTE $0x02                     // pslldq    xmm1, 2
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xc4db0f66                                 // pand    xmm0, xmm4
	LONG $0xc1eb0f66                                 // por    xmm0, xmm1
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0x6f0f4566; BYTE $0x13                     // movdqa    xmm10, oword [r11]
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xf9730f66; BYTE $0x02                     // pslldq    xmm1, 2
	LONG $0x6f0f4566; BYTE $0xe2                     // movdqa    xmm12, xmm10
	LONG $0xdb0f4466; BYTE $0xe4                     // pand    xmm12, xmm4
	LONG $0xeb0f4466; BYTE $0xe1                     // por    xmm12, xmm1
	LONG $0x7f0f4466; WORD $0x2424                   // movdqa    oword [rsp], xmm12
	LONG $0x6f0f4166; BYTE $0xcc                     // movdqa    xmm1, xmm12
	LONG $0xf9730f66; BYTE $0x02                     // pslldq    xmm1, 2
	LONG $0xdb0f4466; BYTE $0xe4                     // pand    xmm12, xmm4
	LONG $0xeb0f4466; BYTE $0xe1                     // por    xmm12, xmm1
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x02                     // pslldq    xmm1, 2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd4db0f66                                 // pand    xmm2, xmm4
	LONG $0xd1eb0f66                                 // por    xmm2, xmm1
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0x5c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm3
	LONG $0xdfde0f66                                 // pmaxub    xmm3, xmm7
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4466; BYTE $0xfb                     // pminub    xmm15, xmm3
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0x9c7f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm3
	LONG $0xfa730f66; BYTE $0x02                     // pslldq    xmm2, 2
	LONG $0xecdb0f66                                 // pand    xmm5, xmm4
	LONG $0xeaeb0f66                                 // por    xmm5, xmm2
	LONG $0x436f0ff3; BYTE $0x02                     // movdqu    xmm0, oword [rbx + 2]
	LONG $0x4b6f0ff3; BYTE $0x04                     // movdqu    xmm1, oword [rbx + 4]
	LONG $0x4c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm1
	LONG $0x847f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm0
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x1b6f0f66                                 // movdqa    xmm3, oword [rbx]
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm1
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0x447f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm0
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xfb730f66; BYTE $0x02                     // pslldq    xmm3, 2
	LONG $0xd4db0f66                                 // pand    xmm2, xmm4
	LONG $0xd3eb0f66                                 // por    xmm2, xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x02                     // pslldq    xmm3, 2
	LONG $0xfa6f0f66                                 // movdqa    xmm7, xmm2
	LONG $0xfcdb0f66                                 // pand    xmm7, xmm4
	LONG $0xfbeb0f66                                 // por    xmm7, xmm3
	LONG $0x30148d49                                 // lea    rdx, [r8 + rsi]
	LONG $0xca420f48                                 // cmovb    rcx, rdx
	LONG $0x6f0f4466; BYTE $0x19                     // movdqa    xmm11, oword [rcx]
	LONG $0x6f0f4566; BYTE $0xcb                     // movdqa    xmm9, xmm11
	LONG $0x730f4166; WORD $0x02f9                   // pslldq    xmm9, 2
	LONG $0x6f0f4166; BYTE $0xdb                     // movdqa    xmm3, xmm11
	LONG $0xdcdb0f66                                 // pand    xmm3, xmm4
	LONG $0xeb0f4166; BYTE $0xd9                     // por    xmm3, xmm9
	LONG $0x6f0f4466; BYTE $0xcb                     // movdqa    xmm9, xmm3
	LONG $0x730f4166; WORD $0x02f9                   // pslldq    xmm9, 2
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc4db0f66                                 // pand    xmm0, xmm4
	LONG $0xeb0f4166; BYTE $0xc1                     // por    xmm0, xmm9
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xce                     // pminub    xmm9, xmm6
	LONG $0xde0f4466; BYTE $0xf6                     // pmaxub    xmm14, xmm6
	LONG $0x7f0f4466; LONG $0x00a024b4; WORD $0x0000 // movdqa    oword [rsp + 160], xmm14
	LONG $0xda0f4466; WORD $0x2444; BYTE $0x10       // pminub    xmm8, oword [rsp + 16]
	LONG $0x6f0f4166; BYTE $0xcd                     // movdqa    xmm1, xmm13
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0xde0f4566; BYTE $0xe8                     // pmaxub    xmm13, xmm8
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x246f0f66; BYTE $0x24                     // movdqa    xmm4, oword [rsp]
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xda0f4166; BYTE $0xf2                     // pminub    xmm6, xmm10
	LONG $0xde0f4166; BYTE $0xe2                     // pmaxub    xmm4, xmm10
	LONG $0x6f0f4566; BYTE $0xf4                     // movdqa    xmm14, xmm12
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x247f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm4
	LONG $0x6f0f4566; BYTE $0xe6                     // movdqa    xmm12, xmm14
	LONG $0xda0f4466; BYTE $0xe6                     // pminub    xmm12, xmm6
	LONG $0xde0f4466; BYTE $0xf6                     // pmaxub    xmm14, xmm6
	LONG $0x6f0f45f3; WORD $0x0443                   // movdqu    xmm8, oword [r11 + 4]
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0xde0f4166; BYTE $0xe8                     // pmaxub    xmm5, xmm8
	LONG $0x6f0f45f3; WORD $0x0243                   // movdqu    xmm8, oword [r11 + 2]
	LONG $0x6f0f4566; BYTE $0xd0                     // movdqa    xmm10, xmm8
	LONG $0xda0f4466; BYTE $0xd5                     // pminub    xmm10, xmm5
	LONG $0xde0f4166; BYTE $0xe8                     // pmaxub    xmm5, xmm8
	LONG $0x6f0f4566; BYTE $0xea                     // movdqa    xmm13, xmm10
	LONG $0xda0f4466; BYTE $0xee                     // pminub    xmm13, xmm6
	LONG $0xde0f4466; BYTE $0xd6                     // pmaxub    xmm10, xmm6
	LONG $0x746f0f66; WORD $0x2024                   // movdqa    xmm6, oword [rsp + 32]
	LONG $0x74da0f66; WORD $0x4024                   // pminub    xmm6, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xda0f4466; BYTE $0xfe                     // pminub    xmm15, xmm6
	LONG $0xe6de0f66                                 // pmaxub    xmm4, xmm6
	LONG $0xa47f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    oword [rsp + 256], xmm4
	LONG $0xf76f0f66                                 // movdqa    xmm6, xmm7
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x546f0ff3; WORD $0x043e                   // movdqu    xmm2, oword [rsi + rdi + 4]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xe6de0f66                                 // pmaxub    xmm4, xmm6
	LONG $0x6f0f4466; LONG $0x00902484; WORD $0x0000 // movdqa    xmm8, oword [rsp + 144]
	LONG $0xda0f4466; WORD $0x2444; BYTE $0x50       // pminub    xmm8, oword [rsp + 80]
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xb47f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm6
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xda0f4166; BYTE $0xd3                     // pminub    xmm2, xmm11
	LONG $0xde0f4166; BYTE $0xdb                     // pmaxub    xmm3, xmm11
	LONG $0x6f0f4466; BYTE $0xd8                     // movdqa    xmm11, xmm0
	LONG $0xda0f4466; BYTE $0xdb                     // pminub    xmm11, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0xde0f4466; BYTE $0xda                     // pmaxub    xmm11, xmm2
	LONG $0x716f0ff3; BYTE $0x02                     // movdqu    xmm6, oword [rcx + 2]
	LONG $0x416f0ff3; BYTE $0x04                     // movdqu    xmm0, oword [rcx + 4]
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc0                     // pminub    xmm8, xmm0
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc4                     // pminub    xmm0, xmm12
	LONG $0x447f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm0
	LONG $0xde0f4466; BYTE $0xe1                     // pmaxub    xmm12, xmm1
	LONG $0x7f0f4466; WORD $0x2464; BYTE $0x40       // movdqa    oword [rsp + 64], xmm12
	LONG $0x4c6f0f66; WORD $0x6024                   // movdqa    xmm1, oword [rsp + 96]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc6                     // pminub    xmm0, xmm14
	LONG $0xde0f4466; BYTE $0xf1                     // pmaxub    xmm14, xmm1
	LONG $0x6f0f4166; BYTE $0xc9                     // movdqa    xmm1, xmm9
	LONG $0xda0f4166; BYTE $0xce                     // pminub    xmm1, xmm14
	LONG $0xde0f4566; BYTE $0xf1                     // pmaxub    xmm14, xmm9
	LONG $0x7f0f4466; WORD $0x2474; BYTE $0x20       // movdqa    oword [rsp + 32], xmm14
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x947f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x8c7f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm1
	LONG $0x946f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 176]
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x0c6f0f66; BYTE $0x24                     // movdqa    xmm1, oword [rsp]
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0x6f0f4466; LONG $0x00a0248c; WORD $0x0000 // movdqa    xmm9, oword [rsp + 160]
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm1
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x947f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm2
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0x4c6f0f66; WORD $0x1024                   // movdqa    xmm1, oword [rsp + 16]
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x6f0f4566; BYTE $0xcd                     // movdqa    xmm9, xmm13
	LONG $0xda0f4466; BYTE $0xc9                     // pminub    xmm9, xmm1
	LONG $0xde0f4166; BYTE $0xcd                     // pmaxub    xmm1, xmm13
	LONG $0x4c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm1
	LONG $0x6f0f4166; BYTE $0xc9                     // movdqa    xmm1, xmm9
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0x8c7f0f66; LONG $0x00011024; BYTE $0x00   // movdqa    oword [rsp + 272], xmm1
	LONG $0xde0f4466; BYTE $0xc8                     // pmaxub    xmm9, xmm0
	LONG $0x8c6f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 256]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xe2                     // pmaxub    xmm4, xmm10
	LONG $0xa47f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm4
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd0                     // pminub    xmm10, xmm0
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x846f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 128]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xf8de0f66                                 // pmaxub    xmm7, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xfdde0f66                                 // pmaxub    xmm7, xmm5
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xda0f4466; BYTE $0xf1                     // pminub    xmm14, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xa46f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 224]
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0xde0f4466; BYTE $0xc4                     // pmaxub    xmm8, xmm4
	LONG $0xa46f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4566; BYTE $0xe0                     // pminub    xmm12, xmm8
	LONG $0xde0f4466; BYTE $0xc4                     // pmaxub    xmm8, xmm4
	LONG $0x6f0f4166; BYTE $0xec                     // movdqa    xmm5, xmm12
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xe56f0f66                                 // movdqa    xmm4, xmm5
	LONG $0xde0f4466; BYTE $0xe1                     // pmaxub    xmm12, xmm1
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xceda0f66                                 // pminub    xmm1, xmm6
	LONG $0xde0f4166; BYTE $0xf3                     // pmaxub    xmm6, xmm11
	LONG $0x6c6f0f66; WORD $0x3024                   // movdqa    xmm5, oword [rsp + 48]
	LONG $0x6f0f4466; BYTE $0xfd                     // movdqa    xmm15, xmm5
	LONG $0xda0f4466; BYTE $0xfe                     // pminub    xmm15, xmm6
	LONG $0xf5de0f66                                 // pmaxub    xmm6, xmm5
	LONG $0x6f0f4166; BYTE $0xef                     // movdqa    xmm5, xmm15
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xde0f4466; BYTE $0xf9                     // pmaxub    xmm15, xmm1
	LONG $0x4c6f0f66; WORD $0x7024                   // movdqa    xmm1, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4566; BYTE $0xda                     // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xdd                     // pminub    xmm11, xmm5
	LONG $0xde0f4166; BYTE $0xea                     // pmaxub    xmm5, xmm10
	LONG $0x6f0f4466; LONG $0x00c02494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xde0f4166; BYTE $0xea                     // pmaxub    xmm5, xmm10
	LONG $0x6c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm5
	LONG $0xa4de0f66; LONG $0x00011024; BYTE $0x00   // pmaxub    xmm4, oword [rsp + 272]
	LONG $0xa47f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm4
	LONG $0xde0f4166; BYTE $0xcb                     // pmaxub    xmm1, xmm11
	LONG $0x4c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm1
	LONG $0x6f0f4166; BYTE $0xce                     // movdqa    xmm1, xmm14
	LONG $0xda0f4166; BYTE $0xcd                     // pminub    xmm1, xmm13
	LONG $0xde0f4566; BYTE $0xee                     // pmaxub    xmm13, xmm14
	LONG $0x646f0f66; WORD $0x6024                   // movdqa    xmm4, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xd4                     // movdqa    xmm10, xmm4
	LONG $0xda0f4566; BYTE $0xd5                     // pminub    xmm10, xmm13
	LONG $0xde0f4466; BYTE $0xec                     // pmaxub    xmm13, xmm4
	LONG $0x6f0f4166; BYTE $0xe2                     // movdqa    xmm4, xmm10
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4466; BYTE $0xd1                     // pmaxub    xmm10, xmm1
	LONG $0x6f0f4566; BYTE $0xd9                     // movdqa    xmm11, xmm9
	LONG $0xda0f4566; BYTE $0xdc                     // pminub    xmm11, xmm12
	LONG $0xde0f4566; BYTE $0xe1                     // pmaxub    xmm12, xmm9
	LONG $0x4c6f0f66; WORD $0x5024                   // movdqa    xmm1, oword [rsp + 80]
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xda0f4166; BYTE $0xec                     // pminub    xmm5, xmm12
	LONG $0xde0f4466; BYTE $0xe1                     // pmaxub    xmm12, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4466; BYTE $0xfa                     // pmaxub    xmm15, xmm2
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0x6c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm5
	LONG $0x946f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xda                     // movdqa    xmm11, xmm2
	LONG $0xda0f4566; BYTE $0xdf                     // pminub    xmm11, xmm15
	LONG $0xde0f4466; BYTE $0xfa                     // pmaxub    xmm15, xmm2
	LONG $0x6f0f4566; BYTE $0xf3                     // movdqa    xmm14, xmm11
	LONG $0xda0f4466; BYTE $0xf1                     // pminub    xmm14, xmm1
	LONG $0xde0f4466; BYTE $0xd9                     // pmaxub    xmm11, xmm1
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x9cda0f66; LONG $0x0000a024; BYTE $0x00   // pminub    xmm3, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xcb                     // movdqa    xmm9, xmm3
	LONG $0xda0f4466; BYTE $0xca                     // pminub    xmm9, xmm2
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xe8                     // pminub    xmm5, xmm8
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0x446f0f66; WORD $0x4024                   // movdqa    xmm0, oword [rsp + 64]
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd0                     // pminub    xmm2, xmm8
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xd5de0f66                                 // pmaxub    xmm2, xmm5
	LONG $0xac6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 176]
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xceda0f66                                 // pminub    xmm1, xmm6
	LONG $0xf5de0f66                                 // pmaxub    xmm6, xmm5
	LONG $0x74da0f66; WORD $0x2024                   // pminub    xmm6, oword [rsp + 32]
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xf1de0f66                                 // pmaxub    xmm6, xmm1
	LONG $0x3cda0f66; BYTE $0x24                     // pminub    xmm7, oword [rsp]
	LONG $0xda0f4166; BYTE $0xfd                     // pminub    xmm7, xmm13
	LONG $0xda0f4166; BYTE $0xdf                     // pminub    xmm3, xmm15
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0x64de0f66; WORD $0x7024                   // pmaxub    xmm4, oword [rsp + 112]
	LONG $0xde0f4466; WORD $0x2474; BYTE $0x50       // pmaxub    xmm14, oword [rsp + 80]
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x6f0f4166; BYTE $0xc9                     // movdqa    xmm1, xmm9
	LONG $0xda0f4166; BYTE $0xca                     // pminub    xmm1, xmm10
	LONG $0xde0f4566; BYTE $0xca                     // pmaxub    xmm9, xmm10
	LONG $0xe56f0f66                                 // movdqa    xmm4, xmm5
	LONG $0xda0f4166; BYTE $0xe3                     // pminub    xmm4, xmm11
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0xf36f0f66                                 // movdqa    xmm6, xmm3
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0xd6de0f66                                 // pmaxub    xmm2, xmm6
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xda0f4166; BYTE $0xd9                     // pminub    xmm3, xmm9
	LONG $0xec6f0f66                                 // movdqa    xmm5, xmm4
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xccde0f66                                 // pmaxub    xmm1, xmm4
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0x646f0f66; WORD $0x3024                   // movdqa    xmm4, oword [rsp + 48]
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4166; BYTE $0xdc                     // pmaxub    xmm3, xmm12
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x7f0f4166; BYTE $0x19                     // movdqa    oword [r9], xmm3
	LONG $0x11fd8349                                 // cmp    r13, 17
	JB   LBB3_12
	WORD $0x894c; BYTE $0xf2                         // mov    rdx, r14
	LONG $0x0014b841; WORD $0x0000                   // mov    r8d, 20

LBB3_11:
	LONG $0x6f0f42f3; WORD $0x0044; BYTE $0xf8       // movdqu    xmm0, oword [rax + r8 - 8]
	LONG $0x6f0f42f3; WORD $0x0064; BYTE $0xfa       // movdqu    xmm4, oword [rax + r8 - 6]
	LONG $0x6f0f4266; WORD $0x007c; BYTE $0xfc       // movdqa    xmm7, oword [rax + r8 - 4]
	LONG $0x6f0f46f3; WORD $0x0044; BYTE $0xfe       // movdqu    xmm8, oword [rax + r8 - 2]
	LONG $0x6f0f42f3; WORD $0x0014                   // movdqu    xmm2, oword [rax + r8]
	LONG $0x6f0f43f3; WORD $0x036c; BYTE $0xf8       // movdqu    xmm5, oword [r11 + r8 - 8]
	LONG $0x6f0f47f3; WORD $0x0364; BYTE $0xfa       // movdqu    xmm12, oword [r11 + r8 - 6]
	LONG $0x6f0f4366; WORD $0x0374; BYTE $0xfc       // movdqa    xmm6, oword [r11 + r8 - 4]
	LONG $0x6f0f47f3; WORD $0x035c; BYTE $0xfe       // movdqu    xmm11, oword [r11 + r8 - 2]
	LONG $0x6f0f47f3; WORD $0x032c                   // movdqu    xmm13, oword [r11 + r8]
	LONG $0x6f0f44f3; WORD $0xf852                   // movdqu    xmm10, oword [rdx - 8]
	LONG $0xfa4a100f                                 // movups    xmm1, oword [rdx - 6]
	LONG $0x244c290f; BYTE $0x30                     // movaps    oword [rsp + 48], xmm1
	LONG $0x6f0f4466; WORD $0xfc72                   // movdqa    xmm14, oword [rdx - 4]
	LONG $0x6f0f44f3; WORD $0xfe7a                   // movdqu    xmm15, oword [rdx - 2]
	LONG $0x4c100f42; WORD $0xf803                   // movups    xmm1, oword [rbx + r8 - 8]
	LONG $0x240c290f                                 // movaps    oword [rsp], xmm1
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0x5c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm3
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x447f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm0
	LONG $0x6f0f4166; BYTE $0xe0                     // movdqa    xmm4, xmm8
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xc8                     // pminub    xmm9, xmm8
	LONG $0xde0f4466; BYTE $0xc7                     // pmaxub    xmm8, xmm7
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4466; BYTE $0xcc                     // pmaxub    xmm9, xmm4
	LONG $0x6f0f4166; BYTE $0xd4                     // movdqa    xmm2, xmm12
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4466; BYTE $0xe5                     // pmaxub    xmm12, xmm5
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0x5c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm3
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0x6f0f4166; BYTE $0xd5                     // movdqa    xmm2, xmm13
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4166; BYTE $0xdb                     // movdqa    xmm3, xmm11
	LONG $0xda0f4166; BYTE $0xdd                     // pminub    xmm3, xmm13
	LONG $0xde0f4566; BYTE $0xeb                     // pmaxub    xmm13, xmm11
	LONG $0x7f0f4466; LONG $0x008024ac; WORD $0x0000 // movdqa    oword [rsp + 128], xmm13
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0x647f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm4
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0x9c7f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm3
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4566; BYTE $0xf7                     // pmaxub    xmm14, xmm15
	LONG $0x5c6f0f66; WORD $0x3024                   // movdqa    xmm3, oword [rsp + 48]
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xda0f4166; BYTE $0xee                     // pminub    xmm5, xmm14
	LONG $0xde0f4466; BYTE $0xf3                     // pmaxub    xmm14, xmm3
	LONG $0x7f0f4466; WORD $0x2474; BYTE $0x50       // movdqa    oword [rsp + 80], xmm14
	LONG $0xdd6f0f66                                 // movdqa    xmm3, xmm5
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0x9c7f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    oword [rsp + 256], xmm3
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6f0f42f3; WORD $0x0354; BYTE $0xfa       // movdqu    xmm2, oword [rbx + r8 - 6]
	LONG $0x246f0f66; BYTE $0x24                     // movdqa    xmm4, oword [rsp]
	LONG $0xdc6f0f66                                 // movdqa    xmm3, xmm4
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x126f0ff3                                 // movdqu    xmm2, oword [rdx]
	LONG $0x6f0f4466; BYTE $0xea                     // movdqa    xmm13, xmm2
	LONG $0xda0f4466; BYTE $0xec                     // pminub    xmm13, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x247f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm4
	LONG $0x6f0f4166; BYTE $0xd5                     // movdqa    xmm2, xmm13
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0xde0f4466; BYTE $0xeb                     // pmaxub    xmm13, xmm3
	LONG $0x6f0f46f3; WORD $0x035c; BYTE $0xfe       // movdqu    xmm11, oword [rbx + r8 - 2]
	LONG $0x6f0f42f3; WORD $0x0314                   // movdqu    xmm2, oword [rbx + r8]
	LONG $0x6f0f4166; BYTE $0xdb                     // movdqa    xmm3, xmm11
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xde0f4466; BYTE $0xda                     // pmaxub    xmm11, xmm2
	LONG $0x6f0f4266; WORD $0x0354; BYTE $0xfc       // movdqa    xmm2, oword [rbx + r8 - 4]
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4566; BYTE $0xfb                     // pminub    xmm15, xmm11
	LONG $0xde0f4466; BYTE $0xda                     // pmaxub    xmm11, xmm2
	LONG $0x6f0f4166; BYTE $0xd7                     // movdqa    xmm2, xmm15
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0x947f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm2
	LONG $0xde0f4466; BYTE $0xfb                     // pmaxub    xmm15, xmm3
	LONG $0x6f0f42f3; WORD $0x0164; BYTE $0xfa       // movdqu    xmm4, oword [rcx + r8 - 6]
	LONG $0x6f0f4266; WORD $0x0154; BYTE $0xfc       // movdqa    xmm2, oword [rcx + r8 - 4]
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f42f3; WORD $0x0154; BYTE $0xf8       // movdqu    xmm2, oword [rcx + r8 - 8]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xde0f4466; BYTE $0xf6                     // pmaxub    xmm14, xmm6
	LONG $0x6f0f42f3; WORD $0x0174; BYTE $0xfe       // movdqu    xmm6, oword [rcx + r8 - 2]
	LONG $0x6f0f42f3; WORD $0x013c                   // movdqu    xmm7, oword [rcx + r8]
	LONG $0x6f0f4466; BYTE $0xd6                     // movdqa    xmm10, xmm6
	LONG $0xda0f4466; BYTE $0xd7                     // pminub    xmm10, xmm7
	LONG $0xf7de0f66                                 // pmaxub    xmm6, xmm7
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xbc7f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm7
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x20       // movdqa    xmm9, oword [rsp + 32]
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xd7de0f66                                 // pmaxub    xmm2, xmm7
	LONG $0x947f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm2
	LONG $0x6f0f4166; BYTE $0xf8                     // movdqa    xmm7, xmm8
	LONG $0xda0f4166; BYTE $0xfc                     // pminub    xmm7, xmm12
	LONG $0xde0f4566; BYTE $0xe0                     // pmaxub    xmm12, xmm8
	LONG $0x446f0f66; WORD $0x4024                   // movdqa    xmm0, oword [rsp + 64]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x7f0f4466; WORD $0x2464; BYTE $0x40       // movdqa    oword [rsp + 64], xmm12
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0xcfde0f66                                 // pmaxub    xmm1, xmm7
	LONG $0x4c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm1
	LONG $0x8c6f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 256]
	LONG $0xf96f0f66                                 // movdqa    xmm7, xmm1
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xf8da0f66                                 // pminub    xmm7, xmm0
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x546f0f66; WORD $0x6024                   // movdqa    xmm2, oword [rsp + 96]
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xcfde0f66                                 // pmaxub    xmm1, xmm7
	LONG $0x6f0f4466; BYTE $0xc5                     // movdqa    xmm8, xmm5
	LONG $0xda0f4566; BYTE $0xc5                     // pminub    xmm8, xmm13
	LONG $0xde0f4466; BYTE $0xed                     // pmaxub    xmm13, xmm5
	LONG $0x846f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 144]
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xda0f4166; BYTE $0xfd                     // pminub    xmm7, xmm13
	LONG $0xde0f4466; BYTE $0xe8                     // pmaxub    xmm13, xmm0
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xc8                     // pminub    xmm9, xmm8
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0x446f0f66; WORD $0x5024                   // movdqa    xmm0, oword [rsp + 80]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x6f0f4466; LONG $0x00802484; WORD $0x0000 // movdqa    xmm8, oword [rsp + 128]
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0x6f0f4466; BYTE $0xc0                     // movdqa    xmm8, xmm0
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xde0f4466; BYTE $0xd3                     // pmaxub    xmm10, xmm3
	LONG $0x946f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xe2                     // movdqa    xmm12, xmm2
	LONG $0xda0f4566; BYTE $0xe2                     // pminub    xmm12, xmm10
	LONG $0xde0f4466; BYTE $0xd2                     // pmaxub    xmm10, xmm2
	LONG $0x6f0f4166; BYTE $0xd4                     // movdqa    xmm2, xmm12
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xde0f4466; BYTE $0xe5                     // pmaxub    xmm12, xmm5
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0x6f0f4166; BYTE $0xef                     // movdqa    xmm5, xmm15
	LONG $0xeeda0f66                                 // pminub    xmm5, xmm6
	LONG $0xde0f4166; BYTE $0xf7                     // pmaxub    xmm6, xmm15
	LONG $0x6f0f4466; BYTE $0xf5                     // movdqa    xmm14, xmm5
	LONG $0xda0f4466; BYTE $0xf3                     // pminub    xmm14, xmm3
	LONG $0xebde0f66                                 // pmaxub    xmm5, xmm3
	LONG $0x6f0f4166; BYTE $0xdb                     // movdqa    xmm3, xmm11
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xde0f4166; BYTE $0xe3                     // pmaxub    xmm4, xmm11
	LONG $0x6f0f4566; BYTE $0xd9                     // movdqa    xmm11, xmm9
	LONG $0xda0f4566; BYTE $0xde                     // pminub    xmm11, xmm14
	LONG $0xde0f4566; BYTE $0xf1                     // pmaxub    xmm14, xmm9
	LONG $0x6f0f4466; LONG $0x00c024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 192]
	LONG $0x6f0f4566; BYTE $0xcf                     // movdqa    xmm9, xmm15
	LONG $0xda0f4566; BYTE $0xce                     // pminub    xmm9, xmm14
	LONG $0xde0f4566; BYTE $0xf7                     // pmaxub    xmm14, xmm15
	LONG $0x54de0f66; WORD $0x6024                   // pmaxub    xmm2, oword [rsp + 96]
	LONG $0x947f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm2
	LONG $0xde0f4566; BYTE $0xcb                     // pmaxub    xmm9, xmm11
	LONG $0x7f0f4466; LONG $0x0090248c; WORD $0x0000 // movdqa    oword [rsp + 144], xmm9
	LONG $0x6f0f4566; BYTE $0xc8                     // movdqa    xmm9, xmm8
	LONG $0xda0f4466; BYTE $0xcb                     // pminub    xmm9, xmm3
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0x946f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xda                     // movdqa    xmm11, xmm2
	LONG $0xda0f4466; BYTE $0xdb                     // pminub    xmm11, xmm3
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0xde0f4566; BYTE $0xd9                     // pmaxub    xmm11, xmm9
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4566; BYTE $0xc4                     // pminub    xmm8, xmm12
	LONG $0xde0f4466; BYTE $0xe1                     // pmaxub    xmm12, xmm1
	LONG $0x8c6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xf9                     // movdqa    xmm15, xmm1
	LONG $0xda0f4566; BYTE $0xfc                     // pminub    xmm15, xmm12
	LONG $0xde0f4466; BYTE $0xe1                     // pmaxub    xmm12, xmm1
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0xde0f4566; BYTE $0xf8                     // pmaxub    xmm15, xmm8
	LONG $0x946f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 160]
	LONG $0xfa6f0f66                                 // movdqa    xmm7, xmm2
	LONG $0xfdda0f66                                 // pminub    xmm7, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc1                     // pminub    xmm8, xmm1
	LONG $0xf9de0f66                                 // pmaxub    xmm7, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0x64da0f66; WORD $0x7024                   // pminub    xmm4, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xcc                     // movdqa    xmm9, xmm4
	LONG $0xda0f4466; BYTE $0xc9                     // pminub    xmm9, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x4c6f0f66; WORD $0x3024                   // movdqa    xmm1, oword [rsp + 48]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4466; BYTE $0xd1                     // pmaxub    xmm10, xmm1
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xca                     // pminub    xmm1, xmm10
	LONG $0xde0f4466; BYTE $0xd2                     // pmaxub    xmm10, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xf5                     // pmaxub    xmm6, xmm13
	LONG $0x74da0f66; WORD $0x2024                   // pminub    xmm6, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xee                     // movdqa    xmm13, xmm6
	LONG $0xda0f4466; BYTE $0xe8                     // pminub    xmm13, xmm0
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0x44da0f66; WORD $0x4024                   // pminub    xmm0, oword [rsp + 64]
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xda0f4166; BYTE $0xf2                     // pminub    xmm6, xmm10
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xe6da0f66                                 // pminub    xmm4, xmm6
	LONG $0x446f0f66; WORD $0x5024                   // movdqa    xmm0, oword [rsp + 80]
	LONG $0x84de0f66; LONG $0x00009024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 144]
	LONG $0xde0f4566; BYTE $0xc7                     // pmaxub    xmm8, xmm15
	LONG $0x94de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm2, oword [rsp + 128]
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xda0f4166; BYTE $0xc3                     // pminub    xmm0, xmm11
	LONG $0xde0f4566; BYTE $0xcb                     // pmaxub    xmm9, xmm11
	LONG $0x6f0f4166; BYTE $0xdd                     // movdqa    xmm3, xmm13
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0xde0f4466; BYTE $0xef                     // pmaxub    xmm13, xmm7
	LONG $0xec6f0f66                                 // movdqa    xmm5, xmm4
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xcdde0f66                                 // pmaxub    xmm1, xmm5
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4166; BYTE $0xe5                     // pmaxub    xmm4, xmm13
	LONG $0xda0f4166; BYTE $0xe1                     // pminub    xmm4, xmm9
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xdc6f0f66                                 // movdqa    xmm3, xmm4
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xda0f4166; BYTE $0xde                     // pminub    xmm3, xmm14
	LONG $0xde0f4166; BYTE $0xd6                     // pmaxub    xmm2, xmm14
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xda0f4166; BYTE $0xc4                     // pminub    xmm0, xmm12
	LONG $0xde0f4166; BYTE $0xdc                     // pmaxub    xmm3, xmm12
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x7f0f4366; WORD $0x015c; BYTE $0xfc       // movdqa    oword [r9 + r8 - 4], xmm3
	LONG $0x10788d49                                 // lea    rdi, [r8 + 16]
	LONG $0x0cc08349                                 // add    r8, 12
	LONG $0x10c28348                                 // add    rdx, 16
	WORD $0x394d; BYTE $0xe8                         // cmp    r8, r13
	WORD $0x8949; BYTE $0xf8                         // mov    r8, rdi
	JB   LBB3_11

LBB3_12:
	LONG $0x6f0f42f3; WORD $0x204c; BYTE $0xf0       // movdqu    xmm1, oword [rax + r12 - 16]
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xf1                     // movdqa    xmm14, xmm1
	LONG $0x656f0f66; BYTE $0x10                     // movdqa    xmm4, oword 16[rbp] /* [rip + .LCPI3_1] */
	LONG $0xdb0f4466; BYTE $0xf4                     // pand    xmm14, xmm4
	LONG $0xeb0f4466; BYTE $0xf0                     // por    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xdb0f4466; BYTE $0xcc                     // pand    xmm9, xmm4
	LONG $0xeb0f4466; BYTE $0xc8                     // por    xmm9, xmm0
	LONG $0x6f0f47f3; WORD $0x2364; BYTE $0xee       // movdqu    xmm12, oword [r11 + r12 - 18]
	LONG $0x6f0f43f3; WORD $0x2344; BYTE $0xf0       // movdqu    xmm0, oword [r11 + r12 - 16]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xfc                     // movdqa    xmm7, xmm12
	LONG $0xf8da0f66                                 // pminub    xmm7, xmm0
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0xccdb0f66                                 // pand    xmm1, xmm4
	LONG $0xc8eb0f66                                 // por    xmm1, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xf9                     // movdqa    xmm15, xmm1
	LONG $0xdb0f4466; BYTE $0xfc                     // pand    xmm15, xmm4
	LONG $0xeb0f4466; BYTE $0xf8                     // por    xmm15, xmm0
	LONG $0x6f0f43f3; WORD $0x2254; BYTE $0xf0       // movdqu    xmm2, oword [r10 + r12 - 16]
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xea                     // movdqa    xmm13, xmm2
	LONG $0xdb0f4466; BYTE $0xec                     // pand    xmm13, xmm4
	LONG $0xeb0f4466; BYTE $0xe8                     // por    xmm13, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4566; BYTE $0xc5                     // movdqa    xmm8, xmm13
	LONG $0xdb0f4466; BYTE $0xc4                     // pand    xmm8, xmm4
	LONG $0xeb0f4466; BYTE $0xc0                     // por    xmm8, xmm0
	LONG $0x6f0f46f3; WORD $0x235c; BYTE $0xf0       // movdqu    xmm11, oword [rbx + r12 - 16]
	LONG $0x7f0f4466; WORD $0x245c; BYTE $0x20       // movdqa    oword [rsp + 32], xmm11
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0xdb0f4466; BYTE $0xdc                     // pand    xmm11, xmm4
	LONG $0xeb0f4466; BYTE $0xd8                     // por    xmm11, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4166; BYTE $0xdb                     // movdqa    xmm3, xmm11
	LONG $0xdcdb0f66                                 // pand    xmm3, xmm4
	LONG $0xd8eb0f66                                 // por    xmm3, xmm0
	LONG $0x9c7f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm3
	LONG $0x6f0f42f3; WORD $0x215c; BYTE $0xee       // movdqu    xmm3, oword [rcx + r12 - 18]
	LONG $0x6f0f42f3; WORD $0x2144; BYTE $0xf0       // movdqu    xmm0, oword [rcx + r12 - 16]
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xac7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm5
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0xecdb0f66                                 // pand    xmm5, xmm4
	LONG $0xe8eb0f66                                 // por    xmm5, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xdb0f4466; BYTE $0xd4                     // pand    xmm10, xmm4
	LONG $0xeb0f4466; BYTE $0xd0                     // por    xmm10, xmm0
	LONG $0x6f0f42f3; WORD $0x2074; BYTE $0xec       // movdqu    xmm6, oword [rax + r12 - 20]
	LONG $0x6f0f42f3; WORD $0x2044; BYTE $0xee       // movdqu    xmm0, oword [rax + r12 - 18]
	LONG $0xe66f0f66                                 // movdqa    xmm4, xmm6
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xa47f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm4
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x747f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm6
	LONG $0x6f0f4166; BYTE $0xe6                     // movdqa    xmm4, xmm14
	LONG $0xda0f4166; BYTE $0xe1                     // pminub    xmm4, xmm9
	LONG $0xde0f4566; BYTE $0xce                     // pmaxub    xmm9, xmm14
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4466; BYTE $0xce                     // pmaxub    xmm9, xmm6
	LONG $0x7f0f4466; WORD $0x244c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm9
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x6f0f47f3; WORD $0x234c; BYTE $0xec       // movdqu    xmm9, oword [r11 + r12 - 20]
	LONG $0x6f0f4166; BYTE $0xe1                     // movdqa    xmm4, xmm9
	LONG $0xda0f4166; BYTE $0xe4                     // pminub    xmm4, xmm12
	LONG $0xde0f4566; BYTE $0xe1                     // pmaxub    xmm12, xmm9
	LONG $0x7f0f4466; WORD $0x2424                   // movdqa    oword [rsp], xmm12
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0x747f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm6
	LONG $0xe7de0f66                                 // pmaxub    xmm4, xmm7
	LONG $0x647f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm4
	LONG $0x6f0f43f3; WORD $0x2264; BYTE $0xec       // movdqu    xmm4, oword [r10 + r12 - 20]
	LONG $0x6f0f4166; BYTE $0xff                     // movdqa    xmm7, xmm15
	LONG $0xfcda0f66                                 // pminub    xmm7, xmm4
	LONG $0xde0f4466; BYTE $0xfc                     // pmaxub    xmm15, xmm4
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xda0f4166; BYTE $0xe7                     // pminub    xmm4, xmm15
	LONG $0xde0f4466; BYTE $0xf9                     // pmaxub    xmm15, xmm1
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0x8c7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm1
	LONG $0xe7de0f66                                 // pmaxub    xmm4, xmm7
	LONG $0xfa6f0f66                                 // movdqa    xmm7, xmm2
	LONG $0xda0f4166; BYTE $0xfd                     // pminub    xmm7, xmm13
	LONG $0xde0f4466; BYTE $0xea                     // pmaxub    xmm13, xmm2
	LONG $0x6f0f43f3; WORD $0x2254; BYTE $0xee       // movdqu    xmm2, oword [r10 + r12 - 18]
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xcd                     // pminub    xmm1, xmm13
	LONG $0xde0f4466; BYTE $0xea                     // pmaxub    xmm13, xmm2
	LONG $0x6f0f4466; BYTE $0xe1                     // movdqa    xmm12, xmm1
	LONG $0xda0f4466; BYTE $0xe7                     // pminub    xmm12, xmm7
	LONG $0xcfde0f66                                 // pmaxub    xmm1, xmm7
	LONG $0x6f0f46f3; WORD $0x234c; BYTE $0xec       // movdqu    xmm9, oword [rbx + r12 - 20]
	LONG $0x6f0f42f3; WORD $0x2354; BYTE $0xee       // movdqu    xmm2, oword [rbx + r12 - 18]
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0xde0f4566; BYTE $0xc8                     // pmaxub    xmm9, xmm8
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0x747f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm6
	LONG $0xd7de0f66                                 // pmaxub    xmm2, xmm7
	LONG $0x6f0f4566; BYTE $0xc3                     // movdqa    xmm8, xmm11
	LONG $0xbc6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 176]
	LONG $0xda0f4466; BYTE $0xc7                     // pminub    xmm8, xmm7
	LONG $0xde0f4166; BYTE $0xfb                     // pmaxub    xmm7, xmm11
	LONG $0x746f0f66; WORD $0x2024                   // movdqa    xmm6, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xde                     // movdqa    xmm11, xmm6
	LONG $0xda0f4466; BYTE $0xdf                     // pminub    xmm11, xmm7
	LONG $0xfede0f66                                 // pmaxub    xmm7, xmm6
	LONG $0xbc7f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm7
	LONG $0x6f0f4166; BYTE $0xf3                     // movdqa    xmm6, xmm11
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0x747f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm6
	LONG $0xde0f4566; BYTE $0xd8                     // pmaxub    xmm11, xmm8
	LONG $0x6f0f42f3; WORD $0x217c; BYTE $0xec       // movdqu    xmm7, oword [rcx + r12 - 20]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc3                     // pminub    xmm8, xmm3
	LONG $0xdfde0f66                                 // pmaxub    xmm3, xmm7
	LONG $0x6f0f4166; BYTE $0xf8                     // movdqa    xmm7, xmm8
	LONG $0xb46f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 160]
	LONG $0xfeda0f66                                 // pminub    xmm7, xmm6
	LONG $0xbc7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm7
	LONG $0xde0f4466; BYTE $0xc6                     // pmaxub    xmm8, xmm6
	LONG $0xfd6f0f66                                 // movdqa    xmm7, xmm5
	LONG $0xda0f4166; BYTE $0xfa                     // pminub    xmm7, xmm10
	LONG $0xde0f4466; BYTE $0xd5                     // pmaxub    xmm10, xmm5
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0x6c6f0f66; WORD $0x3024                   // movdqa    xmm5, oword [rsp + 48]
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0xb47f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm6
	LONG $0xde0f4166; BYTE $0xee                     // pmaxub    xmm5, xmm14
	LONG $0x6c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0x746f0f66; WORD $0x1024                   // movdqa    xmm6, oword [rsp + 16]
	LONG $0xeeda0f66                                 // pminub    xmm5, xmm6
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x6f0f4466; LONG $0x009024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 144]
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0x747f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm6
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0x747f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm6
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x847f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm0
	LONG $0x746f0f66; WORD $0x6024                   // movdqa    xmm6, oword [rsp + 96]
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0x2c6f0f66; BYTE $0x24                     // movdqa    xmm5, oword [rsp]
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0x6f0f4466; WORD $0x2474; BYTE $0x70       // movdqa    xmm14, oword [rsp + 112]
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0xde0f4166; BYTE $0xee                     // pmaxub    xmm5, xmm14
	LONG $0x2c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm5
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0x6c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm5
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0xb47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm6
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0x6c6f0f66; WORD $0x4024                   // movdqa    xmm5, oword [rsp + 64]
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xec                     // pmaxub    xmm5, xmm12
	LONG $0xb46f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 192]
	LONG $0x6f0f4466; BYTE $0xe6                     // movdqa    xmm12, xmm6
	LONG $0xda0f4466; BYTE $0xe5                     // pminub    xmm12, xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0x6f0f4166; BYTE $0xec                     // movdqa    xmm5, xmm12
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xac7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm5
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xe9de0f66                                 // pmaxub    xmm5, xmm1
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4566; BYTE $0xcd                     // pmaxub    xmm9, xmm13
	LONG $0x6f0f4566; BYTE $0xef                     // movdqa    xmm13, xmm15
	LONG $0xda0f4566; BYTE $0xe9                     // pminub    xmm13, xmm9
	LONG $0xde0f4566; BYTE $0xcf                     // pmaxub    xmm9, xmm15
	LONG $0x6f0f4566; BYTE $0xf5                     // movdqa    xmm14, xmm13
	LONG $0xda0f4466; BYTE $0xf0                     // pminub    xmm14, xmm0
	LONG $0xde0f4466; BYTE $0xe8                     // pmaxub    xmm13, xmm0
	LONG $0x8c6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 208]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xf9de0f66                                 // pmaxub    xmm7, xmm1
	LONG $0x4c6f0f66; WORD $0x2024                   // movdqa    xmm1, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xf9                     // movdqa    xmm15, xmm1
	LONG $0xda0f4466; BYTE $0xff                     // pminub    xmm15, xmm7
	LONG $0xf9de0f66                                 // pmaxub    xmm7, xmm1
	LONG $0x6f0f4166; BYTE $0xcf                     // movdqa    xmm1, xmm15
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4566; BYTE $0xd0                     // pmaxub    xmm10, xmm8
	LONG $0x6f0f4166; BYTE $0xf3                     // movdqa    xmm6, xmm11
	LONG $0xda0f4166; BYTE $0xf2                     // pminub    xmm6, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xe66f0f66                                 // movdqa    xmm4, xmm6
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x846f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 176]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x50       // movdqa    xmm8, oword [rsp + 80]
	LONG $0x6f0f4166; BYTE $0xe8                     // movdqa    xmm5, xmm8
	LONG $0xecda0f66                                 // pminub    xmm5, xmm4
	LONG $0xde0f4166; BYTE $0xe0                     // pmaxub    xmm4, xmm8
	LONG $0xa47f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm4
	LONG $0x646f0f66; WORD $0x2024                   // movdqa    xmm4, oword [rsp + 32]
	LONG $0xa4de0f66; LONG $0x0000c024; BYTE $0x00   // pmaxub    xmm4, oword [rsp + 192]
	LONG $0x647f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm4
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm5
	LONG $0x6f0f4166; BYTE $0xe6                     // movdqa    xmm4, xmm14
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xce                     // pmaxub    xmm1, xmm14
	LONG $0x446f0f66; WORD $0x6024                   // movdqa    xmm0, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xda0f4466; BYTE $0xf1                     // pminub    xmm14, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4466; BYTE $0xf4                     // pmaxub    xmm14, xmm4
	LONG $0x6f0f4166; BYTE $0xe4                     // movdqa    xmm4, xmm12
	LONG $0xda0f4166; BYTE $0xe7                     // pminub    xmm4, xmm15
	LONG $0xde0f4566; BYTE $0xfc                     // pmaxub    xmm15, xmm12
	LONG $0x846f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 128]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xef                     // pminub    xmm5, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0x7f0f4466; LONG $0x008024bc; WORD $0x0000 // movdqa    oword [rsp + 128], xmm15
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xf2de0f66                                 // pmaxub    xmm6, xmm2
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0xac7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm5
	LONG $0x946f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xc2                     // movdqa    xmm8, xmm2
	LONG $0xda0f4466; BYTE $0xc6                     // pminub    xmm8, xmm6
	LONG $0xf2de0f66                                 // pmaxub    xmm6, xmm2
	LONG $0x6f0f4566; BYTE $0xf8                     // movdqa    xmm15, xmm8
	LONG $0xda0f4466; BYTE $0xf8                     // pminub    xmm15, xmm0
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdd                     // pmaxub    xmm3, xmm13
	LONG $0x9cda0f66; LONG $0x0000a024; BYTE $0x00   // pminub    xmm3, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xe3                     // movdqa    xmm12, xmm3
	LONG $0xda0f4466; BYTE $0xe0                     // pminub    xmm12, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x546f0f66; WORD $0x4024                   // movdqa    xmm2, oword [rsp + 64]
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xefda0f66                                 // pminub    xmm5, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6f0f4466; BYTE $0xdd                     // movdqa    xmm11, xmm5
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x546f0f66; WORD $0x7024                   // movdqa    xmm2, oword [rsp + 112]
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4466; BYTE $0xd2                     // pmaxub    xmm10, xmm2
	LONG $0xda0f4466; WORD $0x2454; BYTE $0x10       // pminub    xmm10, oword [rsp + 16]
	LONG $0x6f0f4166; BYTE $0xe2                     // movdqa    xmm4, xmm10
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0xda0f4466; WORD $0x240c                   // pminub    xmm9, oword [rsp]
	LONG $0xda0f4466; BYTE $0xc9                     // pminub    xmm9, xmm1
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xda0f4466; BYTE $0xd7                     // pminub    xmm10, xmm7
	LONG $0xda0f4166; BYTE $0xd9                     // pminub    xmm3, xmm9
	LONG $0xda0f4166; BYTE $0xda                     // pminub    xmm3, xmm10
	LONG $0x446f0f66; WORD $0x6024                   // movdqa    xmm0, oword [rsp + 96]
	LONG $0x44de0f66; WORD $0x5024                   // pmaxub    xmm0, oword [rsp + 80]
	LONG $0xde0f4466; LONG $0x00d024bc; WORD $0x0000 // pmaxub    xmm15, oword [rsp + 208]
	LONG $0xde0f4466; WORD $0x245c; BYTE $0x20       // pmaxub    xmm11, oword [rsp + 32]
	LONG $0xde0f4566; BYTE $0xdf                     // pmaxub    xmm11, xmm15
	LONG $0xde0f4466; BYTE $0xd8                     // pmaxub    xmm11, xmm0
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xda0f4166; BYTE $0xc6                     // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xe6                     // pmaxub    xmm12, xmm14
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd0                     // pminub    xmm2, xmm8
	LONG $0xde0f4166; BYTE $0xe0                     // pmaxub    xmm4, xmm8
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0xe9de0f66                                 // pmaxub    xmm5, xmm1
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0xda0f4166; BYTE $0xdc                     // pminub    xmm3, xmm12
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xc3                     // pmaxub    xmm0, xmm11
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xa46f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 176]
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xccde0f66                                 // pmaxub    xmm1, xmm4
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x9c6f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm3, oword [rsp + 128]
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x7f0f43f3; WORD $0x2154; BYTE $0xf0       // movdqu    oword [r9 + r12 - 16], xmm2
	WORD $0xff49; BYTE $0xc7                         // inc    r15
	LONG $0x248c034c; LONG $0x00000160               // add    r9, qword 352[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                         // add    r14, rsi
	LONG $0x24bc3b4c; LONG $0x000000f0               // cmp    r15, qword [rsp + 240]
	JNE  LBB3_9
	JMP  LBB3_62

LBB3_33:
	LONG $0x02f88349                               // cmp    r8, 2
	JG   LBB3_42
	LONG $0x01f88349                               // cmp    r8, 1
	JE   LBB3_50
	LONG $0x02f88349                               // cmp    r8, 2
	JNE  LBB3_62
	LONG $0x24bc8348; LONG $0x000000f0; BYTE $0x00 // cmp    qword [rsp + 240], 0
	JE   LBB3_62
	LONG $0x12248d4c                               // lea    r12, [rdx + rdx]
	LONG $0x126c8d4c; BYTE $0xff                   // lea    r13, [rdx + rdx - 1]
	LONG $0xf0e58349                               // and    r13, -16
	LONG $0x24848b48; LONG $0x000000f0             // mov    rax, qword [rsp + 240]
	LONG $0xfe488d48                               // lea    rcx, [rax - 2]
	LONG $0x248c8948; LONG $0x00000110             // mov    qword [rsp + 272], rcx
	WORD $0xff48; BYTE $0xc8                       // dec    rax
	LONG $0x24848948; LONG $0x00000120             // mov    qword [rsp + 288], rax
	LONG $0x24848b48; LONG $0x000000f8             // mov    rax, qword [rsp + 248]
	LONG $0x14708d4c                               // lea    r14, [rax + 20]
	WORD $0x3145; BYTE $0xff                       // xor    r15d, r15d
	LONG $0x00ffffb8; BYTE $0x00                   // mov    eax, 65535
	LONG $0xc06e0f66                               // movd    xmm0, eax
	LONG $0x847f0f66; LONG $0x00013024; BYTE $0x00 // movdqa    oword [rsp + 304], xmm0

LBB3_38:
	LONG $0xfe4f8d49                                 // lea    rcx, [r15 - 2]
	LONG $0xceaf0f48                                 // imul    rcx, rsi
	LONG $0x248c0348; LONG $0x000000f8               // add    rcx, qword [rsp + 248]
	LONG $0x313c8d48                                 // lea    rdi, [rcx + rsi]
	LONG $0x37148d4c                                 // lea    r10, [rdi + rsi]
	LONG $0x32048d4d                                 // lea    r8, [r10 + rsi]
	WORD $0x854d; BYTE $0xff                         // test    r15, r15
	WORD $0x8949; BYTE $0xfb                         // mov    r11, rdi
	LONG $0x1c6f0ff3; BYTE $0x3e                     // movdqu    xmm3, oword [rsi + rdi]
	LONG $0x6c6f0ff3; WORD $0x023e                   // movdqu    xmm5, oword [rsi + rdi + 2]
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	WORD $0x8948; BYTE $0xf8                         // mov    rax, rdi
	LONG $0xc2440f49                                 // cmove    rax, r10
	LONG $0x02ff8349                                 // cmp    r15, 2
	LONG $0xd8420f4c                                 // cmovb    r11, rax
	LONG $0xc1430f48                                 // cmovae    rax, rcx
	LONG $0x24bc3b4c; LONG $0x00000120               // cmp    r15, qword [rsp + 288]
	WORD $0x894c; BYTE $0xd1                         // mov    rcx, r10
	LONG $0xc8420f49                                 // cmovb    rcx, r8
	LONG $0x24bc3b4c; LONG $0x00000110               // cmp    r15, qword [rsp + 272]
	WORD $0x8948; BYTE $0xcb                         // mov    rbx, rcx
	LONG $0xd8420f49                                 // cmovb    rbx, r8
	LONG $0x006f0ff3                                 // movdqu    xmm0, oword [rax]
	LONG $0x486f0ff3; BYTE $0x02                     // movdqu    xmm1, oword [rax + 2]
	LONG $0x506f0ff3; BYTE $0x04                     // movdqu    xmm2, oword [rax + 4]
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f4466; BYTE $0xd0                     // movdqa    xmm10, xmm0
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xda0f4466; BYTE $0xf1                     // pminub    xmm14, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm1
	LONG $0xf8730f66; BYTE $0x02                     // pslldq    xmm0, 2
	LONG $0x8c6f0f66; LONG $0x00013024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 304]
	LONG $0xdb0f4466; BYTE $0xd1                     // pand    xmm10, xmm1
	LONG $0xeb0f4466; BYTE $0xd0                     // por    xmm10, xmm0
	LONG $0x6f0f4166; BYTE $0xc2                     // movdqa    xmm0, xmm10
	LONG $0xf8730f66; BYTE $0x02                     // pslldq    xmm0, 2
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xd1db0f66                                 // pand    xmm2, xmm1
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0x6f0f4466; BYTE $0xea                     // movdqa    xmm13, xmm2
	LONG $0x6f0f45f3; BYTE $0x1b                     // movdqu    xmm11, oword [r11]
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xf8730f66; BYTE $0x02                     // pslldq    xmm0, 2
	LONG $0x6f0f4566; BYTE $0xcb                     // movdqa    xmm9, xmm11
	LONG $0xdb0f4466; BYTE $0xc9                     // pand    xmm9, xmm1
	LONG $0xeb0f4466; BYTE $0xc8                     // por    xmm9, xmm0
	LONG $0x7f0f4466; WORD $0x240c                   // movdqa    oword [rsp], xmm9
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xf8730f66; BYTE $0x02                     // pslldq    xmm0, 2
	LONG $0xdb0f4466; BYTE $0xc9                     // pand    xmm9, xmm1
	LONG $0xeb0f4466; BYTE $0xc8                     // por    xmm9, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xf8730f66; BYTE $0x02                     // pslldq    xmm0, 2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd1db0f66                                 // pand    xmm2, xmm1
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0x6f0f4466; BYTE $0xe2                     // movdqa    xmm12, xmm2
	LONG $0xf36f0f66                                 // movdqa    xmm6, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0x9c7f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm3
	LONG $0xfa730f66; BYTE $0x02                     // pslldq    xmm2, 2
	LONG $0xdb0f4466; BYTE $0xe1                     // pand    xmm12, xmm1
	LONG $0xeb0f4466; BYTE $0xe2                     // por    xmm12, xmm2
	LONG $0x436f0ff3; BYTE $0x02                     // movdqu    xmm0, oword [rbx + 2]
	LONG $0x536f0ff3; BYTE $0x04                     // movdqu    xmm2, oword [rbx + 4]
	LONG $0x947f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm2
	LONG $0x447f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x1b6f0ff3                                 // movdqu    xmm3, oword [rbx]
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0x847f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm0
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xfb730f66; BYTE $0x02                     // pslldq    xmm3, 2
	LONG $0xd1db0f66                                 // pand    xmm2, xmm1
	LONG $0xd3eb0f66                                 // por    xmm2, xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xfb730f66; BYTE $0x02                     // pslldq    xmm3, 2
	LONG $0xfa6f0f66                                 // movdqa    xmm7, xmm2
	LONG $0xf9db0f66                                 // pand    xmm7, xmm1
	LONG $0xfbeb0f66                                 // por    xmm7, xmm3
	LONG $0x30148d49                                 // lea    rdx, [r8 + rsi]
	LONG $0xca420f48                                 // cmovb    rcx, rdx
	LONG $0x6f0f44f3; BYTE $0x39                     // movdqu    xmm15, oword [rcx]
	LONG $0x6f0f4566; BYTE $0xc7                     // movdqa    xmm8, xmm15
	LONG $0x730f4166; WORD $0x02f8                   // pslldq    xmm8, 2
	LONG $0x6f0f4166; BYTE $0xdf                     // movdqa    xmm3, xmm15
	LONG $0xd9db0f66                                 // pand    xmm3, xmm1
	LONG $0xeb0f4166; BYTE $0xd8                     // por    xmm3, xmm8
	LONG $0x6f0f4466; BYTE $0xc3                     // movdqa    xmm8, xmm3
	LONG $0x730f4166; WORD $0x02f8                   // pslldq    xmm8, 2
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc1db0f66                                 // pand    xmm0, xmm1
	LONG $0xeb0f4166; BYTE $0xc0                     // por    xmm0, xmm8
	LONG $0x6f0f4166; BYTE $0xcd                     // movdqa    xmm1, xmm13
	LONG $0xda0f4566; BYTE $0xea                     // pminub    xmm13, xmm10
	LONG $0xde0f4166; BYTE $0xca                     // pmaxub    xmm1, xmm10
	LONG $0x4c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm1
	LONG $0x64da0f66; WORD $0x1024                   // pminub    xmm4, oword [rsp + 16]
	LONG $0x6f0f4166; BYTE $0xce                     // movdqa    xmm1, xmm14
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xde0f4466; BYTE $0xf4                     // pmaxub    xmm14, xmm4
	LONG $0x7f0f4466; LONG $0x009024b4; WORD $0x0000 // movdqa    oword [rsp + 144], xmm14
	LONG $0x6f0f4466; WORD $0x2404                   // movdqa    xmm8, oword [rsp]
	LONG $0x6f0f4566; BYTE $0xd0                     // movdqa    xmm10, xmm8
	LONG $0xda0f4566; BYTE $0xd3                     // pminub    xmm10, xmm11
	LONG $0xde0f4566; BYTE $0xc3                     // pmaxub    xmm8, xmm11
	LONG $0x6f0f4166; BYTE $0xe9                     // movdqa    xmm5, xmm9
	LONG $0xda0f4166; BYTE $0xe8                     // pminub    xmm5, xmm8
	LONG $0xde0f4566; BYTE $0xc1                     // pmaxub    xmm8, xmm9
	LONG $0x7f0f4466; WORD $0x2404                   // movdqa    oword [rsp], xmm8
	LONG $0xe56f0f66                                 // movdqa    xmm4, xmm5
	LONG $0xda0f4166; BYTE $0xe2                     // pminub    xmm4, xmm10
	LONG $0xde0f4166; BYTE $0xea                     // pmaxub    xmm5, xmm10
	LONG $0x6f0f45f3; WORD $0x044b                   // movdqu    xmm9, oword [r11 + 4]
	LONG $0x6f0f4566; BYTE $0xd1                     // movdqa    xmm10, xmm9
	LONG $0xda0f4566; BYTE $0xd4                     // pminub    xmm10, xmm12
	LONG $0xde0f4566; BYTE $0xe1                     // pmaxub    xmm12, xmm9
	LONG $0x6f0f45f3; WORD $0x024b                   // movdqu    xmm9, oword [r11 + 2]
	LONG $0x6f0f4566; BYTE $0xd9                     // movdqa    xmm11, xmm9
	LONG $0xda0f4566; BYTE $0xdc                     // pminub    xmm11, xmm12
	LONG $0xde0f4566; BYTE $0xe1                     // pmaxub    xmm12, xmm9
	LONG $0x6f0f4566; BYTE $0xf3                     // movdqa    xmm14, xmm11
	LONG $0xda0f4566; BYTE $0xf2                     // pminub    xmm14, xmm10
	LONG $0xde0f4566; BYTE $0xda                     // pmaxub    xmm11, xmm10
	LONG $0x74da0f66; WORD $0x4024                   // pminub    xmm6, oword [rsp + 64]
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    xmm8, oword [rsp + 32]
	LONG $0x6f0f4566; BYTE $0xd0                     // movdqa    xmm10, xmm8
	LONG $0xda0f4466; BYTE $0xd6                     // pminub    xmm10, xmm6
	LONG $0xde0f4466; BYTE $0xc6                     // pmaxub    xmm8, xmm6
	LONG $0x7f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    oword [rsp + 32], xmm8
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4466; BYTE $0xca                     // pminub    xmm9, xmm2
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x546f0ff3; WORD $0x043e                   // movdqu    xmm2, oword [rsi + rdi + 4]
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xde0f4166; BYTE $0xf1                     // pmaxub    xmm6, xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x50       // movdqa    xmm9, oword [rsp + 80]
	LONG $0xda0f4466; LONG $0x00b0248c; WORD $0x0000 // pminub    xmm9, oword [rsp + 176]
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x30       // movdqa    xmm8, oword [rsp + 48]
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0x947f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm2
	LONG $0xde0f4566; BYTE $0xc1                     // pmaxub    xmm8, xmm9
	LONG $0x7f0f4466; WORD $0x2444; BYTE $0x30       // movdqa    oword [rsp + 48], xmm8
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4166; BYTE $0xdf                     // pmaxub    xmm3, xmm15
	LONG $0x6f0f4466; BYTE $0xf8                     // movdqa    xmm15, xmm0
	LONG $0xda0f4466; BYTE $0xfb                     // pminub    xmm15, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0x847f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    oword [rsp + 256], xmm0
	LONG $0xde0f4466; BYTE $0xfa                     // pmaxub    xmm15, xmm2
	LONG $0x6f0f44f3; WORD $0x0241                   // movdqu    xmm8, oword [rcx + 2]
	LONG $0x516f0ff3; BYTE $0x04                     // movdqu    xmm2, oword [rcx + 4]
	LONG $0x6f0f4566; BYTE $0xc8                     // movdqa    xmm9, xmm8
	LONG $0xda0f4466; BYTE $0xca                     // pminub    xmm9, xmm2
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x847f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm0
	LONG $0x846f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 144]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xed                     // pmaxub    xmm5, xmm13
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm2
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x847f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm0
	LONG $0x546f0f66; WORD $0x7024                   // movdqa    xmm2, oword [rsp + 112]
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x646f0f66; WORD $0x6024                   // movdqa    xmm4, oword [rsp + 96]
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm2
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xceda0f66                                 // pminub    xmm1, xmm6
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x6f0f4166; BYTE $0xe3                     // movdqa    xmm4, xmm11
	LONG $0xe6da0f66                                 // pminub    xmm4, xmm6
	LONG $0xde0f4166; BYTE $0xf3                     // pmaxub    xmm6, xmm11
	LONG $0x747f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm6
	LONG $0x6f0f4466; BYTE $0xdc                     // movdqa    xmm11, xmm4
	LONG $0xda0f4466; BYTE $0xd9                     // pminub    xmm11, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x8c6f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 128]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xf9de0f66                                 // pmaxub    xmm7, xmm1
	LONG $0x6f0f4566; BYTE $0xd4                     // movdqa    xmm10, xmm12
	LONG $0xda0f4466; BYTE $0xd7                     // pminub    xmm10, xmm7
	LONG $0xde0f4166; BYTE $0xfc                     // pmaxub    xmm7, xmm12
	LONG $0x6f0f4566; BYTE $0xe2                     // movdqa    xmm12, xmm10
	LONG $0xda0f4466; BYTE $0xe0                     // pminub    xmm12, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0x8c6f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 256]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4466; BYTE $0xc9                     // pmaxub    xmm9, xmm1
	LONG $0x8c6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xf1                     // movdqa    xmm14, xmm1
	LONG $0xda0f4566; BYTE $0xf1                     // pminub    xmm14, xmm9
	LONG $0xde0f4466; BYTE $0xc9                     // pmaxub    xmm9, xmm1
	LONG $0x6f0f4166; BYTE $0xce                     // movdqa    xmm1, xmm14
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xf16f0f66                                 // movdqa    xmm6, xmm1
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xef                     // movdqa    xmm5, xmm15
	LONG $0xda0f4166; BYTE $0xe8                     // pminub    xmm5, xmm8
	LONG $0xde0f4566; BYTE $0xc7                     // pmaxub    xmm8, xmm15
	LONG $0x4c6f0f66; WORD $0x3024                   // movdqa    xmm1, oword [rsp + 48]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc0                     // pminub    xmm0, xmm8
	LONG $0xde0f4466; BYTE $0xc1                     // pmaxub    xmm8, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0xac6f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xed                     // movdqa    xmm13, xmm5
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0x6f0f4566; BYTE $0xfb                     // movdqa    xmm15, xmm11
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xde0f4166; BYTE $0xcb                     // pmaxub    xmm1, xmm11
	LONG $0x6f0f4466; LONG $0x00c0249c; WORD $0x0000 // movdqa    xmm11, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xde0f4166; BYTE $0xcb                     // pmaxub    xmm1, xmm11
	LONG $0x4c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm1
	LONG $0xb4de0f66; LONG $0x0000e024; BYTE $0x00   // pmaxub    xmm6, oword [rsp + 224]
	LONG $0xb47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm6
	LONG $0xde0f4166; BYTE $0xef                     // pmaxub    xmm5, xmm15
	LONG $0xac7f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm5
	LONG $0x6f0f4166; BYTE $0xec                     // movdqa    xmm5, xmm12
	LONG $0xda0f4166; BYTE $0xed                     // pminub    xmm5, xmm13
	LONG $0xde0f4566; BYTE $0xec                     // pmaxub    xmm13, xmm12
	LONG $0x4c6f0f66; WORD $0x6024                   // movdqa    xmm1, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xd9                     // movdqa    xmm11, xmm1
	LONG $0xda0f4566; BYTE $0xdd                     // pminub    xmm11, xmm13
	LONG $0xde0f4466; BYTE $0xe9                     // pmaxub    xmm13, xmm1
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0x4c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm1
	LONG $0xde0f4466; BYTE $0xdd                     // pmaxub    xmm11, xmm5
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xce                     // pminub    xmm1, xmm14
	LONG $0xde0f4466; BYTE $0xf2                     // pmaxub    xmm14, xmm2
	LONG $0x546f0f66; WORD $0x5024                   // movdqa    xmm2, oword [rsp + 80]
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xda0f4166; BYTE $0xee                     // pminub    xmm5, xmm14
	LONG $0xde0f4466; BYTE $0xf2                     // pmaxub    xmm14, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0xe9de0f66                                 // pmaxub    xmm5, xmm1
	LONG $0x6c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm5
	LONG $0x8c6f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xf9                     // movdqa    xmm15, xmm1
	LONG $0xda0f4466; BYTE $0xf8                     // pminub    xmm15, xmm0
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x6f0f4566; BYTE $0xe7                     // movdqa    xmm12, xmm15
	LONG $0xda0f4466; BYTE $0xe2                     // pminub    xmm12, xmm2
	LONG $0xde0f4466; BYTE $0xfa                     // pmaxub    xmm15, xmm2
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xda                     // pmaxub    xmm3, xmm10
	LONG $0x5cda0f66; WORD $0x7024                   // pminub    xmm3, oword [rsp + 112]
	LONG $0xf36f0f66                                 // movdqa    xmm6, xmm3
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0x4c6f0f66; WORD $0x1024                   // movdqa    xmm1, oword [rsp + 16]
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xda0f4166; BYTE $0xe9                     // pminub    xmm5, xmm9
	LONG $0xde0f4466; BYTE $0xc9                     // pmaxub    xmm9, xmm1
	LONG $0x8c6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 176]
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0xde0f4466; BYTE $0xc9                     // pmaxub    xmm9, xmm1
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd5                     // pminub    xmm10, xmm5
	LONG $0xd5de0f66                                 // pmaxub    xmm2, xmm5
	LONG $0x646f0f66; WORD $0x2024                   // movdqa    xmm4, oword [rsp + 32]
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0xde0f4466; BYTE $0xc4                     // pmaxub    xmm8, xmm4
	LONG $0xda0f4466; WORD $0x2444; BYTE $0x40       // pminub    xmm8, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xe8                     // movdqa    xmm5, xmm8
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xde0f4466; BYTE $0xc1                     // pmaxub    xmm8, xmm1
	LONG $0x3cda0f66; BYTE $0x24                     // pminub    xmm7, oword [rsp]
	LONG $0xda0f4166; BYTE $0xfd                     // pminub    xmm7, xmm13
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xda0f4566; BYTE $0xc1                     // pminub    xmm8, xmm9
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xd8                     // pminub    xmm3, xmm8
	LONG $0x446f0f66; WORD $0x6024                   // movdqa    xmm0, oword [rsp + 96]
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xde0f4466; WORD $0x2464; BYTE $0x50       // pmaxub    xmm12, oword [rsp + 80]
	LONG $0xde0f4466; LONG $0x00a02494; WORD $0x0000 // pmaxub    xmm10, oword [rsp + 160]
	LONG $0xde0f4566; BYTE $0xd4                     // pmaxub    xmm10, xmm12
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc3                     // pminub    xmm0, xmm11
	LONG $0xde0f4166; BYTE $0xf3                     // pmaxub    xmm6, xmm11
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4166; BYTE $0xef                     // pmaxub    xmm5, xmm15
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xccde0f66                                 // pmaxub    xmm1, xmm4
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0x5c6f0f66; WORD $0x3024                   // movdqa    xmm3, oword [rsp + 48]
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc6                     // pminub    xmm0, xmm14
	LONG $0xde0f4166; BYTE $0xce                     // pmaxub    xmm1, xmm14
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x7f0f41f3; BYTE $0x09                     // movdqu    oword [r9], xmm1
	LONG $0x11fd8349                                 // cmp    r13, 17
	JB   LBB3_41
	WORD $0x894c; BYTE $0xf2                         // mov    rdx, r14
	LONG $0x0014b841; WORD $0x0000                   // mov    r8d, 20

LBB3_40:
	LONG $0x6f0f42f3; WORD $0x0044; BYTE $0xf8       // movdqu    xmm0, oword [rax + r8 - 8]
	LONG $0x6f0f42f3; WORD $0x0064; BYTE $0xfa       // movdqu    xmm4, oword [rax + r8 - 6]
	LONG $0x6f0f42f3; WORD $0x007c; BYTE $0xfc       // movdqu    xmm7, oword [rax + r8 - 4]
	LONG $0x6f0f46f3; WORD $0x0044; BYTE $0xfe       // movdqu    xmm8, oword [rax + r8 - 2]
	LONG $0x6f0f42f3; WORD $0x0014                   // movdqu    xmm2, oword [rax + r8]
	LONG $0x6f0f43f3; WORD $0x036c; BYTE $0xf8       // movdqu    xmm5, oword [r11 + r8 - 8]
	LONG $0x6f0f47f3; WORD $0x0364; BYTE $0xfa       // movdqu    xmm12, oword [r11 + r8 - 6]
	LONG $0x6f0f43f3; WORD $0x0374; BYTE $0xfc       // movdqu    xmm6, oword [r11 + r8 - 4]
	LONG $0x6f0f47f3; WORD $0x035c; BYTE $0xfe       // movdqu    xmm11, oword [r11 + r8 - 2]
	LONG $0x6f0f47f3; WORD $0x032c                   // movdqu    xmm13, oword [r11 + r8]
	LONG $0x6f0f44f3; WORD $0xf852                   // movdqu    xmm10, oword [rdx - 8]
	LONG $0xfa4a100f                                 // movups    xmm1, oword [rdx - 6]
	LONG $0x244c290f; BYTE $0x30                     // movaps    oword [rsp + 48], xmm1
	LONG $0x6f0f44f3; WORD $0xfc72                   // movdqu    xmm14, oword [rdx - 4]
	LONG $0x6f0f44f3; WORD $0xfe7a                   // movdqu    xmm15, oword [rdx - 2]
	LONG $0x4c100f42; WORD $0xf803                   // movups    xmm1, oword [rbx + r8 - 8]
	LONG $0x240c290f                                 // movaps    oword [rsp], xmm1
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0x5c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm3
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x447f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm0
	LONG $0x6f0f4166; BYTE $0xe0                     // movdqa    xmm4, xmm8
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xc8                     // pminub    xmm9, xmm8
	LONG $0xde0f4466; BYTE $0xc7                     // pmaxub    xmm8, xmm7
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4466; BYTE $0xcc                     // pmaxub    xmm9, xmm4
	LONG $0x6f0f4166; BYTE $0xd4                     // movdqa    xmm2, xmm12
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4466; BYTE $0xe5                     // pmaxub    xmm12, xmm5
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0x5c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm3
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0x6f0f4166; BYTE $0xd5                     // movdqa    xmm2, xmm13
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4166; BYTE $0xdb                     // movdqa    xmm3, xmm11
	LONG $0xda0f4166; BYTE $0xdd                     // pminub    xmm3, xmm13
	LONG $0xde0f4566; BYTE $0xeb                     // pmaxub    xmm13, xmm11
	LONG $0x7f0f4466; LONG $0x008024ac; WORD $0x0000 // movdqa    oword [rsp + 128], xmm13
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0x647f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm4
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0x9c7f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm3
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4566; BYTE $0xf7                     // pmaxub    xmm14, xmm15
	LONG $0x5c6f0f66; WORD $0x3024                   // movdqa    xmm3, oword [rsp + 48]
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xda0f4166; BYTE $0xee                     // pminub    xmm5, xmm14
	LONG $0xde0f4466; BYTE $0xf3                     // pmaxub    xmm14, xmm3
	LONG $0x7f0f4466; WORD $0x2474; BYTE $0x50       // movdqa    oword [rsp + 80], xmm14
	LONG $0xdd6f0f66                                 // movdqa    xmm3, xmm5
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0x9c7f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    oword [rsp + 256], xmm3
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6f0f42f3; WORD $0x0354; BYTE $0xfa       // movdqu    xmm2, oword [rbx + r8 - 6]
	LONG $0x246f0f66; BYTE $0x24                     // movdqa    xmm4, oword [rsp]
	LONG $0xdc6f0f66                                 // movdqa    xmm3, xmm4
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x126f0ff3                                 // movdqu    xmm2, oword [rdx]
	LONG $0x6f0f4466; BYTE $0xea                     // movdqa    xmm13, xmm2
	LONG $0xda0f4466; BYTE $0xec                     // pminub    xmm13, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x247f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm4
	LONG $0x6f0f4166; BYTE $0xd5                     // movdqa    xmm2, xmm13
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0xde0f4466; BYTE $0xeb                     // pmaxub    xmm13, xmm3
	LONG $0x6f0f46f3; WORD $0x035c; BYTE $0xfe       // movdqu    xmm11, oword [rbx + r8 - 2]
	LONG $0x6f0f42f3; WORD $0x0314                   // movdqu    xmm2, oword [rbx + r8]
	LONG $0x6f0f4166; BYTE $0xdb                     // movdqa    xmm3, xmm11
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xde0f4466; BYTE $0xda                     // pmaxub    xmm11, xmm2
	LONG $0x6f0f42f3; WORD $0x0354; BYTE $0xfc       // movdqu    xmm2, oword [rbx + r8 - 4]
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4566; BYTE $0xfb                     // pminub    xmm15, xmm11
	LONG $0xde0f4466; BYTE $0xda                     // pmaxub    xmm11, xmm2
	LONG $0x6f0f4166; BYTE $0xd7                     // movdqa    xmm2, xmm15
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0x947f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm2
	LONG $0xde0f4466; BYTE $0xfb                     // pmaxub    xmm15, xmm3
	LONG $0x6f0f42f3; WORD $0x0164; BYTE $0xfa       // movdqu    xmm4, oword [rcx + r8 - 6]
	LONG $0x6f0f42f3; WORD $0x0154; BYTE $0xfc       // movdqu    xmm2, oword [rcx + r8 - 4]
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f42f3; WORD $0x0154; BYTE $0xf8       // movdqu    xmm2, oword [rcx + r8 - 8]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xde0f4466; BYTE $0xf6                     // pmaxub    xmm14, xmm6
	LONG $0x6f0f42f3; WORD $0x0174; BYTE $0xfe       // movdqu    xmm6, oword [rcx + r8 - 2]
	LONG $0x6f0f42f3; WORD $0x013c                   // movdqu    xmm7, oword [rcx + r8]
	LONG $0x6f0f4466; BYTE $0xd6                     // movdqa    xmm10, xmm6
	LONG $0xda0f4466; BYTE $0xd7                     // pminub    xmm10, xmm7
	LONG $0xf7de0f66                                 // pmaxub    xmm6, xmm7
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xbc7f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm7
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x20       // movdqa    xmm9, oword [rsp + 32]
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xd7de0f66                                 // pmaxub    xmm2, xmm7
	LONG $0x947f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm2
	LONG $0x6f0f4166; BYTE $0xf8                     // movdqa    xmm7, xmm8
	LONG $0xda0f4166; BYTE $0xfc                     // pminub    xmm7, xmm12
	LONG $0xde0f4566; BYTE $0xe0                     // pmaxub    xmm12, xmm8
	LONG $0x446f0f66; WORD $0x4024                   // movdqa    xmm0, oword [rsp + 64]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x7f0f4466; WORD $0x2464; BYTE $0x40       // movdqa    oword [rsp + 64], xmm12
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0xcfde0f66                                 // pmaxub    xmm1, xmm7
	LONG $0x4c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm1
	LONG $0x8c6f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 256]
	LONG $0xf96f0f66                                 // movdqa    xmm7, xmm1
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xf8da0f66                                 // pminub    xmm7, xmm0
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x546f0f66; WORD $0x6024                   // movdqa    xmm2, oword [rsp + 96]
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xcfde0f66                                 // pmaxub    xmm1, xmm7
	LONG $0x6f0f4466; BYTE $0xc5                     // movdqa    xmm8, xmm5
	LONG $0xda0f4566; BYTE $0xc5                     // pminub    xmm8, xmm13
	LONG $0xde0f4466; BYTE $0xed                     // pmaxub    xmm13, xmm5
	LONG $0x846f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 144]
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xda0f4166; BYTE $0xfd                     // pminub    xmm7, xmm13
	LONG $0xde0f4466; BYTE $0xe8                     // pmaxub    xmm13, xmm0
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xc8                     // pminub    xmm9, xmm8
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0x446f0f66; WORD $0x5024                   // movdqa    xmm0, oword [rsp + 80]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x6f0f4466; LONG $0x00802484; WORD $0x0000 // movdqa    xmm8, oword [rsp + 128]
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0x6f0f4466; BYTE $0xc0                     // movdqa    xmm8, xmm0
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xde0f4466; BYTE $0xd3                     // pmaxub    xmm10, xmm3
	LONG $0x946f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xe2                     // movdqa    xmm12, xmm2
	LONG $0xda0f4566; BYTE $0xe2                     // pminub    xmm12, xmm10
	LONG $0xde0f4466; BYTE $0xd2                     // pmaxub    xmm10, xmm2
	LONG $0x6f0f4166; BYTE $0xd4                     // movdqa    xmm2, xmm12
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xde0f4466; BYTE $0xe5                     // pmaxub    xmm12, xmm5
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0x6f0f4166; BYTE $0xef                     // movdqa    xmm5, xmm15
	LONG $0xeeda0f66                                 // pminub    xmm5, xmm6
	LONG $0xde0f4166; BYTE $0xf7                     // pmaxub    xmm6, xmm15
	LONG $0x6f0f4466; BYTE $0xf5                     // movdqa    xmm14, xmm5
	LONG $0xda0f4466; BYTE $0xf3                     // pminub    xmm14, xmm3
	LONG $0xebde0f66                                 // pmaxub    xmm5, xmm3
	LONG $0x6f0f4166; BYTE $0xdb                     // movdqa    xmm3, xmm11
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xde0f4166; BYTE $0xe3                     // pmaxub    xmm4, xmm11
	LONG $0x6f0f4566; BYTE $0xd9                     // movdqa    xmm11, xmm9
	LONG $0xda0f4566; BYTE $0xde                     // pminub    xmm11, xmm14
	LONG $0xde0f4566; BYTE $0xf1                     // pmaxub    xmm14, xmm9
	LONG $0x6f0f4466; LONG $0x00c024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 192]
	LONG $0x6f0f4566; BYTE $0xcf                     // movdqa    xmm9, xmm15
	LONG $0xda0f4566; BYTE $0xce                     // pminub    xmm9, xmm14
	LONG $0xde0f4566; BYTE $0xf7                     // pmaxub    xmm14, xmm15
	LONG $0x54de0f66; WORD $0x6024                   // pmaxub    xmm2, oword [rsp + 96]
	LONG $0x947f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm2
	LONG $0xde0f4566; BYTE $0xcb                     // pmaxub    xmm9, xmm11
	LONG $0x7f0f4466; LONG $0x0090248c; WORD $0x0000 // movdqa    oword [rsp + 144], xmm9
	LONG $0x6f0f4566; BYTE $0xc8                     // movdqa    xmm9, xmm8
	LONG $0xda0f4466; BYTE $0xcb                     // pminub    xmm9, xmm3
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0x946f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xda                     // movdqa    xmm11, xmm2
	LONG $0xda0f4466; BYTE $0xdb                     // pminub    xmm11, xmm3
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0xde0f4566; BYTE $0xd9                     // pmaxub    xmm11, xmm9
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4566; BYTE $0xc4                     // pminub    xmm8, xmm12
	LONG $0xde0f4466; BYTE $0xe1                     // pmaxub    xmm12, xmm1
	LONG $0x8c6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xf9                     // movdqa    xmm15, xmm1
	LONG $0xda0f4566; BYTE $0xfc                     // pminub    xmm15, xmm12
	LONG $0xde0f4466; BYTE $0xe1                     // pmaxub    xmm12, xmm1
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0xde0f4566; BYTE $0xf8                     // pmaxub    xmm15, xmm8
	LONG $0x946f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 160]
	LONG $0xfa6f0f66                                 // movdqa    xmm7, xmm2
	LONG $0xfdda0f66                                 // pminub    xmm7, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc1                     // pminub    xmm8, xmm1
	LONG $0xf9de0f66                                 // pmaxub    xmm7, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0x64da0f66; WORD $0x7024                   // pminub    xmm4, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xcc                     // movdqa    xmm9, xmm4
	LONG $0xda0f4466; BYTE $0xc9                     // pminub    xmm9, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x4c6f0f66; WORD $0x3024                   // movdqa    xmm1, oword [rsp + 48]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4466; BYTE $0xd1                     // pmaxub    xmm10, xmm1
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xca                     // pminub    xmm1, xmm10
	LONG $0xde0f4466; BYTE $0xd2                     // pmaxub    xmm10, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xf5                     // pmaxub    xmm6, xmm13
	LONG $0x74da0f66; WORD $0x2024                   // pminub    xmm6, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xee                     // movdqa    xmm13, xmm6
	LONG $0xda0f4466; BYTE $0xe8                     // pminub    xmm13, xmm0
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0x44da0f66; WORD $0x4024                   // pminub    xmm0, oword [rsp + 64]
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xda0f4166; BYTE $0xf2                     // pminub    xmm6, xmm10
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xe6da0f66                                 // pminub    xmm4, xmm6
	LONG $0x446f0f66; WORD $0x5024                   // movdqa    xmm0, oword [rsp + 80]
	LONG $0x84de0f66; LONG $0x00009024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 144]
	LONG $0xde0f4566; BYTE $0xc7                     // pmaxub    xmm8, xmm15
	LONG $0x94de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm2, oword [rsp + 128]
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xda0f4166; BYTE $0xc3                     // pminub    xmm0, xmm11
	LONG $0xde0f4566; BYTE $0xcb                     // pmaxub    xmm9, xmm11
	LONG $0x6f0f4166; BYTE $0xdd                     // movdqa    xmm3, xmm13
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0xde0f4466; BYTE $0xef                     // pmaxub    xmm13, xmm7
	LONG $0xec6f0f66                                 // movdqa    xmm5, xmm4
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xcdde0f66                                 // pmaxub    xmm1, xmm5
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4166; BYTE $0xe5                     // pmaxub    xmm4, xmm13
	LONG $0xda0f4166; BYTE $0xe1                     // pminub    xmm4, xmm9
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xdc6f0f66                                 // movdqa    xmm3, xmm4
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xda0f4166; BYTE $0xde                     // pminub    xmm3, xmm14
	LONG $0xde0f4166; BYTE $0xd6                     // pmaxub    xmm2, xmm14
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xda0f4166; BYTE $0xc4                     // pminub    xmm0, xmm12
	LONG $0xde0f4166; BYTE $0xdc                     // pmaxub    xmm3, xmm12
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x7f0f43f3; WORD $0x015c; BYTE $0xfc       // movdqu    oword [r9 + r8 - 4], xmm3
	LONG $0x10788d49                                 // lea    rdi, [r8 + 16]
	LONG $0x0cc08349                                 // add    r8, 12
	LONG $0x10c28348                                 // add    rdx, 16
	WORD $0x394d; BYTE $0xe8                         // cmp    r8, r13
	WORD $0x8949; BYTE $0xf8                         // mov    r8, rdi
	JB   LBB3_40

LBB3_41:
	LONG $0x6f0f42f3; WORD $0x204c; BYTE $0xf0       // movdqu    xmm1, oword [rax + r12 - 16]
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xf1                     // movdqa    xmm14, xmm1
	LONG $0x656f0f66; BYTE $0x10                     // movdqa    xmm4, oword 16[rbp] /* [rip + .LCPI3_1] */
	LONG $0xdb0f4466; BYTE $0xf4                     // pand    xmm14, xmm4
	LONG $0xeb0f4466; BYTE $0xf0                     // por    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xdb0f4466; BYTE $0xcc                     // pand    xmm9, xmm4
	LONG $0xeb0f4466; BYTE $0xc8                     // por    xmm9, xmm0
	LONG $0x6f0f47f3; WORD $0x2364; BYTE $0xee       // movdqu    xmm12, oword [r11 + r12 - 18]
	LONG $0x6f0f43f3; WORD $0x2344; BYTE $0xf0       // movdqu    xmm0, oword [r11 + r12 - 16]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xfc                     // movdqa    xmm7, xmm12
	LONG $0xf8da0f66                                 // pminub    xmm7, xmm0
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0xccdb0f66                                 // pand    xmm1, xmm4
	LONG $0xc8eb0f66                                 // por    xmm1, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xf9                     // movdqa    xmm15, xmm1
	LONG $0xdb0f4466; BYTE $0xfc                     // pand    xmm15, xmm4
	LONG $0xeb0f4466; BYTE $0xf8                     // por    xmm15, xmm0
	LONG $0x6f0f43f3; WORD $0x2254; BYTE $0xf0       // movdqu    xmm2, oword [r10 + r12 - 16]
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xea                     // movdqa    xmm13, xmm2
	LONG $0xdb0f4466; BYTE $0xec                     // pand    xmm13, xmm4
	LONG $0xeb0f4466; BYTE $0xe8                     // por    xmm13, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4566; BYTE $0xc5                     // movdqa    xmm8, xmm13
	LONG $0xdb0f4466; BYTE $0xc4                     // pand    xmm8, xmm4
	LONG $0xeb0f4466; BYTE $0xc0                     // por    xmm8, xmm0
	LONG $0x6f0f46f3; WORD $0x235c; BYTE $0xf0       // movdqu    xmm11, oword [rbx + r12 - 16]
	LONG $0x7f0f4466; WORD $0x245c; BYTE $0x20       // movdqa    oword [rsp + 32], xmm11
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0xdb0f4466; BYTE $0xdc                     // pand    xmm11, xmm4
	LONG $0xeb0f4466; BYTE $0xd8                     // por    xmm11, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4166; BYTE $0xdb                     // movdqa    xmm3, xmm11
	LONG $0xdcdb0f66                                 // pand    xmm3, xmm4
	LONG $0xd8eb0f66                                 // por    xmm3, xmm0
	LONG $0x9c7f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm3
	LONG $0x6f0f42f3; WORD $0x215c; BYTE $0xee       // movdqu    xmm3, oword [rcx + r12 - 18]
	LONG $0x6f0f42f3; WORD $0x2144; BYTE $0xf0       // movdqu    xmm0, oword [rcx + r12 - 16]
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xac7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm5
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0xecdb0f66                                 // pand    xmm5, xmm4
	LONG $0xe8eb0f66                                 // por    xmm5, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xdb0f4466; BYTE $0xd4                     // pand    xmm10, xmm4
	LONG $0xeb0f4466; BYTE $0xd0                     // por    xmm10, xmm0
	LONG $0x6f0f42f3; WORD $0x2074; BYTE $0xec       // movdqu    xmm6, oword [rax + r12 - 20]
	LONG $0x6f0f42f3; WORD $0x2044; BYTE $0xee       // movdqu    xmm0, oword [rax + r12 - 18]
	LONG $0xe66f0f66                                 // movdqa    xmm4, xmm6
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xa47f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm4
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x747f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm6
	LONG $0x6f0f4166; BYTE $0xe6                     // movdqa    xmm4, xmm14
	LONG $0xda0f4166; BYTE $0xe1                     // pminub    xmm4, xmm9
	LONG $0xde0f4566; BYTE $0xce                     // pmaxub    xmm9, xmm14
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4466; BYTE $0xce                     // pmaxub    xmm9, xmm6
	LONG $0x7f0f4466; WORD $0x244c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm9
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x6f0f47f3; WORD $0x234c; BYTE $0xec       // movdqu    xmm9, oword [r11 + r12 - 20]
	LONG $0x6f0f4166; BYTE $0xe1                     // movdqa    xmm4, xmm9
	LONG $0xda0f4166; BYTE $0xe4                     // pminub    xmm4, xmm12
	LONG $0xde0f4566; BYTE $0xe1                     // pmaxub    xmm12, xmm9
	LONG $0x7f0f4466; WORD $0x2424                   // movdqa    oword [rsp], xmm12
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0x747f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm6
	LONG $0xe7de0f66                                 // pmaxub    xmm4, xmm7
	LONG $0x647f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm4
	LONG $0x6f0f43f3; WORD $0x2264; BYTE $0xec       // movdqu    xmm4, oword [r10 + r12 - 20]
	LONG $0x6f0f4166; BYTE $0xff                     // movdqa    xmm7, xmm15
	LONG $0xfcda0f66                                 // pminub    xmm7, xmm4
	LONG $0xde0f4466; BYTE $0xfc                     // pmaxub    xmm15, xmm4
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xda0f4166; BYTE $0xe7                     // pminub    xmm4, xmm15
	LONG $0xde0f4466; BYTE $0xf9                     // pmaxub    xmm15, xmm1
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0x8c7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm1
	LONG $0xe7de0f66                                 // pmaxub    xmm4, xmm7
	LONG $0xfa6f0f66                                 // movdqa    xmm7, xmm2
	LONG $0xda0f4166; BYTE $0xfd                     // pminub    xmm7, xmm13
	LONG $0xde0f4466; BYTE $0xea                     // pmaxub    xmm13, xmm2
	LONG $0x6f0f43f3; WORD $0x2254; BYTE $0xee       // movdqu    xmm2, oword [r10 + r12 - 18]
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xcd                     // pminub    xmm1, xmm13
	LONG $0xde0f4466; BYTE $0xea                     // pmaxub    xmm13, xmm2
	LONG $0x6f0f4466; BYTE $0xe1                     // movdqa    xmm12, xmm1
	LONG $0xda0f4466; BYTE $0xe7                     // pminub    xmm12, xmm7
	LONG $0xcfde0f66                                 // pmaxub    xmm1, xmm7
	LONG $0x6f0f46f3; WORD $0x234c; BYTE $0xec       // movdqu    xmm9, oword [rbx + r12 - 20]
	LONG $0x6f0f42f3; WORD $0x2354; BYTE $0xee       // movdqu    xmm2, oword [rbx + r12 - 18]
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0xde0f4566; BYTE $0xc8                     // pmaxub    xmm9, xmm8
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0x747f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm6
	LONG $0xd7de0f66                                 // pmaxub    xmm2, xmm7
	LONG $0x6f0f4566; BYTE $0xc3                     // movdqa    xmm8, xmm11
	LONG $0xbc6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 176]
	LONG $0xda0f4466; BYTE $0xc7                     // pminub    xmm8, xmm7
	LONG $0xde0f4166; BYTE $0xfb                     // pmaxub    xmm7, xmm11
	LONG $0x746f0f66; WORD $0x2024                   // movdqa    xmm6, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xde                     // movdqa    xmm11, xmm6
	LONG $0xda0f4466; BYTE $0xdf                     // pminub    xmm11, xmm7
	LONG $0xfede0f66                                 // pmaxub    xmm7, xmm6
	LONG $0xbc7f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm7
	LONG $0x6f0f4166; BYTE $0xf3                     // movdqa    xmm6, xmm11
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0x747f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm6
	LONG $0xde0f4566; BYTE $0xd8                     // pmaxub    xmm11, xmm8
	LONG $0x6f0f42f3; WORD $0x217c; BYTE $0xec       // movdqu    xmm7, oword [rcx + r12 - 20]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc3                     // pminub    xmm8, xmm3
	LONG $0xdfde0f66                                 // pmaxub    xmm3, xmm7
	LONG $0x6f0f4166; BYTE $0xf8                     // movdqa    xmm7, xmm8
	LONG $0xb46f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 160]
	LONG $0xfeda0f66                                 // pminub    xmm7, xmm6
	LONG $0xbc7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm7
	LONG $0xde0f4466; BYTE $0xc6                     // pmaxub    xmm8, xmm6
	LONG $0xfd6f0f66                                 // movdqa    xmm7, xmm5
	LONG $0xda0f4166; BYTE $0xfa                     // pminub    xmm7, xmm10
	LONG $0xde0f4466; BYTE $0xd5                     // pmaxub    xmm10, xmm5
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0x6c6f0f66; WORD $0x3024                   // movdqa    xmm5, oword [rsp + 48]
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0xb47f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm6
	LONG $0xde0f4166; BYTE $0xee                     // pmaxub    xmm5, xmm14
	LONG $0x6c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0x746f0f66; WORD $0x1024                   // movdqa    xmm6, oword [rsp + 16]
	LONG $0xeeda0f66                                 // pminub    xmm5, xmm6
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x6f0f4466; LONG $0x009024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 144]
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0x747f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm6
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0x747f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm6
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x847f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm0
	LONG $0x746f0f66; WORD $0x6024                   // movdqa    xmm6, oword [rsp + 96]
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0x2c6f0f66; BYTE $0x24                     // movdqa    xmm5, oword [rsp]
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0x6f0f4466; WORD $0x2474; BYTE $0x70       // movdqa    xmm14, oword [rsp + 112]
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0xde0f4166; BYTE $0xee                     // pmaxub    xmm5, xmm14
	LONG $0x2c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm5
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0x6c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm5
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0xb47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm6
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0x6c6f0f66; WORD $0x4024                   // movdqa    xmm5, oword [rsp + 64]
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xec                     // pmaxub    xmm5, xmm12
	LONG $0xb46f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 192]
	LONG $0x6f0f4466; BYTE $0xe6                     // movdqa    xmm12, xmm6
	LONG $0xda0f4466; BYTE $0xe5                     // pminub    xmm12, xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0x6f0f4166; BYTE $0xec                     // movdqa    xmm5, xmm12
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xac7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm5
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xe9de0f66                                 // pmaxub    xmm5, xmm1
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4566; BYTE $0xcd                     // pmaxub    xmm9, xmm13
	LONG $0x6f0f4566; BYTE $0xef                     // movdqa    xmm13, xmm15
	LONG $0xda0f4566; BYTE $0xe9                     // pminub    xmm13, xmm9
	LONG $0xde0f4566; BYTE $0xcf                     // pmaxub    xmm9, xmm15
	LONG $0x6f0f4566; BYTE $0xf5                     // movdqa    xmm14, xmm13
	LONG $0xda0f4466; BYTE $0xf0                     // pminub    xmm14, xmm0
	LONG $0xde0f4466; BYTE $0xe8                     // pmaxub    xmm13, xmm0
	LONG $0x8c6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 208]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xf9de0f66                                 // pmaxub    xmm7, xmm1
	LONG $0x4c6f0f66; WORD $0x2024                   // movdqa    xmm1, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xf9                     // movdqa    xmm15, xmm1
	LONG $0xda0f4466; BYTE $0xff                     // pminub    xmm15, xmm7
	LONG $0xf9de0f66                                 // pmaxub    xmm7, xmm1
	LONG $0x6f0f4166; BYTE $0xcf                     // movdqa    xmm1, xmm15
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4566; BYTE $0xd0                     // pmaxub    xmm10, xmm8
	LONG $0x6f0f4166; BYTE $0xf3                     // movdqa    xmm6, xmm11
	LONG $0xda0f4166; BYTE $0xf2                     // pminub    xmm6, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xe66f0f66                                 // movdqa    xmm4, xmm6
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x846f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 176]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x50       // movdqa    xmm8, oword [rsp + 80]
	LONG $0x6f0f4166; BYTE $0xe8                     // movdqa    xmm5, xmm8
	LONG $0xecda0f66                                 // pminub    xmm5, xmm4
	LONG $0xde0f4166; BYTE $0xe0                     // pmaxub    xmm4, xmm8
	LONG $0xa47f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm4
	LONG $0x646f0f66; WORD $0x2024                   // movdqa    xmm4, oword [rsp + 32]
	LONG $0xa4de0f66; LONG $0x0000c024; BYTE $0x00   // pmaxub    xmm4, oword [rsp + 192]
	LONG $0x647f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm4
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm5
	LONG $0x6f0f4166; BYTE $0xe6                     // movdqa    xmm4, xmm14
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xce                     // pmaxub    xmm1, xmm14
	LONG $0x446f0f66; WORD $0x6024                   // movdqa    xmm0, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xda0f4466; BYTE $0xf1                     // pminub    xmm14, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4466; BYTE $0xf4                     // pmaxub    xmm14, xmm4
	LONG $0x6f0f4166; BYTE $0xe4                     // movdqa    xmm4, xmm12
	LONG $0xda0f4166; BYTE $0xe7                     // pminub    xmm4, xmm15
	LONG $0xde0f4566; BYTE $0xfc                     // pmaxub    xmm15, xmm12
	LONG $0x846f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 128]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xef                     // pminub    xmm5, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0x7f0f4466; LONG $0x008024bc; WORD $0x0000 // movdqa    oword [rsp + 128], xmm15
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xf2de0f66                                 // pmaxub    xmm6, xmm2
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0xac7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm5
	LONG $0x946f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xc2                     // movdqa    xmm8, xmm2
	LONG $0xda0f4466; BYTE $0xc6                     // pminub    xmm8, xmm6
	LONG $0xf2de0f66                                 // pmaxub    xmm6, xmm2
	LONG $0x6f0f4566; BYTE $0xf8                     // movdqa    xmm15, xmm8
	LONG $0xda0f4466; BYTE $0xf8                     // pminub    xmm15, xmm0
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdd                     // pmaxub    xmm3, xmm13
	LONG $0x9cda0f66; LONG $0x0000a024; BYTE $0x00   // pminub    xmm3, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xe3                     // movdqa    xmm12, xmm3
	LONG $0xda0f4466; BYTE $0xe0                     // pminub    xmm12, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x546f0f66; WORD $0x4024                   // movdqa    xmm2, oword [rsp + 64]
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xefda0f66                                 // pminub    xmm5, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6f0f4466; BYTE $0xdd                     // movdqa    xmm11, xmm5
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x546f0f66; WORD $0x7024                   // movdqa    xmm2, oword [rsp + 112]
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4466; BYTE $0xd2                     // pmaxub    xmm10, xmm2
	LONG $0xda0f4466; WORD $0x2454; BYTE $0x10       // pminub    xmm10, oword [rsp + 16]
	LONG $0x6f0f4166; BYTE $0xe2                     // movdqa    xmm4, xmm10
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0xda0f4466; WORD $0x240c                   // pminub    xmm9, oword [rsp]
	LONG $0xda0f4466; BYTE $0xc9                     // pminub    xmm9, xmm1
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xda0f4466; BYTE $0xd7                     // pminub    xmm10, xmm7
	LONG $0xda0f4166; BYTE $0xd9                     // pminub    xmm3, xmm9
	LONG $0xda0f4166; BYTE $0xda                     // pminub    xmm3, xmm10
	LONG $0x446f0f66; WORD $0x6024                   // movdqa    xmm0, oword [rsp + 96]
	LONG $0x44de0f66; WORD $0x5024                   // pmaxub    xmm0, oword [rsp + 80]
	LONG $0xde0f4466; LONG $0x00d024bc; WORD $0x0000 // pmaxub    xmm15, oword [rsp + 208]
	LONG $0xde0f4466; WORD $0x245c; BYTE $0x20       // pmaxub    xmm11, oword [rsp + 32]
	LONG $0xde0f4566; BYTE $0xdf                     // pmaxub    xmm11, xmm15
	LONG $0xde0f4466; BYTE $0xd8                     // pmaxub    xmm11, xmm0
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xda0f4166; BYTE $0xc6                     // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xe6                     // pmaxub    xmm12, xmm14
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd0                     // pminub    xmm2, xmm8
	LONG $0xde0f4166; BYTE $0xe0                     // pmaxub    xmm4, xmm8
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0xe9de0f66                                 // pmaxub    xmm5, xmm1
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0xda0f4166; BYTE $0xdc                     // pminub    xmm3, xmm12
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xc3                     // pmaxub    xmm0, xmm11
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xa46f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 176]
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xccde0f66                                 // pmaxub    xmm1, xmm4
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x9c6f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm3, oword [rsp + 128]
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x7f0f43f3; WORD $0x2154; BYTE $0xf0       // movdqu    oword [r9 + r12 - 16], xmm2
	WORD $0xff49; BYTE $0xc7                         // inc    r15
	LONG $0x248c034c; LONG $0x00000160               // add    r9, qword 352[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                         // add    r14, rsi
	LONG $0x24bc3b4c; LONG $0x000000f0               // cmp    r15, qword [rsp + 240]
	JNE  LBB3_38
	JMP  LBB3_62

LBB3_42:
	LONG $0x03f88349                               // cmp    r8, 3
	JE   LBB3_56
	LONG $0x04f88349                               // cmp    r8, 4
	JNE  LBB3_62
	LONG $0x24bc8348; LONG $0x000000f0; BYTE $0x00 // cmp    qword [rsp + 240], 0
	JE   LBB3_62
	LONG $0x95248d4c; LONG $0xffffffff             // lea    r12, [4*rdx - 1]
	LONG $0x02e2c148                               // shl    rdx, 2
	LONG $0xf0e48349                               // and    r12, -16
	LONG $0x24848b48; LONG $0x000000f0             // mov    rax, qword [rsp + 240]
	LONG $0xfe488d48                               // lea    rcx, [rax - 2]
	LONG $0x248c8948; LONG $0x00000110             // mov    qword [rsp + 272], rcx
	WORD $0xff48; BYTE $0xc8                       // dec    rax
	LONG $0x24848948; LONG $0x00000120             // mov    qword [rsp + 288], rax
	LONG $0x24848b48; LONG $0x000000f8             // mov    rax, qword [rsp + 248]
	LONG $0x18708d4c                               // lea    r14, [rax + 24]
	WORD $0x3145; BYTE $0xff                       // xor    r15d, r15d

LBB3_46:
	LONG $0xfe4f8d49                                 // lea    rcx, [r15 - 2]
	LONG $0xceaf0f48                                 // imul    rcx, rsi
	LONG $0x248c0348; LONG $0x000000f8               // add    rcx, qword [rsp + 248]
	LONG $0x311c8d4c                                 // lea    r11, [rcx + rsi]
	LONG $0x33148d4d                                 // lea    r10, [r11 + rsi]
	LONG $0x32048d4d                                 // lea    r8, [r10 + rsi]
	WORD $0x854d; BYTE $0xff                         // test    r15, r15
	WORD $0x894d; BYTE $0xdd                         // mov    r13, r11
	LONG $0x6f0f42f3; WORD $0x1e14                   // movdqu    xmm2, oword [rsi + r11]
	LONG $0x6f0f42f3; WORD $0x1e64; BYTE $0x04       // movdqu    xmm4, oword [rsi + r11 + 4]
	LONG $0x647f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm4
	WORD $0x894c; BYTE $0xd8                         // mov    rax, r11
	LONG $0xc2440f49                                 // cmove    rax, r10
	LONG $0x02ff8349                                 // cmp    r15, 2
	LONG $0xe8420f4c                                 // cmovb    r13, rax
	LONG $0xc1430f48                                 // cmovae    rax, rcx
	LONG $0x24bc3b4c; LONG $0x00000120               // cmp    r15, qword [rsp + 288]
	WORD $0x894c; BYTE $0xd1                         // mov    rcx, r10
	LONG $0xc8420f49                                 // cmovb    rcx, r8
	LONG $0x24bc3b4c; LONG $0x00000110               // cmp    r15, qword [rsp + 272]
	WORD $0x8948; BYTE $0xcb                         // mov    rbx, rcx
	LONG $0xd8420f49                                 // cmovb    rbx, r8
	WORD $0x100f; BYTE $0x00                         // movups    xmm0, oword [rax]
	LONG $0x486f0ff3; BYTE $0x04                     // movdqu    xmm1, oword [rax + 4]
	LONG $0x586f0ff3; BYTE $0x08                     // movdqu    xmm3, oword [rax + 8]
	LONG $0x5c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm3
	WORD $0x570f; BYTE $0xf6                         // xorps    xmm6, xmm6
	LONG $0xf0100ff3                                 // movss    xmm6, xmm0
	LONG $0x6f0f4466; BYTE $0xe1                     // movdqa    xmm12, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xc8280f44                                 // movaps    xmm9, xmm0
	LONG $0xda0f4466; BYTE $0xc9                     // pminub    xmm9, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xf8730f66; BYTE $0x04                     // pslldq    xmm0, 4
	WORD $0x560f; BYTE $0xf0                         // orps    xmm6, xmm0
	WORD $0x280f; BYTE $0xc6                         // movaps    xmm0, xmm6
	LONG $0xf8730f66; BYTE $0x04                     // pslldq    xmm0, 4
	LONG $0xc9ef0f66                                 // pxor    xmm1, xmm1
	LONG $0xce100ff3                                 // movss    xmm1, xmm6
	WORD $0x560f; BYTE $0xc8                         // orps    xmm1, xmm0
	LONG $0xf9280f44                                 // movaps    xmm15, xmm1
	LONG $0x6f0f45f3; WORD $0x005d                   // movdqu    xmm11, oword [r13]
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xf8730f66; BYTE $0x04                     // pslldq    xmm0, 4
	WORD $0x570f; BYTE $0xc9                         // xorps    xmm1, xmm1
	LONG $0x100f41f3; BYTE $0xcb                     // movss    xmm1, xmm11
	WORD $0x560f; BYTE $0xc8                         // orps    xmm1, xmm0
	LONG $0x240c290f                                 // movaps    oword [rsp], xmm1
	WORD $0x280f; BYTE $0xc1                         // movaps    xmm0, xmm1
	LONG $0xf8730f66; BYTE $0x04                     // pslldq    xmm0, 4
	WORD $0x570f; BYTE $0xed                         // xorps    xmm5, xmm5
	LONG $0xe9100ff3                                 // movss    xmm5, xmm1
	WORD $0x560f; BYTE $0xe8                         // orps    xmm5, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xf8730f66; BYTE $0x04                     // pslldq    xmm0, 4
	WORD $0x570f; BYTE $0xc9                         // xorps    xmm1, xmm1
	LONG $0xca100ff3                                 // movss    xmm1, xmm2
	WORD $0x560f; BYTE $0xc8                         // orps    xmm1, xmm0
	LONG $0xdbef0f66                                 // pxor    xmm3, xmm3
	LONG $0xd9100ff3                                 // movss    xmm3, xmm1
	LONG $0x6f0f4466; BYTE $0xea                     // movdqa    xmm13, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xd1280f44                                 // movaps    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm2
	LONG $0xf9730f66; BYTE $0x04                     // pslldq    xmm1, 4
	WORD $0x560f; BYTE $0xd9                         // orps    xmm3, xmm1
	WORD $0x100f; BYTE $0x0b                         // movups    xmm1, oword [rbx]
	LONG $0xd2ef0f66                                 // pxor    xmm2, xmm2
	LONG $0xd1100ff3                                 // movss    xmm2, xmm1
	LONG $0x436f0ff3; BYTE $0x04                     // movdqu    xmm0, oword [rbx + 4]
	LONG $0x636f0ff3; BYTE $0x08                     // movdqu    xmm4, oword [rbx + 8]
	LONG $0xa47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm4
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	WORD $0x280f; BYTE $0xe1                         // movaps    xmm4, xmm1
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0x647f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm4
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x847f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm0
	LONG $0xf9730f66; BYTE $0x04                     // pslldq    xmm1, 4
	WORD $0x560f; BYTE $0xd1                         // orps    xmm2, xmm1
	WORD $0x280f; BYTE $0xca                         // movaps    xmm1, xmm2
	LONG $0xf9730f66; BYTE $0x04                     // pslldq    xmm1, 4
	LONG $0xe4ef0f66                                 // pxor    xmm4, xmm4
	LONG $0xe2100ff3                                 // movss    xmm4, xmm2
	WORD $0x560f; BYTE $0xe1                         // orps    xmm4, xmm1
	LONG $0x303c8d49                                 // lea    rdi, [r8 + rsi]
	LONG $0xcf420f48                                 // cmovb    rcx, rdi
	LONG $0x396f0ff3                                 // movdqu    xmm7, oword [rcx]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0x730f4166; WORD $0x04f8                   // pslldq    xmm8, 4
	WORD $0x570f; BYTE $0xc9                         // xorps    xmm1, xmm1
	LONG $0xcf100ff3                                 // movss    xmm1, xmm7
	LONG $0xc8560f41                                 // orps    xmm1, xmm8
	LONG $0xc1280f44                                 // movaps    xmm8, xmm1
	LONG $0x730f4166; WORD $0x04f8                   // pslldq    xmm8, 4
	LONG $0xc0ef0f66                                 // pxor    xmm0, xmm0
	LONG $0xc1100ff3                                 // movss    xmm0, xmm1
	LONG $0xc0560f41                                 // orps    xmm0, xmm8
	LONG $0xc7280f45                                 // movaps    xmm8, xmm15
	LONG $0xda0f4466; BYTE $0xc6                     // pminub    xmm8, xmm6
	LONG $0xde0f4466; BYTE $0xfe                     // pmaxub    xmm15, xmm6
	LONG $0x7f0f4466; WORD $0x247c; BYTE $0x70       // movdqa    oword [rsp + 112], xmm15
	LONG $0xda0f4466; WORD $0x2464; BYTE $0x10       // pminub    xmm12, oword [rsp + 16]
	LONG $0x6f0f4566; BYTE $0xf9                     // movdqa    xmm15, xmm9
	LONG $0xda0f4566; BYTE $0xfc                     // pminub    xmm15, xmm12
	LONG $0xde0f4566; BYTE $0xcc                     // pmaxub    xmm9, xmm12
	LONG $0x7f0f4466; LONG $0x0090248c; WORD $0x0000 // movdqa    oword [rsp + 144], xmm9
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0x6f0f4466; BYTE $0xe6                     // movdqa    xmm12, xmm6
	LONG $0xda0f4566; BYTE $0xe3                     // pminub    xmm12, xmm11
	LONG $0xde0f4166; BYTE $0xf3                     // pmaxub    xmm6, xmm11
	LONG $0xdd280f44                                 // movaps    xmm11, xmm5
	LONG $0xda0f4466; BYTE $0xde                     // pminub    xmm11, xmm6
	LONG $0xf5de0f66                                 // pmaxub    xmm6, xmm5
	LONG $0x347f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm6
	LONG $0x6f0f4566; BYTE $0xcb                     // movdqa    xmm9, xmm11
	LONG $0xda0f4566; BYTE $0xcc                     // pminub    xmm9, xmm12
	LONG $0xde0f4566; BYTE $0xdc                     // pmaxub    xmm11, xmm12
	LONG $0x7f0f4466; WORD $0x245c; BYTE $0x10       // movdqa    oword [rsp + 16], xmm11
	LONG $0x6f0f41f3; WORD $0x0875                   // movdqu    xmm6, oword [r13 + 8]
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xebda0f66                                 // pminub    xmm5, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x6f0f41f3; WORD $0x0475                   // movdqu    xmm6, oword [r13 + 4]
	LONG $0x6f0f4466; BYTE $0xde                     // movdqa    xmm11, xmm6
	LONG $0xda0f4466; BYTE $0xdb                     // pminub    xmm11, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x6f0f4166; BYTE $0xf3                     // movdqa    xmm6, xmm11
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0xde0f4466; BYTE $0xdd                     // pmaxub    xmm11, xmm5
	LONG $0xda0f4466; WORD $0x246c; BYTE $0x40       // pminub    xmm13, oword [rsp + 64]
	LONG $0x6f0f4566; BYTE $0xe2                     // movdqa    xmm12, xmm10
	LONG $0xda0f4566; BYTE $0xe5                     // pminub    xmm12, xmm13
	LONG $0xde0f4566; BYTE $0xd5                     // pmaxub    xmm10, xmm13
	LONG $0x7f0f4466; LONG $0x00e02494; WORD $0x0000 // movdqa    oword [rsp + 224], xmm10
	WORD $0x280f; BYTE $0xec                         // movaps    xmm5, xmm4
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f42f3; WORD $0x1e54; BYTE $0x08       // movdqu    xmm2, oword [rsi + r11 + 8]
	LONG $0x6f0f4466; BYTE $0xea                     // movdqa    xmm13, xmm2
	LONG $0xda0f4466; BYTE $0xec                     // pminub    xmm13, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4566; BYTE $0xd5                     // movdqa    xmm10, xmm13
	LONG $0xda0f4466; BYTE $0xd5                     // pminub    xmm10, xmm5
	LONG $0xde0f4466; BYTE $0xed                     // pmaxub    xmm13, xmm5
	LONG $0xda0f4466; LONG $0x00a024b4; WORD $0x0000 // pminub    xmm14, oword [rsp + 160]
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xda0f4166; BYTE $0xee                     // pminub    xmm5, xmm14
	LONG $0xac7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm5
	LONG $0xde0f4166; BYTE $0xd6                     // pmaxub    xmm2, xmm14
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	WORD $0x280f; BYTE $0xe9                         // movaps    xmm5, xmm1
	LONG $0xefda0f66                                 // pminub    xmm5, xmm7
	LONG $0xcfde0f66                                 // pmaxub    xmm1, xmm7
	WORD $0x280f; BYTE $0xd0                         // movaps    xmm2, xmm0
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xd5de0f66                                 // pmaxub    xmm2, xmm5
	LONG $0x696f0ff3; BYTE $0x04                     // movdqu    xmm5, oword [rcx + 4]
	LONG $0x416f0ff3; BYTE $0x08                     // movdqu    xmm0, oword [rcx + 8]
	LONG $0xfd6f0f66                                 // movdqa    xmm7, xmm5
	LONG $0xf8da0f66                                 // pminub    xmm7, xmm0
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0x447f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm0
	LONG $0xde0f4566; BYTE $0xcf                     // pmaxub    xmm9, xmm15
	LONG $0x7f0f4466; WORD $0x244c; BYTE $0x40       // movdqa    oword [rsp + 64], xmm9
	LONG $0x6f0f4466; LONG $0x0090248c; WORD $0x0000 // movdqa    xmm9, oword [rsp + 144]
	LONG $0x6f0f4566; BYTE $0xf9                     // movdqa    xmm15, xmm9
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0xda0f4466; BYTE $0xf8                     // pminub    xmm15, xmm0
	LONG $0xde0f4166; BYTE $0xc1                     // pmaxub    xmm0, xmm9
	LONG $0x6f0f4566; BYTE $0xc8                     // movdqa    xmm9, xmm8
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4166; BYTE $0xc0                     // pmaxub    xmm0, xmm8
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xda0f4166; BYTE $0xc7                     // pminub    xmm0, xmm15
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4566; BYTE $0xcf                     // pmaxub    xmm9, xmm15
	LONG $0x7f0f4466; LONG $0x0090248c; WORD $0x0000 // movdqa    oword [rsp + 144], xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x20       // movdqa    xmm9, oword [rsp + 32]
	LONG $0x6f0f4566; BYTE $0xc1                     // movdqa    xmm8, xmm9
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xda0f4466; BYTE $0xc0                     // pminub    xmm8, xmm0
	LONG $0xde0f4166; BYTE $0xc1                     // pmaxub    xmm0, xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x70       // movdqa    xmm9, oword [rsp + 112]
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0xda0f4466; BYTE $0xf0                     // pminub    xmm14, xmm0
	LONG $0xde0f4166; BYTE $0xc1                     // pmaxub    xmm0, xmm9
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xda0f4166; BYTE $0xc0                     // pminub    xmm0, xmm8
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0xde0f4566; BYTE $0xf0                     // pmaxub    xmm14, xmm8
	LONG $0x7f0f4466; WORD $0x2474; BYTE $0x70       // movdqa    oword [rsp + 112], xmm14
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4566; BYTE $0xd4                     // pmaxub    xmm10, xmm12
	LONG $0x6f0f4466; BYTE $0xfe                     // movdqa    xmm15, xmm6
	LONG $0xda0f4566; BYTE $0xfa                     // pminub    xmm15, xmm10
	LONG $0xde0f4466; BYTE $0xd6                     // pmaxub    xmm10, xmm6
	LONG $0x7f0f4466; LONG $0x00a02494; WORD $0x0000 // movdqa    oword [rsp + 160], xmm10
	LONG $0x6f0f4166; BYTE $0xf7                     // movdqa    xmm6, xmm15
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0xb47f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    oword [rsp + 256], xmm6
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0xb46f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 224]
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc5                     // pminub    xmm0, xmm13
	LONG $0xde0f4466; BYTE $0xee                     // pmaxub    xmm13, xmm6
	LONG $0x6f0f4566; BYTE $0xd3                     // movdqa    xmm10, xmm11
	LONG $0xda0f4566; BYTE $0xd5                     // pminub    xmm10, xmm13
	LONG $0xde0f4566; BYTE $0xeb                     // pmaxub    xmm13, xmm11
	LONG $0x6f0f4566; BYTE $0xf2                     // movdqa    xmm14, xmm10
	LONG $0xda0f4466; BYTE $0xf0                     // pminub    xmm14, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0xb46f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 128]
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe6de0f66                                 // pmaxub    xmm4, xmm6
	LONG $0x6f0f4466; BYTE $0xdb                     // movdqa    xmm11, xmm3
	LONG $0xda0f4466; BYTE $0xdc                     // pminub    xmm11, xmm4
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0x6f0f4166; BYTE $0xdb                     // movdqa    xmm3, xmm11
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0x9c7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm3
	LONG $0xde0f4466; BYTE $0xd8                     // pmaxub    xmm11, xmm0
	LONG $0x9c6f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm3, oword [rsp + 192]
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xfbde0f66                                 // pmaxub    xmm7, xmm3
	LONG $0x9c6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm3, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xcb                     // movdqa    xmm9, xmm3
	LONG $0xda0f4466; BYTE $0xcf                     // pminub    xmm9, xmm7
	LONG $0xfbde0f66                                 // pmaxub    xmm7, xmm3
	LONG $0x6f0f4566; BYTE $0xc1                     // movdqa    xmm8, xmm9
	LONG $0xda0f4466; BYTE $0xc0                     // pminub    xmm8, xmm0
	LONG $0xde0f4466; BYTE $0xc8                     // pmaxub    xmm9, xmm0
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xddda0f66                                 // pminub    xmm3, xmm5
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x946f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xe2                     // movdqa    xmm12, xmm2
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x6f0f4466; WORD $0x2474; BYTE $0x60       // movdqa    xmm14, oword [rsp + 96]
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x447f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm0
	LONG $0xde0f4466; LONG $0x01002484; WORD $0x0000 // pmaxub    xmm8, oword [rsp + 256]
	LONG $0x7f0f4466; LONG $0x00b02484; WORD $0x0000 // movdqa    oword [rsp + 176], xmm8
	LONG $0xf2de0f66                                 // pmaxub    xmm6, xmm2
	LONG $0xb47f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm6
	LONG $0x846f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 224]
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd4                     // pminub    xmm2, xmm12
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x746f0f66; WORD $0x2024                   // movdqa    xmm6, oword [rsp + 32]
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc4                     // pminub    xmm0, xmm12
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xb47f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm6
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0x6f0f4166; BYTE $0xd7                     // movdqa    xmm2, xmm15
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0xde0f4566; BYTE $0xcf                     // pmaxub    xmm9, xmm15
	LONG $0x746f0f66; WORD $0x5024                   // movdqa    xmm6, oword [rsp + 80]
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4466; BYTE $0xce                     // pmaxub    xmm9, xmm6
	LONG $0x7f0f4466; WORD $0x244c; BYTE $0x20       // movdqa    oword [rsp + 32], xmm9
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xf3da0f66                                 // pminub    xmm6, xmm3
	LONG $0xde0f4166; BYTE $0xda                     // pmaxub    xmm3, xmm10
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm0
	LONG $0x846f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xf8                     // movdqa    xmm15, xmm0
	LONG $0xda0f4466; BYTE $0xfb                     // pminub    xmm15, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xde0f4466; BYTE $0xfe                     // pmaxub    xmm15, xmm6
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xcb                     // pmaxub    xmm1, xmm11
	LONG $0x4cda0f66; WORD $0x7024                   // pminub    xmm1, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4466; BYTE $0xc2                     // pminub    xmm8, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0x946f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 160]
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6f0f4466; WORD $0x2474; BYTE $0x40       // movdqa    xmm14, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd7da0f66                                 // pminub    xmm2, xmm7
	LONG $0xde0f4166; BYTE $0xfe                     // pmaxub    xmm7, xmm14
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd6                     // pminub    xmm10, xmm6
	LONG $0xd6de0f66                                 // pmaxub    xmm2, xmm6
	LONG $0x6f0f4566; BYTE $0xcd                     // movdqa    xmm9, xmm13
	LONG $0xda0f4466; BYTE $0xcd                     // pminub    xmm9, xmm5
	LONG $0xde0f4166; BYTE $0xed                     // pmaxub    xmm5, xmm13
	LONG $0x6cda0f66; WORD $0x1024                   // pminub    xmm5, oword [rsp + 16]
	LONG $0xf56f0f66                                 // movdqa    xmm6, xmm5
	LONG $0xda0f4166; BYTE $0xf1                     // pminub    xmm6, xmm9
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x24da0f66; BYTE $0x24                     // pminub    xmm4, oword [rsp]
	LONG $0xda0f4166; BYTE $0xe4                     // pminub    xmm4, xmm12
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xefda0f66                                 // pminub    xmm5, xmm7
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0x9c6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm3, oword [rsp + 208]
	LONG $0x9cde0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm3, oword [rsp + 128]
	LONG $0x44de0f66; WORD $0x5024                   // pmaxub    xmm0, oword [rsp + 80]
	LONG $0xde0f4466; LONG $0x00b02494; WORD $0x0000 // pmaxub    xmm10, oword [rsp + 176]
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0xde0f4466; BYTE $0xd3                     // pmaxub    xmm10, xmm3
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0x5c6f0f66; WORD $0x6024                   // movdqa    xmm3, oword [rsp + 96]
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4466; BYTE $0xc3                     // pmaxub    xmm8, xmm3
	LONG $0xde6f0f66                                 // movdqa    xmm3, xmm6
	LONG $0xda0f4166; BYTE $0xdf                     // pminub    xmm3, xmm15
	LONG $0xde0f4166; BYTE $0xf7                     // pmaxub    xmm6, xmm15
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcede0f66                                 // pmaxub    xmm1, xmm6
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0x5c6f0f66; WORD $0x3024                   // movdqa    xmm3, oword [rsp + 48]
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x4c6f0f66; WORD $0x2024                   // movdqa    xmm1, oword [rsp + 32]
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; BYTE $0x11                     // movdqu    oword [r9], xmm2
	LONG $0x11fc8349                                 // cmp    r12, 17
	JB   LBB3_49
	WORD $0x894c; BYTE $0xf7                         // mov    rdi, r14
	LONG $0x0010b841; WORD $0x0000                   // mov    r8d, 16

LBB3_48:
	LONG $0x6f0f42f3; WORD $0x0054; BYTE $0xf8       // movdqu    xmm2, oword [rax + r8 - 8]
	LONG $0x6f0f42f3; WORD $0x004c; BYTE $0xfc       // movdqu    xmm1, oword [rax + r8 - 4]
	LONG $0x6f0f46f3; WORD $0x0034                   // movdqu    xmm14, oword [rax + r8]
	LONG $0x6f0f42f3; WORD $0x0044; BYTE $0x04       // movdqu    xmm0, oword [rax + r8 + 4]
	LONG $0x6f0f42f3; WORD $0x0064; BYTE $0x08       // movdqu    xmm4, oword [rax + r8 + 8]
	LONG $0x6f0f43f3; WORD $0x0574; BYTE $0xf8       // movdqu    xmm6, oword [r13 + r8 - 8]
	LONG $0x6f0f43f3; WORD $0x056c; BYTE $0xfc       // movdqu    xmm5, oword [r13 + r8 - 4]
	LONG $0x6f0f43f3; WORD $0x057c; BYTE $0x00       // movdqu    xmm7, oword [r13 + r8]
	LONG $0x6f0f47f3; WORD $0x0564; BYTE $0x04       // movdqu    xmm12, oword [r13 + r8 + 4]
	LONG $0x6f0f47f3; WORD $0x055c; BYTE $0x08       // movdqu    xmm11, oword [r13 + r8 + 8]
	LONG $0x6f0f44f3; WORD $0xf047                   // movdqu    xmm8, oword [rdi - 16]
	LONG $0x6f0f44f3; WORD $0xf47f                   // movdqu    xmm15, oword [rdi - 12]
	LONG $0x6f0f44f3; WORD $0xf86f                   // movdqu    xmm13, oword [rdi - 8]
	LONG $0x6f0f44f3; WORD $0xfc57                   // movdqu    xmm10, oword [rdi - 4]
	LONG $0x5c100f42; WORD $0xf803                   // movups    xmm3, oword [rbx + r8 - 8]
	LONG $0x241c290f                                 // movaps    oword [rsp], xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xc9                     // pmaxub    xmm9, xmm1
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xde0f4166; BYTE $0xd4                     // pmaxub    xmm2, xmm12
	LONG $0x947f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm2
	LONG $0xde0f4466; BYTE $0xd9                     // pmaxub    xmm11, xmm1
	LONG $0x6f0f4166; BYTE $0xcd                     // movdqa    xmm1, xmm13
	LONG $0xda0f4166; BYTE $0xca                     // pminub    xmm1, xmm10
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xda0f4166; BYTE $0xe5                     // pminub    xmm4, xmm13
	LONG $0xde0f4566; BYTE $0xef                     // pmaxub    xmm13, xmm15
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x6f0f42f3; WORD $0x034c; BYTE $0xfc       // movdqu    xmm1, oword [rbx + r8 - 4]
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x0f6f0ff3                                 // movdqu    xmm1, oword [rdi]
	LONG $0x6f0f4466; BYTE $0xd1                     // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xde0f4466; BYTE $0xd3                     // pmaxub    xmm10, xmm3
	LONG $0x6f0f42f3; WORD $0x0354; BYTE $0x04       // movdqu    xmm2, oword [rbx + r8 + 4]
	LONG $0x6f0f42f3; WORD $0x034c; BYTE $0x08       // movdqu    xmm1, oword [rbx + r8 + 8]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x6f0f42f3; WORD $0x030c                   // movdqu    xmm1, oword [rbx + r8]
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4466; BYTE $0xc2                     // pminub    xmm8, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x8c7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm1
	LONG $0xde0f4466; BYTE $0xc3                     // pmaxub    xmm8, xmm3
	LONG $0x6f0f42f3; WORD $0x015c; BYTE $0xfc       // movdqu    xmm3, oword [rcx + r8 - 4]
	LONG $0x6f0f42f3; WORD $0x010c                   // movdqu    xmm1, oword [rcx + r8]
	LONG $0xfb6f0f66                                 // movdqa    xmm7, xmm3
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f42f3; WORD $0x014c; BYTE $0xf8       // movdqu    xmm1, oword [rcx + r8 - 8]
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4566; BYTE $0xfd                     // movdqa    xmm15, xmm13
	LONG $0xda0f4466; BYTE $0xff                     // pminub    xmm15, xmm7
	LONG $0xde0f4466; BYTE $0xef                     // pmaxub    xmm13, xmm7
	LONG $0x6f0f42f3; WORD $0x017c; BYTE $0x04       // movdqu    xmm7, oword [rcx + r8 + 4]
	LONG $0x6f0f42f3; WORD $0x0154; BYTE $0x08       // movdqu    xmm2, oword [rcx + r8 + 8]
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0x7f0f4466; LONG $0x00b024b4; WORD $0x0000 // movdqa    oword [rsp + 176], xmm14
	LONG $0xd6de0f66                                 // pmaxub    xmm2, xmm6
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x70       // movdqa    xmm9, oword [rsp + 112]
	LONG $0x6f0f4166; BYTE $0xf1                     // movdqa    xmm6, xmm9
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0x947f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm2
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0xb47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm6
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x40       // movdqa    xmm9, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm0
	LONG $0x6f0f4166; BYTE $0xd4                     // movdqa    xmm2, xmm12
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0xac6f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0x7f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    oword [rsp + 144], xmm10
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x546f0f66; WORD $0x6024                   // movdqa    xmm2, oword [rsp + 96]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x6f0f4466; LONG $0x008024a4; WORD $0x0000 // movdqa    xmm12, oword [rsp + 128]
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xde0f4466; BYTE $0xdc                     // pmaxub    xmm11, xmm4
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x846f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xf8                     // movdqa    xmm15, xmm0
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4466; BYTE $0xfc                     // pmaxub    xmm15, xmm4
	LONG $0x6f0f4566; BYTE $0xe5                     // movdqa    xmm12, xmm13
	LONG $0xda0f4466; BYTE $0xe7                     // pminub    xmm12, xmm7
	LONG $0xde0f4166; BYTE $0xfd                     // pmaxub    xmm7, xmm13
	LONG $0x6f0f4166; BYTE $0xe0                     // movdqa    xmm4, xmm8
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xec                     // movdqa    xmm13, xmm4
	LONG $0xda0f4566; BYTE $0xec                     // pminub    xmm13, xmm12
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x746f0f66; WORD $0x5024                   // movdqa    xmm6, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3                     // pminub    xmm8, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x6f0f4566; BYTE $0xe2                     // movdqa    xmm12, xmm10
	LONG $0xda0f4566; BYTE $0xe5                     // pminub    xmm12, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4466; LONG $0x00c02494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x847f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm0
	LONG $0xde0f4166; BYTE $0xf4                     // pmaxub    xmm6, xmm12
	LONG $0x747f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm6
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x846f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4566; BYTE $0xe0                     // pminub    xmm12, xmm8
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4566; BYTE $0xf9                     // pmaxub    xmm15, xmm9
	LONG $0x846f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xc8                     // movdqa    xmm9, xmm0
	LONG $0xda0f4566; BYTE $0xcf                     // pminub    xmm9, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0x946f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdb                     // pmaxub    xmm3, xmm11
	LONG $0x5cda0f66; WORD $0x7024                   // pminub    xmm3, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xdb                     // movdqa    xmm11, xmm3
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf1da0f66                                 // pminub    xmm6, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0x6f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 144]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xfa                     // pmaxub    xmm7, xmm10
	LONG $0x7cda0f66; WORD $0x1024                   // pminub    xmm7, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xd7                     // movdqa    xmm10, xmm7
	LONG $0xda0f4466; BYTE $0xd6                     // pminub    xmm10, xmm6
	LONG $0xfede0f66                                 // pmaxub    xmm7, xmm6
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0x74da0f66; WORD $0x4024                   // pminub    xmm6, oword [rsp + 64]
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0x4c6f0f66; WORD $0x6024                   // movdqa    xmm1, oword [rsp + 96]
	LONG $0x4cde0f66; WORD $0x5024                   // pmaxub    xmm1, oword [rsp + 80]
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4566; BYTE $0xdc                     // pmaxub    xmm11, xmm12
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0xde0f4566; BYTE $0xd6                     // pmaxub    xmm10, xmm14
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xda                     // pmaxub    xmm3, xmm10
	LONG $0xda0f4166; BYTE $0xdb                     // pminub    xmm3, xmm11
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd5                     // pminub    xmm2, xmm13
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4166; BYTE $0xd7                     // pmaxub    xmm2, xmm15
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x7f0f43f3; WORD $0x0114                   // movdqu    oword [r9 + r8], xmm2
	LONG $0x10c08349                                 // add    r8, 16
	LONG $0x10c78348                                 // add    rdi, 16
	WORD $0x394d; BYTE $0xe0                         // cmp    r8, r12
	JB   LBB3_48

LBB3_49:
	LONG $0x6f0f44f3; WORD $0x1064; BYTE $0xf0       // movdqu    xmm12, oword [rax + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0x6f0f4166; BYTE $0xfc                     // movdqa    xmm7, xmm12
	LONG $0x6d6f0f66; BYTE $0x00                     // movdqa    xmm5, oword 0[rbp] /* [rip + .LCPI3_0] */
	LONG $0xfddb0f66                                 // pand    xmm7, xmm5
	LONG $0xf8eb0f66                                 // por    xmm7, xmm0
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xdb0f4466; BYTE $0xcd                     // pand    xmm9, xmm5
	LONG $0xeb0f4466; BYTE $0xc8                     // por    xmm9, xmm0
	LONG $0x6f0f41f3; WORD $0x1554; BYTE $0xec       // movdqu    xmm2, oword [r13 + rdx - 20]
	LONG $0x6f0f41f3; WORD $0x1544; BYTE $0xf0       // movdqu    xmm0, oword [r13 + rdx - 16]
	LONG $0x6f0f4466; BYTE $0xd8                     // movdqa    xmm11, xmm0
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm1
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0xdb0f4466; BYTE $0xdd                     // pand    xmm11, xmm5
	LONG $0xeb0f4466; BYTE $0xd8                     // por    xmm11, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0x6f0f4566; BYTE $0xeb                     // movdqa    xmm13, xmm11
	LONG $0xdb0f4466; BYTE $0xed                     // pand    xmm13, xmm5
	LONG $0xeb0f4466; BYTE $0xe8                     // por    xmm13, xmm0
	LONG $0x6f0f45f3; WORD $0x127c; BYTE $0xf0       // movdqu    xmm15, oword [r10 + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0x6f0f4566; BYTE $0xf7                     // movdqa    xmm14, xmm15
	LONG $0xdb0f4466; BYTE $0xf5                     // pand    xmm14, xmm5
	LONG $0xeb0f4466; BYTE $0xf0                     // por    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0x6f0f4566; BYTE $0xc6                     // movdqa    xmm8, xmm14
	LONG $0xdb0f4466; BYTE $0xc5                     // pand    xmm8, xmm5
	LONG $0xeb0f4466; BYTE $0xc0                     // por    xmm8, xmm0
	LONG $0x746f0ff3; WORD $0xf013                   // movdqu    xmm6, oword [rbx + rdx - 16]
	LONG $0x747f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm6
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0xf5db0f66                                 // pand    xmm6, xmm5
	LONG $0xf0eb0f66                                 // por    xmm6, xmm0
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xd5db0f66                                 // pand    xmm2, xmm5
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0x947f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm2
	LONG $0x546f0ff3; WORD $0xec11                   // movdqu    xmm2, oword [rcx + rdx - 20]
	LONG $0x446f0ff3; WORD $0xf011                   // movdqu    xmm0, oword [rcx + rdx - 16]
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd0                     // pminub    xmm10, xmm0
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0xe5db0f66                                 // pand    xmm4, xmm5
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0xdc6f0f66                                 // movdqa    xmm3, xmm4
	LONG $0xdddb0f66                                 // pand    xmm3, xmm5
	LONG $0xd8eb0f66                                 // por    xmm3, xmm0
	LONG $0x446f0ff3; WORD $0xe810                   // movdqu    xmm0, oword [rax + rdx - 24]
	LONG $0x4c6f0ff3; WORD $0xec10                   // movdqu    xmm1, oword [rax + rdx - 20]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xac7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm5
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0xef6f0f66                                 // movdqa    xmm5, xmm7
	LONG $0xda0f4166; BYTE $0xe9                     // pminub    xmm5, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4566; BYTE $0xcc                     // pmaxub    xmm9, xmm12
	LONG $0x7f0f4466; WORD $0x244c; BYTE $0x50       // movdqa    oword [rsp + 80], xmm9
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4466; BYTE $0xe5                     // pminub    xmm12, xmm5
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x6f0f45f3; WORD $0x154c; BYTE $0xe8       // movdqu    xmm9, oword [r13 + rdx - 24]
	LONG $0x6f0f4166; BYTE $0xe9                     // movdqa    xmm5, xmm9
	LONG $0x0c6f0f66; BYTE $0x24                     // movdqa    xmm1, oword [rsp]
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0xfd6f0f66                                 // movdqa    xmm7, xmm5
	LONG $0x4c6f0f66; WORD $0x1024                   // movdqa    xmm1, oword [rsp + 16]
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0x7c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm7
	LONG $0xe9de0f66                                 // pmaxub    xmm5, xmm1
	LONG $0x6c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm5
	LONG $0x6f0f41f3; WORD $0x126c; BYTE $0xe8       // movdqu    xmm5, oword [r10 + rdx - 24]
	LONG $0x6f0f4166; BYTE $0xfd                     // movdqa    xmm7, xmm13
	LONG $0xfdda0f66                                 // pminub    xmm7, xmm5
	LONG $0xde0f4466; BYTE $0xed                     // pmaxub    xmm13, xmm5
	LONG $0x6f0f4566; BYTE $0xcb                     // movdqa    xmm9, xmm11
	LONG $0xda0f4566; BYTE $0xcd                     // pminub    xmm9, xmm13
	LONG $0xde0f4566; BYTE $0xeb                     // pmaxub    xmm13, xmm11
	LONG $0x7f0f4466; LONG $0x00d024ac; WORD $0x0000 // movdqa    oword [rsp + 208], xmm13
	LONG $0x6f0f4166; BYTE $0xc9                     // movdqa    xmm1, xmm9
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0x8c7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm1
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0x6f0f4166; BYTE $0xff                     // movdqa    xmm7, xmm15
	LONG $0xda0f4166; BYTE $0xfe                     // pminub    xmm7, xmm14
	LONG $0xde0f4566; BYTE $0xf7                     // pmaxub    xmm14, xmm15
	LONG $0x6f0f45f3; WORD $0x125c; BYTE $0xec       // movdqu    xmm11, oword [r10 + rdx - 20]
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xda0f4166; BYTE $0xce                     // pminub    xmm1, xmm14
	LONG $0xde0f4566; BYTE $0xf3                     // pmaxub    xmm14, xmm11
	LONG $0x6f0f4466; BYTE $0xd9                     // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xdf                     // pminub    xmm11, xmm7
	LONG $0xcfde0f66                                 // pmaxub    xmm1, xmm7
	LONG $0x6f0f44f3; WORD $0x136c; BYTE $0xe8       // movdqu    xmm13, oword [rbx + rdx - 24]
	LONG $0x6f0f44f3; WORD $0x137c; BYTE $0xec       // movdqu    xmm15, oword [rbx + rdx - 20]
	LONG $0x6f0f4166; BYTE $0xfd                     // movdqa    xmm7, xmm13
	LONG $0xda0f4166; BYTE $0xff                     // pminub    xmm7, xmm15
	LONG $0xde0f4566; BYTE $0xef                     // pmaxub    xmm13, xmm15
	LONG $0x6f0f4566; BYTE $0xf8                     // movdqa    xmm15, xmm8
	LONG $0xda0f4566; BYTE $0xfd                     // pminub    xmm15, xmm13
	LONG $0xde0f4566; BYTE $0xe8                     // pmaxub    xmm13, xmm8
	LONG $0x6f0f4166; BYTE $0xef                     // movdqa    xmm5, xmm15
	LONG $0xefda0f66                                 // pminub    xmm5, xmm7
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0xde0f4466; BYTE $0xff                     // pmaxub    xmm15, xmm7
	LONG $0xfe6f0f66                                 // movdqa    xmm7, xmm6
	LONG $0x6f0f4466; LONG $0x00b02484; WORD $0x0000 // movdqa    xmm8, oword [rsp + 176]
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0xde0f4466; BYTE $0xc6                     // pmaxub    xmm8, xmm6
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0x6c6f0f66; WORD $0x7024                   // movdqa    xmm5, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xc5                     // movdqa    xmm8, xmm5
	LONG $0xda0f4466; BYTE $0xc6                     // pminub    xmm8, xmm6
	LONG $0xf5de0f66                                 // pmaxub    xmm6, xmm5
	LONG $0xb47f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm6
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0x747f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm6
	LONG $0xde0f4466; BYTE $0xc7                     // pmaxub    xmm8, xmm7
	LONG $0x7c6f0ff3; WORD $0xe811                   // movdqu    xmm7, oword [rcx + rdx - 24]
	LONG $0xf76f0f66                                 // movdqa    xmm6, xmm7
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xd7de0f66                                 // pmaxub    xmm2, xmm7
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xde0f4166; BYTE $0xf2                     // pmaxub    xmm6, xmm10
	LONG $0xfc6f0f66                                 // movdqa    xmm7, xmm4
	LONG $0xfbda0f66                                 // pminub    xmm7, xmm3
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0x6f0f4566; BYTE $0xd4                     // movdqa    xmm10, xmm12
	LONG $0x646f0f66; WORD $0x3024                   // movdqa    xmm4, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xd4                     // pminub    xmm10, xmm4
	LONG $0x7f0f4466; WORD $0x2454; BYTE $0x70       // movdqa    oword [rsp + 112], xmm10
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x647f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm4
	LONG $0x6f0f4466; BYTE $0xd0                     // movdqa    xmm10, xmm0
	LONG $0x646f0f66; WORD $0x1024                   // movdqa    xmm4, oword [rsp + 16]
	LONG $0xda0f4466; BYTE $0xd4                     // pminub    xmm10, xmm4
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0x6f0f4466; LONG $0x00a024a4; WORD $0x0000 // movdqa    xmm12, oword [rsp + 160]
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x647f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xda0f4166; BYTE $0xe2                     // pminub    xmm4, xmm10
	LONG $0xa47f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm4
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0x847f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm0
	LONG $0x446f0f66; WORD $0x5024                   // movdqa    xmm0, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xd0                     // movdqa    xmm10, xmm0
	LONG $0x246f0f66; BYTE $0x24                     // movdqa    xmm4, oword [rsp]
	LONG $0xda0f4466; BYTE $0xd4                     // pminub    xmm10, xmm4
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0x6f0f4466; WORD $0x2464; BYTE $0x20       // movdqa    xmm12, oword [rsp + 32]
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x247f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xda0f4166; BYTE $0xe2                     // pminub    xmm4, xmm10
	LONG $0x647f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm4
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0x847f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm0
	LONG $0x6f0f4566; BYTE $0xd3                     // movdqa    xmm10, xmm11
	LONG $0x646f0f66; WORD $0x4024                   // movdqa    xmm4, oword [rsp + 64]
	LONG $0xda0f4466; BYTE $0xd4                     // pminub    xmm10, xmm4
	LONG $0xde0f4166; BYTE $0xe3                     // pmaxub    xmm4, xmm11
	LONG $0x6f0f4466; LONG $0x00c0249c; WORD $0x0000 // movdqa    xmm11, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4166; BYTE $0xe3                     // pmaxub    xmm4, xmm11
	LONG $0x647f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xda0f4166; BYTE $0xe2                     // pminub    xmm4, xmm10
	LONG $0xa47f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm4
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xda0f4166; BYTE $0xe7                     // pminub    xmm4, xmm15
	LONG $0xde0f4466; BYTE $0xf9                     // pmaxub    xmm15, xmm1
	LONG $0x6f0f4566; BYTE $0xd1                     // movdqa    xmm10, xmm9
	LONG $0xda0f4566; BYTE $0xd7                     // pminub    xmm10, xmm15
	LONG $0xde0f4566; BYTE $0xf9                     // pmaxub    xmm15, xmm9
	LONG $0x6f0f4566; BYTE $0xda                     // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xdc                     // pminub    xmm11, xmm4
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4166; BYTE $0xce                     // movdqa    xmm1, xmm14
	LONG $0xda0f4166; BYTE $0xcd                     // pminub    xmm1, xmm13
	LONG $0xde0f4566; BYTE $0xee                     // pmaxub    xmm13, xmm14
	LONG $0xa46f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xf4                     // movdqa    xmm14, xmm4
	LONG $0xda0f4566; BYTE $0xf5                     // pminub    xmm14, xmm13
	LONG $0xde0f4466; BYTE $0xec                     // pmaxub    xmm13, xmm4
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xc9                     // pminub    xmm9, xmm1
	LONG $0xde0f4466; BYTE $0xf1                     // pmaxub    xmm14, xmm1
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xfdde0f66                                 // pmaxub    xmm7, xmm5
	LONG $0x646f0f66; WORD $0x6024                   // movdqa    xmm4, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4466; BYTE $0xe7                     // pminub    xmm12, xmm7
	LONG $0xfcde0f66                                 // pmaxub    xmm7, xmm4
	LONG $0x6f0f4166; BYTE $0xe4                     // movdqa    xmm4, xmm12
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0x647f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm4
	LONG $0xde0f4466; BYTE $0xe1                     // pmaxub    xmm12, xmm1
	LONG $0xce6f0f66                                 // movdqa    xmm1, xmm6
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0xf3da0f66                                 // pminub    xmm6, xmm3
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xf1de0f66                                 // pmaxub    xmm6, xmm1
	LONG $0xa46f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 176]
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0x6f0f4566; BYTE $0xc3                     // movdqa    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0x6f0f4466; LONG $0x0090249c; WORD $0x0000 // movdqa    xmm11, oword [rsp + 144]
	LONG $0x6f0f4166; BYTE $0xe3                     // movdqa    xmm4, xmm11
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0xac7f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm5
	LONG $0x6c6f0f66; WORD $0x2024                   // movdqa    xmm5, oword [rsp + 32]
	LONG $0xacde0f66; LONG $0x0000c024; BYTE $0x00   // pmaxub    xmm5, oword [rsp + 192]
	LONG $0x6c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm5
	LONG $0xde0f4166; BYTE $0xe0                     // pmaxub    xmm4, xmm8
	LONG $0xa47f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm4
	LONG $0x6f0f4166; BYTE $0xe1                     // movdqa    xmm4, xmm9
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x6c6f0f66; WORD $0x5024                   // movdqa    xmm5, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xdd                     // movdqa    xmm11, xmm5
	LONG $0xda0f4466; BYTE $0xd9                     // pminub    xmm11, xmm1
	LONG $0xcdde0f66                                 // pmaxub    xmm1, xmm5
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xecda0f66                                 // pminub    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm5
	LONG $0xde0f4466; BYTE $0xdc                     // pmaxub    xmm11, xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xda0f4166; BYTE $0xe4                     // pminub    xmm4, xmm12
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x446f0f66; WORD $0x7024                   // movdqa    xmm0, oword [rsp + 112]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xec                     // pminub    xmm5, xmm12
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x7f0f4466; WORD $0x2464; BYTE $0x70       // movdqa    oword [rsp + 112], xmm12
	LONG $0x6f0f4166; BYTE $0xc2                     // movdqa    xmm0, xmm10
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xf2                     // pmaxub    xmm6, xmm10
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm5
	LONG $0xa46f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 128]
	LONG $0xec6f0f66                                 // movdqa    xmm5, xmm4
	LONG $0xeeda0f66                                 // pminub    xmm5, xmm6
	LONG $0xf4de0f66                                 // pmaxub    xmm6, xmm4
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xde0f4166; BYTE $0xd6                     // pmaxub    xmm2, xmm14
	LONG $0x94da0f66; LONG $0x0000a024; BYTE $0x00   // pminub    xmm2, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd0                     // pminub    xmm10, xmm0
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x646f0f66; WORD $0x4024                   // movdqa    xmm4, oword [rsp + 64]
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xfcde0f66                                 // pmaxub    xmm7, xmm4
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x30       // movdqa    xmm8, oword [rsp + 48]
	LONG $0x6f0f4166; BYTE $0xe0                     // movdqa    xmm4, xmm8
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4466; BYTE $0xe0                     // pminub    xmm12, xmm0
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdf                     // pmaxub    xmm3, xmm15
	LONG $0x5cda0f66; WORD $0x1024                   // pminub    xmm3, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xc3                     // movdqa    xmm8, xmm3
	LONG $0xda0f4466; BYTE $0xc0                     // pminub    xmm8, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xda0f4466; WORD $0x242c                   // pminub    xmm13, oword [rsp]
	LONG $0xda0f4466; BYTE $0xe9                     // pminub    xmm13, xmm1
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xd5                     // pminub    xmm2, xmm13
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0x446f0f66; WORD $0x5024                   // movdqa    xmm0, oword [rsp + 80]
	LONG $0x84de0f66; LONG $0x00009024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 144]
	LONG $0xde0f4466; WORD $0x244c; BYTE $0x60       // pmaxub    xmm9, oword [rsp + 96]
	LONG $0xde0f4466; WORD $0x2464; BYTE $0x20       // pmaxub    xmm12, oword [rsp + 32]
	LONG $0xde0f4566; BYTE $0xe1                     // pmaxub    xmm12, xmm9
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x6f0f4166; BYTE $0xc2                     // movdqa    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xc3                     // pminub    xmm0, xmm11
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xde0f4466; BYTE $0xc5                     // pmaxub    xmm8, xmm5
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xa46f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 176]
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x546f0f66; WORD $0x7024                   // movdqa    xmm2, oword [rsp + 112]
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x114c; BYTE $0xf0       // movdqu    oword [r9 + rdx - 16], xmm1
	WORD $0xff49; BYTE $0xc7                         // inc    r15
	LONG $0x248c034c; LONG $0x00000160               // add    r9, qword 352[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                         // add    r14, rsi
	LONG $0x24bc3b4c; LONG $0x000000f0               // cmp    r15, qword [rsp + 240]
	JNE  LBB3_46
	JMP  LBB3_62

LBB3_50:
	LONG $0x24bc8348; LONG $0x000000f0; BYTE $0x00 // cmp    qword [rsp + 240], 0
	JE   LBB3_62
	LONG $0xff6a8d4c                               // lea    r13, [rdx - 1]
	LONG $0xf0e58349                               // and    r13, -16
	LONG $0x24848b48; LONG $0x000000f0             // mov    rax, qword [rsp + 240]
	LONG $0xfe488d48                               // lea    rcx, [rax - 2]
	LONG $0x248c8948; LONG $0x00000110             // mov    qword [rsp + 272], rcx
	WORD $0xff48; BYTE $0xc8                       // dec    rax
	LONG $0x24848948; LONG $0x00000120             // mov    qword [rsp + 288], rax
	LONG $0x24848b48; LONG $0x000000f8             // mov    rax, qword [rsp + 248]
	LONG $0x12708d4c                               // lea    r14, [rax + 18]
	WORD $0x3145; BYTE $0xe4                       // xor    r12d, r12d
	LONG $0xef0f4566; BYTE $0xf6                   // pxor    xmm14, xmm14

LBB3_52:
	LONG $0x24448d49; BYTE $0xfe                     // lea    rax, [r12 - 2]
	LONG $0xc6af0f48                                 // imul    rax, rsi
	LONG $0x24840348; LONG $0x000000f8               // add    rax, qword [rsp + 248]
	LONG $0x300c8d48                                 // lea    rcx, [rax + rsi]
	LONG $0x313c8d4c                                 // lea    r15, [rcx + rsi]
	LONG $0x373c8d49                                 // lea    rdi, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	WORD $0x8948; BYTE $0xcb                         // mov    rbx, rcx
	LONG $0x1c6f0ff3; BYTE $0x0e                     // movdqu    xmm3, oword [rsi + rcx]
	LONG $0x6c6f0ff3; WORD $0x010e                   // movdqu    xmm5, oword [rsi + rcx + 1]
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	WORD $0x8949; BYTE $0xc8                         // mov    r8, rcx
	LONG $0xc7440f4d                                 // cmove    r8, r15
	LONG $0x02fc8349                                 // cmp    r12, 2
	LONG $0xd8420f49                                 // cmovb    rbx, r8
	LONG $0xc0430f4c                                 // cmovae    r8, rax
	LONG $0x24a43b4c; LONG $0x00000120               // cmp    r12, qword [rsp + 288]
	WORD $0x894c; BYTE $0xf8                         // mov    rax, r15
	LONG $0xc7420f48                                 // cmovb    rax, rdi
	LONG $0x24a43b4c; LONG $0x00000110               // cmp    r12, qword [rsp + 272]
	WORD $0x8949; BYTE $0xc2                         // mov    r10, rax
	LONG $0xd7420f4c                                 // cmovb    r10, rdi
	LONG $0x6f0f41f3; BYTE $0x08                     // movdqu    xmm1, oword [r8]
	LONG $0x6f0f41f3; WORD $0x0150                   // movdqu    xmm2, oword [r8 + 1]
	LONG $0x6f0f41f3; WORD $0x0260                   // movdqu    xmm4, oword [r8 + 2]
	LONG $0x647f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm4
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0x247f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm4
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm2
	LONG $0x600f4166; BYTE $0xce                     // punpcklbw    xmm1, xmm14
	LONG $0xd1700f66; BYTE $0x27                     // pshufd    xmm2, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0e                     // psrldq    xmm1, 14
	LONG $0x680f4166; BYTE $0xc6                     // punpckhbw    xmm0, xmm14
	LONG $0xf8730f66; BYTE $0x02                     // pslldq    xmm0, 2
	LONG $0xc1eb0f66                                 // por    xmm0, xmm1
	LONG $0xca700ff2; BYTE $0xec                     // pshuflw    xmm1, xmm2, 236
	LONG $0xc9700f66; BYTE $0x27                     // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x90                     // pshuflw    xmm1, xmm1, 144
	LONG $0x700f44f3; WORD $0x93c1                   // pshufhw    xmm8, xmm1, 147
	LONG $0x670f4466; BYTE $0xc0                     // packuswb    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xc8700f66; BYTE $0x27                     // pshufd    xmm1, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e                     // psrldq    xmm0, 14
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0x680f4166; BYTE $0xd6                     // punpckhbw    xmm2, xmm14
	LONG $0xfa730f66; BYTE $0x02                     // pslldq    xmm2, 2
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc1700ff2; BYTE $0xec                     // pshuflw    xmm0, xmm1, 236
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90                     // pshuflw    xmm0, xmm0, 144
	LONG $0x700f44f3; WORD $0x93e8                   // pshufhw    xmm13, xmm0, 147
	LONG $0x670f4466; BYTE $0xea                     // packuswb    xmm13, xmm2
	LONG $0x6f0f44f3; BYTE $0x3b                     // movdqu    xmm15, oword [rbx]
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xd0700f66; BYTE $0x27                     // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e                     // psrldq    xmm0, 14
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0x680f4166; BYTE $0xe6                     // punpckhbw    xmm4, xmm14
	LONG $0xfc730f66; BYTE $0x02                     // pslldq    xmm4, 2
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc2700ff2; BYTE $0xec                     // pshuflw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90                     // pshuflw    xmm0, xmm0, 144
	LONG $0x700f44f3; WORD $0x93c8                   // pshufhw    xmm9, xmm0, 147
	LONG $0x670f4466; BYTE $0xcc                     // packuswb    xmm9, xmm4
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xd0700f66; BYTE $0x27                     // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e                     // psrldq    xmm0, 14
	LONG $0x6f0f4166; BYTE $0xe1                     // movdqa    xmm4, xmm9
	LONG $0x680f4166; BYTE $0xe6                     // punpckhbw    xmm4, xmm14
	LONG $0xfc730f66; BYTE $0x02                     // pslldq    xmm4, 2
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc2700ff2; BYTE $0xec                     // pshuflw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90                     // pshuflw    xmm0, xmm0, 144
	LONG $0x700f44f3; WORD $0x93d8                   // pshufhw    xmm11, xmm0, 147
	LONG $0x670f4466; BYTE $0xdc                     // packuswb    xmm11, xmm4
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xd0700f66; BYTE $0x27                     // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e                     // psrldq    xmm0, 14
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0x680f4166; BYTE $0xe6                     // punpckhbw    xmm4, xmm14
	LONG $0xfc730f66; BYTE $0x02                     // pslldq    xmm4, 2
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc2700ff2; BYTE $0xec                     // pshuflw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90                     // pshuflw    xmm0, xmm0, 144
	LONG $0xc0700ff3; BYTE $0x93                     // pshufhw    xmm0, xmm0, 147
	LONG $0xc4670f66                                 // packuswb    xmm0, xmm4
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0x6f0f4466; BYTE $0xd3                     // movdqa    xmm10, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x9c7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm3
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xe0700f66; BYTE $0x27                     // pshufd    xmm4, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e                     // psrldq    xmm0, 14
	LONG $0x680f4166; BYTE $0xd6                     // punpckhbw    xmm2, xmm14
	LONG $0xfa730f66; BYTE $0x02                     // pslldq    xmm2, 2
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc4700ff2; BYTE $0xec                     // pshuflw    xmm0, xmm4, 236
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90                     // pshuflw    xmm0, xmm0, 144
	LONG $0xf0700ff3; BYTE $0x93                     // pshufhw    xmm6, xmm0, 147
	LONG $0xf2670f66                                 // packuswb    xmm6, xmm2
	LONG $0x6f0f41f3; WORD $0x014a                   // movdqu    xmm1, oword [r10 + 1]
	LONG $0x6f0f41f3; WORD $0x0242                   // movdqu    xmm0, oword [r10 + 2]
	LONG $0x847f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm0
	LONG $0xf96f0f66                                 // movdqa    xmm7, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f41f3; BYTE $0x02                     // movdqu    xmm0, oword [r10]
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x8c7f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm1
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xe0700f66; BYTE $0x27                     // pshufd    xmm4, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e                     // psrldq    xmm0, 14
	LONG $0x680f4166; BYTE $0xd6                     // punpckhbw    xmm2, xmm14
	LONG $0xfa730f66; BYTE $0x02                     // pslldq    xmm2, 2
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc4700ff2; BYTE $0xec                     // pshuflw    xmm0, xmm4, 236
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90                     // pshuflw    xmm0, xmm0, 144
	LONG $0xd8700ff3; BYTE $0x93                     // pshufhw    xmm3, xmm0, 147
	LONG $0xda670f66                                 // packuswb    xmm3, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0x600f4166; BYTE $0xd6                     // punpcklbw    xmm2, xmm14
	LONG $0xe2700f66; BYTE $0x27                     // pshufd    xmm4, xmm2, 39
	LONG $0xda730f66; BYTE $0x0e                     // psrldq    xmm2, 14
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0x680f4166; BYTE $0xee                     // punpckhbw    xmm5, xmm14
	LONG $0xfd730f66; BYTE $0x02                     // pslldq    xmm5, 2
	LONG $0xeaeb0f66                                 // por    xmm5, xmm2
	LONG $0xd4700ff2; BYTE $0xec                     // pshuflw    xmm2, xmm4, 236
	LONG $0xd2700f66; BYTE $0x27                     // pshufd    xmm2, xmm2, 39
	LONG $0xd2700ff2; BYTE $0x90                     // pshuflw    xmm2, xmm2, 144
	LONG $0x700f44f3; WORD $0x93e2                   // pshufhw    xmm12, xmm2, 147
	LONG $0x670f4466; BYTE $0xe5                     // packuswb    xmm12, xmm5
	LONG $0x373c8d48                                 // lea    rdi, [rdi + rsi]
	LONG $0xc7420f48                                 // cmovb    rax, rdi
	LONG $0x206f0ff3                                 // movdqu    xmm4, oword [rax]
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0x600f4166; BYTE $0xd6                     // punpcklbw    xmm2, xmm14
	LONG $0xea700f66; BYTE $0x27                     // pshufd    xmm5, xmm2, 39
	LONG $0xda730f66; BYTE $0x0e                     // psrldq    xmm2, 14
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0x680f4166; BYTE $0xce                     // punpckhbw    xmm1, xmm14
	LONG $0xf9730f66; BYTE $0x02                     // pslldq    xmm1, 2
	LONG $0xcaeb0f66                                 // por    xmm1, xmm2
	LONG $0xd5700ff2; BYTE $0xec                     // pshuflw    xmm2, xmm5, 236
	LONG $0xd2700f66; BYTE $0x27                     // pshufd    xmm2, xmm2, 39
	LONG $0xd2700ff2; BYTE $0x90                     // pshuflw    xmm2, xmm2, 144
	LONG $0xc2700ff3; BYTE $0x93                     // pshufhw    xmm0, xmm2, 147
	LONG $0xc1670f66                                 // packuswb    xmm0, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0x600f4166; BYTE $0xce                     // punpcklbw    xmm1, xmm14
	LONG $0xd1700f66; BYTE $0x27                     // pshufd    xmm2, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0e                     // psrldq    xmm1, 14
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0x680f4166; BYTE $0xee                     // punpckhbw    xmm5, xmm14
	LONG $0xfd730f66; BYTE $0x02                     // pslldq    xmm5, 2
	LONG $0xe9eb0f66                                 // por    xmm5, xmm1
	LONG $0xca700ff2; BYTE $0xec                     // pshuflw    xmm1, xmm2, 236
	LONG $0xc9700f66; BYTE $0x27                     // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x90                     // pshuflw    xmm1, xmm1, 144
	LONG $0xd1700ff3; BYTE $0x93                     // pshufhw    xmm2, xmm1, 147
	LONG $0xd5670f66                                 // packuswb    xmm2, xmm5
	LONG $0x6f0f4166; BYTE $0xcd                     // movdqa    xmm1, xmm13
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0x4c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm1
	LONG $0xde0f4566; BYTE $0xe8                     // pmaxub    xmm13, xmm8
	LONG $0x7f0f4466; LONG $0x00d024ac; WORD $0x0000 // movdqa    oword [rsp + 208], xmm13
	LONG $0x6c6f0f66; WORD $0x1024                   // movdqa    xmm5, oword [rsp + 16]
	LONG $0x6cda0f66; WORD $0x3024                   // pminub    xmm5, oword [rsp + 48]
	LONG $0x0c6f0f66; BYTE $0x24                     // movdqa    xmm1, oword [rsp]
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xed                     // pminub    xmm13, xmm5
	LONG $0xcdde0f66                                 // pmaxub    xmm1, xmm5
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0x6f0f4166; BYTE $0xc9                     // movdqa    xmm1, xmm9
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4566; BYTE $0xcf                     // pmaxub    xmm9, xmm15
	LONG $0x6f0f4566; BYTE $0xfb                     // movdqa    xmm15, xmm11
	LONG $0xda0f4566; BYTE $0xf9                     // pminub    xmm15, xmm9
	LONG $0xde0f4566; BYTE $0xcb                     // pmaxub    xmm9, xmm11
	LONG $0x6f0f4166; BYTE $0xef                     // movdqa    xmm5, xmm15
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0x6c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm5
	LONG $0xde0f4466; BYTE $0xf9                     // pmaxub    xmm15, xmm1
	LONG $0x4b6f0ff3; BYTE $0x02                     // movdqu    xmm1, oword [rbx + 2]
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4466; BYTE $0xc6                     // pminub    xmm8, xmm6
	LONG $0xf1de0f66                                 // pmaxub    xmm6, xmm1
	LONG $0x6b6f0ff3; BYTE $0x01                     // movdqu    xmm5, oword [rbx + 1]
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xceda0f66                                 // pminub    xmm1, xmm6
	LONG $0xf5de0f66                                 // pmaxub    xmm6, xmm5
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xda0f4166; BYTE $0xe8                     // pminub    xmm5, xmm8
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0xde0f4166; BYTE $0xc8                     // pmaxub    xmm1, xmm8
	LONG $0xda0f4466; WORD $0x2454; BYTE $0x70       // pminub    xmm10, oword [rsp + 112]
	LONG $0x6c6f0f66; WORD $0x2024                   // movdqa    xmm5, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xc5                     // movdqa    xmm8, xmm5
	LONG $0xda0f4566; BYTE $0xc2                     // pminub    xmm8, xmm10
	LONG $0xde0f4166; BYTE $0xea                     // pmaxub    xmm5, xmm10
	LONG $0x6c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm5
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xdb                     // pminub    xmm11, xmm3
	LONG $0xde0f4466; BYTE $0xe3                     // pmaxub    xmm12, xmm3
	LONG $0x5c6f0ff3; WORD $0x020e                   // movdqu    xmm3, oword [rsi + rcx + 2]
	LONG $0x6f0f4466; BYTE $0xf3                     // movdqa    xmm14, xmm3
	LONG $0xda0f4566; BYTE $0xf4                     // pminub    xmm14, xmm12
	LONG $0xde0f4466; BYTE $0xe3                     // pmaxub    xmm12, xmm3
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0xda0f4166; BYTE $0xdb                     // pminub    xmm3, xmm11
	LONG $0x5c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm3
	LONG $0xde0f4566; BYTE $0xf3                     // pmaxub    xmm14, xmm11
	LONG $0xbcda0f66; LONG $0x00009024; BYTE $0x00   // pminub    xmm7, oword [rsp + 144]
	LONG $0x5c6f0f66; WORD $0x4024                   // movdqa    xmm3, oword [rsp + 64]
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xefda0f66                                 // pminub    xmm5, xmm7
	LONG $0xac7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm5
	LONG $0xdfde0f66                                 // pmaxub    xmm3, xmm7
	LONG $0x5c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm3
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xfcda0f66                                 // pminub    xmm7, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x6f0f4466; BYTE $0xdb                     // movdqa    xmm11, xmm3
	LONG $0xda0f4466; BYTE $0xdf                     // pminub    xmm11, xmm7
	LONG $0xdfde0f66                                 // pmaxub    xmm3, xmm7
	LONG $0x606f0ff3; BYTE $0x01                     // movdqu    xmm4, oword [rax + 1]
	LONG $0x506f0ff3; BYTE $0x02                     // movdqu    xmm2, oword [rax + 2]
	LONG $0xfc6f0f66                                 // movdqa    xmm7, xmm4
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0x6c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm5
	LONG $0xde0f4166; BYTE $0xd5                     // pmaxub    xmm2, xmm13
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4566; BYTE $0xd7                     // pminub    xmm10, xmm15
	LONG $0xde0f4466; BYTE $0xfa                     // pmaxub    xmm15, xmm2
	LONG $0x6c6f0f66; WORD $0x5024                   // movdqa    xmm5, oword [rsp + 80]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4466; BYTE $0xfd                     // pmaxub    xmm15, xmm5
	LONG $0x7f0f4466; WORD $0x247c; BYTE $0x70       // movdqa    oword [rsp + 112], xmm15
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0x2c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm5
	LONG $0xde0f4166; BYTE $0xd2                     // pmaxub    xmm2, xmm10
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0xac6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xda0f4566; BYTE $0xd1                     // pminub    xmm10, xmm9
	LONG $0xde0f4466; BYTE $0xcd                     // pmaxub    xmm9, xmm5
	LONG $0xac6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 208]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0xde0f4466; BYTE $0xcd                     // pmaxub    xmm9, xmm5
	LONG $0x7f0f4466; LONG $0x00b0248c; WORD $0x0000 // movdqa    oword [rsp + 176], xmm9
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xac7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm5
	LONG $0xde0f4166; BYTE $0xd2                     // pmaxub    xmm2, xmm10
	LONG $0x947f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm2
	LONG $0x6f0f4566; BYTE $0xc8                     // movdqa    xmm9, xmm8
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xca                     // pminub    xmm9, xmm2
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0xac6f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xc5                     // movdqa    xmm8, xmm5
	LONG $0xda0f4466; BYTE $0xc2                     // pminub    xmm8, xmm2
	LONG $0xd5de0f66                                 // pmaxub    xmm2, xmm5
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0x947f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    oword [rsp + 256], xmm2
	LONG $0xde0f4566; BYTE $0xc1                     // pmaxub    xmm8, xmm9
	LONG $0x546f0f66; WORD $0x2024                   // movdqa    xmm2, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xca                     // movdqa    xmm9, xmm2
	LONG $0xda0f4566; BYTE $0xce                     // pminub    xmm9, xmm14
	LONG $0xde0f4466; BYTE $0xf2                     // pmaxub    xmm14, xmm2
	LONG $0x6f0f4466; BYTE $0xd1                     // movdqa    xmm10, xmm1
	LONG $0xda0f4566; BYTE $0xd6                     // pminub    xmm10, xmm14
	LONG $0xde0f4466; BYTE $0xf1                     // pmaxub    xmm14, xmm1
	LONG $0x6f0f4166; BYTE $0xea                     // movdqa    xmm5, xmm10
	LONG $0xda0f4166; BYTE $0xe9                     // pminub    xmm5, xmm9
	LONG $0xde0f4566; BYTE $0xd1                     // pmaxub    xmm10, xmm9
	LONG $0x6f0f4466; LONG $0x00a0248c; WORD $0x0000 // movdqa    xmm9, oword [rsp + 160]
	LONG $0x6f0f4166; BYTE $0xc9                     // movdqa    xmm1, xmm9
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4566; BYTE $0xe1                     // pmaxub    xmm12, xmm9
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xda0f4166; BYTE $0xd4                     // pminub    xmm2, xmm12
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm2
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xde0f4166; BYTE $0xfb                     // pmaxub    xmm7, xmm11
	LONG $0xb46f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 192]
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xd7da0f66                                 // pminub    xmm2, xmm7
	LONG $0xfede0f66                                 // pmaxub    xmm7, xmm6
	LONG $0x6f0f4466; BYTE $0xea                     // movdqa    xmm13, xmm2
	LONG $0xda0f4466; BYTE $0xe9                     // pminub    xmm13, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x6f0f4466; BYTE $0xcb                     // movdqa    xmm9, xmm3
	LONG $0xda0f4466; BYTE $0xcc                     // pminub    xmm9, xmm4
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0x5c6f0f66; WORD $0x4024                   // movdqa    xmm3, oword [rsp + 64]
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xda0f4166; BYTE $0xd9                     // pminub    xmm3, xmm9
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x6f0f4466; LONG $0x0080249c; WORD $0x0000 // movdqa    xmm11, oword [rsp + 128]
	LONG $0x6f0f4566; BYTE $0xcb                     // movdqa    xmm9, xmm11
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4166; BYTE $0xc3                     // pmaxub    xmm0, xmm11
	LONG $0x6f0f4466; BYTE $0xdd                     // movdqa    xmm11, xmm5
	LONG $0xda0f4466; BYTE $0xdb                     // pminub    xmm11, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xebda0f66                                 // pminub    xmm5, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x1c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm3
	LONG $0xde0f4466; LONG $0x010024ac; WORD $0x0000 // pmaxub    xmm13, oword [rsp + 256]
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x40       // movdqa    oword [rsp + 64], xmm13
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0xac7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm5
	LONG $0x6f0f4566; BYTE $0xdf                     // movdqa    xmm11, xmm15
	LONG $0xda0f4566; BYTE $0xd9                     // pminub    xmm11, xmm9
	LONG $0xde0f4566; BYTE $0xcf                     // pmaxub    xmm9, xmm15
	LONG $0xac6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xfd                     // movdqa    xmm15, xmm5
	LONG $0xda0f4566; BYTE $0xf9                     // pminub    xmm15, xmm9
	LONG $0xde0f4466; BYTE $0xcd                     // pmaxub    xmm9, xmm5
	LONG $0x6f0f4566; BYTE $0xef                     // movdqa    xmm13, xmm15
	LONG $0xda0f4566; BYTE $0xeb                     // pminub    xmm13, xmm11
	LONG $0xde0f4566; BYTE $0xfb                     // pmaxub    xmm15, xmm11
	LONG $0x6f0f4566; BYTE $0xd8                     // movdqa    xmm11, xmm8
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x5c6f0f66; WORD $0x6024                   // movdqa    xmm3, oword [rsp + 96]
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0x547f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm2
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xca                     // pmaxub    xmm1, xmm10
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0xac7f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm5
	LONG $0x5c6f0f66; WORD $0x5024                   // movdqa    xmm3, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xc3                     // movdqa    xmm8, xmm3
	LONG $0xda0f4466; BYTE $0xc1                     // pminub    xmm8, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0x6f0f4566; BYTE $0xd8                     // movdqa    xmm11, xmm8
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x9c6f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm3, oword [rsp + 224]
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0x84da0f66; LONG $0x00009024; BYTE $0x00   // pminub    xmm0, oword [rsp + 144]
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6c6f0f66; WORD $0x1024                   // movdqa    xmm5, oword [rsp + 16]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xd7da0f66                                 // pminub    xmm2, xmm7
	LONG $0xfdde0f66                                 // pmaxub    xmm7, xmm5
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd3                     // pminub    xmm10, xmm3
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0x6f0f4166; BYTE $0xee                     // movdqa    xmm5, xmm14
	LONG $0xecda0f66                                 // pminub    xmm5, xmm4
	LONG $0xde0f4166; BYTE $0xe6                     // pmaxub    xmm4, xmm14
	LONG $0x64da0f66; WORD $0x7024                   // pminub    xmm4, oword [rsp + 112]
	LONG $0xdc6f0f66                                 // movdqa    xmm3, xmm4
	LONG $0xddda0f66                                 // pminub    xmm3, xmm5
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0xda0f4466; LONG $0x00b024a4; WORD $0x0000 // pminub    xmm12, oword [rsp + 176]
	LONG $0xda0f4566; BYTE $0xe1                     // pminub    xmm12, xmm9
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xda0f4166; BYTE $0xc4                     // pminub    xmm0, xmm12
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4466; LONG $0x00a024ac; WORD $0x0000 // pmaxub    xmm13, oword [rsp + 160]
	LONG $0xde0f4466; LONG $0x0080249c; WORD $0x0000 // pmaxub    xmm11, oword [rsp + 128]
	LONG $0xde0f4466; WORD $0x2454; BYTE $0x40       // pmaxub    xmm10, oword [rsp + 64]
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xde0f4566; BYTE $0xd5                     // pmaxub    xmm10, xmm13
	LONG $0xce6f0f66                                 // movdqa    xmm1, xmm6
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4166; BYTE $0xf7                     // pmaxub    xmm6, xmm15
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe0                     // pminub    xmm4, xmm8
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0xd5de0f66                                 // pmaxub    xmm2, xmm5
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xdc6f0f66                                 // movdqa    xmm3, xmm4
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xca                     // pmaxub    xmm1, xmm10
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xccde0f66                                 // pmaxub    xmm1, xmm4
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0x246f0f66; BYTE $0x24                     // movdqa    xmm4, oword [rsp]
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x4c6f0f66; WORD $0x2024                   // movdqa    xmm1, oword [rsp + 32]
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; BYTE $0x11                     // movdqu    oword [r9], xmm2
	LONG $0x11fd8349                                 // cmp    r13, 17
	JB   LBB3_55
	WORD $0x894c; BYTE $0xf1                         // mov    rcx, r14
	LONG $0x000012bf; BYTE $0x00                     // mov    edi, 18

LBB3_54:
	LONG $0x6f0f41f3; WORD $0x3854; BYTE $0xfc       // movdqu    xmm2, oword [r8 + rdi - 4]
	LONG $0x6f0f41f3; WORD $0x384c; BYTE $0xfd       // movdqu    xmm1, oword [r8 + rdi - 3]
	LONG $0x6f0f45f3; WORD $0x3874; BYTE $0xfe       // movdqu    xmm14, oword [r8 + rdi - 2]
	LONG $0x6f0f41f3; WORD $0x3844; BYTE $0xff       // movdqu    xmm0, oword [r8 + rdi - 1]
	LONG $0x6f0f41f3; WORD $0x3824                   // movdqu    xmm4, oword [r8 + rdi]
	LONG $0x746f0ff3; WORD $0xfc3b                   // movdqu    xmm6, oword [rbx + rdi - 4]
	LONG $0x6c6f0ff3; WORD $0xfd3b                   // movdqu    xmm5, oword [rbx + rdi - 3]
	LONG $0x7c6f0ff3; WORD $0xfe3b                   // movdqu    xmm7, oword [rbx + rdi - 2]
	LONG $0x6f0f44f3; WORD $0x3b64; BYTE $0xff       // movdqu    xmm12, oword [rbx + rdi - 1]
	LONG $0x6f0f44f3; WORD $0x3b1c                   // movdqu    xmm11, oword [rbx + rdi]
	LONG $0x6f0f44f3; WORD $0xfc41                   // movdqu    xmm8, oword [rcx - 4]
	LONG $0x6f0f44f3; WORD $0xfd79                   // movdqu    xmm15, oword [rcx - 3]
	LONG $0x6f0f44f3; WORD $0xfe69                   // movdqu    xmm13, oword [rcx - 2]
	LONG $0x6f0f44f3; WORD $0xff51                   // movdqu    xmm10, oword [rcx - 1]
	LONG $0x5c100f41; WORD $0xfc3a                   // movups    xmm3, oword [r10 + rdi - 4]
	LONG $0x241c290f                                 // movaps    oword [rsp], xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xc9                     // pmaxub    xmm9, xmm1
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xde0f4166; BYTE $0xd4                     // pmaxub    xmm2, xmm12
	LONG $0x947f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm2
	LONG $0xde0f4466; BYTE $0xd9                     // pmaxub    xmm11, xmm1
	LONG $0x6f0f4166; BYTE $0xcd                     // movdqa    xmm1, xmm13
	LONG $0xda0f4166; BYTE $0xca                     // pminub    xmm1, xmm10
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xda0f4166; BYTE $0xe5                     // pminub    xmm4, xmm13
	LONG $0xde0f4566; BYTE $0xef                     // pmaxub    xmm13, xmm15
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x6f0f41f3; WORD $0x3a4c; BYTE $0xfd       // movdqu    xmm1, oword [r10 + rdi - 3]
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x096f0ff3                                 // movdqu    xmm1, oword [rcx]
	LONG $0x6f0f4466; BYTE $0xd1                     // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xde0f4466; BYTE $0xd3                     // pmaxub    xmm10, xmm3
	LONG $0x6f0f41f3; WORD $0x3a54; BYTE $0xff       // movdqu    xmm2, oword [r10 + rdi - 1]
	LONG $0x6f0f41f3; WORD $0x3a0c                   // movdqu    xmm1, oword [r10 + rdi]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x6f0f41f3; WORD $0x3a4c; BYTE $0xfe       // movdqu    xmm1, oword [r10 + rdi - 2]
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4466; BYTE $0xc2                     // pminub    xmm8, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x8c7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm1
	LONG $0xde0f4466; BYTE $0xc3                     // pmaxub    xmm8, xmm3
	LONG $0x5c6f0ff3; WORD $0xfd38                   // movdqu    xmm3, oword [rax + rdi - 3]
	LONG $0x4c6f0ff3; WORD $0xfe38                   // movdqu    xmm1, oword [rax + rdi - 2]
	LONG $0xfb6f0f66                                 // movdqa    xmm7, xmm3
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x4c6f0ff3; WORD $0xfc38                   // movdqu    xmm1, oword [rax + rdi - 4]
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4566; BYTE $0xfd                     // movdqa    xmm15, xmm13
	LONG $0xda0f4466; BYTE $0xff                     // pminub    xmm15, xmm7
	LONG $0xde0f4466; BYTE $0xef                     // pmaxub    xmm13, xmm7
	LONG $0x7c6f0ff3; WORD $0xff38                   // movdqu    xmm7, oword [rax + rdi - 1]
	LONG $0x146f0ff3; BYTE $0x38                     // movdqu    xmm2, oword [rax + rdi]
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0x7f0f4466; LONG $0x00b024b4; WORD $0x0000 // movdqa    oword [rsp + 176], xmm14
	LONG $0xd6de0f66                                 // pmaxub    xmm2, xmm6
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x70       // movdqa    xmm9, oword [rsp + 112]
	LONG $0x6f0f4166; BYTE $0xf1                     // movdqa    xmm6, xmm9
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0x947f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm2
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0xb47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm6
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x40       // movdqa    xmm9, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm0
	LONG $0x6f0f4166; BYTE $0xd4                     // movdqa    xmm2, xmm12
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0xac6f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0x7f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    oword [rsp + 144], xmm10
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x546f0f66; WORD $0x6024                   // movdqa    xmm2, oword [rsp + 96]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x6f0f4466; LONG $0x008024a4; WORD $0x0000 // movdqa    xmm12, oword [rsp + 128]
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xde0f4466; BYTE $0xdc                     // pmaxub    xmm11, xmm4
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x846f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xf8                     // movdqa    xmm15, xmm0
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4466; BYTE $0xfc                     // pmaxub    xmm15, xmm4
	LONG $0x6f0f4566; BYTE $0xe5                     // movdqa    xmm12, xmm13
	LONG $0xda0f4466; BYTE $0xe7                     // pminub    xmm12, xmm7
	LONG $0xde0f4166; BYTE $0xfd                     // pmaxub    xmm7, xmm13
	LONG $0x6f0f4166; BYTE $0xe0                     // movdqa    xmm4, xmm8
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xec                     // movdqa    xmm13, xmm4
	LONG $0xda0f4566; BYTE $0xec                     // pminub    xmm13, xmm12
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x746f0f66; WORD $0x5024                   // movdqa    xmm6, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3                     // pminub    xmm8, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x6f0f4566; BYTE $0xe2                     // movdqa    xmm12, xmm10
	LONG $0xda0f4566; BYTE $0xe5                     // pminub    xmm12, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4466; LONG $0x00c02494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x847f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm0
	LONG $0xde0f4166; BYTE $0xf4                     // pmaxub    xmm6, xmm12
	LONG $0x747f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm6
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x846f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4566; BYTE $0xe0                     // pminub    xmm12, xmm8
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4566; BYTE $0xf9                     // pmaxub    xmm15, xmm9
	LONG $0x846f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xc8                     // movdqa    xmm9, xmm0
	LONG $0xda0f4566; BYTE $0xcf                     // pminub    xmm9, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0x946f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdb                     // pmaxub    xmm3, xmm11
	LONG $0x5cda0f66; WORD $0x7024                   // pminub    xmm3, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xdb                     // movdqa    xmm11, xmm3
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf1da0f66                                 // pminub    xmm6, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0x6f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 144]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xfa                     // pmaxub    xmm7, xmm10
	LONG $0x7cda0f66; WORD $0x1024                   // pminub    xmm7, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xd7                     // movdqa    xmm10, xmm7
	LONG $0xda0f4466; BYTE $0xd6                     // pminub    xmm10, xmm6
	LONG $0xfede0f66                                 // pmaxub    xmm7, xmm6
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0x74da0f66; WORD $0x4024                   // pminub    xmm6, oword [rsp + 64]
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0x4c6f0f66; WORD $0x6024                   // movdqa    xmm1, oword [rsp + 96]
	LONG $0x4cde0f66; WORD $0x5024                   // pmaxub    xmm1, oword [rsp + 80]
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4566; BYTE $0xdc                     // pmaxub    xmm11, xmm12
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0xde0f4566; BYTE $0xd6                     // pmaxub    xmm10, xmm14
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xda                     // pmaxub    xmm3, xmm10
	LONG $0xda0f4166; BYTE $0xdb                     // pminub    xmm3, xmm11
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd5                     // pminub    xmm2, xmm13
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4166; BYTE $0xd7                     // pmaxub    xmm2, xmm15
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x7f0f41f3; WORD $0x3954; BYTE $0xfe       // movdqu    oword [r9 + rdi - 2], xmm2
	LONG $0x105f8d4c                                 // lea    r11, [rdi + 16]
	LONG $0x0ec78348                                 // add    rdi, 14
	LONG $0x10c18348                                 // add    rcx, 16
	WORD $0x394c; BYTE $0xef                         // cmp    rdi, r13
	WORD $0x894c; BYTE $0xdf                         // mov    rdi, r11
	JB   LBB3_54

LBB3_55:
	LONG $0x6f0f41f3; WORD $0x104c; BYTE $0xf0       // movdqu    xmm1, oword [r8 + rdx - 16]
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xef0f4566; BYTE $0xc9                     // pxor    xmm9, xmm9
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0x680f4566; BYTE $0xe9                     // punpckhbw    xmm13, xmm9
	LONG $0x700f4166; WORD $0x27cd                   // pshufd    xmm1, xmm13, 39
	LONG $0x730f4166; WORD $0x0efd                   // pslldq    xmm13, 14
	LONG $0xeb0f4466; BYTE $0xe8                     // por    xmm13, xmm0
	LONG $0xc1700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm1, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0x670f4466; BYTE $0xe8                     // packuswb    xmm13, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4166; BYTE $0xd5                     // movdqa    xmm2, xmm13
	LONG $0x680f4166; BYTE $0xd1                     // punpckhbw    xmm2, xmm9
	LONG $0xca700f66; BYTE $0x27                     // pshufd    xmm1, xmm2, 39
	LONG $0xfa730f66; BYTE $0x0e                     // pslldq    xmm2, 14
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc1700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm1, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0xd0670f66                                 // packuswb    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x4c6f0ff3; WORD $0xef13                   // movdqu    xmm1, oword [rbx + rdx - 17]
	LONG $0x446f0ff3; WORD $0xf013                   // movdqu    xmm0, oword [rbx + rdx - 16]
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x680f4166; BYTE $0xf9                     // punpckhbw    xmm7, xmm9
	LONG $0xd7700f66; BYTE $0x27                     // pshufd    xmm2, xmm7, 39
	LONG $0xff730f66; BYTE $0x0e                     // pslldq    xmm7, 14
	LONG $0xf8eb0f66                                 // por    xmm7, xmm0
	LONG $0xc2700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0xf8670f66                                 // packuswb    xmm7, xmm0
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xe7                     // movdqa    xmm12, xmm7
	LONG $0x680f4566; BYTE $0xe1                     // punpckhbw    xmm12, xmm9
	LONG $0x700f4166; WORD $0x27d4                   // pshufd    xmm2, xmm12, 39
	LONG $0x730f4166; WORD $0x0efc                   // pslldq    xmm12, 14
	LONG $0xeb0f4466; BYTE $0xe0                     // por    xmm12, xmm0
	LONG $0xc2700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0x670f4466; BYTE $0xe0                     // packuswb    xmm12, xmm0
	LONG $0x6f0f45f3; WORD $0x1774; BYTE $0xf0       // movdqu    xmm14, oword [r15 + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0x680f4166; BYTE $0xd9                     // punpckhbw    xmm3, xmm9
	LONG $0xd3700f66; BYTE $0x27                     // pshufd    xmm2, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0e                     // pslldq    xmm3, 14
	LONG $0xd8eb0f66                                 // por    xmm3, xmm0
	LONG $0xc2700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0xd8670f66                                 // packuswb    xmm3, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xfb                     // movdqa    xmm15, xmm3
	LONG $0x680f4566; BYTE $0xf9                     // punpckhbw    xmm15, xmm9
	LONG $0x700f4166; WORD $0x27d7                   // pshufd    xmm2, xmm15, 39
	LONG $0x730f4166; WORD $0x0eff                   // pslldq    xmm15, 14
	LONG $0xeb0f4466; BYTE $0xf8                     // por    xmm15, xmm0
	LONG $0xc2700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0x670f4466; BYTE $0xf8                     // packuswb    xmm15, xmm0
	LONG $0x6f0f41f3; WORD $0x124c; BYTE $0xf0       // movdqu    xmm1, oword [r10 + rdx - 16]
	LONG $0x4c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm1
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0x680f4166; BYTE $0xd1                     // punpckhbw    xmm2, xmm9
	LONG $0xe2700f66; BYTE $0x27                     // pshufd    xmm4, xmm2, 39
	LONG $0xfa730f66; BYTE $0x0e                     // pslldq    xmm2, 14
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc4700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm4, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0xd0670f66                                 // packuswb    xmm2, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0x680f4166; BYTE $0xe1                     // punpckhbw    xmm4, xmm9
	LONG $0xec700f66; BYTE $0x27                     // pshufd    xmm5, xmm4, 39
	LONG $0xfc730f66; BYTE $0x0e                     // pslldq    xmm4, 14
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc5700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm5, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0xe0670f66                                 // packuswb    xmm4, xmm0
	LONG $0x6f0f44f3; WORD $0x1054; BYTE $0xef       // movdqu    xmm10, oword [rax + rdx - 17]
	LONG $0x446f0ff3; WORD $0xf010                   // movdqu    xmm0, oword [rax + rdx - 16]
	LONG $0x6f0f4566; BYTE $0xda                     // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0x6f0f4466; BYTE $0xc0                     // movdqa    xmm8, xmm0
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x680f4566; BYTE $0xc1                     // punpckhbw    xmm8, xmm9
	LONG $0x700f4166; WORD $0x27f0                   // pshufd    xmm6, xmm8, 39
	LONG $0x730f4166; WORD $0x0ef8                   // pslldq    xmm8, 14
	LONG $0xeb0f4466; BYTE $0xc0                     // por    xmm8, xmm0
	LONG $0xc6700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm6, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0x670f4466; BYTE $0xc0                     // packuswb    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0x600f4166; BYTE $0xf1                     // punpcklbw    xmm6, xmm9
	LONG $0xde730f66; BYTE $0x02                     // psrldq    xmm6, 2
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0x680f4166; BYTE $0xc9                     // punpckhbw    xmm1, xmm9
	LONG $0x700f4466; WORD $0x27c9                   // pshufd    xmm9, xmm1, 39
	LONG $0xf9730f66; BYTE $0x0e                     // pslldq    xmm1, 14
	LONG $0xceeb0f66                                 // por    xmm1, xmm6
	LONG $0x700f41f3; WORD $0xc4f1                   // pshufhw    xmm6, xmm9, 196
	LONG $0xf6700f66; BYTE $0x27                     // pshufd    xmm6, xmm6, 39
	LONG $0xf6700ff2; BYTE $0x39                     // pshuflw    xmm6, xmm6, 57
	LONG $0xf6700ff3; BYTE $0xf9                     // pshufhw    xmm6, xmm6, 249
	LONG $0xce670f66                                 // packuswb    xmm1, xmm6
	LONG $0x6f0f41f3; WORD $0x1044; BYTE $0xee       // movdqu    xmm0, oword [r8 + rdx - 18]
	LONG $0x6f0f41f3; WORD $0x1074; BYTE $0xef       // movdqu    xmm6, oword [r8 + rdx - 17]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeeda0f66                                 // pminub    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0xc6de0f66                                 // pmaxub    xmm0, xmm6
	LONG $0x847f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm0
	LONG $0x6f0f4166; BYTE $0xf5                     // movdqa    xmm6, xmm13
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x6c6f0f66; WORD $0x2024                   // movdqa    xmm5, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0x847f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm0
	LONG $0xde0f4466; BYTE $0xce                     // pmaxub    xmm9, xmm6
	LONG $0x6f0f44f3; WORD $0x136c; BYTE $0xee       // movdqu    xmm13, oword [rbx + rdx - 18]
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0xf56f0f66                                 // movdqa    xmm6, xmm5
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0x747f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm6
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm5
	LONG $0x6f0f41f3; WORD $0x1774; BYTE $0xee       // movdqu    xmm6, oword [r15 + rdx - 18]
	LONG $0x6f0f4566; BYTE $0xec                     // movdqa    xmm13, xmm12
	LONG $0xda0f4466; BYTE $0xee                     // pminub    xmm13, xmm6
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xf76f0f66                                 // movdqa    xmm6, xmm7
	LONG $0xda0f4166; BYTE $0xf4                     // pminub    xmm6, xmm12
	LONG $0xde0f4466; BYTE $0xe7                     // pmaxub    xmm12, xmm7
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc5                     // pminub    xmm0, xmm13
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4166; BYTE $0xf5                     // pmaxub    xmm6, xmm13
	LONG $0x6f0f4566; BYTE $0xee                     // movdqa    xmm13, xmm14
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xde0f4166; BYTE $0xde                     // pmaxub    xmm3, xmm14
	LONG $0x6f0f41f3; WORD $0x176c; BYTE $0xef       // movdqu    xmm5, oword [r15 + rdx - 17]
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xed                     // pminub    xmm5, xmm13
	LONG $0xac7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm5
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x6f0f41f3; WORD $0x126c; BYTE $0xee       // movdqu    xmm5, oword [r10 + rdx - 18]
	LONG $0x6f0f45f3; WORD $0x126c; BYTE $0xef       // movdqu    xmm13, oword [r10 + rdx - 17]
	LONG $0x6f0f4466; BYTE $0xf5                     // movdqa    xmm14, xmm5
	LONG $0xda0f4566; BYTE $0xf5                     // pminub    xmm14, xmm13
	LONG $0xde0f4166; BYTE $0xed                     // pmaxub    xmm5, xmm13
	LONG $0x6f0f4566; BYTE $0xef                     // movdqa    xmm13, xmm15
	LONG $0xda0f4466; BYTE $0xed                     // pminub    xmm13, xmm5
	LONG $0xde0f4166; BYTE $0xef                     // pmaxub    xmm5, xmm15
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0xda0f4166; BYTE $0xee                     // pminub    xmm5, xmm14
	LONG $0xde0f4566; BYTE $0xee                     // pmaxub    xmm13, xmm14
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4466; BYTE $0xfc                     // pminub    xmm15, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x546f0f66; WORD $0x4024                   // movdqa    xmm2, oword [rsp + 64]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0x947f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm2
	LONG $0xde0f4566; BYTE $0xf7                     // pmaxub    xmm14, xmm15
	LONG $0x546f0ff3; WORD $0xee10                   // movdqu    xmm2, oword [rax + rdx - 18]
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4566; BYTE $0xfa                     // pminub    xmm15, xmm10
	LONG $0xde0f4466; BYTE $0xd2                     // pmaxub    xmm10, xmm2
	LONG $0x6f0f4166; BYTE $0xd7                     // movdqa    xmm2, xmm15
	LONG $0xda0f4166; BYTE $0xd3                     // pminub    xmm2, xmm11
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xde0f4566; BYTE $0xfb                     // pmaxub    xmm15, xmm11
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xc8                     // pmaxub    xmm1, xmm8
	LONG $0xbc6f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xdf                     // movdqa    xmm11, xmm7
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    xmm8, oword [rsp + 32]
	LONG $0xda0f4566; BYTE $0xd8                     // pminub    xmm11, xmm8
	LONG $0x7f0f4466; LONG $0x0080249c; WORD $0x0000 // movdqa    oword [rsp + 128], xmm11
	LONG $0xde0f4466; BYTE $0xc7                     // pmaxub    xmm8, xmm7
	LONG $0x7f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    oword [rsp + 32], xmm8
	LONG $0x6f0f4566; BYTE $0xc1                     // movdqa    xmm8, xmm9
	LONG $0x6f0f4466; WORD $0x245c; BYTE $0x30       // movdqa    xmm11, oword [rsp + 48]
	LONG $0xda0f4566; BYTE $0xc3                     // pminub    xmm8, xmm11
	LONG $0xde0f4566; BYTE $0xd9                     // pmaxub    xmm11, xmm9
	LONG $0x7c6f0f66; WORD $0x7024                   // movdqa    xmm7, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xcb                     // pminub    xmm9, xmm11
	LONG $0xde0f4466; BYTE $0xdf                     // pmaxub    xmm11, xmm7
	LONG $0x7f0f4466; WORD $0x245c; BYTE $0x30       // movdqa    oword [rsp + 48], xmm11
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0xbc7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm7
	LONG $0xde0f4566; BYTE $0xc8                     // pmaxub    xmm9, xmm8
	LONG $0x7f0f4466; LONG $0x0090248c; WORD $0x0000 // movdqa    oword [rsp + 144], xmm9
	LONG $0x7c6f0f66; WORD $0x1024                   // movdqa    xmm7, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0x6f0f4466; WORD $0x240c                   // movdqa    xmm9, oword [rsp]
	LONG $0xda0f4566; BYTE $0xc1                     // pminub    xmm8, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0xbc6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xdf                     // movdqa    xmm11, xmm7
	LONG $0xda0f4566; BYTE $0xd9                     // pminub    xmm11, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0x7f0f4466; WORD $0x240c                   // movdqa    oword [rsp], xmm9
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0x7c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm7
	LONG $0xde0f4566; BYTE $0xd8                     // pmaxub    xmm11, xmm8
	LONG $0x7f0f4466; LONG $0x00b0249c; WORD $0x0000 // movdqa    oword [rsp + 176], xmm11
	LONG $0xbc6f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 192]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0x7c6f0f66; WORD $0x6024                   // movdqa    xmm7, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4466; BYTE $0xcd                     // pminub    xmm9, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0xbc7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm7
	LONG $0xde0f4566; BYTE $0xc8                     // pmaxub    xmm9, xmm8
	LONG $0x6f0f4466; BYTE $0xd8                     // movdqa    xmm11, xmm0
	LONG $0xda0f4566; BYTE $0xdd                     // pminub    xmm11, xmm13
	LONG $0xde0f4466; BYTE $0xe8                     // pmaxub    xmm13, xmm0
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4566; BYTE $0xc5                     // pminub    xmm8, xmm13
	LONG $0xde0f4466; BYTE $0xee                     // pmaxub    xmm13, xmm6
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xda0f4166; BYTE $0xc3                     // pminub    xmm0, xmm11
	LONG $0xde0f4566; BYTE $0xc3                     // pmaxub    xmm8, xmm11
	LONG $0xf36f0f66                                 // movdqa    xmm6, xmm3
	LONG $0x6f0f4466; LONG $0x00e024ac; WORD $0x0000 // movdqa    xmm13, oword [rsp + 224]
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4466; BYTE $0xeb                     // pmaxub    xmm13, xmm3
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4566; BYTE $0xdd                     // pminub    xmm11, xmm13
	LONG $0xde0f4566; BYTE $0xec                     // pmaxub    xmm13, xmm12
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xfeda0f66                                 // pminub    xmm7, xmm6
	LONG $0xde0f4466; BYTE $0xde                     // pmaxub    xmm11, xmm6
	LONG $0x6c6f0f66; WORD $0x4024                   // movdqa    xmm5, oword [rsp + 64]
	LONG $0xdd6f0f66                                 // movdqa    xmm3, xmm5
	LONG $0x6f0f4466; BYTE $0xe2                     // movdqa    xmm12, xmm2
	LONG $0xda0f4166; BYTE $0xdc                     // pminub    xmm3, xmm12
	LONG $0xde0f4466; BYTE $0xe5                     // pmaxub    xmm12, xmm5
	LONG $0xb46f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 208]
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xda0f4166; BYTE $0xec                     // pminub    xmm5, xmm12
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xf56f0f66                                 // movdqa    xmm6, xmm5
	LONG $0xf3da0f66                                 // pminub    xmm6, xmm3
	LONG $0x747f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm6
	LONG $0xebde0f66                                 // pmaxub    xmm5, xmm3
	LONG $0x6f0f4166; BYTE $0xf7                     // movdqa    xmm6, xmm15
	LONG $0xf1da0f66                                 // pminub    xmm6, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xce                     // pmaxub    xmm1, xmm14
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xda0f4166; BYTE $0xf2                     // pminub    xmm6, xmm10
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x846f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 160]
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0x84de0f66; LONG $0x0000c024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 192]
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0xde0f4166; BYTE $0xe6                     // pmaxub    xmm4, xmm14
	LONG $0xa47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm4
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xf7de0f66                                 // pmaxub    xmm6, xmm7
	LONG $0x546f0f66; WORD $0x5024                   // movdqa    xmm2, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf6                     // pminub    xmm14, xmm6
	LONG $0xf2de0f66                                 // pmaxub    xmm6, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x946f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 128]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6f0f4466; BYTE $0xfd                     // movdqa    xmm15, xmm5
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0xa47f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm4
	LONG $0x846f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 144]
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe3da0f66                                 // pminub    xmm4, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xda0f4166; BYTE $0xfa                     // pminub    xmm7, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xda0f4466; LONG $0x00b02494; WORD $0x0000 // pminub    xmm10, oword [rsp + 176]
	LONG $0x6f0f4566; BYTE $0xca                     // movdqa    xmm9, xmm10
	LONG $0xda0f4466; BYTE $0xcf                     // pminub    xmm9, xmm7
	LONG $0xde0f4466; BYTE $0xd7                     // pmaxub    xmm10, xmm7
	LONG $0x546f0f66; WORD $0x7024                   // movdqa    xmm2, oword [rsp + 112]
	LONG $0xfa6f0f66                                 // movdqa    xmm7, xmm2
	LONG $0xda0f4166; BYTE $0xfc                     // pminub    xmm7, xmm12
	LONG $0xde0f4466; BYTE $0xe2                     // pmaxub    xmm12, xmm2
	LONG $0x546f0f66; WORD $0x2024                   // movdqa    xmm2, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xda                     // movdqa    xmm11, xmm2
	LONG $0xda0f4566; BYTE $0xdc                     // pminub    xmm11, xmm12
	LONG $0xde0f4466; BYTE $0xe2                     // pmaxub    xmm12, xmm2
	LONG $0x6f0f4566; BYTE $0xc3                     // movdqa    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc7                     // pminub    xmm8, xmm7
	LONG $0xde0f4466; BYTE $0xdf                     // pmaxub    xmm11, xmm7
	LONG $0x6c6f0f66; WORD $0x6024                   // movdqa    xmm5, oword [rsp + 96]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xcdde0f66                                 // pmaxub    xmm1, xmm5
	LONG $0x4cda0f66; WORD $0x3024                   // pminub    xmm1, oword [rsp + 48]
	LONG $0xf96f0f66                                 // movdqa    xmm7, xmm1
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xda0f4466; WORD $0x242c                   // pminub    xmm13, oword [rsp]
	LONG $0xda0f4466; BYTE $0xee                     // pminub    xmm13, xmm6
	LONG $0xda0f4466; BYTE $0xd3                     // pminub    xmm10, xmm3
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xda0f4566; BYTE $0xd5                     // pminub    xmm10, xmm13
	LONG $0xda0f4466; BYTE $0xd1                     // pminub    xmm10, xmm1
	LONG $0x4c6f0f66; WORD $0x5024                   // movdqa    xmm1, oword [rsp + 80]
	LONG $0x8cde0f66; LONG $0x0000a024; BYTE $0x00   // pmaxub    xmm1, oword [rsp + 160]
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xde0f4466; WORD $0x2444; BYTE $0x10       // pmaxub    xmm8, oword [rsp + 16]
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0xde0f4466; BYTE $0xc1                     // pmaxub    xmm8, xmm1
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xda0f4166; BYTE $0xc6                     // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xce                     // pmaxub    xmm9, xmm14
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xfcde0f66                                 // pmaxub    xmm7, xmm4
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xda0f4166; BYTE $0xd3                     // pminub    xmm2, xmm11
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4466; BYTE $0xd7                     // pmaxub    xmm10, xmm7
	LONG $0xda0f4566; BYTE $0xd1                     // pminub    xmm10, xmm9
	LONG $0xef0f4566; BYTE $0xf6                     // pxor    xmm14, xmm14
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xde0f4166; BYTE $0xc0                     // pmaxub    xmm0, xmm8
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0x646f0f66; WORD $0x4024                   // movdqa    xmm4, oword [rsp + 64]
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc7                     // pminub    xmm0, xmm15
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x114c; BYTE $0xf0       // movdqu    oword [r9 + rdx - 16], xmm1
	WORD $0xff49; BYTE $0xc4                         // inc    r12
	LONG $0x248c034c; LONG $0x00000160               // add    r9, qword 352[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                         // add    r14, rsi
	LONG $0x24a43b4c; LONG $0x000000f0               // cmp    r12, qword [rsp + 240]
	JNE  LBB3_52
	JMP  LBB3_62

LBB3_56:
	LONG $0x24bc8348; LONG $0x000000f0; BYTE $0x00 // cmp    qword [rsp + 240], 0
	JE   LBB3_62
	LONG $0x522c8d4c                               // lea    r13, [rdx + 2*rdx]
	LONG $0x52548d4c; BYTE $0xff                   // lea    r10, [rdx + 2*rdx - 1]
	LONG $0xf0e28349                               // and    r10, -16
	LONG $0x24848b48; LONG $0x000000f0             // mov    rax, qword [rsp + 240]
	LONG $0xfe488d48                               // lea    rcx, [rax - 2]
	LONG $0x248c8948; LONG $0x00000110             // mov    qword [rsp + 272], rcx
	WORD $0xff48; BYTE $0xc8                       // dec    rax
	LONG $0x24848948; LONG $0x00000120             // mov    qword [rsp + 288], rax
	LONG $0x24848b48; LONG $0x000000f8             // mov    rax, qword [rsp + 248]
	LONG $0x16708d4c                               // lea    r14, [rax + 22]
	WORD $0x3145; BYTE $0xe4                       // xor    r12d, r12d
	LONG $0xef0f4566; BYTE $0xf6                   // pxor    xmm14, xmm14

LBB3_58:
	LONG $0x24448d49; BYTE $0xfe                     // lea    rax, [r12 - 2]
	LONG $0xc6af0f48                                 // imul    rax, rsi
	LONG $0x24840348; LONG $0x000000f8               // add    rax, qword [rsp + 248]
	LONG $0x301c8d4c                                 // lea    r11, [rax + rsi]
	LONG $0x333c8d4d                                 // lea    r15, [r11 + rsi]
	LONG $0x37048d4d                                 // lea    r8, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	WORD $0x894c; BYTE $0xdb                         // mov    rbx, r11
	LONG $0x6f0f42f3; WORD $0x1e1c                   // movdqu    xmm3, oword [rsi + r11]
	LONG $0x6f0f42f3; WORD $0x1e6c; BYTE $0x03       // movdqu    xmm5, oword [rsi + r11 + 3]
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	WORD $0x894c; BYTE $0xdf                         // mov    rdi, r11
	LONG $0xff440f49                                 // cmove    rdi, r15
	LONG $0x02fc8349                                 // cmp    r12, 2
	LONG $0xdf420f48                                 // cmovb    rbx, rdi
	LONG $0xf8430f48                                 // cmovae    rdi, rax
	LONG $0x24a43b4c; LONG $0x00000120               // cmp    r12, qword [rsp + 288]
	WORD $0x894c; BYTE $0xf8                         // mov    rax, r15
	LONG $0xc0420f49                                 // cmovb    rax, r8
	LONG $0x24a43b4c; LONG $0x00000110               // cmp    r12, qword [rsp + 272]
	WORD $0x8948; BYTE $0xc2                         // mov    rdx, rax
	LONG $0xd0420f49                                 // cmovb    rdx, r8
	LONG $0x0f6f0ff3                                 // movdqu    xmm1, oword [rdi]
	LONG $0x576f0ff3; BYTE $0x03                     // movdqu    xmm2, oword [rdi + 3]
	LONG $0x676f0ff3; BYTE $0x06                     // movdqu    xmm4, oword [rdi + 6]
	LONG $0x647f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm4
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0x247f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm4
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm2
	LONG $0x600f4166; BYTE $0xce                     // punpcklbw    xmm1, xmm14
	LONG $0xd1700f66; BYTE $0x27                     // pshufd    xmm2, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0a                     // psrldq    xmm1, 10
	LONG $0x680f4166; BYTE $0xc6                     // punpckhbw    xmm0, xmm14
	LONG $0xf8730f66; BYTE $0x06                     // pslldq    xmm0, 6
	LONG $0xc1eb0f66                                 // por    xmm0, xmm1
	LONG $0xca700ff3; BYTE $0xec                     // pshufhw    xmm1, xmm2, 236
	LONG $0xc9700f66; BYTE $0x67                     // pshufd    xmm1, xmm1, 103
	LONG $0xc9700ff2; BYTE $0x24                     // pshuflw    xmm1, xmm1, 36
	LONG $0x700f44f3; WORD $0x39c1                   // pshufhw    xmm8, xmm1, 57
	LONG $0x670f4466; BYTE $0xc0                     // packuswb    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xc8700f66; BYTE $0x27                     // pshufd    xmm1, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a                     // psrldq    xmm0, 10
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0x680f4166; BYTE $0xd6                     // punpckhbw    xmm2, xmm14
	LONG $0xfa730f66; BYTE $0x06                     // pslldq    xmm2, 6
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc1700ff3; BYTE $0xec                     // pshufhw    xmm0, xmm1, 236
	LONG $0xc0700f66; BYTE $0x67                     // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24                     // pshuflw    xmm0, xmm0, 36
	LONG $0x700f44f3; WORD $0x39e8                   // pshufhw    xmm13, xmm0, 57
	LONG $0x670f4466; BYTE $0xea                     // packuswb    xmm13, xmm2
	LONG $0x6f0f44f3; BYTE $0x3b                     // movdqu    xmm15, oword [rbx]
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xd0700f66; BYTE $0x27                     // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a                     // psrldq    xmm0, 10
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0x680f4166; BYTE $0xe6                     // punpckhbw    xmm4, xmm14
	LONG $0xfc730f66; BYTE $0x06                     // pslldq    xmm4, 6
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc2700ff3; BYTE $0xec                     // pshufhw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x67                     // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24                     // pshuflw    xmm0, xmm0, 36
	LONG $0x700f44f3; WORD $0x39c8                   // pshufhw    xmm9, xmm0, 57
	LONG $0x670f4466; BYTE $0xcc                     // packuswb    xmm9, xmm4
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xd0700f66; BYTE $0x27                     // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a                     // psrldq    xmm0, 10
	LONG $0x6f0f4166; BYTE $0xe1                     // movdqa    xmm4, xmm9
	LONG $0x680f4166; BYTE $0xe6                     // punpckhbw    xmm4, xmm14
	LONG $0xfc730f66; BYTE $0x06                     // pslldq    xmm4, 6
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc2700ff3; BYTE $0xec                     // pshufhw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x67                     // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24                     // pshuflw    xmm0, xmm0, 36
	LONG $0x700f44f3; WORD $0x39d8                   // pshufhw    xmm11, xmm0, 57
	LONG $0x670f4466; BYTE $0xdc                     // packuswb    xmm11, xmm4
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xd0700f66; BYTE $0x27                     // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a                     // psrldq    xmm0, 10
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0x680f4166; BYTE $0xe6                     // punpckhbw    xmm4, xmm14
	LONG $0xfc730f66; BYTE $0x06                     // pslldq    xmm4, 6
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc2700ff3; BYTE $0xec                     // pshufhw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x67                     // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24                     // pshuflw    xmm0, xmm0, 36
	LONG $0xc0700ff3; BYTE $0x39                     // pshufhw    xmm0, xmm0, 57
	LONG $0xc4670f66                                 // packuswb    xmm0, xmm4
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0x6f0f4466; BYTE $0xd3                     // movdqa    xmm10, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x9c7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm3
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xe0700f66; BYTE $0x27                     // pshufd    xmm4, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a                     // psrldq    xmm0, 10
	LONG $0x680f4166; BYTE $0xd6                     // punpckhbw    xmm2, xmm14
	LONG $0xfa730f66; BYTE $0x06                     // pslldq    xmm2, 6
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc4700ff3; BYTE $0xec                     // pshufhw    xmm0, xmm4, 236
	LONG $0xc0700f66; BYTE $0x67                     // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24                     // pshuflw    xmm0, xmm0, 36
	LONG $0xf0700ff3; BYTE $0x39                     // pshufhw    xmm6, xmm0, 57
	LONG $0xf2670f66                                 // packuswb    xmm6, xmm2
	LONG $0x4a6f0ff3; BYTE $0x03                     // movdqu    xmm1, oword [rdx + 3]
	LONG $0x426f0ff3; BYTE $0x06                     // movdqu    xmm0, oword [rdx + 6]
	LONG $0x847f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm0
	LONG $0xf96f0f66                                 // movdqa    xmm7, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x026f0ff3                                 // movdqu    xmm0, oword [rdx]
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x8c7f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm1
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0x600f4166; BYTE $0xc6                     // punpcklbw    xmm0, xmm14
	LONG $0xe0700f66; BYTE $0x27                     // pshufd    xmm4, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a                     // psrldq    xmm0, 10
	LONG $0x680f4166; BYTE $0xd6                     // punpckhbw    xmm2, xmm14
	LONG $0xfa730f66; BYTE $0x06                     // pslldq    xmm2, 6
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc4700ff3; BYTE $0xec                     // pshufhw    xmm0, xmm4, 236
	LONG $0xc0700f66; BYTE $0x67                     // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24                     // pshuflw    xmm0, xmm0, 36
	LONG $0xd8700ff3; BYTE $0x39                     // pshufhw    xmm3, xmm0, 57
	LONG $0xda670f66                                 // packuswb    xmm3, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0x600f4166; BYTE $0xd6                     // punpcklbw    xmm2, xmm14
	LONG $0xe2700f66; BYTE $0x27                     // pshufd    xmm4, xmm2, 39
	LONG $0xda730f66; BYTE $0x0a                     // psrldq    xmm2, 10
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0x680f4166; BYTE $0xee                     // punpckhbw    xmm5, xmm14
	LONG $0xfd730f66; BYTE $0x06                     // pslldq    xmm5, 6
	LONG $0xeaeb0f66                                 // por    xmm5, xmm2
	LONG $0xd4700ff3; BYTE $0xec                     // pshufhw    xmm2, xmm4, 236
	LONG $0xd2700f66; BYTE $0x67                     // pshufd    xmm2, xmm2, 103
	LONG $0xd2700ff2; BYTE $0x24                     // pshuflw    xmm2, xmm2, 36
	LONG $0x700f44f3; WORD $0x39e2                   // pshufhw    xmm12, xmm2, 57
	LONG $0x670f4466; BYTE $0xe5                     // packuswb    xmm12, xmm5
	LONG $0x300c8d49                                 // lea    rcx, [r8 + rsi]
	LONG $0xc1420f48                                 // cmovb    rax, rcx
	LONG $0x206f0ff3                                 // movdqu    xmm4, oword [rax]
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0x600f4166; BYTE $0xd6                     // punpcklbw    xmm2, xmm14
	LONG $0xea700f66; BYTE $0x27                     // pshufd    xmm5, xmm2, 39
	LONG $0xda730f66; BYTE $0x0a                     // psrldq    xmm2, 10
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0x680f4166; BYTE $0xce                     // punpckhbw    xmm1, xmm14
	LONG $0xf9730f66; BYTE $0x06                     // pslldq    xmm1, 6
	LONG $0xcaeb0f66                                 // por    xmm1, xmm2
	LONG $0xd5700ff3; BYTE $0xec                     // pshufhw    xmm2, xmm5, 236
	LONG $0xd2700f66; BYTE $0x67                     // pshufd    xmm2, xmm2, 103
	LONG $0xd2700ff2; BYTE $0x24                     // pshuflw    xmm2, xmm2, 36
	LONG $0xc2700ff3; BYTE $0x39                     // pshufhw    xmm0, xmm2, 57
	LONG $0xc1670f66                                 // packuswb    xmm0, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0x600f4166; BYTE $0xce                     // punpcklbw    xmm1, xmm14
	LONG $0xd1700f66; BYTE $0x27                     // pshufd    xmm2, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0a                     // psrldq    xmm1, 10
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0x680f4166; BYTE $0xee                     // punpckhbw    xmm5, xmm14
	LONG $0xfd730f66; BYTE $0x06                     // pslldq    xmm5, 6
	LONG $0xe9eb0f66                                 // por    xmm5, xmm1
	LONG $0xca700ff3; BYTE $0xec                     // pshufhw    xmm1, xmm2, 236
	LONG $0xc9700f66; BYTE $0x67                     // pshufd    xmm1, xmm1, 103
	LONG $0xc9700ff2; BYTE $0x24                     // pshuflw    xmm1, xmm1, 36
	LONG $0xd1700ff3; BYTE $0x39                     // pshufhw    xmm2, xmm1, 57
	LONG $0xd5670f66                                 // packuswb    xmm2, xmm5
	LONG $0x6f0f4166; BYTE $0xcd                     // movdqa    xmm1, xmm13
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0x4c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm1
	LONG $0xde0f4566; BYTE $0xe8                     // pmaxub    xmm13, xmm8
	LONG $0x7f0f4466; LONG $0x00d024ac; WORD $0x0000 // movdqa    oword [rsp + 208], xmm13
	LONG $0x6c6f0f66; WORD $0x1024                   // movdqa    xmm5, oword [rsp + 16]
	LONG $0x6cda0f66; WORD $0x3024                   // pminub    xmm5, oword [rsp + 48]
	LONG $0x0c6f0f66; BYTE $0x24                     // movdqa    xmm1, oword [rsp]
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xed                     // pminub    xmm13, xmm5
	LONG $0xcdde0f66                                 // pmaxub    xmm1, xmm5
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0x6f0f4166; BYTE $0xc9                     // movdqa    xmm1, xmm9
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4566; BYTE $0xcf                     // pmaxub    xmm9, xmm15
	LONG $0x6f0f4566; BYTE $0xfb                     // movdqa    xmm15, xmm11
	LONG $0xda0f4566; BYTE $0xf9                     // pminub    xmm15, xmm9
	LONG $0xde0f4566; BYTE $0xcb                     // pmaxub    xmm9, xmm11
	LONG $0x6f0f4166; BYTE $0xef                     // movdqa    xmm5, xmm15
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0x6c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm5
	LONG $0xde0f4466; BYTE $0xf9                     // pmaxub    xmm15, xmm1
	LONG $0x4b6f0ff3; BYTE $0x06                     // movdqu    xmm1, oword [rbx + 6]
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4466; BYTE $0xc6                     // pminub    xmm8, xmm6
	LONG $0xf1de0f66                                 // pmaxub    xmm6, xmm1
	LONG $0x6b6f0ff3; BYTE $0x03                     // movdqu    xmm5, oword [rbx + 3]
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xceda0f66                                 // pminub    xmm1, xmm6
	LONG $0xf5de0f66                                 // pmaxub    xmm6, xmm5
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xda0f4166; BYTE $0xe8                     // pminub    xmm5, xmm8
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0xde0f4166; BYTE $0xc8                     // pmaxub    xmm1, xmm8
	LONG $0xda0f4466; WORD $0x2454; BYTE $0x70       // pminub    xmm10, oword [rsp + 112]
	LONG $0x6c6f0f66; WORD $0x2024                   // movdqa    xmm5, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xc5                     // movdqa    xmm8, xmm5
	LONG $0xda0f4566; BYTE $0xc2                     // pminub    xmm8, xmm10
	LONG $0xde0f4166; BYTE $0xea                     // pmaxub    xmm5, xmm10
	LONG $0x6c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm5
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xdb                     // pminub    xmm11, xmm3
	LONG $0xde0f4466; BYTE $0xe3                     // pmaxub    xmm12, xmm3
	LONG $0x6f0f42f3; WORD $0x1e5c; BYTE $0x06       // movdqu    xmm3, oword [rsi + r11 + 6]
	LONG $0x6f0f4466; BYTE $0xf3                     // movdqa    xmm14, xmm3
	LONG $0xda0f4566; BYTE $0xf4                     // pminub    xmm14, xmm12
	LONG $0xde0f4466; BYTE $0xe3                     // pmaxub    xmm12, xmm3
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0xda0f4166; BYTE $0xdb                     // pminub    xmm3, xmm11
	LONG $0x5c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm3
	LONG $0xde0f4566; BYTE $0xf3                     // pmaxub    xmm14, xmm11
	LONG $0xbcda0f66; LONG $0x00009024; BYTE $0x00   // pminub    xmm7, oword [rsp + 144]
	LONG $0x5c6f0f66; WORD $0x4024                   // movdqa    xmm3, oword [rsp + 64]
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xefda0f66                                 // pminub    xmm5, xmm7
	LONG $0xac7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm5
	LONG $0xdfde0f66                                 // pmaxub    xmm3, xmm7
	LONG $0x5c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm3
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xfcda0f66                                 // pminub    xmm7, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x6f0f4466; BYTE $0xdb                     // movdqa    xmm11, xmm3
	LONG $0xda0f4466; BYTE $0xdf                     // pminub    xmm11, xmm7
	LONG $0xdfde0f66                                 // pmaxub    xmm3, xmm7
	LONG $0x606f0ff3; BYTE $0x03                     // movdqu    xmm4, oword [rax + 3]
	LONG $0x506f0ff3; BYTE $0x06                     // movdqu    xmm2, oword [rax + 6]
	LONG $0xfc6f0f66                                 // movdqa    xmm7, xmm4
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0x6c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm5
	LONG $0xde0f4166; BYTE $0xd5                     // pmaxub    xmm2, xmm13
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4566; BYTE $0xd7                     // pminub    xmm10, xmm15
	LONG $0xde0f4466; BYTE $0xfa                     // pmaxub    xmm15, xmm2
	LONG $0x6c6f0f66; WORD $0x5024                   // movdqa    xmm5, oword [rsp + 80]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4466; BYTE $0xfd                     // pmaxub    xmm15, xmm5
	LONG $0x7f0f4466; WORD $0x247c; BYTE $0x70       // movdqa    oword [rsp + 112], xmm15
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0x2c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm5
	LONG $0xde0f4166; BYTE $0xd2                     // pmaxub    xmm2, xmm10
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0xac6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xda0f4566; BYTE $0xd1                     // pminub    xmm10, xmm9
	LONG $0xde0f4466; BYTE $0xcd                     // pmaxub    xmm9, xmm5
	LONG $0xac6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 208]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0xde0f4466; BYTE $0xcd                     // pmaxub    xmm9, xmm5
	LONG $0x7f0f4466; LONG $0x00b0248c; WORD $0x0000 // movdqa    oword [rsp + 176], xmm9
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xac7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm5
	LONG $0xde0f4166; BYTE $0xd2                     // pmaxub    xmm2, xmm10
	LONG $0x947f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm2
	LONG $0x6f0f4566; BYTE $0xc8                     // movdqa    xmm9, xmm8
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xca                     // pminub    xmm9, xmm2
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0xac6f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xc5                     // movdqa    xmm8, xmm5
	LONG $0xda0f4466; BYTE $0xc2                     // pminub    xmm8, xmm2
	LONG $0xd5de0f66                                 // pmaxub    xmm2, xmm5
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0x947f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    oword [rsp + 256], xmm2
	LONG $0xde0f4566; BYTE $0xc1                     // pmaxub    xmm8, xmm9
	LONG $0x546f0f66; WORD $0x2024                   // movdqa    xmm2, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xca                     // movdqa    xmm9, xmm2
	LONG $0xda0f4566; BYTE $0xce                     // pminub    xmm9, xmm14
	LONG $0xde0f4466; BYTE $0xf2                     // pmaxub    xmm14, xmm2
	LONG $0x6f0f4466; BYTE $0xd1                     // movdqa    xmm10, xmm1
	LONG $0xda0f4566; BYTE $0xd6                     // pminub    xmm10, xmm14
	LONG $0xde0f4466; BYTE $0xf1                     // pmaxub    xmm14, xmm1
	LONG $0x6f0f4166; BYTE $0xea                     // movdqa    xmm5, xmm10
	LONG $0xda0f4166; BYTE $0xe9                     // pminub    xmm5, xmm9
	LONG $0xde0f4566; BYTE $0xd1                     // pmaxub    xmm10, xmm9
	LONG $0x6f0f4466; LONG $0x00a0248c; WORD $0x0000 // movdqa    xmm9, oword [rsp + 160]
	LONG $0x6f0f4166; BYTE $0xc9                     // movdqa    xmm1, xmm9
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4566; BYTE $0xe1                     // pmaxub    xmm12, xmm9
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xda0f4166; BYTE $0xd4                     // pminub    xmm2, xmm12
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm2
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xde0f4166; BYTE $0xfb                     // pmaxub    xmm7, xmm11
	LONG $0xb46f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 192]
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xd7da0f66                                 // pminub    xmm2, xmm7
	LONG $0xfede0f66                                 // pmaxub    xmm7, xmm6
	LONG $0x6f0f4466; BYTE $0xea                     // movdqa    xmm13, xmm2
	LONG $0xda0f4466; BYTE $0xe9                     // pminub    xmm13, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x6f0f4466; BYTE $0xcb                     // movdqa    xmm9, xmm3
	LONG $0xda0f4466; BYTE $0xcc                     // pminub    xmm9, xmm4
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0x5c6f0f66; WORD $0x4024                   // movdqa    xmm3, oword [rsp + 64]
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xda0f4166; BYTE $0xd9                     // pminub    xmm3, xmm9
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x6f0f4466; LONG $0x0080249c; WORD $0x0000 // movdqa    xmm11, oword [rsp + 128]
	LONG $0x6f0f4566; BYTE $0xcb                     // movdqa    xmm9, xmm11
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4166; BYTE $0xc3                     // pmaxub    xmm0, xmm11
	LONG $0x6f0f4466; BYTE $0xdd                     // movdqa    xmm11, xmm5
	LONG $0xda0f4466; BYTE $0xdb                     // pminub    xmm11, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xebda0f66                                 // pminub    xmm5, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x1c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm3
	LONG $0xde0f4466; LONG $0x010024ac; WORD $0x0000 // pmaxub    xmm13, oword [rsp + 256]
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x40       // movdqa    oword [rsp + 64], xmm13
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0xac7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm5
	LONG $0x6f0f4566; BYTE $0xdf                     // movdqa    xmm11, xmm15
	LONG $0xda0f4566; BYTE $0xd9                     // pminub    xmm11, xmm9
	LONG $0xde0f4566; BYTE $0xcf                     // pmaxub    xmm9, xmm15
	LONG $0xac6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xfd                     // movdqa    xmm15, xmm5
	LONG $0xda0f4566; BYTE $0xf9                     // pminub    xmm15, xmm9
	LONG $0xde0f4466; BYTE $0xcd                     // pmaxub    xmm9, xmm5
	LONG $0x6f0f4566; BYTE $0xef                     // movdqa    xmm13, xmm15
	LONG $0xda0f4566; BYTE $0xeb                     // pminub    xmm13, xmm11
	LONG $0xde0f4566; BYTE $0xfb                     // pmaxub    xmm15, xmm11
	LONG $0x6f0f4566; BYTE $0xd8                     // movdqa    xmm11, xmm8
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x5c6f0f66; WORD $0x6024                   // movdqa    xmm3, oword [rsp + 96]
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0x547f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm2
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xca                     // pmaxub    xmm1, xmm10
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0xac7f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm5
	LONG $0x5c6f0f66; WORD $0x5024                   // movdqa    xmm3, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xc3                     // movdqa    xmm8, xmm3
	LONG $0xda0f4466; BYTE $0xc1                     // pminub    xmm8, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0x6f0f4566; BYTE $0xd8                     // movdqa    xmm11, xmm8
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x9c6f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm3, oword [rsp + 224]
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0x84da0f66; LONG $0x00009024; BYTE $0x00   // pminub    xmm0, oword [rsp + 144]
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6c6f0f66; WORD $0x1024                   // movdqa    xmm5, oword [rsp + 16]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xd7da0f66                                 // pminub    xmm2, xmm7
	LONG $0xfdde0f66                                 // pmaxub    xmm7, xmm5
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd3                     // pminub    xmm10, xmm3
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0x6f0f4166; BYTE $0xee                     // movdqa    xmm5, xmm14
	LONG $0xecda0f66                                 // pminub    xmm5, xmm4
	LONG $0xde0f4166; BYTE $0xe6                     // pmaxub    xmm4, xmm14
	LONG $0x64da0f66; WORD $0x7024                   // pminub    xmm4, oword [rsp + 112]
	LONG $0xdc6f0f66                                 // movdqa    xmm3, xmm4
	LONG $0xddda0f66                                 // pminub    xmm3, xmm5
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0xda0f4466; LONG $0x00b024a4; WORD $0x0000 // pminub    xmm12, oword [rsp + 176]
	LONG $0xda0f4566; BYTE $0xe1                     // pminub    xmm12, xmm9
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xda0f4166; BYTE $0xc4                     // pminub    xmm0, xmm12
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4466; LONG $0x00a024ac; WORD $0x0000 // pmaxub    xmm13, oword [rsp + 160]
	LONG $0xde0f4466; LONG $0x0080249c; WORD $0x0000 // pmaxub    xmm11, oword [rsp + 128]
	LONG $0xde0f4466; WORD $0x2454; BYTE $0x40       // pmaxub    xmm10, oword [rsp + 64]
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xde0f4566; BYTE $0xd5                     // pmaxub    xmm10, xmm13
	LONG $0xce6f0f66                                 // movdqa    xmm1, xmm6
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4166; BYTE $0xf7                     // pmaxub    xmm6, xmm15
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe0                     // pminub    xmm4, xmm8
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0xd5de0f66                                 // pmaxub    xmm2, xmm5
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xdc6f0f66                                 // movdqa    xmm3, xmm4
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xca                     // pmaxub    xmm1, xmm10
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xccde0f66                                 // pmaxub    xmm1, xmm4
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0x246f0f66; BYTE $0x24                     // movdqa    xmm4, oword [rsp]
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x4c6f0f66; WORD $0x2024                   // movdqa    xmm1, oword [rsp + 32]
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x7f0f41f3; BYTE $0x11                     // movdqu    oword [r9], xmm2
	LONG $0x11fa8349                                 // cmp    r10, 17
	JB   LBB3_61
	WORD $0x894c; BYTE $0xf1                         // mov    rcx, r14
	LONG $0x0010b841; WORD $0x0000                   // mov    r8d, 16

LBB3_60:
	LONG $0x6f0f42f3; WORD $0x0754; BYTE $0xfa       // movdqu    xmm2, oword [rdi + r8 - 6]
	LONG $0x6f0f42f3; WORD $0x074c; BYTE $0xfd       // movdqu    xmm1, oword [rdi + r8 - 3]
	LONG $0x6f0f46f3; WORD $0x0734                   // movdqu    xmm14, oword [rdi + r8]
	LONG $0x6f0f42f3; WORD $0x0744; BYTE $0x03       // movdqu    xmm0, oword [rdi + r8 + 3]
	LONG $0x6f0f42f3; WORD $0x0764; BYTE $0x06       // movdqu    xmm4, oword [rdi + r8 + 6]
	LONG $0x6f0f42f3; WORD $0x0374; BYTE $0xfa       // movdqu    xmm6, oword [rbx + r8 - 6]
	LONG $0x6f0f42f3; WORD $0x036c; BYTE $0xfd       // movdqu    xmm5, oword [rbx + r8 - 3]
	LONG $0x6f0f42f3; WORD $0x033c                   // movdqu    xmm7, oword [rbx + r8]
	LONG $0x6f0f46f3; WORD $0x0364; BYTE $0x03       // movdqu    xmm12, oword [rbx + r8 + 3]
	LONG $0x6f0f46f3; WORD $0x035c; BYTE $0x06       // movdqu    xmm11, oword [rbx + r8 + 6]
	LONG $0x6f0f44f3; WORD $0xf441                   // movdqu    xmm8, oword [rcx - 12]
	LONG $0x6f0f44f3; WORD $0xf779                   // movdqu    xmm15, oword [rcx - 9]
	LONG $0x6f0f44f3; WORD $0xfa69                   // movdqu    xmm13, oword [rcx - 6]
	LONG $0x6f0f44f3; WORD $0xfd51                   // movdqu    xmm10, oword [rcx - 3]
	LONG $0x5c100f42; WORD $0xfa02                   // movups    xmm3, oword [rdx + r8 - 6]
	LONG $0x241c290f                                 // movaps    oword [rsp], xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xc9                     // pmaxub    xmm9, xmm1
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xde0f4166; BYTE $0xd4                     // pmaxub    xmm2, xmm12
	LONG $0x947f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm2
	LONG $0xde0f4466; BYTE $0xd9                     // pmaxub    xmm11, xmm1
	LONG $0x6f0f4166; BYTE $0xcd                     // movdqa    xmm1, xmm13
	LONG $0xda0f4166; BYTE $0xca                     // pminub    xmm1, xmm10
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xda0f4166; BYTE $0xe5                     // pminub    xmm4, xmm13
	LONG $0xde0f4566; BYTE $0xef                     // pmaxub    xmm13, xmm15
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x6f0f42f3; WORD $0x024c; BYTE $0xfd       // movdqu    xmm1, oword [rdx + r8 - 3]
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x096f0ff3                                 // movdqu    xmm1, oword [rcx]
	LONG $0x6f0f4466; BYTE $0xd1                     // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xde0f4466; BYTE $0xd3                     // pmaxub    xmm10, xmm3
	LONG $0x6f0f42f3; WORD $0x0254; BYTE $0x03       // movdqu    xmm2, oword [rdx + r8 + 3]
	LONG $0x6f0f42f3; WORD $0x024c; BYTE $0x06       // movdqu    xmm1, oword [rdx + r8 + 6]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x6f0f42f3; WORD $0x020c                   // movdqu    xmm1, oword [rdx + r8]
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4466; BYTE $0xc2                     // pminub    xmm8, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x8c7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm1
	LONG $0xde0f4466; BYTE $0xc3                     // pmaxub    xmm8, xmm3
	LONG $0x6f0f42f3; WORD $0x005c; BYTE $0xfd       // movdqu    xmm3, oword [rax + r8 - 3]
	LONG $0x6f0f42f3; WORD $0x000c                   // movdqu    xmm1, oword [rax + r8]
	LONG $0xfb6f0f66                                 // movdqa    xmm7, xmm3
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f42f3; WORD $0x004c; BYTE $0xfa       // movdqu    xmm1, oword [rax + r8 - 6]
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4566; BYTE $0xfd                     // movdqa    xmm15, xmm13
	LONG $0xda0f4466; BYTE $0xff                     // pminub    xmm15, xmm7
	LONG $0xde0f4466; BYTE $0xef                     // pmaxub    xmm13, xmm7
	LONG $0x6f0f42f3; WORD $0x007c; BYTE $0x03       // movdqu    xmm7, oword [rax + r8 + 3]
	LONG $0x6f0f42f3; WORD $0x0054; BYTE $0x06       // movdqu    xmm2, oword [rax + r8 + 6]
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0x7f0f4466; LONG $0x00b024b4; WORD $0x0000 // movdqa    oword [rsp + 176], xmm14
	LONG $0xd6de0f66                                 // pmaxub    xmm2, xmm6
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x70       // movdqa    xmm9, oword [rsp + 112]
	LONG $0x6f0f4166; BYTE $0xf1                     // movdqa    xmm6, xmm9
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0x947f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm2
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0xb47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm6
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x40       // movdqa    xmm9, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm0
	LONG $0x6f0f4166; BYTE $0xd4                     // movdqa    xmm2, xmm12
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0xac6f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0x7f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    oword [rsp + 144], xmm10
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x546f0f66; WORD $0x6024                   // movdqa    xmm2, oword [rsp + 96]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x6f0f4466; LONG $0x008024a4; WORD $0x0000 // movdqa    xmm12, oword [rsp + 128]
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xde0f4466; BYTE $0xdc                     // pmaxub    xmm11, xmm4
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x846f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xf8                     // movdqa    xmm15, xmm0
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4466; BYTE $0xfc                     // pmaxub    xmm15, xmm4
	LONG $0x6f0f4566; BYTE $0xe5                     // movdqa    xmm12, xmm13
	LONG $0xda0f4466; BYTE $0xe7                     // pminub    xmm12, xmm7
	LONG $0xde0f4166; BYTE $0xfd                     // pmaxub    xmm7, xmm13
	LONG $0x6f0f4166; BYTE $0xe0                     // movdqa    xmm4, xmm8
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xec                     // movdqa    xmm13, xmm4
	LONG $0xda0f4566; BYTE $0xec                     // pminub    xmm13, xmm12
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x746f0f66; WORD $0x5024                   // movdqa    xmm6, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3                     // pminub    xmm8, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x6f0f4566; BYTE $0xe2                     // movdqa    xmm12, xmm10
	LONG $0xda0f4566; BYTE $0xe5                     // pminub    xmm12, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4466; LONG $0x00c02494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x847f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm0
	LONG $0xde0f4166; BYTE $0xf4                     // pmaxub    xmm6, xmm12
	LONG $0x747f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm6
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x846f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4566; BYTE $0xe0                     // pminub    xmm12, xmm8
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4566; BYTE $0xf9                     // pmaxub    xmm15, xmm9
	LONG $0x846f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xc8                     // movdqa    xmm9, xmm0
	LONG $0xda0f4566; BYTE $0xcf                     // pminub    xmm9, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0x946f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdb                     // pmaxub    xmm3, xmm11
	LONG $0x5cda0f66; WORD $0x7024                   // pminub    xmm3, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xdb                     // movdqa    xmm11, xmm3
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf1da0f66                                 // pminub    xmm6, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0x6f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 144]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xfa                     // pmaxub    xmm7, xmm10
	LONG $0x7cda0f66; WORD $0x1024                   // pminub    xmm7, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xd7                     // movdqa    xmm10, xmm7
	LONG $0xda0f4466; BYTE $0xd6                     // pminub    xmm10, xmm6
	LONG $0xfede0f66                                 // pmaxub    xmm7, xmm6
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0x74da0f66; WORD $0x4024                   // pminub    xmm6, oword [rsp + 64]
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0x4c6f0f66; WORD $0x6024                   // movdqa    xmm1, oword [rsp + 96]
	LONG $0x4cde0f66; WORD $0x5024                   // pmaxub    xmm1, oword [rsp + 80]
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4566; BYTE $0xdc                     // pmaxub    xmm11, xmm12
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0xde0f4566; BYTE $0xd6                     // pmaxub    xmm10, xmm14
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xda                     // pmaxub    xmm3, xmm10
	LONG $0xda0f4166; BYTE $0xdb                     // pminub    xmm3, xmm11
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd5                     // pminub    xmm2, xmm13
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4166; BYTE $0xd7                     // pmaxub    xmm2, xmm15
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x7f0f43f3; WORD $0x0114                   // movdqu    oword [r9 + r8], xmm2
	LONG $0x10c08349                                 // add    r8, 16
	LONG $0x10c18348                                 // add    rcx, 16
	WORD $0x394d; BYTE $0xd0                         // cmp    r8, r10
	JB   LBB3_60

LBB3_61:
	LONG $0x6f0f42f3; WORD $0x2f4c; BYTE $0xf0       // movdqu    xmm1, oword [rdi + r13 - 16]
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xef0f4566; BYTE $0xc9                     // pxor    xmm9, xmm9
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0x680f4566; BYTE $0xe9                     // punpckhbw    xmm13, xmm9
	LONG $0x700f4166; WORD $0x27cd                   // pshufd    xmm1, xmm13, 39
	LONG $0x730f4166; WORD $0x0afd                   // pslldq    xmm13, 10
	LONG $0xeb0f4466; BYTE $0xe8                     // por    xmm13, xmm0
	LONG $0xc1700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm1, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0x670f4466; BYTE $0xe8                     // packuswb    xmm13, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x6f0f4166; BYTE $0xd5                     // movdqa    xmm2, xmm13
	LONG $0x680f4166; BYTE $0xd1                     // punpckhbw    xmm2, xmm9
	LONG $0xca700f66; BYTE $0x27                     // pshufd    xmm1, xmm2, 39
	LONG $0xfa730f66; BYTE $0x0a                     // pslldq    xmm2, 10
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc1700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm1, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0xd0670f66                                 // packuswb    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f42f3; WORD $0x2b4c; BYTE $0xed       // movdqu    xmm1, oword [rbx + r13 - 19]
	LONG $0x6f0f42f3; WORD $0x2b44; BYTE $0xf0       // movdqu    xmm0, oword [rbx + r13 - 16]
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x680f4166; BYTE $0xf9                     // punpckhbw    xmm7, xmm9
	LONG $0xd7700f66; BYTE $0x27                     // pshufd    xmm2, xmm7, 39
	LONG $0xff730f66; BYTE $0x0a                     // pslldq    xmm7, 10
	LONG $0xf8eb0f66                                 // por    xmm7, xmm0
	LONG $0xc2700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0xf8670f66                                 // packuswb    xmm7, xmm0
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x6f0f4466; BYTE $0xe7                     // movdqa    xmm12, xmm7
	LONG $0x680f4566; BYTE $0xe1                     // punpckhbw    xmm12, xmm9
	LONG $0x700f4166; WORD $0x27d4                   // pshufd    xmm2, xmm12, 39
	LONG $0x730f4166; WORD $0x0afc                   // pslldq    xmm12, 10
	LONG $0xeb0f4466; BYTE $0xe0                     // por    xmm12, xmm0
	LONG $0xc2700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0x670f4466; BYTE $0xe0                     // packuswb    xmm12, xmm0
	LONG $0x6f0f47f3; WORD $0x2f74; BYTE $0xf0       // movdqu    xmm14, oword [r15 + r13 - 16]
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0x680f4166; BYTE $0xd9                     // punpckhbw    xmm3, xmm9
	LONG $0xd3700f66; BYTE $0x27                     // pshufd    xmm2, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0a                     // pslldq    xmm3, 10
	LONG $0xd8eb0f66                                 // por    xmm3, xmm0
	LONG $0xc2700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0xd8670f66                                 // packuswb    xmm3, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x6f0f4466; BYTE $0xfb                     // movdqa    xmm15, xmm3
	LONG $0x680f4566; BYTE $0xf9                     // punpckhbw    xmm15, xmm9
	LONG $0x700f4166; WORD $0x27d7                   // pshufd    xmm2, xmm15, 39
	LONG $0x730f4166; WORD $0x0aff                   // pslldq    xmm15, 10
	LONG $0xeb0f4466; BYTE $0xf8                     // por    xmm15, xmm0
	LONG $0xc2700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0x670f4466; BYTE $0xf8                     // packuswb    xmm15, xmm0
	LONG $0x6f0f42f3; WORD $0x2a4c; BYTE $0xf0       // movdqu    xmm1, oword [rdx + r13 - 16]
	LONG $0x4c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm1
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0x680f4166; BYTE $0xd1                     // punpckhbw    xmm2, xmm9
	LONG $0xe2700f66; BYTE $0x27                     // pshufd    xmm4, xmm2, 39
	LONG $0xfa730f66; BYTE $0x0a                     // pslldq    xmm2, 10
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc4700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm4, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0xd0670f66                                 // packuswb    xmm2, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0x680f4166; BYTE $0xe1                     // punpckhbw    xmm4, xmm9
	LONG $0xec700f66; BYTE $0x27                     // pshufd    xmm5, xmm4, 39
	LONG $0xfc730f66; BYTE $0x0a                     // pslldq    xmm4, 10
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc5700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm5, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0xe0670f66                                 // packuswb    xmm4, xmm0
	LONG $0x6f0f46f3; WORD $0x2854; BYTE $0xed       // movdqu    xmm10, oword [rax + r13 - 19]
	LONG $0x6f0f42f3; WORD $0x2844; BYTE $0xf0       // movdqu    xmm0, oword [rax + r13 - 16]
	LONG $0x6f0f4566; BYTE $0xda                     // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0x6f0f4466; BYTE $0xc0                     // movdqa    xmm8, xmm0
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x680f4566; BYTE $0xc1                     // punpckhbw    xmm8, xmm9
	LONG $0x700f4166; WORD $0x27f0                   // pshufd    xmm6, xmm8, 39
	LONG $0x730f4166; WORD $0x0af8                   // pslldq    xmm8, 10
	LONG $0xeb0f4466; BYTE $0xc0                     // por    xmm8, xmm0
	LONG $0xc6700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm6, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0x670f4466; BYTE $0xc0                     // packuswb    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0x600f4166; BYTE $0xf1                     // punpcklbw    xmm6, xmm9
	LONG $0xde730f66; BYTE $0x06                     // psrldq    xmm6, 6
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0x680f4166; BYTE $0xc9                     // punpckhbw    xmm1, xmm9
	LONG $0x700f4466; WORD $0x27c9                   // pshufd    xmm9, xmm1, 39
	LONG $0xf9730f66; BYTE $0x0a                     // pslldq    xmm1, 10
	LONG $0xceeb0f66                                 // por    xmm1, xmm6
	LONG $0x700f41f2; WORD $0x4cf1                   // pshuflw    xmm6, xmm9, 76
	LONG $0xf6700f66; BYTE $0x68                     // pshufd    xmm6, xmm6, 104
	LONG $0xf6700ff2; BYTE $0x39                     // pshuflw    xmm6, xmm6, 57
	LONG $0xf6700ff3; BYTE $0xe7                     // pshufhw    xmm6, xmm6, 231
	LONG $0xce670f66                                 // packuswb    xmm1, xmm6
	LONG $0x6f0f42f3; WORD $0x2f44; BYTE $0xea       // movdqu    xmm0, oword [rdi + r13 - 22]
	LONG $0x6f0f42f3; WORD $0x2f74; BYTE $0xed       // movdqu    xmm6, oword [rdi + r13 - 19]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeeda0f66                                 // pminub    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0xc6de0f66                                 // pmaxub    xmm0, xmm6
	LONG $0x847f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm0
	LONG $0x6f0f4166; BYTE $0xf5                     // movdqa    xmm6, xmm13
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x6c6f0f66; WORD $0x2024                   // movdqa    xmm5, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0x847f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm0
	LONG $0xde0f4466; BYTE $0xce                     // pmaxub    xmm9, xmm6
	LONG $0x6f0f46f3; WORD $0x2b6c; BYTE $0xea       // movdqu    xmm13, oword [rbx + r13 - 22]
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0xf56f0f66                                 // movdqa    xmm6, xmm5
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0x747f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm6
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm5
	LONG $0x6f0f43f3; WORD $0x2f74; BYTE $0xea       // movdqu    xmm6, oword [r15 + r13 - 22]
	LONG $0x6f0f4566; BYTE $0xec                     // movdqa    xmm13, xmm12
	LONG $0xda0f4466; BYTE $0xee                     // pminub    xmm13, xmm6
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xf76f0f66                                 // movdqa    xmm6, xmm7
	LONG $0xda0f4166; BYTE $0xf4                     // pminub    xmm6, xmm12
	LONG $0xde0f4466; BYTE $0xe7                     // pmaxub    xmm12, xmm7
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc5                     // pminub    xmm0, xmm13
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4166; BYTE $0xf5                     // pmaxub    xmm6, xmm13
	LONG $0x6f0f4566; BYTE $0xee                     // movdqa    xmm13, xmm14
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xde0f4166; BYTE $0xde                     // pmaxub    xmm3, xmm14
	LONG $0x6f0f43f3; WORD $0x2f6c; BYTE $0xed       // movdqu    xmm5, oword [r15 + r13 - 19]
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xed                     // pminub    xmm5, xmm13
	LONG $0xac7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm5
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x6f0f42f3; WORD $0x2a6c; BYTE $0xea       // movdqu    xmm5, oword [rdx + r13 - 22]
	LONG $0x6f0f46f3; WORD $0x2a6c; BYTE $0xed       // movdqu    xmm13, oword [rdx + r13 - 19]
	LONG $0x6f0f4466; BYTE $0xf5                     // movdqa    xmm14, xmm5
	LONG $0xda0f4566; BYTE $0xf5                     // pminub    xmm14, xmm13
	LONG $0xde0f4166; BYTE $0xed                     // pmaxub    xmm5, xmm13
	LONG $0x6f0f4566; BYTE $0xef                     // movdqa    xmm13, xmm15
	LONG $0xda0f4466; BYTE $0xed                     // pminub    xmm13, xmm5
	LONG $0xde0f4166; BYTE $0xef                     // pmaxub    xmm5, xmm15
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0xda0f4166; BYTE $0xee                     // pminub    xmm5, xmm14
	LONG $0xde0f4566; BYTE $0xee                     // pmaxub    xmm13, xmm14
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4466; BYTE $0xfc                     // pminub    xmm15, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x546f0f66; WORD $0x4024                   // movdqa    xmm2, oword [rsp + 64]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0x947f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm2
	LONG $0xde0f4566; BYTE $0xf7                     // pmaxub    xmm14, xmm15
	LONG $0x6f0f42f3; WORD $0x2854; BYTE $0xea       // movdqu    xmm2, oword [rax + r13 - 22]
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4566; BYTE $0xfa                     // pminub    xmm15, xmm10
	LONG $0xde0f4466; BYTE $0xd2                     // pmaxub    xmm10, xmm2
	LONG $0x6f0f4166; BYTE $0xd7                     // movdqa    xmm2, xmm15
	LONG $0xda0f4166; BYTE $0xd3                     // pminub    xmm2, xmm11
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xde0f4566; BYTE $0xfb                     // pmaxub    xmm15, xmm11
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xc8                     // pmaxub    xmm1, xmm8
	LONG $0xbc6f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xdf                     // movdqa    xmm11, xmm7
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    xmm8, oword [rsp + 32]
	LONG $0xda0f4566; BYTE $0xd8                     // pminub    xmm11, xmm8
	LONG $0x7f0f4466; LONG $0x0080249c; WORD $0x0000 // movdqa    oword [rsp + 128], xmm11
	LONG $0xde0f4466; BYTE $0xc7                     // pmaxub    xmm8, xmm7
	LONG $0x7f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    oword [rsp + 32], xmm8
	LONG $0x6f0f4566; BYTE $0xc1                     // movdqa    xmm8, xmm9
	LONG $0x6f0f4466; WORD $0x245c; BYTE $0x30       // movdqa    xmm11, oword [rsp + 48]
	LONG $0xda0f4566; BYTE $0xc3                     // pminub    xmm8, xmm11
	LONG $0xde0f4566; BYTE $0xd9                     // pmaxub    xmm11, xmm9
	LONG $0x7c6f0f66; WORD $0x7024                   // movdqa    xmm7, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xcb                     // pminub    xmm9, xmm11
	LONG $0xde0f4466; BYTE $0xdf                     // pmaxub    xmm11, xmm7
	LONG $0x7f0f4466; WORD $0x245c; BYTE $0x30       // movdqa    oword [rsp + 48], xmm11
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0xbc7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm7
	LONG $0xde0f4566; BYTE $0xc8                     // pmaxub    xmm9, xmm8
	LONG $0x7f0f4466; LONG $0x0090248c; WORD $0x0000 // movdqa    oword [rsp + 144], xmm9
	LONG $0x7c6f0f66; WORD $0x1024                   // movdqa    xmm7, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0x6f0f4466; WORD $0x240c                   // movdqa    xmm9, oword [rsp]
	LONG $0xda0f4566; BYTE $0xc1                     // pminub    xmm8, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0xbc6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xdf                     // movdqa    xmm11, xmm7
	LONG $0xda0f4566; BYTE $0xd9                     // pminub    xmm11, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0x7f0f4466; WORD $0x240c                   // movdqa    oword [rsp], xmm9
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0x7c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm7
	LONG $0xde0f4566; BYTE $0xd8                     // pmaxub    xmm11, xmm8
	LONG $0x7f0f4466; LONG $0x00b0249c; WORD $0x0000 // movdqa    oword [rsp + 176], xmm11
	LONG $0xbc6f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 192]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0x7c6f0f66; WORD $0x6024                   // movdqa    xmm7, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4466; BYTE $0xcd                     // pminub    xmm9, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0xbc7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm7
	LONG $0xde0f4566; BYTE $0xc8                     // pmaxub    xmm9, xmm8
	LONG $0x6f0f4466; BYTE $0xd8                     // movdqa    xmm11, xmm0
	LONG $0xda0f4566; BYTE $0xdd                     // pminub    xmm11, xmm13
	LONG $0xde0f4466; BYTE $0xe8                     // pmaxub    xmm13, xmm0
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4566; BYTE $0xc5                     // pminub    xmm8, xmm13
	LONG $0xde0f4466; BYTE $0xee                     // pmaxub    xmm13, xmm6
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xda0f4166; BYTE $0xc3                     // pminub    xmm0, xmm11
	LONG $0xde0f4566; BYTE $0xc3                     // pmaxub    xmm8, xmm11
	LONG $0xf36f0f66                                 // movdqa    xmm6, xmm3
	LONG $0x6f0f4466; LONG $0x00e024ac; WORD $0x0000 // movdqa    xmm13, oword [rsp + 224]
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4466; BYTE $0xeb                     // pmaxub    xmm13, xmm3
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4566; BYTE $0xdd                     // pminub    xmm11, xmm13
	LONG $0xde0f4566; BYTE $0xec                     // pmaxub    xmm13, xmm12
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xfeda0f66                                 // pminub    xmm7, xmm6
	LONG $0xde0f4466; BYTE $0xde                     // pmaxub    xmm11, xmm6
	LONG $0x6c6f0f66; WORD $0x4024                   // movdqa    xmm5, oword [rsp + 64]
	LONG $0xdd6f0f66                                 // movdqa    xmm3, xmm5
	LONG $0x6f0f4466; BYTE $0xe2                     // movdqa    xmm12, xmm2
	LONG $0xda0f4166; BYTE $0xdc                     // pminub    xmm3, xmm12
	LONG $0xde0f4466; BYTE $0xe5                     // pmaxub    xmm12, xmm5
	LONG $0xb46f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 208]
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xda0f4166; BYTE $0xec                     // pminub    xmm5, xmm12
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xf56f0f66                                 // movdqa    xmm6, xmm5
	LONG $0xf3da0f66                                 // pminub    xmm6, xmm3
	LONG $0x747f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm6
	LONG $0xebde0f66                                 // pmaxub    xmm5, xmm3
	LONG $0x6f0f4166; BYTE $0xf7                     // movdqa    xmm6, xmm15
	LONG $0xf1da0f66                                 // pminub    xmm6, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xce                     // pmaxub    xmm1, xmm14
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xda0f4166; BYTE $0xf2                     // pminub    xmm6, xmm10
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x846f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 160]
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0x84de0f66; LONG $0x0000c024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 192]
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0xde0f4166; BYTE $0xe6                     // pmaxub    xmm4, xmm14
	LONG $0xa47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm4
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xf7de0f66                                 // pmaxub    xmm6, xmm7
	LONG $0x546f0f66; WORD $0x5024                   // movdqa    xmm2, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf6                     // pminub    xmm14, xmm6
	LONG $0xf2de0f66                                 // pmaxub    xmm6, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x946f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 128]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6f0f4466; BYTE $0xfd                     // movdqa    xmm15, xmm5
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0xa47f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm4
	LONG $0x846f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 144]
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe3da0f66                                 // pminub    xmm4, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xda0f4166; BYTE $0xfa                     // pminub    xmm7, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xda0f4466; LONG $0x00b02494; WORD $0x0000 // pminub    xmm10, oword [rsp + 176]
	LONG $0x6f0f4566; BYTE $0xca                     // movdqa    xmm9, xmm10
	LONG $0xda0f4466; BYTE $0xcf                     // pminub    xmm9, xmm7
	LONG $0xde0f4466; BYTE $0xd7                     // pmaxub    xmm10, xmm7
	LONG $0x546f0f66; WORD $0x7024                   // movdqa    xmm2, oword [rsp + 112]
	LONG $0xfa6f0f66                                 // movdqa    xmm7, xmm2
	LONG $0xda0f4166; BYTE $0xfc                     // pminub    xmm7, xmm12
	LONG $0xde0f4466; BYTE $0xe2                     // pmaxub    xmm12, xmm2
	LONG $0x546f0f66; WORD $0x2024                   // movdqa    xmm2, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xda                     // movdqa    xmm11, xmm2
	LONG $0xda0f4566; BYTE $0xdc                     // pminub    xmm11, xmm12
	LONG $0xde0f4466; BYTE $0xe2                     // pmaxub    xmm12, xmm2
	LONG $0x6f0f4566; BYTE $0xc3                     // movdqa    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc7                     // pminub    xmm8, xmm7
	LONG $0xde0f4466; BYTE $0xdf                     // pmaxub    xmm11, xmm7
	LONG $0x6c6f0f66; WORD $0x6024                   // movdqa    xmm5, oword [rsp + 96]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xcdde0f66                                 // pmaxub    xmm1, xmm5
	LONG $0x4cda0f66; WORD $0x3024                   // pminub    xmm1, oword [rsp + 48]
	LONG $0xf96f0f66                                 // movdqa    xmm7, xmm1
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xda0f4466; WORD $0x242c                   // pminub    xmm13, oword [rsp]
	LONG $0xda0f4466; BYTE $0xee                     // pminub    xmm13, xmm6
	LONG $0xda0f4466; BYTE $0xd3                     // pminub    xmm10, xmm3
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xda0f4566; BYTE $0xd5                     // pminub    xmm10, xmm13
	LONG $0xda0f4466; BYTE $0xd1                     // pminub    xmm10, xmm1
	LONG $0x4c6f0f66; WORD $0x5024                   // movdqa    xmm1, oword [rsp + 80]
	LONG $0x8cde0f66; LONG $0x0000a024; BYTE $0x00   // pmaxub    xmm1, oword [rsp + 160]
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xde0f4466; WORD $0x2444; BYTE $0x10       // pmaxub    xmm8, oword [rsp + 16]
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0xde0f4466; BYTE $0xc1                     // pmaxub    xmm8, xmm1
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xda0f4166; BYTE $0xc6                     // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xce                     // pmaxub    xmm9, xmm14
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xfcde0f66                                 // pmaxub    xmm7, xmm4
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xda0f4166; BYTE $0xd3                     // pminub    xmm2, xmm11
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4466; BYTE $0xd7                     // pmaxub    xmm10, xmm7
	LONG $0xda0f4566; BYTE $0xd1                     // pminub    xmm10, xmm9
	LONG $0xef0f4566; BYTE $0xf6                     // pxor    xmm14, xmm14
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xde0f4166; BYTE $0xc0                     // pmaxub    xmm0, xmm8
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0x646f0f66; WORD $0x4024                   // movdqa    xmm4, oword [rsp + 64]
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc7                     // pminub    xmm0, xmm15
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x7f0f43f3; WORD $0x294c; BYTE $0xf0       // movdqu    oword [r9 + r13 - 16], xmm1
	WORD $0xff49; BYTE $0xc4                         // inc    r12
	LONG $0x248c034c; LONG $0x00000160               // add    r9, qword 352[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                         // add    r14, rsi
	LONG $0x24a43b4c; LONG $0x000000f0               // cmp    r12, qword [rsp + 240]
	JNE  LBB3_58
	JMP  LBB3_62

LBB3_13:
	LONG $0x03f88349                               // cmp    r8, 3
	JE   LBB3_27
	LONG $0x04f88349                               // cmp    r8, 4
	JNE  LBB3_62
	LONG $0x24bc8348; LONG $0x000000f0; BYTE $0x00 // cmp    qword [rsp + 240], 0
	JE   LBB3_62
	LONG $0x95248d4c; LONG $0xffffffff             // lea    r12, [4*rdx - 1]
	LONG $0x02e2c148                               // shl    rdx, 2
	LONG $0xf0e48349                               // and    r12, -16
	LONG $0x24848b48; LONG $0x000000f0             // mov    rax, qword [rsp + 240]
	LONG $0xfe488d48                               // lea    rcx, [rax - 2]
	LONG $0x248c8948; LONG $0x00000100             // mov    qword [rsp + 256], rcx
	WORD $0xff48; BYTE $0xc8                       // dec    rax
	LONG $0x24848948; LONG $0x00000110             // mov    qword [rsp + 272], rax
	LONG $0x24848b48; LONG $0x000000f8             // mov    rax, qword [rsp + 248]
	LONG $0x18708d4c                               // lea    r14, [rax + 24]
	WORD $0x3145; BYTE $0xff                       // xor    r15d, r15d

LBB3_17:
	LONG $0xfe4f8d49                                 // lea    rcx, [r15 - 2]
	LONG $0xceaf0f48                                 // imul    rcx, rsi
	LONG $0x248c0348; LONG $0x000000f8               // add    rcx, qword [rsp + 248]
	LONG $0x311c8d4c                                 // lea    r11, [rcx + rsi]
	LONG $0x33148d4d                                 // lea    r10, [r11 + rsi]
	LONG $0x32048d4d                                 // lea    r8, [r10 + rsi]
	WORD $0x854d; BYTE $0xff                         // test    r15, r15
	WORD $0x894d; BYTE $0xdd                         // mov    r13, r11
	LONG $0x6f0f4266; WORD $0x1e1c                   // movdqa    xmm3, oword [rsi + r11]
	LONG $0x6f0f42f3; WORD $0x1e6c; BYTE $0x04       // movdqu    xmm5, oword [rsi + r11 + 4]
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	WORD $0x894c; BYTE $0xd8                         // mov    rax, r11
	LONG $0xc2440f49                                 // cmove    rax, r10
	LONG $0x02ff8349                                 // cmp    r15, 2
	LONG $0xe8420f4c                                 // cmovb    r13, rax
	LONG $0xc1430f48                                 // cmovae    rax, rcx
	LONG $0x24bc3b4c; LONG $0x00000110               // cmp    r15, qword [rsp + 272]
	WORD $0x894c; BYTE $0xd1                         // mov    rcx, r10
	LONG $0xc8420f49                                 // cmovb    rcx, r8
	LONG $0x24bc3b4c; LONG $0x00000100               // cmp    r15, qword [rsp + 256]
	WORD $0x8948; BYTE $0xcb                         // mov    rbx, rcx
	LONG $0xd8420f49                                 // cmovb    rbx, r8
	WORD $0x280f; BYTE $0x00                         // movaps    xmm0, oword [rax]
	WORD $0x570f; BYTE $0xf6                         // xorps    xmm6, xmm6
	LONG $0xf0100ff3                                 // movss    xmm6, xmm0
	LONG $0x486f0ff3; BYTE $0x04                     // movdqu    xmm1, oword [rax + 4]
	LONG $0x6f0f44f3; WORD $0x0868                   // movdqu    xmm13, oword [rax + 8]
	LONG $0x6f0f4466; BYTE $0xf1                     // movdqa    xmm14, xmm1
	LONG $0xde0f4166; BYTE $0xcd                     // pmaxub    xmm1, xmm13
	WORD $0x280f; BYTE $0xd0                         // movaps    xmm2, xmm0
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm1
	LONG $0xf8730f66; BYTE $0x04                     // pslldq    xmm0, 4
	WORD $0x560f; BYTE $0xf0                         // orps    xmm6, xmm0
	WORD $0x280f; BYTE $0xc6                         // movaps    xmm0, xmm6
	LONG $0xf8730f66; BYTE $0x04                     // pslldq    xmm0, 4
	LONG $0xc9ef0f66                                 // pxor    xmm1, xmm1
	LONG $0xce100ff3                                 // movss    xmm1, xmm6
	WORD $0x560f; BYTE $0xc8                         // orps    xmm1, xmm0
	LONG $0xe1280f44                                 // movaps    xmm12, xmm1
	LONG $0x6f0f4566; WORD $0x007d                   // movdqa    xmm15, oword [r13]
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xf8730f66; BYTE $0x04                     // pslldq    xmm0, 4
	WORD $0x570f; BYTE $0xc9                         // xorps    xmm1, xmm1
	LONG $0x100f41f3; BYTE $0xcf                     // movss    xmm1, xmm15
	WORD $0x560f; BYTE $0xc8                         // orps    xmm1, xmm0
	LONG $0x240c290f                                 // movaps    oword [rsp], xmm1
	WORD $0x280f; BYTE $0xc1                         // movaps    xmm0, xmm1
	LONG $0xf8730f66; BYTE $0x04                     // pslldq    xmm0, 4
	LONG $0xd2570f45                                 // xorps    xmm10, xmm10
	LONG $0x100f44f3; BYTE $0xd1                     // movss    xmm10, xmm1
	LONG $0xd0560f44                                 // orps    xmm10, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xf8730f66; BYTE $0x04                     // pslldq    xmm0, 4
	WORD $0x570f; BYTE $0xc9                         // xorps    xmm1, xmm1
	LONG $0xcb100ff3                                 // movss    xmm1, xmm3
	WORD $0x560f; BYTE $0xc8                         // orps    xmm1, xmm0
	WORD $0x570f; BYTE $0xe4                         // xorps    xmm4, xmm4
	LONG $0xe1100ff3                                 // movss    xmm4, xmm1
	LONG $0x245c290f; BYTE $0x30                     // movaps    oword [rsp + 48], xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	WORD $0x280f; BYTE $0xc1                         // movaps    xmm0, xmm1
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x9c7f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm3
	LONG $0xf9730f66; BYTE $0x04                     // pslldq    xmm1, 4
	WORD $0x560f; BYTE $0xe1                         // orps    xmm4, xmm1
	WORD $0x280f; BYTE $0x0b                         // movaps    xmm1, oword [rbx]
	LONG $0xc0570f45                                 // xorps    xmm8, xmm8
	LONG $0x100f44f3; BYTE $0xc1                     // movss    xmm8, xmm1
	LONG $0x436f0ff3; BYTE $0x04                     // movdqu    xmm0, oword [rbx + 4]
	LONG $0x5b6f0ff3; BYTE $0x08                     // movdqu    xmm3, oword [rbx + 8]
	LONG $0x9c7f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm3
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	WORD $0x280f; BYTE $0xd9                         // movaps    xmm3, xmm1
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0x5c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm3
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x847f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm0
	LONG $0xf9730f66; BYTE $0x04                     // pslldq    xmm1, 4
	LONG $0xc1560f44                                 // orps    xmm8, xmm1
	LONG $0xc8280f41                                 // movaps    xmm1, xmm8
	LONG $0xf9730f66; BYTE $0x04                     // pslldq    xmm1, 4
	LONG $0xdbef0f66                                 // pxor    xmm3, xmm3
	LONG $0x100f41f3; BYTE $0xd8                     // movss    xmm3, xmm8
	WORD $0x560f; BYTE $0xd9                         // orps    xmm3, xmm1
	LONG $0x303c8d49                                 // lea    rdi, [r8 + rsi]
	LONG $0xcf420f48                                 // cmovb    rcx, rdi
	LONG $0x396f0f66                                 // movdqa    xmm7, oword [rcx]
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0x730f4166; WORD $0x04f9                   // pslldq    xmm9, 4
	WORD $0x570f; BYTE $0xc9                         // xorps    xmm1, xmm1
	LONG $0xcf100ff3                                 // movss    xmm1, xmm7
	LONG $0xc9560f41                                 // orps    xmm1, xmm9
	LONG $0xc9280f44                                 // movaps    xmm9, xmm1
	LONG $0x730f4166; WORD $0x04f9                   // pslldq    xmm9, 4
	LONG $0xdb570f45                                 // xorps    xmm11, xmm11
	LONG $0x100f44f3; BYTE $0xd9                     // movss    xmm11, xmm1
	LONG $0xd9560f45                                 // orps    xmm11, xmm9
	LONG $0xcc280f45                                 // movaps    xmm9, xmm12
	LONG $0xda0f4466; BYTE $0xce                     // pminub    xmm9, xmm6
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0x7f0f4466; LONG $0x008024a4; WORD $0x0000 // movdqa    oword [rsp + 128], xmm12
	LONG $0xda0f4566; BYTE $0xf5                     // pminub    xmm14, xmm13
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x447f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm0
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xda0f4166; BYTE $0xf7                     // pminub    xmm6, xmm15
	LONG $0xde0f4166; BYTE $0xc7                     // pmaxub    xmm0, xmm15
	LONG $0xf2280f45                                 // movaps    xmm14, xmm10
	LONG $0xda0f4466; BYTE $0xf0                     // pminub    xmm14, xmm0
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0x6f0f4566; BYTE $0xe6                     // movdqa    xmm12, xmm14
	LONG $0xda0f4466; BYTE $0xe6                     // pminub    xmm12, xmm6
	LONG $0xde0f4466; BYTE $0xf6                     // pmaxub    xmm14, xmm6
	LONG $0x6f0f41f3; WORD $0x0875                   // movdqu    xmm6, oword [r13 + 8]
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe6de0f66                                 // pmaxub    xmm4, xmm6
	LONG $0x6f0f41f3; WORD $0x0475                   // movdqu    xmm6, oword [r13 + 4]
	LONG $0x6f0f4466; BYTE $0xd6                     // movdqa    xmm10, xmm6
	LONG $0xda0f4466; BYTE $0xd4                     // pminub    xmm10, xmm4
	LONG $0xe6de0f66                                 // pmaxub    xmm4, xmm6
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0x6f0f4466; WORD $0x246c; BYTE $0x30       // movdqa    xmm13, oword [rsp + 48]
	LONG $0xda0f4466; WORD $0x246c; BYTE $0x40       // pminub    xmm13, oword [rsp + 64]
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xf8                     // movdqa    xmm15, xmm0
	LONG $0xda0f4566; BYTE $0xfd                     // pminub    xmm15, xmm13
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	WORD $0x280f; BYTE $0xc3                         // movaps    xmm0, xmm3
	LONG $0xda0f4166; BYTE $0xc0                     // pminub    xmm0, xmm8
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0x6f0f46f3; WORD $0x1e44; BYTE $0x08       // movdqu    xmm8, oword [rsi + r11 + 8]
	LONG $0x6f0f4566; BYTE $0xe8                     // movdqa    xmm13, xmm8
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0x6c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm5
	LONG $0xde0f4466; BYTE $0xe8                     // pmaxub    xmm13, xmm0
	LONG $0x6c6f0f66; WORD $0x6024                   // movdqa    xmm5, oword [rsp + 96]
	LONG $0xacda0f66; LONG $0x0000b024; BYTE $0x00   // pminub    xmm5, oword [rsp + 176]
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    xmm8, oword [rsp + 32]
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xde0f4466; BYTE $0xc5                     // pmaxub    xmm8, xmm5
	LONG $0x7f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    oword [rsp + 32], xmm8
	WORD $0x280f; BYTE $0xc1                         // movaps    xmm0, xmm1
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xcfde0f66                                 // pmaxub    xmm1, xmm7
	LONG $0xc3280f45                                 // movaps    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc1                     // pminub    xmm8, xmm1
	LONG $0xde0f4166; BYTE $0xcb                     // pmaxub    xmm1, xmm11
	LONG $0x6f0f4566; BYTE $0xd8                     // movdqa    xmm11, xmm8
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0x696f0ff3; BYTE $0x04                     // movdqu    xmm5, oword [rcx + 4]
	LONG $0x416f0ff3; BYTE $0x08                     // movdqu    xmm0, oword [rcx + 8]
	LONG $0xfd6f0f66                                 // movdqa    xmm7, xmm5
	LONG $0xf8da0f66                                 // pminub    xmm7, xmm0
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xda0f4166; BYTE $0xc4                     // pminub    xmm0, xmm12
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4466; BYTE $0xe2                     // pmaxub    xmm12, xmm2
	LONG $0x7f0f4466; LONG $0x00b024a4; WORD $0x0000 // movdqa    oword [rsp + 176], xmm12
	LONG $0x446f0f66; WORD $0x5024                   // movdqa    xmm0, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4566; BYTE $0xe6                     // pminub    xmm12, xmm14
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xda0f4166; BYTE $0xc6                     // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xf1                     // pmaxub    xmm14, xmm9
	LONG $0x7f0f4466; WORD $0x2474; BYTE $0x40       // movdqa    oword [rsp + 64], xmm14
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd4                     // pminub    xmm2, xmm12
	LONG $0x947f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm2
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x447f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm0
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x70       // movdqa    xmm9, oword [rsp + 112]
	LONG $0x6f0f4566; BYTE $0xe1                     // movdqa    xmm12, xmm9
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0xda0f4466; BYTE $0xe2                     // pminub    xmm12, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x6f0f4466; LONG $0x0080248c; WORD $0x0000 // movdqa    xmm9, oword [rsp + 128]
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd4                     // pminub    xmm2, xmm12
	LONG $0x547f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm2
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x847f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm0
	LONG $0x6f0f4566; BYTE $0xcf                     // movdqa    xmm9, xmm15
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xca                     // pminub    xmm9, xmm2
	LONG $0xde0f4166; BYTE $0xd7                     // pmaxub    xmm2, xmm15
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xd6de0f66                                 // pmaxub    xmm2, xmm6
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd1                     // pminub    xmm2, xmm9
	LONG $0x947f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm2
	LONG $0xde0f4166; BYTE $0xc1                     // pmaxub    xmm0, xmm9
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4466; BYTE $0xea                     // pmaxub    xmm13, xmm2
	LONG $0x6f0f4566; BYTE $0xf2                     // movdqa    xmm14, xmm10
	LONG $0xda0f4566; BYTE $0xf5                     // pminub    xmm14, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4566; BYTE $0xd6                     // movdqa    xmm10, xmm14
	LONG $0xda0f4466; BYTE $0xd6                     // pminub    xmm10, xmm6
	LONG $0xde0f4466; BYTE $0xf6                     // pmaxub    xmm14, xmm6
	LONG $0x946f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 144]
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xf3da0f66                                 // pminub    xmm6, xmm3
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0x6f0f4466; BYTE $0xcc                     // movdqa    xmm9, xmm4
	LONG $0xda0f4466; BYTE $0xcb                     // pminub    xmm9, xmm3
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0x6f0f4166; BYTE $0xe1                     // movdqa    xmm4, xmm9
	LONG $0xe6da0f66                                 // pminub    xmm4, xmm6
	LONG $0xde0f4466; BYTE $0xce                     // pmaxub    xmm9, xmm6
	LONG $0x6f0f4166; BYTE $0xf3                     // movdqa    xmm6, xmm11
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xfb                     // pmaxub    xmm7, xmm11
	LONG $0x946f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 192]
	LONG $0x6f0f4466; BYTE $0xda                     // movdqa    xmm11, xmm2
	LONG $0xda0f4466; BYTE $0xdf                     // pminub    xmm11, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xde0f4466; BYTE $0xde                     // pmaxub    xmm11, xmm6
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0xde0f4166; BYTE $0xe8                     // pmaxub    xmm5, xmm8
	LONG $0x546f0f66; WORD $0x2024                   // movdqa    xmm2, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4466; BYTE $0xfd                     // pminub    xmm15, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6f0f4166; BYTE $0xd7                     // movdqa    xmm2, xmm15
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xde0f4466; BYTE $0xfe                     // pmaxub    xmm15, xmm6
	LONG $0xb46f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xe6                     // movdqa    xmm12, xmm6
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xcede0f66                                 // pmaxub    xmm1, xmm6
	LONG $0x6f0f4566; BYTE $0xc2                     // movdqa    xmm8, xmm10
	LONG $0xda0f4466; BYTE $0xc2                     // pminub    xmm8, xmm2
	LONG $0xde0f4166; BYTE $0xd2                     // pmaxub    xmm2, xmm10
	LONG $0x6f0f4466; LONG $0x00d02494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 208]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xde0f4166; BYTE $0xd2                     // pmaxub    xmm2, xmm10
	LONG $0x547f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm2
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0x94de0f66; LONG $0x0000e024; BYTE $0x00   // pmaxub    xmm2, oword [rsp + 224]
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xde0f4166; BYTE $0xf0                     // pmaxub    xmm6, xmm8
	LONG $0xb47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm6
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xda0f4166; BYTE $0xf4                     // pminub    xmm6, xmm12
	LONG $0xde0f4466; BYTE $0xe4                     // pmaxub    xmm12, xmm4
	LONG $0x546f0f66; WORD $0x7024                   // movdqa    xmm2, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4566; BYTE $0xd4                     // pminub    xmm10, xmm12
	LONG $0xde0f4466; BYTE $0xe2                     // pmaxub    xmm12, xmm2
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0x947f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm2
	LONG $0xde0f4466; BYTE $0xd6                     // pmaxub    xmm10, xmm6
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x446f0f66; WORD $0x6024                   // movdqa    xmm0, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xd8                     // movdqa    xmm11, xmm0
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm2
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xda0f4166; BYTE $0xc7                     // pminub    xmm0, xmm15
	LONG $0xde0f4566; BYTE $0xfe                     // pmaxub    xmm15, xmm14
	LONG $0xde0f4466; BYTE $0xdc                     // pmaxub    xmm11, xmm4
	LONG $0x546f0f66; WORD $0x5024                   // movdqa    xmm2, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4566; BYTE $0xf7                     // pminub    xmm14, xmm15
	LONG $0xde0f4466; BYTE $0xfa                     // pmaxub    xmm15, xmm2
	LONG $0x6f0f4166; BYTE $0xe6                     // movdqa    xmm4, xmm14
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x8cda0f66; LONG $0x00008024; BYTE $0x00   // pminub    xmm1, oword [rsp + 128]
	LONG $0x6f0f4466; BYTE $0xc9                     // movdqa    xmm9, xmm1
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0xf8de0f66                                 // pmaxub    xmm7, xmm0
	LONG $0x946f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 176]
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xc6de0f66                                 // pmaxub    xmm0, xmm6
	LONG $0x6f0f4566; BYTE $0xc5                     // movdqa    xmm8, xmm13
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xde0f4166; BYTE $0xed                     // pmaxub    xmm5, xmm13
	LONG $0x6cda0f66; WORD $0x4024                   // pminub    xmm5, oword [rsp + 64]
	LONG $0xf56f0f66                                 // movdqa    xmm6, xmm5
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xde0f4166; BYTE $0xe8                     // pmaxub    xmm5, xmm8
	LONG $0x1cda0f66; BYTE $0x24                     // pminub    xmm3, oword [rsp]
	LONG $0xda0f4166; BYTE $0xdc                     // pminub    xmm3, xmm12
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xefda0f66                                 // pminub    xmm5, xmm7
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0x9c6f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm3, oword [rsp + 144]
	LONG $0x9cde0f66; LONG $0x0000a024; BYTE $0x00   // pmaxub    xmm3, oword [rsp + 160]
	LONG $0xde0f4166; BYTE $0xe3                     // pmaxub    xmm4, xmm11
	LONG $0x54de0f66; WORD $0x1024                   // pmaxub    xmm2, oword [rsp + 16]
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0x6f0f4166; BYTE $0xd9                     // movdqa    xmm3, xmm9
	LONG $0xda0f4166; BYTE $0xda                     // pminub    xmm3, xmm10
	LONG $0xde0f4566; BYTE $0xca                     // pmaxub    xmm9, xmm10
	LONG $0xe66f0f66                                 // movdqa    xmm4, xmm6
	LONG $0xda0f4166; BYTE $0xe6                     // pminub    xmm4, xmm14
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0xde6f0f66                                 // movdqa    xmm3, xmm6
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xcede0f66                                 // pmaxub    xmm1, xmm6
	LONG $0xda0f4166; BYTE $0xc9                     // pminub    xmm1, xmm9
	LONG $0xec6f0f66                                 // movdqa    xmm5, xmm4
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xe3da0f66                                 // pminub    xmm4, xmm3
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xdd6f0f66                                 // movdqa    xmm3, xmm5
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0x646f0f66; WORD $0x2024                   // movdqa    xmm4, oword [rsp + 32]
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x5c6f0f66; WORD $0x7024                   // movdqa    xmm3, oword [rsp + 112]
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x7f0f4166; BYTE $0x09                     // movdqa    oword [r9], xmm1
	LONG $0x11fc8349                                 // cmp    r12, 17
	JB   LBB3_20
	WORD $0x894c; BYTE $0xf7                         // mov    rdi, r14
	LONG $0x0010b841; WORD $0x0000                   // mov    r8d, 16

LBB3_19:
	LONG $0x6f0f42f3; WORD $0x0054; BYTE $0xf8       // movdqu    xmm2, oword [rax + r8 - 8]
	LONG $0x6f0f42f3; WORD $0x004c; BYTE $0xfc       // movdqu    xmm1, oword [rax + r8 - 4]
	LONG $0x6f0f4666; WORD $0x0034                   // movdqa    xmm14, oword [rax + r8]
	LONG $0x6f0f42f3; WORD $0x0044; BYTE $0x04       // movdqu    xmm0, oword [rax + r8 + 4]
	LONG $0x6f0f42f3; WORD $0x0064; BYTE $0x08       // movdqu    xmm4, oword [rax + r8 + 8]
	LONG $0x6f0f43f3; WORD $0x0574; BYTE $0xf8       // movdqu    xmm6, oword [r13 + r8 - 8]
	LONG $0x6f0f43f3; WORD $0x056c; BYTE $0xfc       // movdqu    xmm5, oword [r13 + r8 - 4]
	LONG $0x6f0f4366; WORD $0x057c; BYTE $0x00       // movdqa    xmm7, oword [r13 + r8]
	LONG $0x6f0f47f3; WORD $0x0564; BYTE $0x04       // movdqu    xmm12, oword [r13 + r8 + 4]
	LONG $0x6f0f47f3; WORD $0x055c; BYTE $0x08       // movdqu    xmm11, oword [r13 + r8 + 8]
	LONG $0x6f0f44f3; WORD $0xf047                   // movdqu    xmm8, oword [rdi - 16]
	LONG $0x6f0f44f3; WORD $0xf47f                   // movdqu    xmm15, oword [rdi - 12]
	LONG $0x6f0f4466; WORD $0xf86f                   // movdqa    xmm13, oword [rdi - 8]
	LONG $0x6f0f44f3; WORD $0xfc57                   // movdqu    xmm10, oword [rdi - 4]
	LONG $0x5c100f42; WORD $0xf803                   // movups    xmm3, oword [rbx + r8 - 8]
	LONG $0x241c290f                                 // movaps    oword [rsp], xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xc9                     // pmaxub    xmm9, xmm1
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xde0f4166; BYTE $0xd4                     // pmaxub    xmm2, xmm12
	LONG $0x947f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm2
	LONG $0xde0f4466; BYTE $0xd9                     // pmaxub    xmm11, xmm1
	LONG $0x6f0f4166; BYTE $0xcd                     // movdqa    xmm1, xmm13
	LONG $0xda0f4166; BYTE $0xca                     // pminub    xmm1, xmm10
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xda0f4166; BYTE $0xe5                     // pminub    xmm4, xmm13
	LONG $0xde0f4566; BYTE $0xef                     // pmaxub    xmm13, xmm15
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x6f0f42f3; WORD $0x034c; BYTE $0xfc       // movdqu    xmm1, oword [rbx + r8 - 4]
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x0f6f0ff3                                 // movdqu    xmm1, oword [rdi]
	LONG $0x6f0f4466; BYTE $0xd1                     // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xde0f4466; BYTE $0xd3                     // pmaxub    xmm10, xmm3
	LONG $0x6f0f42f3; WORD $0x0354; BYTE $0x04       // movdqu    xmm2, oword [rbx + r8 + 4]
	LONG $0x6f0f42f3; WORD $0x034c; BYTE $0x08       // movdqu    xmm1, oword [rbx + r8 + 8]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x6f0f4266; WORD $0x030c                   // movdqa    xmm1, oword [rbx + r8]
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4466; BYTE $0xc2                     // pminub    xmm8, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x8c7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm1
	LONG $0xde0f4466; BYTE $0xc3                     // pmaxub    xmm8, xmm3
	LONG $0x6f0f42f3; WORD $0x015c; BYTE $0xfc       // movdqu    xmm3, oword [rcx + r8 - 4]
	LONG $0x6f0f4266; WORD $0x010c                   // movdqa    xmm1, oword [rcx + r8]
	LONG $0xfb6f0f66                                 // movdqa    xmm7, xmm3
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f42f3; WORD $0x014c; BYTE $0xf8       // movdqu    xmm1, oword [rcx + r8 - 8]
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4566; BYTE $0xfd                     // movdqa    xmm15, xmm13
	LONG $0xda0f4466; BYTE $0xff                     // pminub    xmm15, xmm7
	LONG $0xde0f4466; BYTE $0xef                     // pmaxub    xmm13, xmm7
	LONG $0x6f0f42f3; WORD $0x017c; BYTE $0x04       // movdqu    xmm7, oword [rcx + r8 + 4]
	LONG $0x6f0f42f3; WORD $0x0154; BYTE $0x08       // movdqu    xmm2, oword [rcx + r8 + 8]
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0x7f0f4466; LONG $0x00b024b4; WORD $0x0000 // movdqa    oword [rsp + 176], xmm14
	LONG $0xd6de0f66                                 // pmaxub    xmm2, xmm6
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x70       // movdqa    xmm9, oword [rsp + 112]
	LONG $0x6f0f4166; BYTE $0xf1                     // movdqa    xmm6, xmm9
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0x947f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm2
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0xb47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm6
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x40       // movdqa    xmm9, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm0
	LONG $0x6f0f4166; BYTE $0xd4                     // movdqa    xmm2, xmm12
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0xac6f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0x7f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    oword [rsp + 144], xmm10
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x546f0f66; WORD $0x6024                   // movdqa    xmm2, oword [rsp + 96]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x6f0f4466; LONG $0x008024a4; WORD $0x0000 // movdqa    xmm12, oword [rsp + 128]
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xde0f4466; BYTE $0xdc                     // pmaxub    xmm11, xmm4
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x846f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xf8                     // movdqa    xmm15, xmm0
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4466; BYTE $0xfc                     // pmaxub    xmm15, xmm4
	LONG $0x6f0f4566; BYTE $0xe5                     // movdqa    xmm12, xmm13
	LONG $0xda0f4466; BYTE $0xe7                     // pminub    xmm12, xmm7
	LONG $0xde0f4166; BYTE $0xfd                     // pmaxub    xmm7, xmm13
	LONG $0x6f0f4166; BYTE $0xe0                     // movdqa    xmm4, xmm8
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xec                     // movdqa    xmm13, xmm4
	LONG $0xda0f4566; BYTE $0xec                     // pminub    xmm13, xmm12
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x746f0f66; WORD $0x5024                   // movdqa    xmm6, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3                     // pminub    xmm8, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x6f0f4566; BYTE $0xe2                     // movdqa    xmm12, xmm10
	LONG $0xda0f4566; BYTE $0xe5                     // pminub    xmm12, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4466; LONG $0x00c02494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x847f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm0
	LONG $0xde0f4166; BYTE $0xf4                     // pmaxub    xmm6, xmm12
	LONG $0x747f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm6
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x846f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4566; BYTE $0xe0                     // pminub    xmm12, xmm8
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4566; BYTE $0xf9                     // pmaxub    xmm15, xmm9
	LONG $0x846f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xc8                     // movdqa    xmm9, xmm0
	LONG $0xda0f4566; BYTE $0xcf                     // pminub    xmm9, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0x946f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdb                     // pmaxub    xmm3, xmm11
	LONG $0x5cda0f66; WORD $0x7024                   // pminub    xmm3, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xdb                     // movdqa    xmm11, xmm3
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf1da0f66                                 // pminub    xmm6, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0x6f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 144]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xfa                     // pmaxub    xmm7, xmm10
	LONG $0x7cda0f66; WORD $0x1024                   // pminub    xmm7, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xd7                     // movdqa    xmm10, xmm7
	LONG $0xda0f4466; BYTE $0xd6                     // pminub    xmm10, xmm6
	LONG $0xfede0f66                                 // pmaxub    xmm7, xmm6
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0x74da0f66; WORD $0x4024                   // pminub    xmm6, oword [rsp + 64]
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0x4c6f0f66; WORD $0x6024                   // movdqa    xmm1, oword [rsp + 96]
	LONG $0x4cde0f66; WORD $0x5024                   // pmaxub    xmm1, oword [rsp + 80]
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4566; BYTE $0xdc                     // pmaxub    xmm11, xmm12
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0xde0f4566; BYTE $0xd6                     // pmaxub    xmm10, xmm14
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xda                     // pmaxub    xmm3, xmm10
	LONG $0xda0f4166; BYTE $0xdb                     // pminub    xmm3, xmm11
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd5                     // pminub    xmm2, xmm13
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4166; BYTE $0xd7                     // pmaxub    xmm2, xmm15
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x7f0f4366; WORD $0x0114                   // movdqa    oword [r9 + r8], xmm2
	LONG $0x10c08349                                 // add    r8, 16
	LONG $0x10c78348                                 // add    rdi, 16
	WORD $0x394d; BYTE $0xe0                         // cmp    r8, r12
	JB   LBB3_19

LBB3_20:
	LONG $0x6f0f44f3; WORD $0x1064; BYTE $0xf0       // movdqu    xmm12, oword [rax + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0x6f0f4166; BYTE $0xfc                     // movdqa    xmm7, xmm12
	LONG $0x6d6f0f66; BYTE $0x00                     // movdqa    xmm5, oword 0[rbp] /* [rip + .LCPI3_0] */
	LONG $0xfddb0f66                                 // pand    xmm7, xmm5
	LONG $0xf8eb0f66                                 // por    xmm7, xmm0
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xdb0f4466; BYTE $0xcd                     // pand    xmm9, xmm5
	LONG $0xeb0f4466; BYTE $0xc8                     // por    xmm9, xmm0
	LONG $0x6f0f41f3; WORD $0x1554; BYTE $0xec       // movdqu    xmm2, oword [r13 + rdx - 20]
	LONG $0x6f0f41f3; WORD $0x1544; BYTE $0xf0       // movdqu    xmm0, oword [r13 + rdx - 16]
	LONG $0x6f0f4466; BYTE $0xd8                     // movdqa    xmm11, xmm0
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm1
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0xdb0f4466; BYTE $0xdd                     // pand    xmm11, xmm5
	LONG $0xeb0f4466; BYTE $0xd8                     // por    xmm11, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0x6f0f4566; BYTE $0xeb                     // movdqa    xmm13, xmm11
	LONG $0xdb0f4466; BYTE $0xed                     // pand    xmm13, xmm5
	LONG $0xeb0f4466; BYTE $0xe8                     // por    xmm13, xmm0
	LONG $0x6f0f45f3; WORD $0x127c; BYTE $0xf0       // movdqu    xmm15, oword [r10 + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0x6f0f4566; BYTE $0xf7                     // movdqa    xmm14, xmm15
	LONG $0xdb0f4466; BYTE $0xf5                     // pand    xmm14, xmm5
	LONG $0xeb0f4466; BYTE $0xf0                     // por    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0x6f0f4566; BYTE $0xc6                     // movdqa    xmm8, xmm14
	LONG $0xdb0f4466; BYTE $0xc5                     // pand    xmm8, xmm5
	LONG $0xeb0f4466; BYTE $0xc0                     // por    xmm8, xmm0
	LONG $0x746f0ff3; WORD $0xf013                   // movdqu    xmm6, oword [rbx + rdx - 16]
	LONG $0x747f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm6
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0xf5db0f66                                 // pand    xmm6, xmm5
	LONG $0xf0eb0f66                                 // por    xmm6, xmm0
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xd5db0f66                                 // pand    xmm2, xmm5
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0x947f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm2
	LONG $0x546f0ff3; WORD $0xec11                   // movdqu    xmm2, oword [rcx + rdx - 20]
	LONG $0x446f0ff3; WORD $0xf011                   // movdqu    xmm0, oword [rcx + rdx - 16]
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd0                     // pminub    xmm10, xmm0
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0xe5db0f66                                 // pand    xmm4, xmm5
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xd8730f66; BYTE $0x04                     // psrldq    xmm0, 4
	LONG $0xdc6f0f66                                 // movdqa    xmm3, xmm4
	LONG $0xdddb0f66                                 // pand    xmm3, xmm5
	LONG $0xd8eb0f66                                 // por    xmm3, xmm0
	LONG $0x446f0ff3; WORD $0xe810                   // movdqu    xmm0, oword [rax + rdx - 24]
	LONG $0x4c6f0ff3; WORD $0xec10                   // movdqu    xmm1, oword [rax + rdx - 20]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xac7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm5
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0xef6f0f66                                 // movdqa    xmm5, xmm7
	LONG $0xda0f4166; BYTE $0xe9                     // pminub    xmm5, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4566; BYTE $0xcc                     // pmaxub    xmm9, xmm12
	LONG $0x7f0f4466; WORD $0x244c; BYTE $0x50       // movdqa    oword [rsp + 80], xmm9
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4466; BYTE $0xe5                     // pminub    xmm12, xmm5
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x6f0f45f3; WORD $0x154c; BYTE $0xe8       // movdqu    xmm9, oword [r13 + rdx - 24]
	LONG $0x6f0f4166; BYTE $0xe9                     // movdqa    xmm5, xmm9
	LONG $0x0c6f0f66; BYTE $0x24                     // movdqa    xmm1, oword [rsp]
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0xfd6f0f66                                 // movdqa    xmm7, xmm5
	LONG $0x4c6f0f66; WORD $0x1024                   // movdqa    xmm1, oword [rsp + 16]
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0x7c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm7
	LONG $0xe9de0f66                                 // pmaxub    xmm5, xmm1
	LONG $0x6c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm5
	LONG $0x6f0f41f3; WORD $0x126c; BYTE $0xe8       // movdqu    xmm5, oword [r10 + rdx - 24]
	LONG $0x6f0f4166; BYTE $0xfd                     // movdqa    xmm7, xmm13
	LONG $0xfdda0f66                                 // pminub    xmm7, xmm5
	LONG $0xde0f4466; BYTE $0xed                     // pmaxub    xmm13, xmm5
	LONG $0x6f0f4566; BYTE $0xcb                     // movdqa    xmm9, xmm11
	LONG $0xda0f4566; BYTE $0xcd                     // pminub    xmm9, xmm13
	LONG $0xde0f4566; BYTE $0xeb                     // pmaxub    xmm13, xmm11
	LONG $0x7f0f4466; LONG $0x00d024ac; WORD $0x0000 // movdqa    oword [rsp + 208], xmm13
	LONG $0x6f0f4166; BYTE $0xc9                     // movdqa    xmm1, xmm9
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0x8c7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm1
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0x6f0f4166; BYTE $0xff                     // movdqa    xmm7, xmm15
	LONG $0xda0f4166; BYTE $0xfe                     // pminub    xmm7, xmm14
	LONG $0xde0f4566; BYTE $0xf7                     // pmaxub    xmm14, xmm15
	LONG $0x6f0f45f3; WORD $0x125c; BYTE $0xec       // movdqu    xmm11, oword [r10 + rdx - 20]
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xda0f4166; BYTE $0xce                     // pminub    xmm1, xmm14
	LONG $0xde0f4566; BYTE $0xf3                     // pmaxub    xmm14, xmm11
	LONG $0x6f0f4466; BYTE $0xd9                     // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xdf                     // pminub    xmm11, xmm7
	LONG $0xcfde0f66                                 // pmaxub    xmm1, xmm7
	LONG $0x6f0f44f3; WORD $0x136c; BYTE $0xe8       // movdqu    xmm13, oword [rbx + rdx - 24]
	LONG $0x6f0f44f3; WORD $0x137c; BYTE $0xec       // movdqu    xmm15, oword [rbx + rdx - 20]
	LONG $0x6f0f4166; BYTE $0xfd                     // movdqa    xmm7, xmm13
	LONG $0xda0f4166; BYTE $0xff                     // pminub    xmm7, xmm15
	LONG $0xde0f4566; BYTE $0xef                     // pmaxub    xmm13, xmm15
	LONG $0x6f0f4566; BYTE $0xf8                     // movdqa    xmm15, xmm8
	LONG $0xda0f4566; BYTE $0xfd                     // pminub    xmm15, xmm13
	LONG $0xde0f4566; BYTE $0xe8                     // pmaxub    xmm13, xmm8
	LONG $0x6f0f4166; BYTE $0xef                     // movdqa    xmm5, xmm15
	LONG $0xefda0f66                                 // pminub    xmm5, xmm7
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0xde0f4466; BYTE $0xff                     // pmaxub    xmm15, xmm7
	LONG $0xfe6f0f66                                 // movdqa    xmm7, xmm6
	LONG $0x6f0f4466; LONG $0x00b02484; WORD $0x0000 // movdqa    xmm8, oword [rsp + 176]
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0xde0f4466; BYTE $0xc6                     // pmaxub    xmm8, xmm6
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0x6c6f0f66; WORD $0x7024                   // movdqa    xmm5, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xc5                     // movdqa    xmm8, xmm5
	LONG $0xda0f4466; BYTE $0xc6                     // pminub    xmm8, xmm6
	LONG $0xf5de0f66                                 // pmaxub    xmm6, xmm5
	LONG $0xb47f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm6
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0x747f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm6
	LONG $0xde0f4466; BYTE $0xc7                     // pmaxub    xmm8, xmm7
	LONG $0x7c6f0ff3; WORD $0xe811                   // movdqu    xmm7, oword [rcx + rdx - 24]
	LONG $0xf76f0f66                                 // movdqa    xmm6, xmm7
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xd7de0f66                                 // pmaxub    xmm2, xmm7
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xde0f4166; BYTE $0xf2                     // pmaxub    xmm6, xmm10
	LONG $0xfc6f0f66                                 // movdqa    xmm7, xmm4
	LONG $0xfbda0f66                                 // pminub    xmm7, xmm3
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0x6f0f4566; BYTE $0xd4                     // movdqa    xmm10, xmm12
	LONG $0x646f0f66; WORD $0x3024                   // movdqa    xmm4, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xd4                     // pminub    xmm10, xmm4
	LONG $0x7f0f4466; WORD $0x2454; BYTE $0x70       // movdqa    oword [rsp + 112], xmm10
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x647f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm4
	LONG $0x6f0f4466; BYTE $0xd0                     // movdqa    xmm10, xmm0
	LONG $0x646f0f66; WORD $0x1024                   // movdqa    xmm4, oword [rsp + 16]
	LONG $0xda0f4466; BYTE $0xd4                     // pminub    xmm10, xmm4
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0x6f0f4466; LONG $0x00a024a4; WORD $0x0000 // movdqa    xmm12, oword [rsp + 160]
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x647f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xda0f4166; BYTE $0xe2                     // pminub    xmm4, xmm10
	LONG $0xa47f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm4
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0x847f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm0
	LONG $0x446f0f66; WORD $0x5024                   // movdqa    xmm0, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xd0                     // movdqa    xmm10, xmm0
	LONG $0x246f0f66; BYTE $0x24                     // movdqa    xmm4, oword [rsp]
	LONG $0xda0f4466; BYTE $0xd4                     // pminub    xmm10, xmm4
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0x6f0f4466; WORD $0x2464; BYTE $0x20       // movdqa    xmm12, oword [rsp + 32]
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x247f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xda0f4166; BYTE $0xe2                     // pminub    xmm4, xmm10
	LONG $0x647f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm4
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0x847f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm0
	LONG $0x6f0f4566; BYTE $0xd3                     // movdqa    xmm10, xmm11
	LONG $0x646f0f66; WORD $0x4024                   // movdqa    xmm4, oword [rsp + 64]
	LONG $0xda0f4466; BYTE $0xd4                     // pminub    xmm10, xmm4
	LONG $0xde0f4166; BYTE $0xe3                     // pmaxub    xmm4, xmm11
	LONG $0x6f0f4466; LONG $0x00c0249c; WORD $0x0000 // movdqa    xmm11, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4166; BYTE $0xe3                     // pmaxub    xmm4, xmm11
	LONG $0x647f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xda0f4166; BYTE $0xe2                     // pminub    xmm4, xmm10
	LONG $0xa47f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm4
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0xe16f0f66                                 // movdqa    xmm4, xmm1
	LONG $0xda0f4166; BYTE $0xe7                     // pminub    xmm4, xmm15
	LONG $0xde0f4466; BYTE $0xf9                     // pmaxub    xmm15, xmm1
	LONG $0x6f0f4566; BYTE $0xd1                     // movdqa    xmm10, xmm9
	LONG $0xda0f4566; BYTE $0xd7                     // pminub    xmm10, xmm15
	LONG $0xde0f4566; BYTE $0xf9                     // pmaxub    xmm15, xmm9
	LONG $0x6f0f4566; BYTE $0xda                     // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xdc                     // pminub    xmm11, xmm4
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4166; BYTE $0xce                     // movdqa    xmm1, xmm14
	LONG $0xda0f4166; BYTE $0xcd                     // pminub    xmm1, xmm13
	LONG $0xde0f4566; BYTE $0xee                     // pmaxub    xmm13, xmm14
	LONG $0xa46f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xf4                     // movdqa    xmm14, xmm4
	LONG $0xda0f4566; BYTE $0xf5                     // pminub    xmm14, xmm13
	LONG $0xde0f4466; BYTE $0xec                     // pmaxub    xmm13, xmm4
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xc9                     // pminub    xmm9, xmm1
	LONG $0xde0f4466; BYTE $0xf1                     // pmaxub    xmm14, xmm1
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xfdde0f66                                 // pmaxub    xmm7, xmm5
	LONG $0x646f0f66; WORD $0x6024                   // movdqa    xmm4, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4466; BYTE $0xe7                     // pminub    xmm12, xmm7
	LONG $0xfcde0f66                                 // pmaxub    xmm7, xmm4
	LONG $0x6f0f4166; BYTE $0xe4                     // movdqa    xmm4, xmm12
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0x647f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm4
	LONG $0xde0f4466; BYTE $0xe1                     // pmaxub    xmm12, xmm1
	LONG $0xce6f0f66                                 // movdqa    xmm1, xmm6
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0xf3da0f66                                 // pminub    xmm6, xmm3
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xf1de0f66                                 // pmaxub    xmm6, xmm1
	LONG $0xa46f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 176]
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0x6f0f4566; BYTE $0xc3                     // movdqa    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0x6f0f4466; LONG $0x0090249c; WORD $0x0000 // movdqa    xmm11, oword [rsp + 144]
	LONG $0x6f0f4166; BYTE $0xe3                     // movdqa    xmm4, xmm11
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0xac7f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm5
	LONG $0x6c6f0f66; WORD $0x2024                   // movdqa    xmm5, oword [rsp + 32]
	LONG $0xacde0f66; LONG $0x0000c024; BYTE $0x00   // pmaxub    xmm5, oword [rsp + 192]
	LONG $0x6c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm5
	LONG $0xde0f4166; BYTE $0xe0                     // pmaxub    xmm4, xmm8
	LONG $0xa47f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm4
	LONG $0x6f0f4166; BYTE $0xe1                     // movdqa    xmm4, xmm9
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x6c6f0f66; WORD $0x5024                   // movdqa    xmm5, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xdd                     // movdqa    xmm11, xmm5
	LONG $0xda0f4466; BYTE $0xd9                     // pminub    xmm11, xmm1
	LONG $0xcdde0f66                                 // pmaxub    xmm1, xmm5
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xecda0f66                                 // pminub    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm5
	LONG $0xde0f4466; BYTE $0xdc                     // pmaxub    xmm11, xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xda0f4166; BYTE $0xe4                     // pminub    xmm4, xmm12
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x446f0f66; WORD $0x7024                   // movdqa    xmm0, oword [rsp + 112]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xec                     // pminub    xmm5, xmm12
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x7f0f4466; WORD $0x2464; BYTE $0x70       // movdqa    oword [rsp + 112], xmm12
	LONG $0x6f0f4166; BYTE $0xc2                     // movdqa    xmm0, xmm10
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xde0f4166; BYTE $0xf2                     // pmaxub    xmm6, xmm10
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm5
	LONG $0xa46f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 128]
	LONG $0xec6f0f66                                 // movdqa    xmm5, xmm4
	LONG $0xeeda0f66                                 // pminub    xmm5, xmm6
	LONG $0xf4de0f66                                 // pmaxub    xmm6, xmm4
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xde0f4166; BYTE $0xd6                     // pmaxub    xmm2, xmm14
	LONG $0x94da0f66; LONG $0x0000a024; BYTE $0x00   // pminub    xmm2, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd0                     // pminub    xmm10, xmm0
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x646f0f66; WORD $0x4024                   // movdqa    xmm4, oword [rsp + 64]
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc7da0f66                                 // pminub    xmm0, xmm7
	LONG $0xfcde0f66                                 // pmaxub    xmm7, xmm4
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x30       // movdqa    xmm8, oword [rsp + 48]
	LONG $0x6f0f4166; BYTE $0xe0                     // movdqa    xmm4, xmm8
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4466; BYTE $0xe0                     // pminub    xmm12, xmm0
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdf                     // pmaxub    xmm3, xmm15
	LONG $0x5cda0f66; WORD $0x1024                   // pminub    xmm3, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xc3                     // movdqa    xmm8, xmm3
	LONG $0xda0f4466; BYTE $0xc0                     // pminub    xmm8, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xda0f4466; WORD $0x242c                   // pminub    xmm13, oword [rsp]
	LONG $0xda0f4466; BYTE $0xe9                     // pminub    xmm13, xmm1
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xd5                     // pminub    xmm2, xmm13
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0x446f0f66; WORD $0x5024                   // movdqa    xmm0, oword [rsp + 80]
	LONG $0x84de0f66; LONG $0x00009024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 144]
	LONG $0xde0f4466; WORD $0x244c; BYTE $0x60       // pmaxub    xmm9, oword [rsp + 96]
	LONG $0xde0f4466; WORD $0x2464; BYTE $0x20       // pmaxub    xmm12, oword [rsp + 32]
	LONG $0xde0f4566; BYTE $0xe1                     // pmaxub    xmm12, xmm9
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x6f0f4166; BYTE $0xc2                     // movdqa    xmm0, xmm10
	LONG $0xda0f4166; BYTE $0xc3                     // pminub    xmm0, xmm11
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xde0f4466; BYTE $0xc5                     // pmaxub    xmm8, xmm5
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xcb6f0f66                                 // movdqa    xmm1, xmm3
	LONG $0xa46f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm4, oword [rsp + 176]
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xdcde0f66                                 // pmaxub    xmm3, xmm4
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd8da0f66                                 // pminub    xmm3, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x546f0f66; WORD $0x7024                   // movdqa    xmm2, oword [rsp + 112]
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x114c; BYTE $0xf0       // movdqu    oword [r9 + rdx - 16], xmm1
	WORD $0xff49; BYTE $0xc7                         // inc    r15
	LONG $0x248c034c; LONG $0x00000160               // add    r9, qword 352[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                         // add    r14, rsi
	LONG $0x24bc3b4c; LONG $0x000000f0               // cmp    r15, qword [rsp + 240]
	JNE  LBB3_17
	JMP  LBB3_62

LBB3_21:
	LONG $0x24bc8348; LONG $0x000000f0; BYTE $0x00 // cmp    qword [rsp + 240], 0
	JE   LBB3_62
	LONG $0xff528d4c                               // lea    r10, [rdx - 1]
	LONG $0xf0e28349                               // and    r10, -16
	LONG $0x24848b48; LONG $0x000000f0             // mov    rax, qword [rsp + 240]
	LONG $0xfe488d48                               // lea    rcx, [rax - 2]
	LONG $0x248c8948; LONG $0x00000130             // mov    qword [rsp + 304], rcx
	WORD $0xff48; BYTE $0xc8                       // dec    rax
	LONG $0x24848948; LONG $0x00000140             // mov    qword [rsp + 320], rax
	LONG $0x24848b48; LONG $0x000000f8             // mov    rax, qword [rsp + 248]
	LONG $0x12788d4c                               // lea    r15, [rax + 18]
	WORD $0x3145; BYTE $0xe4                       // xor    r12d, r12d
	LONG $0xef0f4566; BYTE $0xdb                   // pxor    xmm11, xmm11

LBB3_23:
	LONG $0x244c8d49; BYTE $0xfe                     // lea    rcx, [r12 - 2]
	LONG $0xceaf0f48                                 // imul    rcx, rsi
	LONG $0x248c0348; LONG $0x000000f8               // add    rcx, qword [rsp + 248]
	LONG $0x311c8d4c                                 // lea    r11, [rcx + rsi]
	LONG $0x333c8d49                                 // lea    rdi, [r11 + rsi]
	LONG $0x37048d4c                                 // lea    r8, [rdi + rsi]
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	WORD $0x894d; BYTE $0xdd                         // mov    r13, r11
	LONG $0x6f0f4266; WORD $0x1e2c                   // movdqa    xmm5, oword [rsi + r11]
	LONG $0x6f0f42f3; WORD $0x1e74; BYTE $0x01       // movdqu    xmm6, oword [rsi + r11 + 1]
	LONG $0xb47f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm6
	WORD $0x894c; BYTE $0xd8                         // mov    rax, r11
	LONG $0xc7440f48                                 // cmove    rax, rdi
	LONG $0x02fc8349                                 // cmp    r12, 2
	LONG $0xe8420f4c                                 // cmovb    r13, rax
	LONG $0xc1430f48                                 // cmovae    rax, rcx
	LONG $0x24a43b4c; LONG $0x00000140               // cmp    r12, qword [rsp + 320]
	LONG $0x24bc8948; LONG $0x00000100               // mov    qword [rsp + 256], rdi
	LONG $0xf8420f49                                 // cmovb    rdi, r8
	LONG $0x24a43b4c; LONG $0x00000130               // cmp    r12, qword [rsp + 304]
	WORD $0x8949; BYTE $0xfe                         // mov    r14, rdi
	LONG $0xf0420f4d                                 // cmovb    r14, r8
	LONG $0x186f0f66                                 // movdqa    xmm3, oword [rax]
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0x486f0ff3; BYTE $0x01                     // movdqu    xmm1, oword [rax + 1]
	LONG $0x6f0f44f3; WORD $0x0248                   // movdqu    xmm9, oword [rax + 2]
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x6f0f4466; BYTE $0xe3                     // movdqa    xmm12, xmm3
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0x4c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm1
	LONG $0x600f4166; BYTE $0xdb                     // punpcklbw    xmm3, xmm11
	LONG $0xcb700f66; BYTE $0x27                     // pshufd    xmm1, xmm3, 39
	LONG $0xdb730f66; BYTE $0x0e                     // psrldq    xmm3, 14
	LONG $0x680f4166; BYTE $0xc3                     // punpckhbw    xmm0, xmm11
	LONG $0xf8730f66; BYTE $0x02                     // pslldq    xmm0, 2
	LONG $0xc3eb0f66                                 // por    xmm0, xmm3
	LONG $0xc9700ff2; BYTE $0xec                     // pshuflw    xmm1, xmm1, 236
	LONG $0xc9700f66; BYTE $0x27                     // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x90                     // pshuflw    xmm1, xmm1, 144
	LONG $0xe1700ff3; BYTE $0x93                     // pshufhw    xmm4, xmm1, 147
	LONG $0xe0670f66                                 // packuswb    xmm4, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0x600f4166; BYTE $0xc3                     // punpcklbw    xmm0, xmm11
	LONG $0xc8700f66; BYTE $0x27                     // pshufd    xmm1, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e                     // psrldq    xmm0, 14
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0x680f4166; BYTE $0xd3                     // punpckhbw    xmm2, xmm11
	LONG $0xfa730f66; BYTE $0x02                     // pslldq    xmm2, 2
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc1700ff2; BYTE $0xec                     // pshuflw    xmm0, xmm1, 236
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90                     // pshuflw    xmm0, xmm0, 144
	LONG $0x700f44f3; WORD $0x93d0                   // pshufhw    xmm10, xmm0, 147
	LONG $0x670f4466; BYTE $0xd2                     // packuswb    xmm10, xmm2
	LONG $0x6f0f4166; WORD $0x0045                   // movdqa    xmm0, oword [r13]
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0x600f4166; BYTE $0xcb                     // punpcklbw    xmm1, xmm11
	LONG $0xd1700f66; BYTE $0x27                     // pshufd    xmm2, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0e                     // psrldq    xmm1, 14
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0x680f4166; BYTE $0xdb                     // punpckhbw    xmm3, xmm11
	LONG $0xfb730f66; BYTE $0x02                     // pslldq    xmm3, 2
	LONG $0xd9eb0f66                                 // por    xmm3, xmm1
	LONG $0xca700ff2; BYTE $0xec                     // pshuflw    xmm1, xmm2, 236
	LONG $0xc9700f66; BYTE $0x27                     // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x90                     // pshuflw    xmm1, xmm1, 144
	LONG $0x700f44f3; WORD $0x93c1                   // pshufhw    xmm8, xmm1, 147
	LONG $0x670f4466; BYTE $0xc3                     // packuswb    xmm8, xmm3
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0x600f4166; BYTE $0xcb                     // punpcklbw    xmm1, xmm11
	LONG $0xd1700f66; BYTE $0x27                     // pshufd    xmm2, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0e                     // psrldq    xmm1, 14
	LONG $0x6f0f4166; BYTE $0xd8                     // movdqa    xmm3, xmm8
	LONG $0x680f4166; BYTE $0xdb                     // punpckhbw    xmm3, xmm11
	LONG $0xfb730f66; BYTE $0x02                     // pslldq    xmm3, 2
	LONG $0xd9eb0f66                                 // por    xmm3, xmm1
	LONG $0xca700ff2; BYTE $0xec                     // pshuflw    xmm1, xmm2, 236
	LONG $0xc9700f66; BYTE $0x27                     // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x90                     // pshuflw    xmm1, xmm1, 144
	LONG $0x700f44f3; WORD $0x93f1                   // pshufhw    xmm14, xmm1, 147
	LONG $0x670f4466; BYTE $0xf3                     // packuswb    xmm14, xmm3
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0x600f4166; BYTE $0xcb                     // punpcklbw    xmm1, xmm11
	LONG $0xd1700f66; BYTE $0x27                     // pshufd    xmm2, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0e                     // psrldq    xmm1, 14
	LONG $0xdd6f0f66                                 // movdqa    xmm3, xmm5
	LONG $0x680f4166; BYTE $0xdb                     // punpckhbw    xmm3, xmm11
	LONG $0xfb730f66; BYTE $0x02                     // pslldq    xmm3, 2
	LONG $0xd9eb0f66                                 // por    xmm3, xmm1
	LONG $0xca700ff2; BYTE $0xec                     // pshuflw    xmm1, xmm2, 236
	LONG $0xc9700f66; BYTE $0x27                     // pshufd    xmm1, xmm1, 39
	LONG $0xc9700ff2; BYTE $0x90                     // pshuflw    xmm1, xmm1, 144
	LONG $0xd1700ff3; BYTE $0x93                     // pshufhw    xmm2, xmm1, 147
	LONG $0xd3670f66                                 // packuswb    xmm2, xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xac7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm0
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0x600f4166; BYTE $0xd3                     // punpcklbw    xmm2, xmm11
	LONG $0xf2700f66; BYTE $0x27                     // pshufd    xmm6, xmm2, 39
	LONG $0xda730f66; BYTE $0x0e                     // psrldq    xmm2, 14
	LONG $0x680f4166; BYTE $0xdb                     // punpckhbw    xmm3, xmm11
	LONG $0xfb730f66; BYTE $0x02                     // pslldq    xmm3, 2
	LONG $0xdaeb0f66                                 // por    xmm3, xmm2
	LONG $0xd6700ff2; BYTE $0xec                     // pshuflw    xmm2, xmm6, 236
	LONG $0xd2700f66; BYTE $0x27                     // pshufd    xmm2, xmm2, 39
	LONG $0xd2700ff2; BYTE $0x90                     // pshuflw    xmm2, xmm2, 144
	LONG $0x700f44f3; WORD $0x93fa                   // pshufhw    xmm15, xmm2, 147
	LONG $0x670f4466; BYTE $0xfb                     // packuswb    xmm15, xmm3
	LONG $0x6f0f41f3; WORD $0x0146                   // movdqu    xmm0, oword [r14 + 1]
	LONG $0x6f0f41f3; WORD $0x024e                   // movdqu    xmm1, oword [r14 + 2]
	LONG $0x8c7f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm1
	LONG $0x447f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm0
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x6f0f4166; BYTE $0x16                     // movdqa    xmm2, oword [r14]
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x847f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm0
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0x600f4166; BYTE $0xd3                     // punpcklbw    xmm2, xmm11
	LONG $0xf2700f66; BYTE $0x27                     // pshufd    xmm6, xmm2, 39
	LONG $0xda730f66; BYTE $0x0e                     // psrldq    xmm2, 14
	LONG $0x680f4166; BYTE $0xdb                     // punpckhbw    xmm3, xmm11
	LONG $0xfb730f66; BYTE $0x02                     // pslldq    xmm3, 2
	LONG $0xdaeb0f66                                 // por    xmm3, xmm2
	LONG $0xd6700ff2; BYTE $0xec                     // pshuflw    xmm2, xmm6, 236
	LONG $0xd2700f66; BYTE $0x27                     // pshufd    xmm2, xmm2, 39
	LONG $0xd2700ff2; BYTE $0x90                     // pshuflw    xmm2, xmm2, 144
	LONG $0xfa700ff3; BYTE $0x93                     // pshufhw    xmm7, xmm2, 147
	LONG $0xfb670f66                                 // packuswb    xmm7, xmm3
	LONG $0xd76f0f66                                 // movdqa    xmm2, xmm7
	LONG $0x600f4166; BYTE $0xd3                     // punpcklbw    xmm2, xmm11
	LONG $0xda700f66; BYTE $0x27                     // pshufd    xmm3, xmm2, 39
	LONG $0xda730f66; BYTE $0x0e                     // psrldq    xmm2, 14
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0x680f4166; BYTE $0xc3                     // punpckhbw    xmm0, xmm11
	LONG $0xf8730f66; BYTE $0x02                     // pslldq    xmm0, 2
	LONG $0xc2eb0f66                                 // por    xmm0, xmm2
	LONG $0xd3700ff2; BYTE $0xec                     // pshuflw    xmm2, xmm3, 236
	LONG $0xd2700f66; BYTE $0x27                     // pshufd    xmm2, xmm2, 39
	LONG $0xd2700ff2; BYTE $0x90                     // pshuflw    xmm2, xmm2, 144
	LONG $0x700f44f3; WORD $0x93ea                   // pshufhw    xmm13, xmm2, 147
	LONG $0x670f4466; BYTE $0xe8                     // packuswb    xmm13, xmm0
	LONG $0x301c8d49                                 // lea    rbx, [r8 + rsi]
	LONG $0xfb420f48                                 // cmovb    rdi, rbx
	LONG $0x0f6f0f66                                 // movdqa    xmm1, oword [rdi]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x600f4166; BYTE $0xc3                     // punpcklbw    xmm0, xmm11
	LONG $0xd0700f66; BYTE $0x27                     // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e                     // psrldq    xmm0, 14
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0x680f4166; BYTE $0xeb                     // punpckhbw    xmm5, xmm11
	LONG $0xfd730f66; BYTE $0x02                     // pslldq    xmm5, 2
	LONG $0xe8eb0f66                                 // por    xmm5, xmm0
	LONG $0xc2700ff2; BYTE $0xec                     // pshuflw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90                     // pshuflw    xmm0, xmm0, 144
	LONG $0xd8700ff3; BYTE $0x93                     // pshufhw    xmm3, xmm0, 147
	LONG $0xdd670f66                                 // packuswb    xmm3, xmm5
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc3                     // punpcklbw    xmm0, xmm11
	LONG $0xd0700f66; BYTE $0x27                     // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0e                     // psrldq    xmm0, 14
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0x680f4166; BYTE $0xeb                     // punpckhbw    xmm5, xmm11
	LONG $0xfd730f66; BYTE $0x02                     // pslldq    xmm5, 2
	LONG $0xe8eb0f66                                 // por    xmm5, xmm0
	LONG $0xc2700ff2; BYTE $0xec                     // pshuflw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x90                     // pshuflw    xmm0, xmm0, 144
	LONG $0xd0700ff3; BYTE $0x93                     // pshufhw    xmm2, xmm0, 147
	LONG $0xd5670f66                                 // packuswb    xmm2, xmm5
	LONG $0x6f0f4566; BYTE $0xda                     // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xdc                     // pminub    xmm11, xmm4
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x7f0f4466; LONG $0x00d02494; WORD $0x0000 // movdqa    oword [rsp + 208], xmm10
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0x6f0f4566; BYTE $0xcc                     // movdqa    xmm9, xmm12
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x7f0f4466; LONG $0x00e024a4; WORD $0x0000 // movdqa    oword [rsp + 224], xmm12
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0x6c6f0f66; WORD $0x1024                   // movdqa    xmm5, oword [rsp + 16]
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4466; BYTE $0xc5                     // pmaxub    xmm8, xmm5
	LONG $0x6f0f4566; BYTE $0xe6                     // movdqa    xmm12, xmm14
	LONG $0xda0f4566; BYTE $0xe0                     // pminub    xmm12, xmm8
	LONG $0xde0f4566; BYTE $0xc6                     // pmaxub    xmm8, xmm14
	LONG $0x7f0f4466; WORD $0x2404                   // movdqa    oword [rsp], xmm8
	LONG $0x6f0f4566; BYTE $0xd4                     // movdqa    xmm10, xmm12
	LONG $0xda0f4466; BYTE $0xd0                     // pminub    xmm10, xmm0
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x6f0f41f3; WORD $0x0245                   // movdqu    xmm0, oword [r13 + 2]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xef                     // pminub    xmm5, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0x6f0f45f3; WORD $0x0145                   // movdqu    xmm8, oword [r13 + 1]
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xda0f4166; BYTE $0xc7                     // pminub    xmm0, xmm15
	LONG $0xde0f4566; BYTE $0xf8                     // pmaxub    xmm15, xmm8
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xa47f0f66; LONG $0x00011024; BYTE $0x00   // movdqa    oword [rsp + 272], xmm4
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0xac6f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 160]
	LONG $0xacda0f66; LONG $0x00008024; BYTE $0x00   // pminub    xmm5, oword [rsp + 128]
	LONG $0x646f0f66; WORD $0x3024                   // movdqa    xmm4, oword [rsp + 48]
	LONG $0x6f0f4466; BYTE $0xc4                     // movdqa    xmm8, xmm4
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0x647f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm4
	LONG $0x6f0f4166; BYTE $0xe5                     // movdqa    xmm4, xmm13
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xde0f4466; BYTE $0xef                     // pmaxub    xmm13, xmm7
	LONG $0x6f0f42f3; WORD $0x1e6c; BYTE $0x02       // movdqu    xmm5, oword [rsi + r11 + 2]
	LONG $0x6f0f4466; BYTE $0xf5                     // movdqa    xmm14, xmm5
	LONG $0xda0f4566; BYTE $0xf5                     // pminub    xmm14, xmm13
	LONG $0xde0f4466; BYTE $0xed                     // pmaxub    xmm13, xmm5
	LONG $0x6f0f4166; BYTE $0xee                     // movdqa    xmm5, xmm14
	LONG $0xecda0f66                                 // pminub    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm5
	LONG $0xde0f4466; BYTE $0xf4                     // pmaxub    xmm14, xmm4
	LONG $0x6c6f0f66; WORD $0x5024                   // movdqa    xmm5, oword [rsp + 80]
	LONG $0xacda0f66; LONG $0x00009024; BYTE $0x00   // pminub    xmm5, oword [rsp + 144]
	LONG $0x646f0f66; WORD $0x2024                   // movdqa    xmm4, oword [rsp + 32]
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0xb47f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm6
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0x647f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm4
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0x947f0f66; LONG $0x00012024; BYTE $0x00   // movdqa    oword [rsp + 288], xmm2
	LONG $0xccde0f66                                 // pmaxub    xmm1, xmm4
	LONG $0x676f0ff3; BYTE $0x01                     // movdqu    xmm4, oword [rdi + 1]
	LONG $0x576f0ff3; BYTE $0x02                     // movdqu    xmm2, oword [rdi + 2]
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0x547f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm2
	LONG $0xde0f4566; BYTE $0xd1                     // pmaxub    xmm10, xmm9
	LONG $0x7f0f4466; LONG $0x00802494; WORD $0x0000 // movdqa    oword [rsp + 128], xmm10
	LONG $0xac6f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 224]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xda0f4166; BYTE $0xd4                     // pminub    xmm2, xmm12
	LONG $0xde0f4466; BYTE $0xe5                     // pmaxub    xmm12, xmm5
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xda0f4166; BYTE $0xec                     // pminub    xmm5, xmm12
	LONG $0xde0f4566; BYTE $0xe3                     // pmaxub    xmm12, xmm11
	LONG $0x7f0f4466; LONG $0x00a024a4; WORD $0x0000 // movdqa    oword [rsp + 160], xmm12
	LONG $0xfd6f0f66                                 // movdqa    xmm7, xmm5
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xbc7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm7
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm5
	LONG $0x6f0f4466; WORD $0x2454; BYTE $0x40       // movdqa    xmm10, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0x2c6f0f66; BYTE $0x24                     // movdqa    xmm5, oword [rsp]
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xde0f4166; BYTE $0xea                     // pmaxub    xmm5, xmm10
	LONG $0x6f0f4466; LONG $0x00d0248c; WORD $0x0000 // movdqa    xmm9, oword [rsp + 208]
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xfdda0f66                                 // pminub    xmm7, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x2c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm5
	LONG $0xef6f0f66                                 // movdqa    xmm5, xmm7
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xac7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm5
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0xbc7f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm7
	LONG $0x6f0f4566; BYTE $0xd0                     // movdqa    xmm10, xmm8
	LONG $0x6c6f0f66; WORD $0x1024                   // movdqa    xmm5, oword [rsp + 16]
	LONG $0xda0f4466; BYTE $0xd5                     // pminub    xmm10, xmm5
	LONG $0xde0f4166; BYTE $0xe8                     // pmaxub    xmm5, xmm8
	LONG $0x946f0f66; LONG $0x00011024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 272]
	LONG $0x6f0f4466; BYTE $0xc2                     // movdqa    xmm8, xmm2
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm5
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xde0f4566; BYTE $0xc2                     // pmaxub    xmm8, xmm10
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4566; BYTE $0xd6                     // pminub    xmm10, xmm14
	LONG $0xde0f4466; BYTE $0xf2                     // pmaxub    xmm14, xmm2
	LONG $0x6f0f4466; BYTE $0xd8                     // movdqa    xmm11, xmm0
	LONG $0xda0f4566; BYTE $0xde                     // pminub    xmm11, xmm14
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4566; BYTE $0xe3                     // movdqa    xmm12, xmm11
	LONG $0xda0f4566; BYTE $0xe2                     // pminub    xmm12, xmm10
	LONG $0xde0f4566; BYTE $0xda                     // pmaxub    xmm11, xmm10
	LONG $0x6c6f0f66; WORD $0x7024                   // movdqa    xmm5, oword [rsp + 112]
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xda0f4166; BYTE $0xc5                     // pminub    xmm0, xmm13
	LONG $0xde0f4466; BYTE $0xed                     // pmaxub    xmm13, xmm5
	LONG $0x6f0f4166; BYTE $0xd7                     // movdqa    xmm2, xmm15
	LONG $0xda0f4166; BYTE $0xd5                     // pminub    xmm2, xmm13
	LONG $0xde0f4566; BYTE $0xef                     // pmaxub    xmm13, xmm15
	LONG $0x6f0f4466; BYTE $0xd2                     // movdqa    xmm10, xmm2
	LONG $0xda0f4466; BYTE $0xd0                     // pminub    xmm10, xmm0
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x947f0f66; LONG $0x00011024; BYTE $0x00   // movdqa    oword [rsp + 272], xmm2
	LONG $0x846f0f66; LONG $0x00012024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 288]
	LONG $0x6f0f4466; BYTE $0xc8                     // movdqa    xmm9, xmm0
	LONG $0xda0f4466; BYTE $0xce                     // pminub    xmm9, xmm6
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0xac6f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 192]
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xf5de0f66                                 // pmaxub    xmm6, xmm5
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xda0f4166; BYTE $0xf9                     // pminub    xmm7, xmm9
	LONG $0xde0f4166; BYTE $0xc1                     // pmaxub    xmm0, xmm9
	LONG $0x6f0f4466; BYTE $0xf8                     // movdqa    xmm15, xmm0
	LONG $0x6f0f4466; BYTE $0xc9                     // movdqa    xmm9, xmm1
	LONG $0xda0f4466; BYTE $0xcc                     // pminub    xmm9, xmm4
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xecda0f66                                 // pminub    xmm5, xmm4
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x8c6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xc9                     // movdqa    xmm9, xmm1
	LONG $0xda0f4466; BYTE $0xcb                     // pminub    xmm9, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4166; BYTE $0xcc                     // movdqa    xmm1, xmm12
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x946f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xe2                     // movdqa    xmm12, xmm2
	LONG $0xda0f4466; BYTE $0xe0                     // pminub    xmm12, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm0
	LONG $0x7cde0f66; WORD $0x4024                   // pmaxub    xmm7, oword [rsp + 64]
	LONG $0x7c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm7
	LONG $0xde0f4466; BYTE $0xe1                     // pmaxub    xmm12, xmm1
	LONG $0x7f0f4466; WORD $0x2464; BYTE $0x70       // movdqa    oword [rsp + 112], xmm12
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xda0f4166; BYTE $0xc9                     // pminub    xmm1, xmm9
	LONG $0xde0f4566; BYTE $0xca                     // pmaxub    xmm9, xmm10
	LONG $0xbc6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 208]
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x847f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm0
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4566; BYTE $0xf8                     // pmaxub    xmm15, xmm8
	LONG $0x446f0f66; WORD $0x6024                   // movdqa    xmm0, oword [rsp + 96]
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xda0f4166; BYTE $0xff                     // pminub    xmm7, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0x7f0f4466; WORD $0x247c; BYTE $0x20       // movdqa    oword [rsp + 32], xmm15
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xde0f4166; BYTE $0xeb                     // pmaxub    xmm5, xmm11
	LONG $0xf9de0f66                                 // pmaxub    xmm7, xmm1
	LONG $0x7c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm7
	LONG $0x446f0f66; WORD $0x5024                   // movdqa    xmm0, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xc0                     // movdqa    xmm8, xmm0
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4566; BYTE $0xd0                     // movdqa    xmm10, xmm8
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x846f0f66; LONG $0x00011024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 272]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x9cda0f66; LONG $0x00009024; BYTE $0x00   // pminub    xmm3, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xfb                     // movdqa    xmm15, xmm3
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x846f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 128]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xceda0f66                                 // pminub    xmm1, xmm6
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x6f0f4466; BYTE $0xd9                     // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xe6                     // pmaxub    xmm4, xmm14
	LONG $0xa4da0f66; LONG $0x0000a024; BYTE $0x00   // pminub    xmm4, oword [rsp + 160]
	LONG $0xfc6f0f66                                 // movdqa    xmm7, xmm4
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0xda0f4466; WORD $0x242c                   // pminub    xmm13, oword [rsp]
	LONG $0xda0f4566; BYTE $0xe9                     // pminub    xmm13, xmm9
	LONG $0xddda0f66                                 // pminub    xmm3, xmm5
	LONG $0xe6da0f66                                 // pminub    xmm4, xmm6
	LONG $0xda0f4166; BYTE $0xdd                     // pminub    xmm3, xmm13
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xde0f4466; WORD $0x2464; BYTE $0x70       // pmaxub    xmm12, oword [rsp + 112]
	LONG $0xde0f4466; WORD $0x2454; BYTE $0x60       // pmaxub    xmm10, oword [rsp + 96]
	LONG $0xde0f4466; WORD $0x245c; BYTE $0x40       // pmaxub    xmm11, oword [rsp + 64]
	LONG $0xde0f4566; BYTE $0xda                     // pmaxub    xmm11, xmm10
	LONG $0xde0f4566; BYTE $0xdc                     // pmaxub    xmm11, xmm12
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0x946f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 176]
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xde0f4466; BYTE $0xfa                     // pmaxub    xmm15, xmm2
	LONG $0xd76f0f66                                 // movdqa    xmm2, xmm7
	LONG $0xda0f4166; BYTE $0xd0                     // pminub    xmm2, xmm8
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0xccde0f66                                 // pmaxub    xmm1, xmm4
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xdfde0f66                                 // pmaxub    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xdf                     // pminub    xmm3, xmm15
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xc3                     // pmaxub    xmm0, xmm11
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0x5c6f0f66; WORD $0x3024                   // movdqa    xmm3, oword [rsp + 48]
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x4c6f0f66; WORD $0x2024                   // movdqa    xmm1, oword [rsp + 32]
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x7f0f4166; BYTE $0x11                     // movdqa    oword [r9], xmm2
	LONG $0x11fa8349                                 // cmp    r10, 17
	JB   LBB3_26
	WORD $0x894c; BYTE $0xfb                         // mov    rbx, r15
	LONG $0x0012b841; WORD $0x0000                   // mov    r8d, 18

LBB3_25:
	LONG $0x6f0f42f3; WORD $0x0054; BYTE $0xfc       // movdqu    xmm2, oword [rax + r8 - 4]
	LONG $0x6f0f42f3; WORD $0x004c; BYTE $0xfd       // movdqu    xmm1, oword [rax + r8 - 3]
	LONG $0x6f0f4666; WORD $0x0074; BYTE $0xfe       // movdqa    xmm14, oword [rax + r8 - 2]
	LONG $0x6f0f42f3; WORD $0x0044; BYTE $0xff       // movdqu    xmm0, oword [rax + r8 - 1]
	LONG $0x6f0f42f3; WORD $0x0024                   // movdqu    xmm4, oword [rax + r8]
	LONG $0x6f0f43f3; WORD $0x0574; BYTE $0xfc       // movdqu    xmm6, oword [r13 + r8 - 4]
	LONG $0x6f0f43f3; WORD $0x056c; BYTE $0xfd       // movdqu    xmm5, oword [r13 + r8 - 3]
	LONG $0x6f0f4366; WORD $0x057c; BYTE $0xfe       // movdqa    xmm7, oword [r13 + r8 - 2]
	LONG $0x6f0f47f3; WORD $0x0564; BYTE $0xff       // movdqu    xmm12, oword [r13 + r8 - 1]
	LONG $0x6f0f47f3; WORD $0x055c; BYTE $0x00       // movdqu    xmm11, oword [r13 + r8]
	LONG $0x6f0f44f3; WORD $0xfc43                   // movdqu    xmm8, oword [rbx - 4]
	LONG $0x6f0f44f3; WORD $0xfd7b                   // movdqu    xmm15, oword [rbx - 3]
	LONG $0x6f0f4466; WORD $0xfe6b                   // movdqa    xmm13, oword [rbx - 2]
	LONG $0x6f0f44f3; WORD $0xff53                   // movdqu    xmm10, oword [rbx - 1]
	LONG $0x5c100f43; WORD $0xfc06                   // movups    xmm3, oword [r14 + r8 - 4]
	LONG $0x241c290f                                 // movaps    oword [rsp], xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xc9                     // pmaxub    xmm9, xmm1
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xde0f4166; BYTE $0xd4                     // pmaxub    xmm2, xmm12
	LONG $0x947f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm2
	LONG $0xde0f4466; BYTE $0xd9                     // pmaxub    xmm11, xmm1
	LONG $0x6f0f4166; BYTE $0xcd                     // movdqa    xmm1, xmm13
	LONG $0xda0f4166; BYTE $0xca                     // pminub    xmm1, xmm10
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xda0f4166; BYTE $0xe5                     // pminub    xmm4, xmm13
	LONG $0xde0f4566; BYTE $0xef                     // pmaxub    xmm13, xmm15
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x6f0f43f3; WORD $0x064c; BYTE $0xfd       // movdqu    xmm1, oword [r14 + r8 - 3]
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x0b6f0ff3                                 // movdqu    xmm1, oword [rbx]
	LONG $0x6f0f4466; BYTE $0xd1                     // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xde0f4466; BYTE $0xd3                     // pmaxub    xmm10, xmm3
	LONG $0x6f0f43f3; WORD $0x0654; BYTE $0xff       // movdqu    xmm2, oword [r14 + r8 - 1]
	LONG $0x6f0f43f3; WORD $0x060c                   // movdqu    xmm1, oword [r14 + r8]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x6f0f4366; WORD $0x064c; BYTE $0xfe       // movdqa    xmm1, oword [r14 + r8 - 2]
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4466; BYTE $0xc2                     // pminub    xmm8, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x8c7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm1
	LONG $0xde0f4466; BYTE $0xc3                     // pmaxub    xmm8, xmm3
	LONG $0x6f0f42f3; WORD $0x075c; BYTE $0xfd       // movdqu    xmm3, oword [rdi + r8 - 3]
	LONG $0x6f0f4266; WORD $0x074c; BYTE $0xfe       // movdqa    xmm1, oword [rdi + r8 - 2]
	LONG $0xfb6f0f66                                 // movdqa    xmm7, xmm3
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f42f3; WORD $0x074c; BYTE $0xfc       // movdqu    xmm1, oword [rdi + r8 - 4]
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4566; BYTE $0xfd                     // movdqa    xmm15, xmm13
	LONG $0xda0f4466; BYTE $0xff                     // pminub    xmm15, xmm7
	LONG $0xde0f4466; BYTE $0xef                     // pmaxub    xmm13, xmm7
	LONG $0x6f0f42f3; WORD $0x077c; BYTE $0xff       // movdqu    xmm7, oword [rdi + r8 - 1]
	LONG $0x6f0f42f3; WORD $0x0714                   // movdqu    xmm2, oword [rdi + r8]
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0x7f0f4466; LONG $0x00b024b4; WORD $0x0000 // movdqa    oword [rsp + 176], xmm14
	LONG $0xd6de0f66                                 // pmaxub    xmm2, xmm6
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x70       // movdqa    xmm9, oword [rsp + 112]
	LONG $0x6f0f4166; BYTE $0xf1                     // movdqa    xmm6, xmm9
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0x947f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm2
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0xb47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm6
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x40       // movdqa    xmm9, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm0
	LONG $0x6f0f4166; BYTE $0xd4                     // movdqa    xmm2, xmm12
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0xac6f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0x7f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    oword [rsp + 144], xmm10
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x546f0f66; WORD $0x6024                   // movdqa    xmm2, oword [rsp + 96]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x6f0f4466; LONG $0x008024a4; WORD $0x0000 // movdqa    xmm12, oword [rsp + 128]
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xde0f4466; BYTE $0xdc                     // pmaxub    xmm11, xmm4
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x846f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xf8                     // movdqa    xmm15, xmm0
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4466; BYTE $0xfc                     // pmaxub    xmm15, xmm4
	LONG $0x6f0f4566; BYTE $0xe5                     // movdqa    xmm12, xmm13
	LONG $0xda0f4466; BYTE $0xe7                     // pminub    xmm12, xmm7
	LONG $0xde0f4166; BYTE $0xfd                     // pmaxub    xmm7, xmm13
	LONG $0x6f0f4166; BYTE $0xe0                     // movdqa    xmm4, xmm8
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xec                     // movdqa    xmm13, xmm4
	LONG $0xda0f4566; BYTE $0xec                     // pminub    xmm13, xmm12
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x746f0f66; WORD $0x5024                   // movdqa    xmm6, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3                     // pminub    xmm8, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x6f0f4566; BYTE $0xe2                     // movdqa    xmm12, xmm10
	LONG $0xda0f4566; BYTE $0xe5                     // pminub    xmm12, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4466; LONG $0x00c02494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x847f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm0
	LONG $0xde0f4166; BYTE $0xf4                     // pmaxub    xmm6, xmm12
	LONG $0x747f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm6
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x846f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4566; BYTE $0xe0                     // pminub    xmm12, xmm8
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4566; BYTE $0xf9                     // pmaxub    xmm15, xmm9
	LONG $0x846f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xc8                     // movdqa    xmm9, xmm0
	LONG $0xda0f4566; BYTE $0xcf                     // pminub    xmm9, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0x946f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdb                     // pmaxub    xmm3, xmm11
	LONG $0x5cda0f66; WORD $0x7024                   // pminub    xmm3, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xdb                     // movdqa    xmm11, xmm3
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf1da0f66                                 // pminub    xmm6, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0x6f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 144]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xfa                     // pmaxub    xmm7, xmm10
	LONG $0x7cda0f66; WORD $0x1024                   // pminub    xmm7, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xd7                     // movdqa    xmm10, xmm7
	LONG $0xda0f4466; BYTE $0xd6                     // pminub    xmm10, xmm6
	LONG $0xfede0f66                                 // pmaxub    xmm7, xmm6
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0x74da0f66; WORD $0x4024                   // pminub    xmm6, oword [rsp + 64]
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0x4c6f0f66; WORD $0x6024                   // movdqa    xmm1, oword [rsp + 96]
	LONG $0x4cde0f66; WORD $0x5024                   // pmaxub    xmm1, oword [rsp + 80]
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4566; BYTE $0xdc                     // pmaxub    xmm11, xmm12
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0xde0f4566; BYTE $0xd6                     // pmaxub    xmm10, xmm14
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xda                     // pmaxub    xmm3, xmm10
	LONG $0xda0f4166; BYTE $0xdb                     // pminub    xmm3, xmm11
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd5                     // pminub    xmm2, xmm13
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4166; BYTE $0xd7                     // pmaxub    xmm2, xmm15
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x7f0f4366; WORD $0x0154; BYTE $0xfe       // movdqa    oword [r9 + r8 - 2], xmm2
	LONG $0x10488d49                                 // lea    rcx, [r8 + 16]
	LONG $0x0ec08349                                 // add    r8, 14
	LONG $0x10c38348                                 // add    rbx, 16
	WORD $0x394d; BYTE $0xd0                         // cmp    r8, r10
	WORD $0x8949; BYTE $0xc8                         // mov    r8, rcx
	JB   LBB3_25

LBB3_26:
	LONG $0x4c6f0ff3; WORD $0xf010                   // movdqu    xmm1, oword [rax + rdx - 16]
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xef0f4566; BYTE $0xc9                     // pxor    xmm9, xmm9
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0x680f4566; BYTE $0xe9                     // punpckhbw    xmm13, xmm9
	LONG $0x700f4166; WORD $0x27cd                   // pshufd    xmm1, xmm13, 39
	LONG $0x730f4166; WORD $0x0efd                   // pslldq    xmm13, 14
	LONG $0xeb0f4466; BYTE $0xe8                     // por    xmm13, xmm0
	LONG $0xc1700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm1, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0x670f4466; BYTE $0xe8                     // packuswb    xmm13, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4166; BYTE $0xd5                     // movdqa    xmm2, xmm13
	LONG $0x680f4166; BYTE $0xd1                     // punpckhbw    xmm2, xmm9
	LONG $0xca700f66; BYTE $0x27                     // pshufd    xmm1, xmm2, 39
	LONG $0xfa730f66; BYTE $0x0e                     // pslldq    xmm2, 14
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc1700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm1, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0xd0670f66                                 // packuswb    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f41f3; WORD $0x154c; BYTE $0xef       // movdqu    xmm1, oword [r13 + rdx - 17]
	LONG $0x6f0f41f3; WORD $0x1544; BYTE $0xf0       // movdqu    xmm0, oword [r13 + rdx - 16]
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x680f4166; BYTE $0xf9                     // punpckhbw    xmm7, xmm9
	LONG $0xd7700f66; BYTE $0x27                     // pshufd    xmm2, xmm7, 39
	LONG $0xff730f66; BYTE $0x0e                     // pslldq    xmm7, 14
	LONG $0xf8eb0f66                                 // por    xmm7, xmm0
	LONG $0xc2700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0xf8670f66                                 // packuswb    xmm7, xmm0
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xe7                     // movdqa    xmm12, xmm7
	LONG $0x680f4566; BYTE $0xe1                     // punpckhbw    xmm12, xmm9
	LONG $0x700f4166; WORD $0x27d4                   // pshufd    xmm2, xmm12, 39
	LONG $0x730f4166; WORD $0x0efc                   // pslldq    xmm12, 14
	LONG $0xeb0f4466; BYTE $0xe0                     // por    xmm12, xmm0
	LONG $0xc2700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0x670f4466; BYTE $0xe0                     // packuswb    xmm12, xmm0
	LONG $0x248c8b48; LONG $0x00000100               // mov    rcx, qword [rsp + 256]
	LONG $0x6f0f44f3; WORD $0x1174; BYTE $0xf0       // movdqu    xmm14, oword [rcx + rdx - 16]
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0x680f4166; BYTE $0xd9                     // punpckhbw    xmm3, xmm9
	LONG $0xd3700f66; BYTE $0x27                     // pshufd    xmm2, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0e                     // pslldq    xmm3, 14
	LONG $0xd8eb0f66                                 // por    xmm3, xmm0
	LONG $0xc2700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0xd8670f66                                 // packuswb    xmm3, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x6f0f4466; BYTE $0xfb                     // movdqa    xmm15, xmm3
	LONG $0x680f4566; BYTE $0xf9                     // punpckhbw    xmm15, xmm9
	LONG $0x700f4166; WORD $0x27d7                   // pshufd    xmm2, xmm15, 39
	LONG $0x730f4166; WORD $0x0eff                   // pslldq    xmm15, 14
	LONG $0xeb0f4466; BYTE $0xf8                     // por    xmm15, xmm0
	LONG $0xc2700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm2, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0x670f4466; BYTE $0xf8                     // packuswb    xmm15, xmm0
	LONG $0x6f0f41f3; WORD $0x164c; BYTE $0xf0       // movdqu    xmm1, oword [r14 + rdx - 16]
	LONG $0x4c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm1
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0x680f4166; BYTE $0xd1                     // punpckhbw    xmm2, xmm9
	LONG $0xe2700f66; BYTE $0x27                     // pshufd    xmm4, xmm2, 39
	LONG $0xfa730f66; BYTE $0x0e                     // pslldq    xmm2, 14
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc4700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm4, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0xd0670f66                                 // packuswb    xmm2, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0x680f4166; BYTE $0xe1                     // punpckhbw    xmm4, xmm9
	LONG $0xec700f66; BYTE $0x27                     // pshufd    xmm5, xmm4, 39
	LONG $0xfc730f66; BYTE $0x0e                     // pslldq    xmm4, 14
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc5700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm5, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0xe0670f66                                 // packuswb    xmm4, xmm0
	LONG $0x6f0f44f3; WORD $0x1754; BYTE $0xef       // movdqu    xmm10, oword [rdi + rdx - 17]
	LONG $0x446f0ff3; WORD $0xf017                   // movdqu    xmm0, oword [rdi + rdx - 16]
	LONG $0x6f0f4566; BYTE $0xda                     // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0x6f0f4466; BYTE $0xc0                     // movdqa    xmm8, xmm0
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x02                     // psrldq    xmm0, 2
	LONG $0x680f4566; BYTE $0xc1                     // punpckhbw    xmm8, xmm9
	LONG $0x700f4166; WORD $0x27f0                   // pshufd    xmm6, xmm8, 39
	LONG $0x730f4166; WORD $0x0ef8                   // pslldq    xmm8, 14
	LONG $0xeb0f4466; BYTE $0xc0                     // por    xmm8, xmm0
	LONG $0xc6700ff3; BYTE $0xc4                     // pshufhw    xmm0, xmm6, 196
	LONG $0xc0700f66; BYTE $0x27                     // pshufd    xmm0, xmm0, 39
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xf9                     // pshufhw    xmm0, xmm0, 249
	LONG $0x670f4466; BYTE $0xc0                     // packuswb    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0x600f4166; BYTE $0xf1                     // punpcklbw    xmm6, xmm9
	LONG $0xde730f66; BYTE $0x02                     // psrldq    xmm6, 2
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0x680f4166; BYTE $0xc9                     // punpckhbw    xmm1, xmm9
	LONG $0x700f4466; WORD $0x27c9                   // pshufd    xmm9, xmm1, 39
	LONG $0xf9730f66; BYTE $0x0e                     // pslldq    xmm1, 14
	LONG $0xceeb0f66                                 // por    xmm1, xmm6
	LONG $0x700f41f3; WORD $0xc4f1                   // pshufhw    xmm6, xmm9, 196
	LONG $0xf6700f66; BYTE $0x27                     // pshufd    xmm6, xmm6, 39
	LONG $0xf6700ff2; BYTE $0x39                     // pshuflw    xmm6, xmm6, 57
	LONG $0xf6700ff3; BYTE $0xf9                     // pshufhw    xmm6, xmm6, 249
	LONG $0xce670f66                                 // packuswb    xmm1, xmm6
	LONG $0x446f0ff3; WORD $0xee10                   // movdqu    xmm0, oword [rax + rdx - 18]
	LONG $0x746f0ff3; WORD $0xef10                   // movdqu    xmm6, oword [rax + rdx - 17]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeeda0f66                                 // pminub    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0xc6de0f66                                 // pmaxub    xmm0, xmm6
	LONG $0x847f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm0
	LONG $0x6f0f4166; BYTE $0xf5                     // movdqa    xmm6, xmm13
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x6c6f0f66; WORD $0x2024                   // movdqa    xmm5, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0x847f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm0
	LONG $0xde0f4466; BYTE $0xce                     // pmaxub    xmm9, xmm6
	LONG $0x6f0f45f3; WORD $0x156c; BYTE $0xee       // movdqu    xmm13, oword [r13 + rdx - 18]
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0xf56f0f66                                 // movdqa    xmm6, xmm5
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0x747f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm6
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm5
	LONG $0x746f0ff3; WORD $0xee11                   // movdqu    xmm6, oword [rcx + rdx - 18]
	LONG $0x6f0f4566; BYTE $0xec                     // movdqa    xmm13, xmm12
	LONG $0xda0f4466; BYTE $0xee                     // pminub    xmm13, xmm6
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xf76f0f66                                 // movdqa    xmm6, xmm7
	LONG $0xda0f4166; BYTE $0xf4                     // pminub    xmm6, xmm12
	LONG $0xde0f4466; BYTE $0xe7                     // pmaxub    xmm12, xmm7
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc5                     // pminub    xmm0, xmm13
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4166; BYTE $0xf5                     // pmaxub    xmm6, xmm13
	LONG $0x6f0f4566; BYTE $0xee                     // movdqa    xmm13, xmm14
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xde0f4166; BYTE $0xde                     // pmaxub    xmm3, xmm14
	LONG $0x6c6f0ff3; WORD $0xef11                   // movdqu    xmm5, oword [rcx + rdx - 17]
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xed                     // pminub    xmm5, xmm13
	LONG $0xac7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm5
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x6f0f41f3; WORD $0x166c; BYTE $0xee       // movdqu    xmm5, oword [r14 + rdx - 18]
	LONG $0x6f0f45f3; WORD $0x166c; BYTE $0xef       // movdqu    xmm13, oword [r14 + rdx - 17]
	LONG $0x6f0f4466; BYTE $0xf5                     // movdqa    xmm14, xmm5
	LONG $0xda0f4566; BYTE $0xf5                     // pminub    xmm14, xmm13
	LONG $0xde0f4166; BYTE $0xed                     // pmaxub    xmm5, xmm13
	LONG $0x6f0f4566; BYTE $0xef                     // movdqa    xmm13, xmm15
	LONG $0xda0f4466; BYTE $0xed                     // pminub    xmm13, xmm5
	LONG $0xde0f4166; BYTE $0xef                     // pmaxub    xmm5, xmm15
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0xda0f4166; BYTE $0xee                     // pminub    xmm5, xmm14
	LONG $0xde0f4566; BYTE $0xee                     // pmaxub    xmm13, xmm14
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4466; BYTE $0xfc                     // pminub    xmm15, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x546f0f66; WORD $0x4024                   // movdqa    xmm2, oword [rsp + 64]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0x947f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm2
	LONG $0xde0f4566; BYTE $0xf7                     // pmaxub    xmm14, xmm15
	LONG $0x546f0ff3; WORD $0xee17                   // movdqu    xmm2, oword [rdi + rdx - 18]
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4566; BYTE $0xfa                     // pminub    xmm15, xmm10
	LONG $0xde0f4466; BYTE $0xd2                     // pmaxub    xmm10, xmm2
	LONG $0x6f0f4166; BYTE $0xd7                     // movdqa    xmm2, xmm15
	LONG $0xda0f4166; BYTE $0xd3                     // pminub    xmm2, xmm11
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xde0f4566; BYTE $0xfb                     // pmaxub    xmm15, xmm11
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xc8                     // pmaxub    xmm1, xmm8
	LONG $0xbc6f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xdf                     // movdqa    xmm11, xmm7
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    xmm8, oword [rsp + 32]
	LONG $0xda0f4566; BYTE $0xd8                     // pminub    xmm11, xmm8
	LONG $0x7f0f4466; LONG $0x0080249c; WORD $0x0000 // movdqa    oword [rsp + 128], xmm11
	LONG $0xde0f4466; BYTE $0xc7                     // pmaxub    xmm8, xmm7
	LONG $0x7f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    oword [rsp + 32], xmm8
	LONG $0x6f0f4566; BYTE $0xc1                     // movdqa    xmm8, xmm9
	LONG $0x6f0f4466; WORD $0x245c; BYTE $0x30       // movdqa    xmm11, oword [rsp + 48]
	LONG $0xda0f4566; BYTE $0xc3                     // pminub    xmm8, xmm11
	LONG $0xde0f4566; BYTE $0xd9                     // pmaxub    xmm11, xmm9
	LONG $0x7c6f0f66; WORD $0x7024                   // movdqa    xmm7, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xcb                     // pminub    xmm9, xmm11
	LONG $0xde0f4466; BYTE $0xdf                     // pmaxub    xmm11, xmm7
	LONG $0x7f0f4466; WORD $0x245c; BYTE $0x30       // movdqa    oword [rsp + 48], xmm11
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0xbc7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm7
	LONG $0xde0f4566; BYTE $0xc8                     // pmaxub    xmm9, xmm8
	LONG $0x7f0f4466; LONG $0x0090248c; WORD $0x0000 // movdqa    oword [rsp + 144], xmm9
	LONG $0x7c6f0f66; WORD $0x1024                   // movdqa    xmm7, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0x6f0f4466; WORD $0x240c                   // movdqa    xmm9, oword [rsp]
	LONG $0xda0f4566; BYTE $0xc1                     // pminub    xmm8, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0xbc6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xdf                     // movdqa    xmm11, xmm7
	LONG $0xda0f4566; BYTE $0xd9                     // pminub    xmm11, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0x7f0f4466; WORD $0x240c                   // movdqa    oword [rsp], xmm9
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0x7c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm7
	LONG $0xde0f4566; BYTE $0xd8                     // pmaxub    xmm11, xmm8
	LONG $0x7f0f4466; LONG $0x00b0249c; WORD $0x0000 // movdqa    oword [rsp + 176], xmm11
	LONG $0xbc6f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 192]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0x7c6f0f66; WORD $0x6024                   // movdqa    xmm7, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4466; BYTE $0xcd                     // pminub    xmm9, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0xbc7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm7
	LONG $0xde0f4566; BYTE $0xc8                     // pmaxub    xmm9, xmm8
	LONG $0x6f0f4466; BYTE $0xd8                     // movdqa    xmm11, xmm0
	LONG $0xda0f4566; BYTE $0xdd                     // pminub    xmm11, xmm13
	LONG $0xde0f4466; BYTE $0xe8                     // pmaxub    xmm13, xmm0
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4566; BYTE $0xc5                     // pminub    xmm8, xmm13
	LONG $0xde0f4466; BYTE $0xee                     // pmaxub    xmm13, xmm6
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xda0f4166; BYTE $0xc3                     // pminub    xmm0, xmm11
	LONG $0xde0f4566; BYTE $0xc3                     // pmaxub    xmm8, xmm11
	LONG $0xf36f0f66                                 // movdqa    xmm6, xmm3
	LONG $0x6f0f4466; LONG $0x00e024ac; WORD $0x0000 // movdqa    xmm13, oword [rsp + 224]
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4466; BYTE $0xeb                     // pmaxub    xmm13, xmm3
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4566; BYTE $0xdd                     // pminub    xmm11, xmm13
	LONG $0xde0f4566; BYTE $0xec                     // pmaxub    xmm13, xmm12
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xfeda0f66                                 // pminub    xmm7, xmm6
	LONG $0xde0f4466; BYTE $0xde                     // pmaxub    xmm11, xmm6
	LONG $0x6c6f0f66; WORD $0x4024                   // movdqa    xmm5, oword [rsp + 64]
	LONG $0xdd6f0f66                                 // movdqa    xmm3, xmm5
	LONG $0x6f0f4466; BYTE $0xe2                     // movdqa    xmm12, xmm2
	LONG $0xda0f4166; BYTE $0xdc                     // pminub    xmm3, xmm12
	LONG $0xde0f4466; BYTE $0xe5                     // pmaxub    xmm12, xmm5
	LONG $0xb46f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 208]
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xda0f4166; BYTE $0xec                     // pminub    xmm5, xmm12
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xf56f0f66                                 // movdqa    xmm6, xmm5
	LONG $0xf3da0f66                                 // pminub    xmm6, xmm3
	LONG $0x747f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm6
	LONG $0xebde0f66                                 // pmaxub    xmm5, xmm3
	LONG $0x6f0f4166; BYTE $0xf7                     // movdqa    xmm6, xmm15
	LONG $0xf1da0f66                                 // pminub    xmm6, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xce                     // pmaxub    xmm1, xmm14
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xda0f4166; BYTE $0xf2                     // pminub    xmm6, xmm10
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x846f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 160]
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0x84de0f66; LONG $0x0000c024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 192]
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0xde0f4166; BYTE $0xe6                     // pmaxub    xmm4, xmm14
	LONG $0xa47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm4
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xf7de0f66                                 // pmaxub    xmm6, xmm7
	LONG $0x546f0f66; WORD $0x5024                   // movdqa    xmm2, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf6                     // pminub    xmm14, xmm6
	LONG $0xf2de0f66                                 // pmaxub    xmm6, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x946f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 128]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6f0f4466; BYTE $0xfd                     // movdqa    xmm15, xmm5
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0xa47f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm4
	LONG $0x846f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 144]
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe3da0f66                                 // pminub    xmm4, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xda0f4166; BYTE $0xfa                     // pminub    xmm7, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xda0f4466; LONG $0x00b02494; WORD $0x0000 // pminub    xmm10, oword [rsp + 176]
	LONG $0x6f0f4566; BYTE $0xca                     // movdqa    xmm9, xmm10
	LONG $0xda0f4466; BYTE $0xcf                     // pminub    xmm9, xmm7
	LONG $0xde0f4466; BYTE $0xd7                     // pmaxub    xmm10, xmm7
	LONG $0x546f0f66; WORD $0x7024                   // movdqa    xmm2, oword [rsp + 112]
	LONG $0xfa6f0f66                                 // movdqa    xmm7, xmm2
	LONG $0xda0f4166; BYTE $0xfc                     // pminub    xmm7, xmm12
	LONG $0xde0f4466; BYTE $0xe2                     // pmaxub    xmm12, xmm2
	LONG $0x546f0f66; WORD $0x2024                   // movdqa    xmm2, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xda                     // movdqa    xmm11, xmm2
	LONG $0xda0f4566; BYTE $0xdc                     // pminub    xmm11, xmm12
	LONG $0xde0f4466; BYTE $0xe2                     // pmaxub    xmm12, xmm2
	LONG $0x6f0f4566; BYTE $0xc3                     // movdqa    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc7                     // pminub    xmm8, xmm7
	LONG $0xde0f4466; BYTE $0xdf                     // pmaxub    xmm11, xmm7
	LONG $0x6c6f0f66; WORD $0x6024                   // movdqa    xmm5, oword [rsp + 96]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xcdde0f66                                 // pmaxub    xmm1, xmm5
	LONG $0x4cda0f66; WORD $0x3024                   // pminub    xmm1, oword [rsp + 48]
	LONG $0xf96f0f66                                 // movdqa    xmm7, xmm1
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xda0f4466; WORD $0x242c                   // pminub    xmm13, oword [rsp]
	LONG $0xda0f4466; BYTE $0xee                     // pminub    xmm13, xmm6
	LONG $0xda0f4466; BYTE $0xd3                     // pminub    xmm10, xmm3
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xda0f4566; BYTE $0xd5                     // pminub    xmm10, xmm13
	LONG $0xda0f4466; BYTE $0xd1                     // pminub    xmm10, xmm1
	LONG $0x4c6f0f66; WORD $0x5024                   // movdqa    xmm1, oword [rsp + 80]
	LONG $0x8cde0f66; LONG $0x0000a024; BYTE $0x00   // pmaxub    xmm1, oword [rsp + 160]
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xde0f4466; WORD $0x2444; BYTE $0x10       // pmaxub    xmm8, oword [rsp + 16]
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0xde0f4466; BYTE $0xc1                     // pmaxub    xmm8, xmm1
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xda0f4166; BYTE $0xc6                     // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xce                     // pmaxub    xmm9, xmm14
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xfcde0f66                                 // pmaxub    xmm7, xmm4
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xda0f4166; BYTE $0xd3                     // pminub    xmm2, xmm11
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xef0f4566; BYTE $0xdb                     // pxor    xmm11, xmm11
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4466; BYTE $0xd7                     // pmaxub    xmm10, xmm7
	LONG $0xda0f4566; BYTE $0xd1                     // pminub    xmm10, xmm9
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xde0f4166; BYTE $0xc0                     // pmaxub    xmm0, xmm8
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0x646f0f66; WORD $0x4024                   // movdqa    xmm4, oword [rsp + 64]
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc7                     // pminub    xmm0, xmm15
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x7f0f41f3; WORD $0x114c; BYTE $0xf0       // movdqu    oword [r9 + rdx - 16], xmm1
	WORD $0xff49; BYTE $0xc4                         // inc    r12
	LONG $0x248c034c; LONG $0x00000160               // add    r9, qword 352[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf7                         // add    r15, rsi
	LONG $0x24a43b4c; LONG $0x000000f0               // cmp    r12, qword [rsp + 240]
	JNE  LBB3_23
	JMP  LBB3_62

LBB3_27:
	LONG $0x24bc8348; LONG $0x000000f0; BYTE $0x00 // cmp    qword [rsp + 240], 0
	JE   LBB3_62
	LONG $0x52148d4c                               // lea    r10, [rdx + 2*rdx]
	LONG $0x526c8d4c; BYTE $0xff                   // lea    r13, [rdx + 2*rdx - 1]
	LONG $0xf0e58349                               // and    r13, -16
	LONG $0x24848b48; LONG $0x000000f0             // mov    rax, qword [rsp + 240]
	LONG $0xfe488d48                               // lea    rcx, [rax - 2]
	LONG $0x248c8948; LONG $0x00000120             // mov    qword [rsp + 288], rcx
	WORD $0xff48; BYTE $0xc8                       // dec    rax
	LONG $0x24848948; LONG $0x00000130             // mov    qword [rsp + 304], rax
	LONG $0x24848b48; LONG $0x000000f8             // mov    rax, qword [rsp + 248]
	LONG $0x16708d4c                               // lea    r14, [rax + 22]
	WORD $0x3145; BYTE $0xe4                       // xor    r12d, r12d
	LONG $0xef0f4566; BYTE $0xdb                   // pxor    xmm11, xmm11

LBB3_29:
	LONG $0x244c8d49; BYTE $0xfe                     // lea    rcx, [r12 - 2]
	LONG $0xceaf0f48                                 // imul    rcx, rsi
	LONG $0x248c0348; LONG $0x000000f8               // add    rcx, qword [rsp + 248]
	LONG $0x311c8d4c                                 // lea    r11, [rcx + rsi]
	LONG $0x333c8d4d                                 // lea    r15, [r11 + rsi]
	LONG $0x37048d4d                                 // lea    r8, [r15 + rsi]
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	WORD $0x894c; BYTE $0xdb                         // mov    rbx, r11
	LONG $0x6f0f4266; WORD $0x1e2c                   // movdqa    xmm5, oword [rsi + r11]
	LONG $0x6f0f42f3; WORD $0x1e74; BYTE $0x03       // movdqu    xmm6, oword [rsi + r11 + 3]
	LONG $0xb47f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm6
	WORD $0x894c; BYTE $0xd8                         // mov    rax, r11
	LONG $0xc7440f49                                 // cmove    rax, r15
	LONG $0x02fc8349                                 // cmp    r12, 2
	LONG $0xd8420f48                                 // cmovb    rbx, rax
	LONG $0xc1430f48                                 // cmovae    rax, rcx
	LONG $0x24a43b4c; LONG $0x00000130               // cmp    r12, qword [rsp + 304]
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	LONG $0xf8420f49                                 // cmovb    rdi, r8
	LONG $0x24a43b4c; LONG $0x00000120               // cmp    r12, qword [rsp + 288]
	WORD $0x8948; BYTE $0xf9                         // mov    rcx, rdi
	LONG $0xc8420f49                                 // cmovb    rcx, r8
	LONG $0x186f0f66                                 // movdqa    xmm3, oword [rax]
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0x486f0ff3; BYTE $0x03                     // movdqu    xmm1, oword [rax + 3]
	LONG $0x6f0f44f3; WORD $0x0648                   // movdqu    xmm9, oword [rax + 6]
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0xde0f4166; BYTE $0xc9                     // pmaxub    xmm1, xmm9
	LONG $0x6f0f4466; BYTE $0xe3                     // movdqa    xmm12, xmm3
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0x4c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm1
	LONG $0x600f4166; BYTE $0xdb                     // punpcklbw    xmm3, xmm11
	LONG $0xcb700f66; BYTE $0x27                     // pshufd    xmm1, xmm3, 39
	LONG $0xdb730f66; BYTE $0x0a                     // psrldq    xmm3, 10
	LONG $0x680f4166; BYTE $0xc3                     // punpckhbw    xmm0, xmm11
	LONG $0xf8730f66; BYTE $0x06                     // pslldq    xmm0, 6
	LONG $0xc3eb0f66                                 // por    xmm0, xmm3
	LONG $0xc9700ff3; BYTE $0xec                     // pshufhw    xmm1, xmm1, 236
	LONG $0xc9700f66; BYTE $0x67                     // pshufd    xmm1, xmm1, 103
	LONG $0xc9700ff2; BYTE $0x24                     // pshuflw    xmm1, xmm1, 36
	LONG $0xe1700ff3; BYTE $0x39                     // pshufhw    xmm4, xmm1, 57
	LONG $0xe0670f66                                 // packuswb    xmm4, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0x600f4166; BYTE $0xc3                     // punpcklbw    xmm0, xmm11
	LONG $0xc8700f66; BYTE $0x27                     // pshufd    xmm1, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a                     // psrldq    xmm0, 10
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0x680f4166; BYTE $0xd3                     // punpckhbw    xmm2, xmm11
	LONG $0xfa730f66; BYTE $0x06                     // pslldq    xmm2, 6
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc1700ff3; BYTE $0xec                     // pshufhw    xmm0, xmm1, 236
	LONG $0xc0700f66; BYTE $0x67                     // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24                     // pshuflw    xmm0, xmm0, 36
	LONG $0x700f44f3; WORD $0x39d0                   // pshufhw    xmm10, xmm0, 57
	LONG $0x670f4466; BYTE $0xd2                     // packuswb    xmm10, xmm2
	LONG $0x036f0f66                                 // movdqa    xmm0, oword [rbx]
	LONG $0x447f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm0
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0x600f4166; BYTE $0xcb                     // punpcklbw    xmm1, xmm11
	LONG $0xd1700f66; BYTE $0x27                     // pshufd    xmm2, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0a                     // psrldq    xmm1, 10
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0x680f4166; BYTE $0xdb                     // punpckhbw    xmm3, xmm11
	LONG $0xfb730f66; BYTE $0x06                     // pslldq    xmm3, 6
	LONG $0xd9eb0f66                                 // por    xmm3, xmm1
	LONG $0xca700ff3; BYTE $0xec                     // pshufhw    xmm1, xmm2, 236
	LONG $0xc9700f66; BYTE $0x67                     // pshufd    xmm1, xmm1, 103
	LONG $0xc9700ff2; BYTE $0x24                     // pshuflw    xmm1, xmm1, 36
	LONG $0x700f44f3; WORD $0x39c1                   // pshufhw    xmm8, xmm1, 57
	LONG $0x670f4466; BYTE $0xc3                     // packuswb    xmm8, xmm3
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0x600f4166; BYTE $0xcb                     // punpcklbw    xmm1, xmm11
	LONG $0xd1700f66; BYTE $0x27                     // pshufd    xmm2, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0a                     // psrldq    xmm1, 10
	LONG $0x6f0f4166; BYTE $0xd8                     // movdqa    xmm3, xmm8
	LONG $0x680f4166; BYTE $0xdb                     // punpckhbw    xmm3, xmm11
	LONG $0xfb730f66; BYTE $0x06                     // pslldq    xmm3, 6
	LONG $0xd9eb0f66                                 // por    xmm3, xmm1
	LONG $0xca700ff3; BYTE $0xec                     // pshufhw    xmm1, xmm2, 236
	LONG $0xc9700f66; BYTE $0x67                     // pshufd    xmm1, xmm1, 103
	LONG $0xc9700ff2; BYTE $0x24                     // pshuflw    xmm1, xmm1, 36
	LONG $0x700f44f3; WORD $0x39f1                   // pshufhw    xmm14, xmm1, 57
	LONG $0x670f4466; BYTE $0xf3                     // packuswb    xmm14, xmm3
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0x600f4166; BYTE $0xcb                     // punpcklbw    xmm1, xmm11
	LONG $0xd1700f66; BYTE $0x27                     // pshufd    xmm2, xmm1, 39
	LONG $0xd9730f66; BYTE $0x0a                     // psrldq    xmm1, 10
	LONG $0xdd6f0f66                                 // movdqa    xmm3, xmm5
	LONG $0x680f4166; BYTE $0xdb                     // punpckhbw    xmm3, xmm11
	LONG $0xfb730f66; BYTE $0x06                     // pslldq    xmm3, 6
	LONG $0xd9eb0f66                                 // por    xmm3, xmm1
	LONG $0xca700ff3; BYTE $0xec                     // pshufhw    xmm1, xmm2, 236
	LONG $0xc9700f66; BYTE $0x67                     // pshufd    xmm1, xmm1, 103
	LONG $0xc9700ff2; BYTE $0x24                     // pshuflw    xmm1, xmm1, 36
	LONG $0xd1700ff3; BYTE $0x39                     // pshufhw    xmm2, xmm1, 57
	LONG $0xd3670f66                                 // packuswb    xmm2, xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0xac7f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm5
	LONG $0x600f4166; BYTE $0xd3                     // punpcklbw    xmm2, xmm11
	LONG $0xf2700f66; BYTE $0x27                     // pshufd    xmm6, xmm2, 39
	LONG $0xda730f66; BYTE $0x0a                     // psrldq    xmm2, 10
	LONG $0x680f4166; BYTE $0xdb                     // punpckhbw    xmm3, xmm11
	LONG $0xfb730f66; BYTE $0x06                     // pslldq    xmm3, 6
	LONG $0xdaeb0f66                                 // por    xmm3, xmm2
	LONG $0xd6700ff3; BYTE $0xec                     // pshufhw    xmm2, xmm6, 236
	LONG $0xd2700f66; BYTE $0x67                     // pshufd    xmm2, xmm2, 103
	LONG $0xd2700ff2; BYTE $0x24                     // pshuflw    xmm2, xmm2, 36
	LONG $0x700f44f3; WORD $0x39fa                   // pshufhw    xmm15, xmm2, 57
	LONG $0x670f4466; BYTE $0xfb                     // packuswb    xmm15, xmm3
	LONG $0x416f0ff3; BYTE $0x03                     // movdqu    xmm0, oword [rcx + 3]
	LONG $0x496f0ff3; BYTE $0x06                     // movdqu    xmm1, oword [rcx + 6]
	LONG $0x8c7f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm1
	LONG $0x447f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm0
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x116f0f66                                 // movdqa    xmm2, oword [rcx]
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x847f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm0
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0x600f4166; BYTE $0xd3                     // punpcklbw    xmm2, xmm11
	LONG $0xf2700f66; BYTE $0x27                     // pshufd    xmm6, xmm2, 39
	LONG $0xda730f66; BYTE $0x0a                     // psrldq    xmm2, 10
	LONG $0x680f4166; BYTE $0xdb                     // punpckhbw    xmm3, xmm11
	LONG $0xfb730f66; BYTE $0x06                     // pslldq    xmm3, 6
	LONG $0xdaeb0f66                                 // por    xmm3, xmm2
	LONG $0xd6700ff3; BYTE $0xec                     // pshufhw    xmm2, xmm6, 236
	LONG $0xd2700f66; BYTE $0x67                     // pshufd    xmm2, xmm2, 103
	LONG $0xd2700ff2; BYTE $0x24                     // pshuflw    xmm2, xmm2, 36
	LONG $0xfa700ff3; BYTE $0x39                     // pshufhw    xmm7, xmm2, 57
	LONG $0xfb670f66                                 // packuswb    xmm7, xmm3
	LONG $0xd76f0f66                                 // movdqa    xmm2, xmm7
	LONG $0x600f4166; BYTE $0xd3                     // punpcklbw    xmm2, xmm11
	LONG $0xda700f66; BYTE $0x27                     // pshufd    xmm3, xmm2, 39
	LONG $0xda730f66; BYTE $0x0a                     // psrldq    xmm2, 10
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0x680f4166; BYTE $0xc3                     // punpckhbw    xmm0, xmm11
	LONG $0xf8730f66; BYTE $0x06                     // pslldq    xmm0, 6
	LONG $0xc2eb0f66                                 // por    xmm0, xmm2
	LONG $0xd3700ff3; BYTE $0xec                     // pshufhw    xmm2, xmm3, 236
	LONG $0xd2700f66; BYTE $0x67                     // pshufd    xmm2, xmm2, 103
	LONG $0xd2700ff2; BYTE $0x24                     // pshuflw    xmm2, xmm2, 36
	LONG $0x700f44f3; WORD $0x39ea                   // pshufhw    xmm13, xmm2, 57
	LONG $0x670f4466; BYTE $0xe8                     // packuswb    xmm13, xmm0
	LONG $0x30148d49                                 // lea    rdx, [r8 + rsi]
	LONG $0xfa420f48                                 // cmovb    rdi, rdx
	LONG $0x0f6f0f66                                 // movdqa    xmm1, oword [rdi]
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x600f4166; BYTE $0xc3                     // punpcklbw    xmm0, xmm11
	LONG $0xd0700f66; BYTE $0x27                     // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a                     // psrldq    xmm0, 10
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0x680f4166; BYTE $0xeb                     // punpckhbw    xmm5, xmm11
	LONG $0xfd730f66; BYTE $0x06                     // pslldq    xmm5, 6
	LONG $0xe8eb0f66                                 // por    xmm5, xmm0
	LONG $0xc2700ff3; BYTE $0xec                     // pshufhw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x67                     // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24                     // pshuflw    xmm0, xmm0, 36
	LONG $0xd8700ff3; BYTE $0x39                     // pshufhw    xmm3, xmm0, 57
	LONG $0xdd670f66                                 // packuswb    xmm3, xmm5
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc3                     // punpcklbw    xmm0, xmm11
	LONG $0xd0700f66; BYTE $0x27                     // pshufd    xmm2, xmm0, 39
	LONG $0xd8730f66; BYTE $0x0a                     // psrldq    xmm0, 10
	LONG $0xeb6f0f66                                 // movdqa    xmm5, xmm3
	LONG $0x680f4166; BYTE $0xeb                     // punpckhbw    xmm5, xmm11
	LONG $0xfd730f66; BYTE $0x06                     // pslldq    xmm5, 6
	LONG $0xe8eb0f66                                 // por    xmm5, xmm0
	LONG $0xc2700ff3; BYTE $0xec                     // pshufhw    xmm0, xmm2, 236
	LONG $0xc0700f66; BYTE $0x67                     // pshufd    xmm0, xmm0, 103
	LONG $0xc0700ff2; BYTE $0x24                     // pshuflw    xmm0, xmm0, 36
	LONG $0xd0700ff3; BYTE $0x39                     // pshufhw    xmm2, xmm0, 57
	LONG $0xd5670f66                                 // packuswb    xmm2, xmm5
	LONG $0x6f0f4566; BYTE $0xda                     // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xdc                     // pminub    xmm11, xmm4
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x7f0f4466; LONG $0x00e02494; WORD $0x0000 // movdqa    oword [rsp + 224], xmm10
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0x6f0f4566; BYTE $0xcc                     // movdqa    xmm9, xmm12
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x7f0f4466; WORD $0x2464; BYTE $0x60       // movdqa    oword [rsp + 96], xmm12
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0x6c6f0f66; WORD $0x3024                   // movdqa    xmm5, oword [rsp + 48]
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4466; BYTE $0xc5                     // pmaxub    xmm8, xmm5
	LONG $0x6f0f4566; BYTE $0xe6                     // movdqa    xmm12, xmm14
	LONG $0xda0f4566; BYTE $0xe0                     // pminub    xmm12, xmm8
	LONG $0xde0f4566; BYTE $0xc6                     // pmaxub    xmm8, xmm14
	LONG $0x7f0f4466; WORD $0x2404                   // movdqa    oword [rsp], xmm8
	LONG $0x6f0f4566; BYTE $0xd4                     // movdqa    xmm10, xmm12
	LONG $0xda0f4466; BYTE $0xd0                     // pminub    xmm10, xmm0
	LONG $0xde0f4466; BYTE $0xe0                     // pmaxub    xmm12, xmm0
	LONG $0x436f0ff3; BYTE $0x06                     // movdqu    xmm0, oword [rbx + 6]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xef                     // pminub    xmm5, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0x6f0f44f3; WORD $0x0343                   // movdqu    xmm8, oword [rbx + 3]
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xda0f4166; BYTE $0xc7                     // pminub    xmm0, xmm15
	LONG $0xde0f4566; BYTE $0xf8                     // pmaxub    xmm15, xmm8
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xa47f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    oword [rsp + 256], xmm4
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x6c6f0f66; WORD $0x7024                   // movdqa    xmm5, oword [rsp + 112]
	LONG $0xacda0f66; LONG $0x00008024; BYTE $0x00   // pminub    xmm5, oword [rsp + 128]
	LONG $0x646f0f66; WORD $0x1024                   // movdqa    xmm4, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xc4                     // movdqa    xmm8, xmm4
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0x647f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm4
	LONG $0x6f0f4166; BYTE $0xe5                     // movdqa    xmm4, xmm13
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xde0f4466; BYTE $0xef                     // pmaxub    xmm13, xmm7
	LONG $0x6f0f42f3; WORD $0x1e6c; BYTE $0x06       // movdqu    xmm5, oword [rsi + r11 + 6]
	LONG $0x6f0f4466; BYTE $0xf5                     // movdqa    xmm14, xmm5
	LONG $0xda0f4566; BYTE $0xf5                     // pminub    xmm14, xmm13
	LONG $0xde0f4466; BYTE $0xed                     // pmaxub    xmm13, xmm5
	LONG $0x6f0f4166; BYTE $0xee                     // movdqa    xmm5, xmm14
	LONG $0xecda0f66                                 // pminub    xmm5, xmm4
	LONG $0x6c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm5
	LONG $0xde0f4466; BYTE $0xf4                     // pmaxub    xmm14, xmm4
	LONG $0x6c6f0f66; WORD $0x5024                   // movdqa    xmm5, oword [rsp + 80]
	LONG $0xacda0f66; LONG $0x00009024; BYTE $0x00   // pminub    xmm5, oword [rsp + 144]
	LONG $0x646f0f66; WORD $0x2024                   // movdqa    xmm4, oword [rsp + 32]
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xf5da0f66                                 // pminub    xmm6, xmm5
	LONG $0xb47f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm6
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0x647f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm4
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0x947f0f66; LONG $0x00011024; BYTE $0x00   // movdqa    oword [rsp + 272], xmm2
	LONG $0xccde0f66                                 // pmaxub    xmm1, xmm4
	LONG $0x676f0ff3; BYTE $0x03                     // movdqu    xmm4, oword [rdi + 3]
	LONG $0x576f0ff3; BYTE $0x06                     // movdqu    xmm2, oword [rdi + 6]
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0x947f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm2
	LONG $0xde0f4566; BYTE $0xd1                     // pmaxub    xmm10, xmm9
	LONG $0x7f0f4466; LONG $0x00802494; WORD $0x0000 // movdqa    oword [rsp + 128], xmm10
	LONG $0x6c6f0f66; WORD $0x6024                   // movdqa    xmm5, oword [rsp + 96]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xda0f4166; BYTE $0xd4                     // pminub    xmm2, xmm12
	LONG $0xde0f4466; BYTE $0xe5                     // pmaxub    xmm12, xmm5
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xda0f4166; BYTE $0xec                     // pminub    xmm5, xmm12
	LONG $0xde0f4566; BYTE $0xe3                     // pmaxub    xmm12, xmm11
	LONG $0x7f0f4466; WORD $0x2464; BYTE $0x70       // movdqa    oword [rsp + 112], xmm12
	LONG $0xfd6f0f66                                 // movdqa    xmm7, xmm5
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xbc7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm7
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6c7f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm5
	LONG $0x6f0f4466; WORD $0x2454; BYTE $0x40       // movdqa    xmm10, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0x2c6f0f66; BYTE $0x24                     // movdqa    xmm5, oword [rsp]
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xde0f4166; BYTE $0xea                     // pmaxub    xmm5, xmm10
	LONG $0x6f0f4466; LONG $0x00e0248c; WORD $0x0000 // movdqa    xmm9, oword [rsp + 224]
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xfdda0f66                                 // pminub    xmm7, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x2c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm5
	LONG $0xef6f0f66                                 // movdqa    xmm5, xmm7
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x7c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm7
	LONG $0x6f0f4566; BYTE $0xd0                     // movdqa    xmm10, xmm8
	LONG $0x6c6f0f66; WORD $0x3024                   // movdqa    xmm5, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xd5                     // pminub    xmm10, xmm5
	LONG $0xde0f4166; BYTE $0xe8                     // pmaxub    xmm5, xmm8
	LONG $0xbc6f0f66; LONG $0x00010024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 256]
	LONG $0xd76f0f66                                 // movdqa    xmm2, xmm7
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0x6c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm5
	LONG $0xea6f0f66                                 // movdqa    xmm5, xmm2
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0xde0f4166; BYTE $0xd2                     // pmaxub    xmm2, xmm10
	LONG $0x6c6f0f66; WORD $0x1024                   // movdqa    xmm5, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xda0f4566; BYTE $0xd6                     // pminub    xmm10, xmm14
	LONG $0xde0f4466; BYTE $0xf5                     // pmaxub    xmm14, xmm5
	LONG $0x6f0f4466; BYTE $0xc0                     // movdqa    xmm8, xmm0
	LONG $0xda0f4566; BYTE $0xc6                     // pminub    xmm8, xmm14
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4566; BYTE $0xe0                     // movdqa    xmm12, xmm8
	LONG $0xda0f4566; BYTE $0xe2                     // pminub    xmm12, xmm10
	LONG $0xde0f4566; BYTE $0xc2                     // pmaxub    xmm8, xmm10
	LONG $0xac6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 176]
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xda0f4166; BYTE $0xc5                     // pminub    xmm0, xmm13
	LONG $0xde0f4466; BYTE $0xed                     // pmaxub    xmm13, xmm5
	LONG $0x6f0f4566; BYTE $0xdf                     // movdqa    xmm11, xmm15
	LONG $0xda0f4566; BYTE $0xdd                     // pminub    xmm11, xmm13
	LONG $0xde0f4566; BYTE $0xef                     // pmaxub    xmm13, xmm15
	LONG $0x6f0f4566; BYTE $0xd3                     // movdqa    xmm10, xmm11
	LONG $0xda0f4466; BYTE $0xd0                     // pminub    xmm10, xmm0
	LONG $0xde0f4466; BYTE $0xd8                     // pmaxub    xmm11, xmm0
	LONG $0xac6f0f66; LONG $0x00011024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 272]
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xf5de0f66                                 // pmaxub    xmm6, xmm5
	LONG $0xac6f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xfd                     // movdqa    xmm15, xmm5
	LONG $0xda0f4466; BYTE $0xfe                     // pminub    xmm15, xmm6
	LONG $0xf5de0f66                                 // pmaxub    xmm6, xmm5
	LONG $0x6f0f4166; BYTE $0xef                     // movdqa    xmm5, xmm15
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0x6c7f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm5
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0x6f0f4466; BYTE $0xc9                     // movdqa    xmm9, xmm1
	LONG $0xda0f4466; BYTE $0xcc                     // pminub    xmm9, xmm4
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xecda0f66                                 // pminub    xmm5, xmm4
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x8c6f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm1, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xc9                     // movdqa    xmm9, xmm1
	LONG $0xda0f4466; BYTE $0xcb                     // pminub    xmm9, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4166; BYTE $0xcc                     // movdqa    xmm1, xmm12
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x6f0f4466; LONG $0x00c024a4; WORD $0x0000 // movdqa    xmm12, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xfc                     // movdqa    xmm7, xmm12
	LONG $0xf8da0f66                                 // pminub    xmm7, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0x84de0f66; LONG $0x0000e024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 224]
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0xf9de0f66                                 // pmaxub    xmm7, xmm1
	LONG $0xbc7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm7
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xda0f4166; BYTE $0xc9                     // pminub    xmm1, xmm9
	LONG $0xde0f4566; BYTE $0xca                     // pmaxub    xmm9, xmm10
	LONG $0x7c6f0f66; WORD $0x4024                   // movdqa    xmm7, oword [rsp + 64]
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xda0f4166; BYTE $0xc1                     // pminub    xmm0, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x847f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm0
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4466; BYTE $0xfa                     // pmaxub    xmm15, xmm2
	LONG $0x846f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 144]
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xda0f4166; BYTE $0xff                     // pminub    xmm7, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0x7f0f4466; WORD $0x247c; BYTE $0x40       // movdqa    oword [rsp + 64], xmm15
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xde0f4166; BYTE $0xe8                     // pmaxub    xmm5, xmm8
	LONG $0xf9de0f66                                 // pmaxub    xmm7, xmm1
	LONG $0xbc7f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm7
	LONG $0x446f0f66; WORD $0x6024                   // movdqa    xmm0, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xc0                     // movdqa    xmm8, xmm0
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4566; BYTE $0xd0                     // movdqa    xmm10, xmm8
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xdb                     // pmaxub    xmm3, xmm11
	LONG $0x5cda0f66; WORD $0x5024                   // pminub    xmm3, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xfb                     // movdqa    xmm15, xmm3
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x846f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 128]
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xceda0f66                                 // pminub    xmm1, xmm6
	LONG $0xf0de0f66                                 // pmaxub    xmm6, xmm0
	LONG $0x6f0f4466; BYTE $0xd9                     // movdqa    xmm11, xmm1
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xe6                     // pmaxub    xmm4, xmm14
	LONG $0x64da0f66; WORD $0x7024                   // pminub    xmm4, oword [rsp + 112]
	LONG $0xfc6f0f66                                 // movdqa    xmm7, xmm4
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0xda0f4466; WORD $0x242c                   // pminub    xmm13, oword [rsp]
	LONG $0xda0f4566; BYTE $0xe9                     // pminub    xmm13, xmm9
	LONG $0xddda0f66                                 // pminub    xmm3, xmm5
	LONG $0xe6da0f66                                 // pminub    xmm4, xmm6
	LONG $0xda0f4166; BYTE $0xdd                     // pminub    xmm3, xmm13
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xde0f4466; LONG $0x00a024a4; WORD $0x0000 // pmaxub    xmm12, oword [rsp + 160]
	LONG $0xde0f4466; LONG $0x00902494; WORD $0x0000 // pmaxub    xmm10, oword [rsp + 144]
	LONG $0xde0f4466; WORD $0x245c; BYTE $0x10       // pmaxub    xmm11, oword [rsp + 16]
	LONG $0xde0f4566; BYTE $0xda                     // pmaxub    xmm11, xmm10
	LONG $0xde0f4566; BYTE $0xdc                     // pmaxub    xmm11, xmm12
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0x946f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 176]
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xde0f4466; BYTE $0xfa                     // pmaxub    xmm15, xmm2
	LONG $0xd76f0f66                                 // movdqa    xmm2, xmm7
	LONG $0xda0f4166; BYTE $0xd0                     // pminub    xmm2, xmm8
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0xccde0f66                                 // pmaxub    xmm1, xmm4
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xdfde0f66                                 // pmaxub    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xdf                     // pminub    xmm3, xmm15
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xde0f4166; BYTE $0xc3                     // pmaxub    xmm0, xmm11
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc3de0f66                                 // pmaxub    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0x5c6f0f66; WORD $0x2024                   // movdqa    xmm3, oword [rsp + 32]
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xe3de0f66                                 // pmaxub    xmm4, xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x4c6f0f66; WORD $0x4024                   // movdqa    xmm1, oword [rsp + 64]
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x7f0f4166; BYTE $0x11                     // movdqa    oword [r9], xmm2
	LONG $0x11fd8349                                 // cmp    r13, 17
	JB   LBB3_32
	WORD $0x894c; BYTE $0xf2                         // mov    rdx, r14
	LONG $0x0010b841; WORD $0x0000                   // mov    r8d, 16

LBB3_31:
	LONG $0x6f0f42f3; WORD $0x0054; BYTE $0xfa       // movdqu    xmm2, oword [rax + r8 - 6]
	LONG $0x6f0f42f3; WORD $0x004c; BYTE $0xfd       // movdqu    xmm1, oword [rax + r8 - 3]
	LONG $0x6f0f4666; WORD $0x0034                   // movdqa    xmm14, oword [rax + r8]
	LONG $0x6f0f42f3; WORD $0x0044; BYTE $0x03       // movdqu    xmm0, oword [rax + r8 + 3]
	LONG $0x6f0f42f3; WORD $0x0064; BYTE $0x06       // movdqu    xmm4, oword [rax + r8 + 6]
	LONG $0x6f0f42f3; WORD $0x0374; BYTE $0xfa       // movdqu    xmm6, oword [rbx + r8 - 6]
	LONG $0x6f0f42f3; WORD $0x036c; BYTE $0xfd       // movdqu    xmm5, oword [rbx + r8 - 3]
	LONG $0x6f0f4266; WORD $0x033c                   // movdqa    xmm7, oword [rbx + r8]
	LONG $0x6f0f46f3; WORD $0x0364; BYTE $0x03       // movdqu    xmm12, oword [rbx + r8 + 3]
	LONG $0x6f0f46f3; WORD $0x035c; BYTE $0x06       // movdqu    xmm11, oword [rbx + r8 + 6]
	LONG $0x6f0f44f3; WORD $0xf442                   // movdqu    xmm8, oword [rdx - 12]
	LONG $0x6f0f44f3; WORD $0xf77a                   // movdqu    xmm15, oword [rdx - 9]
	LONG $0x6f0f4466; WORD $0xfa6a                   // movdqa    xmm13, oword [rdx - 6]
	LONG $0x6f0f44f3; WORD $0xfd52                   // movdqu    xmm10, oword [rdx - 3]
	LONG $0x5c100f42; WORD $0xfa01                   // movups    xmm3, oword [rcx + r8 - 6]
	LONG $0x241c290f                                 // movaps    oword [rsp], xmm3
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xc86f0f66                                 // movdqa    xmm1, xmm0
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xc4de0f66                                 // pmaxub    xmm0, xmm4
	LONG $0x6f0f4566; BYTE $0xce                     // movdqa    xmm9, xmm14
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xc9                     // pmaxub    xmm9, xmm1
	LONG $0xcd6f0f66                                 // movdqa    xmm1, xmm5
	LONG $0xcfda0f66                                 // pminub    xmm1, xmm7
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0x5c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm3
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xc8                     // pminub    xmm1, xmm8
	LONG $0xde0f4166; BYTE $0xd0                     // pmaxub    xmm2, xmm8
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xda                     // pminub    xmm11, xmm2
	LONG $0xde0f4166; BYTE $0xd4                     // pmaxub    xmm2, xmm12
	LONG $0x947f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm2
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0x947f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    oword [rsp + 144], xmm2
	LONG $0xde0f4466; BYTE $0xd9                     // pmaxub    xmm11, xmm1
	LONG $0x6f0f4166; BYTE $0xcd                     // movdqa    xmm1, xmm13
	LONG $0xda0f4166; BYTE $0xca                     // pminub    xmm1, xmm10
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xda0f4166; BYTE $0xe5                     // pminub    xmm4, xmm13
	LONG $0xde0f4566; BYTE $0xef                     // pmaxub    xmm13, xmm15
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x6f0f4466; BYTE $0xe4                     // movdqa    xmm12, xmm4
	LONG $0xda0f4466; BYTE $0xe1                     // pminub    xmm12, xmm1
	LONG $0xe1de0f66                                 // pmaxub    xmm4, xmm1
	LONG $0x6f0f42f3; WORD $0x014c; BYTE $0xfd       // movdqu    xmm1, oword [rcx + r8 - 3]
	LONG $0x146f0f66; BYTE $0x24                     // movdqa    xmm2, oword [rsp]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x0a6f0ff3                                 // movdqu    xmm1, oword [rdx]
	LONG $0x6f0f4466; BYTE $0xd1                     // movdqa    xmm10, xmm1
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x147f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm2
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xde0f4466; BYTE $0xd3                     // pmaxub    xmm10, xmm3
	LONG $0x6f0f42f3; WORD $0x0154; BYTE $0x03       // movdqu    xmm2, oword [rcx + r8 + 3]
	LONG $0x6f0f42f3; WORD $0x014c; BYTE $0x06       // movdqu    xmm1, oword [rcx + r8 + 6]
	LONG $0xda6f0f66                                 // movdqa    xmm3, xmm2
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x6f0f4266; WORD $0x010c                   // movdqa    xmm1, oword [rcx + r8]
	LONG $0x6f0f4466; BYTE $0xc1                     // movdqa    xmm8, xmm1
	LONG $0xda0f4466; BYTE $0xc2                     // pminub    xmm8, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0x8c7f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm1
	LONG $0xde0f4466; BYTE $0xc3                     // pmaxub    xmm8, xmm3
	LONG $0x6f0f42f3; WORD $0x075c; BYTE $0xfd       // movdqu    xmm3, oword [rdi + r8 - 3]
	LONG $0x6f0f4266; WORD $0x070c                   // movdqa    xmm1, oword [rdi + r8]
	LONG $0xfb6f0f66                                 // movdqa    xmm7, xmm3
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f42f3; WORD $0x074c; BYTE $0xfa       // movdqu    xmm1, oword [rdi + r8 - 6]
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4566; BYTE $0xfd                     // movdqa    xmm15, xmm13
	LONG $0xda0f4466; BYTE $0xff                     // pminub    xmm15, xmm7
	LONG $0xde0f4466; BYTE $0xef                     // pmaxub    xmm13, xmm7
	LONG $0x6f0f42f3; WORD $0x077c; BYTE $0x03       // movdqu    xmm7, oword [rdi + r8 + 3]
	LONG $0x6f0f42f3; WORD $0x0754; BYTE $0x06       // movdqu    xmm2, oword [rdi + r8 + 6]
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xfade0f66                                 // pmaxub    xmm7, xmm2
	LONG $0x6f0f4166; BYTE $0xf6                     // movdqa    xmm6, xmm14
	LONG $0x546f0f66; WORD $0x3024                   // movdqa    xmm2, oword [rsp + 48]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0x7f0f4466; LONG $0x00b024b4; WORD $0x0000 // movdqa    oword [rsp + 176], xmm14
	LONG $0xd6de0f66                                 // pmaxub    xmm2, xmm6
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0x546f0f66; WORD $0x1024                   // movdqa    xmm2, oword [rsp + 16]
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x70       // movdqa    xmm9, oword [rsp + 112]
	LONG $0x6f0f4166; BYTE $0xf1                     // movdqa    xmm6, xmm9
	LONG $0xf2da0f66                                 // pminub    xmm6, xmm2
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0xd66f0f66                                 // movdqa    xmm2, xmm6
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0x947f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm2
	LONG $0xde0f4166; BYTE $0xf6                     // pmaxub    xmm6, xmm14
	LONG $0xb47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm6
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xd5da0f66                                 // pminub    xmm2, xmm5
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6f0f4466; WORD $0x244c; BYTE $0x40       // movdqa    xmm9, oword [rsp + 64]
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x6c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x447f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm0
	LONG $0x6f0f4166; BYTE $0xd4                     // movdqa    xmm2, xmm12
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0xac6f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm5, oword [rsp + 144]
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm0
	LONG $0x6f0f4566; BYTE $0xf1                     // movdqa    xmm14, xmm9
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0xd46f0f66                                 // movdqa    xmm2, xmm4
	LONG $0xda0f4166; BYTE $0xd2                     // pminub    xmm2, xmm10
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4166; BYTE $0xeb                     // movdqa    xmm5, xmm11
	LONG $0xda0f4166; BYTE $0xea                     // pminub    xmm5, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0x7f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    oword [rsp + 144], xmm10
	LONG $0x6f0f4466; BYTE $0xd5                     // movdqa    xmm10, xmm5
	LONG $0xda0f4466; BYTE $0xd2                     // pminub    xmm10, xmm2
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x546f0f66; WORD $0x6024                   // movdqa    xmm2, oword [rsp + 96]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xe0da0f66                                 // pminub    xmm4, xmm0
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0x6f0f4466; LONG $0x008024a4; WORD $0x0000 // movdqa    xmm12, oword [rsp + 128]
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4166; BYTE $0xc4                     // pmaxub    xmm0, xmm12
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0x6f0f4166; BYTE $0xd3                     // movdqa    xmm2, xmm11
	LONG $0xd4da0f66                                 // pminub    xmm2, xmm4
	LONG $0xde0f4466; BYTE $0xdc                     // pmaxub    xmm11, xmm4
	LONG $0x6f0f4166; BYTE $0xe7                     // movdqa    xmm4, xmm15
	LONG $0xe1da0f66                                 // pminub    xmm4, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x846f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 208]
	LONG $0x6f0f4466; BYTE $0xf8                     // movdqa    xmm15, xmm0
	LONG $0xda0f4466; BYTE $0xf9                     // pminub    xmm15, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x6f0f4166; BYTE $0xc7                     // movdqa    xmm0, xmm15
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xde0f4466; BYTE $0xfc                     // pmaxub    xmm15, xmm4
	LONG $0x6f0f4566; BYTE $0xe5                     // movdqa    xmm12, xmm13
	LONG $0xda0f4466; BYTE $0xe7                     // pminub    xmm12, xmm7
	LONG $0xde0f4166; BYTE $0xfd                     // pmaxub    xmm7, xmm13
	LONG $0x6f0f4166; BYTE $0xe0                     // movdqa    xmm4, xmm8
	LONG $0xe7da0f66                                 // pminub    xmm4, xmm7
	LONG $0xde0f4166; BYTE $0xf8                     // pmaxub    xmm7, xmm8
	LONG $0x6f0f4466; BYTE $0xec                     // movdqa    xmm13, xmm4
	LONG $0xda0f4566; BYTE $0xec                     // pminub    xmm13, xmm12
	LONG $0xde0f4166; BYTE $0xe4                     // pmaxub    xmm4, xmm12
	LONG $0x746f0f66; WORD $0x5024                   // movdqa    xmm6, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4466; BYTE $0xc3                     // pminub    xmm8, xmm3
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0x6f0f4566; BYTE $0xe2                     // movdqa    xmm12, xmm10
	LONG $0xda0f4566; BYTE $0xe5                     // pminub    xmm12, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0x6f0f4466; LONG $0x00c02494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 192]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4566; BYTE $0xea                     // pmaxub    xmm13, xmm10
	LONG $0xde0f4166; BYTE $0xc6                     // pmaxub    xmm0, xmm14
	LONG $0x847f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm0
	LONG $0xde0f4166; BYTE $0xf4                     // pmaxub    xmm6, xmm12
	LONG $0x747f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm6
	LONG $0xf26f0f66                                 // movdqa    xmm6, xmm2
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xde0f4466; BYTE $0xc2                     // pmaxub    xmm8, xmm2
	LONG $0x846f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 224]
	LONG $0x6f0f4466; BYTE $0xe0                     // movdqa    xmm12, xmm0
	LONG $0xda0f4566; BYTE $0xe0                     // pminub    xmm12, xmm8
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xc4                     // movdqa    xmm0, xmm12
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0x6f0f4166; BYTE $0xd1                     // movdqa    xmm2, xmm9
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0xde0f4566; BYTE $0xf9                     // pmaxub    xmm15, xmm9
	LONG $0x846f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xc8                     // movdqa    xmm9, xmm0
	LONG $0xda0f4566; BYTE $0xcf                     // pminub    xmm9, xmm15
	LONG $0xde0f4466; BYTE $0xf8                     // pmaxub    xmm15, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc4da0f66                                 // pminub    xmm0, xmm4
	LONG $0xe5de0f66                                 // pmaxub    xmm4, xmm5
	LONG $0xde0f4466; BYTE $0xca                     // pmaxub    xmm9, xmm2
	LONG $0x946f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc3                     // movdqa    xmm0, xmm11
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xde0f4166; BYTE $0xdb                     // pmaxub    xmm3, xmm11
	LONG $0x5cda0f66; WORD $0x7024                   // pminub    xmm3, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xdb                     // movdqa    xmm11, xmm3
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0x446f0f66; WORD $0x2024                   // movdqa    xmm0, oword [rsp + 32]
	LONG $0xf06f0f66                                 // movdqa    xmm6, xmm0
	LONG $0xf1da0f66                                 // pminub    xmm6, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xe9da0f66                                 // pminub    xmm5, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xeede0f66                                 // pmaxub    xmm5, xmm6
	LONG $0x6f0f4466; LONG $0x00902494; WORD $0x0000 // movdqa    xmm10, oword [rsp + 144]
	LONG $0x6f0f4166; BYTE $0xf2                     // movdqa    xmm6, xmm10
	LONG $0xf7da0f66                                 // pminub    xmm6, xmm7
	LONG $0xde0f4166; BYTE $0xfa                     // pmaxub    xmm7, xmm10
	LONG $0x7cda0f66; WORD $0x1024                   // pminub    xmm7, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xd7                     // movdqa    xmm10, xmm7
	LONG $0xda0f4466; BYTE $0xd6                     // pminub    xmm10, xmm6
	LONG $0xfede0f66                                 // pmaxub    xmm7, xmm6
	LONG $0x346f0f66; BYTE $0x24                     // movdqa    xmm6, oword [rsp]
	LONG $0x74da0f66; WORD $0x4024                   // pminub    xmm6, oword [rsp + 64]
	LONG $0xda0f4166; BYTE $0xf0                     // pminub    xmm6, xmm8
	LONG $0xdcda0f66                                 // pminub    xmm3, xmm4
	LONG $0xf9da0f66                                 // pminub    xmm7, xmm1
	LONG $0xdeda0f66                                 // pminub    xmm3, xmm6
	LONG $0xdfda0f66                                 // pminub    xmm3, xmm7
	LONG $0x4c6f0f66; WORD $0x6024                   // movdqa    xmm1, oword [rsp + 96]
	LONG $0x4cde0f66; WORD $0x5024                   // pmaxub    xmm1, oword [rsp + 80]
	LONG $0xde0f4166; BYTE $0xd1                     // pmaxub    xmm2, xmm9
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xc2de0f66                                 // pmaxub    xmm0, xmm2
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0x6f0f4166; BYTE $0xcb                     // movdqa    xmm1, xmm11
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xde0f4566; BYTE $0xdc                     // pmaxub    xmm11, xmm12
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xda0f4166; BYTE $0xd6                     // pminub    xmm2, xmm14
	LONG $0xde0f4566; BYTE $0xd6                     // pmaxub    xmm10, xmm14
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe96f0f66                                 // movdqa    xmm5, xmm1
	LONG $0xeada0f66                                 // pminub    xmm5, xmm2
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0xecde0f66                                 // pmaxub    xmm5, xmm4
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xcbda0f66                                 // pminub    xmm1, xmm3
	LONG $0xde0f4166; BYTE $0xda                     // pmaxub    xmm3, xmm10
	LONG $0xda0f4166; BYTE $0xdb                     // pminub    xmm3, xmm11
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0xcc6f0f66                                 // movdqa    xmm1, xmm4
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xcdda0f66                                 // pminub    xmm1, xmm5
	LONG $0xd96f0f66                                 // movdqa    xmm3, xmm1
	LONG $0xdada0f66                                 // pminub    xmm3, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xd06f0f66                                 // movdqa    xmm2, xmm0
	LONG $0xda0f4166; BYTE $0xd5                     // pminub    xmm2, xmm13
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0xd3de0f66                                 // pmaxub    xmm2, xmm3
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0xda0f4166; BYTE $0xcf                     // pminub    xmm1, xmm15
	LONG $0xde0f4166; BYTE $0xd7                     // pmaxub    xmm2, xmm15
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xd1de0f66                                 // pmaxub    xmm2, xmm1
	LONG $0x7f0f4366; WORD $0x0114                   // movdqa    oword [r9 + r8], xmm2
	LONG $0x10c08349                                 // add    r8, 16
	LONG $0x10c28348                                 // add    rdx, 16
	WORD $0x394d; BYTE $0xe8                         // cmp    r8, r13
	JB   LBB3_31

LBB3_32:
	LONG $0x6f0f42f3; WORD $0x104c; BYTE $0xf0       // movdqu    xmm1, oword [rax + r10 - 16]
	LONG $0x4c7f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm1
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xef0f4566; BYTE $0xc9                     // pxor    xmm9, xmm9
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x6f0f4466; BYTE $0xe9                     // movdqa    xmm13, xmm1
	LONG $0x680f4566; BYTE $0xe9                     // punpckhbw    xmm13, xmm9
	LONG $0x700f4166; WORD $0x27cd                   // pshufd    xmm1, xmm13, 39
	LONG $0x730f4166; WORD $0x0afd                   // pslldq    xmm13, 10
	LONG $0xeb0f4466; BYTE $0xe8                     // por    xmm13, xmm0
	LONG $0xc1700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm1, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0x670f4466; BYTE $0xe8                     // packuswb    xmm13, xmm0
	LONG $0x6f0f4166; BYTE $0xc5                     // movdqa    xmm0, xmm13
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x6f0f4166; BYTE $0xd5                     // movdqa    xmm2, xmm13
	LONG $0x680f4166; BYTE $0xd1                     // punpckhbw    xmm2, xmm9
	LONG $0xca700f66; BYTE $0x27                     // pshufd    xmm1, xmm2, 39
	LONG $0xfa730f66; BYTE $0x0a                     // pslldq    xmm2, 10
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc1700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm1, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0xd0670f66                                 // packuswb    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm2
	LONG $0x6f0f42f3; WORD $0x134c; BYTE $0xed       // movdqu    xmm1, oword [rbx + r10 - 19]
	LONG $0x6f0f42f3; WORD $0x1344; BYTE $0xf0       // movdqu    xmm0, oword [rbx + r10 - 16]
	LONG $0xf86f0f66                                 // movdqa    xmm7, xmm0
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x0c7f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm1
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x680f4166; BYTE $0xf9                     // punpckhbw    xmm7, xmm9
	LONG $0xd7700f66; BYTE $0x27                     // pshufd    xmm2, xmm7, 39
	LONG $0xff730f66; BYTE $0x0a                     // pslldq    xmm7, 10
	LONG $0xf8eb0f66                                 // por    xmm7, xmm0
	LONG $0xc2700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0xf8670f66                                 // packuswb    xmm7, xmm0
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x6f0f4466; BYTE $0xe7                     // movdqa    xmm12, xmm7
	LONG $0x680f4566; BYTE $0xe1                     // punpckhbw    xmm12, xmm9
	LONG $0x700f4166; WORD $0x27d4                   // pshufd    xmm2, xmm12, 39
	LONG $0x730f4166; WORD $0x0afc                   // pslldq    xmm12, 10
	LONG $0xeb0f4466; BYTE $0xe0                     // por    xmm12, xmm0
	LONG $0xc2700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0x670f4466; BYTE $0xe0                     // packuswb    xmm12, xmm0
	LONG $0x6f0f47f3; WORD $0x1774; BYTE $0xf0       // movdqu    xmm14, oword [r15 + r10 - 16]
	LONG $0x6f0f4166; BYTE $0xc6                     // movdqa    xmm0, xmm14
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0x680f4166; BYTE $0xd9                     // punpckhbw    xmm3, xmm9
	LONG $0xd3700f66; BYTE $0x27                     // pshufd    xmm2, xmm3, 39
	LONG $0xfb730f66; BYTE $0x0a                     // pslldq    xmm3, 10
	LONG $0xd8eb0f66                                 // por    xmm3, xmm0
	LONG $0xc2700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0xd8670f66                                 // packuswb    xmm3, xmm0
	LONG $0xc36f0f66                                 // movdqa    xmm0, xmm3
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x6f0f4466; BYTE $0xfb                     // movdqa    xmm15, xmm3
	LONG $0x680f4566; BYTE $0xf9                     // punpckhbw    xmm15, xmm9
	LONG $0x700f4166; WORD $0x27d7                   // pshufd    xmm2, xmm15, 39
	LONG $0x730f4166; WORD $0x0aff                   // pslldq    xmm15, 10
	LONG $0xeb0f4466; BYTE $0xf8                     // por    xmm15, xmm0
	LONG $0xc2700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm2, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0x670f4466; BYTE $0xf8                     // packuswb    xmm15, xmm0
	LONG $0x6f0f42f3; WORD $0x114c; BYTE $0xf0       // movdqu    xmm1, oword [rcx + r10 - 16]
	LONG $0x4c7f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm1
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0x680f4166; BYTE $0xd1                     // punpckhbw    xmm2, xmm9
	LONG $0xe2700f66; BYTE $0x27                     // pshufd    xmm4, xmm2, 39
	LONG $0xfa730f66; BYTE $0x0a                     // pslldq    xmm2, 10
	LONG $0xd0eb0f66                                 // por    xmm2, xmm0
	LONG $0xc4700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm4, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0xd0670f66                                 // packuswb    xmm2, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0x680f4166; BYTE $0xe1                     // punpckhbw    xmm4, xmm9
	LONG $0xec700f66; BYTE $0x27                     // pshufd    xmm5, xmm4, 39
	LONG $0xfc730f66; BYTE $0x0a                     // pslldq    xmm4, 10
	LONG $0xe0eb0f66                                 // por    xmm4, xmm0
	LONG $0xc5700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm5, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0xe0670f66                                 // packuswb    xmm4, xmm0
	LONG $0x6f0f46f3; WORD $0x1754; BYTE $0xed       // movdqu    xmm10, oword [rdi + r10 - 19]
	LONG $0x6f0f42f3; WORD $0x1744; BYTE $0xf0       // movdqu    xmm0, oword [rdi + r10 - 16]
	LONG $0x6f0f4566; BYTE $0xda                     // movdqa    xmm11, xmm10
	LONG $0xda0f4466; BYTE $0xd8                     // pminub    xmm11, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0x6f0f4466; BYTE $0xc0                     // movdqa    xmm8, xmm0
	LONG $0x600f4166; BYTE $0xc1                     // punpcklbw    xmm0, xmm9
	LONG $0xd8730f66; BYTE $0x06                     // psrldq    xmm0, 6
	LONG $0x680f4566; BYTE $0xc1                     // punpckhbw    xmm8, xmm9
	LONG $0x700f4166; WORD $0x27f0                   // pshufd    xmm6, xmm8, 39
	LONG $0x730f4166; WORD $0x0af8                   // pslldq    xmm8, 10
	LONG $0xeb0f4466; BYTE $0xc0                     // por    xmm8, xmm0
	LONG $0xc6700ff2; BYTE $0x4c                     // pshuflw    xmm0, xmm6, 76
	LONG $0xc0700f66; BYTE $0x68                     // pshufd    xmm0, xmm0, 104
	LONG $0xc0700ff2; BYTE $0x39                     // pshuflw    xmm0, xmm0, 57
	LONG $0xc0700ff3; BYTE $0xe7                     // pshufhw    xmm0, xmm0, 231
	LONG $0x670f4466; BYTE $0xc0                     // packuswb    xmm8, xmm0
	LONG $0x6f0f4166; BYTE $0xf0                     // movdqa    xmm6, xmm8
	LONG $0x600f4166; BYTE $0xf1                     // punpcklbw    xmm6, xmm9
	LONG $0xde730f66; BYTE $0x06                     // psrldq    xmm6, 6
	LONG $0x6f0f4166; BYTE $0xc8                     // movdqa    xmm1, xmm8
	LONG $0x680f4166; BYTE $0xc9                     // punpckhbw    xmm1, xmm9
	LONG $0x700f4466; WORD $0x27c9                   // pshufd    xmm9, xmm1, 39
	LONG $0xf9730f66; BYTE $0x0a                     // pslldq    xmm1, 10
	LONG $0xceeb0f66                                 // por    xmm1, xmm6
	LONG $0x700f41f2; WORD $0x4cf1                   // pshuflw    xmm6, xmm9, 76
	LONG $0xf6700f66; BYTE $0x68                     // pshufd    xmm6, xmm6, 104
	LONG $0xf6700ff2; BYTE $0x39                     // pshuflw    xmm6, xmm6, 57
	LONG $0xf6700ff3; BYTE $0xe7                     // pshufhw    xmm6, xmm6, 231
	LONG $0xce670f66                                 // packuswb    xmm1, xmm6
	LONG $0x6f0f42f3; WORD $0x1044; BYTE $0xea       // movdqu    xmm0, oword [rax + r10 - 22]
	LONG $0x6f0f42f3; WORD $0x1074; BYTE $0xed       // movdqu    xmm6, oword [rax + r10 - 19]
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xeeda0f66                                 // pminub    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0xc6de0f66                                 // pmaxub    xmm0, xmm6
	LONG $0x847f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    oword [rsp + 176], xmm0
	LONG $0x6f0f4166; BYTE $0xf5                     // movdqa    xmm6, xmm13
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x6c6f0f66; WORD $0x2024                   // movdqa    xmm5, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xcd                     // movdqa    xmm9, xmm5
	LONG $0xda0f4466; BYTE $0xc8                     // pminub    xmm9, xmm0
	LONG $0xc5de0f66                                 // pmaxub    xmm0, xmm5
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0x847f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm0
	LONG $0xde0f4466; BYTE $0xce                     // pmaxub    xmm9, xmm6
	LONG $0x6f0f46f3; WORD $0x136c; BYTE $0xea       // movdqu    xmm13, oword [rbx + r10 - 22]
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0x046f0f66; BYTE $0x24                     // movdqa    xmm0, oword [rsp]
	LONG $0xe8da0f66                                 // pminub    xmm5, xmm0
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x047f0f66; BYTE $0x24                     // movdqa    oword [rsp], xmm0
	LONG $0xf56f0f66                                 // movdqa    xmm6, xmm5
	LONG $0x446f0f66; WORD $0x3024                   // movdqa    xmm0, oword [rsp + 48]
	LONG $0xf0da0f66                                 // pminub    xmm6, xmm0
	LONG $0x747f0f66; WORD $0x2024                   // movdqa    oword [rsp + 32], xmm6
	LONG $0xe8de0f66                                 // pmaxub    xmm5, xmm0
	LONG $0x6c7f0f66; WORD $0x3024                   // movdqa    oword [rsp + 48], xmm5
	LONG $0x6f0f43f3; WORD $0x1774; BYTE $0xea       // movdqu    xmm6, oword [r15 + r10 - 22]
	LONG $0x6f0f4566; BYTE $0xec                     // movdqa    xmm13, xmm12
	LONG $0xda0f4466; BYTE $0xee                     // pminub    xmm13, xmm6
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xf76f0f66                                 // movdqa    xmm6, xmm7
	LONG $0xda0f4166; BYTE $0xf4                     // pminub    xmm6, xmm12
	LONG $0xde0f4466; BYTE $0xe7                     // pmaxub    xmm12, xmm7
	LONG $0xc66f0f66                                 // movdqa    xmm0, xmm6
	LONG $0xda0f4166; BYTE $0xc5                     // pminub    xmm0, xmm13
	LONG $0x447f0f66; WORD $0x6024                   // movdqa    oword [rsp + 96], xmm0
	LONG $0xde0f4166; BYTE $0xf5                     // pmaxub    xmm6, xmm13
	LONG $0x6f0f4566; BYTE $0xee                     // movdqa    xmm13, xmm14
	LONG $0xda0f4466; BYTE $0xeb                     // pminub    xmm13, xmm3
	LONG $0xde0f4166; BYTE $0xde                     // pmaxub    xmm3, xmm14
	LONG $0x6f0f43f3; WORD $0x176c; BYTE $0xed       // movdqu    xmm5, oword [r15 + r10 - 19]
	LONG $0xc56f0f66                                 // movdqa    xmm0, xmm5
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xddde0f66                                 // pmaxub    xmm3, xmm5
	LONG $0xe86f0f66                                 // movdqa    xmm5, xmm0
	LONG $0xda0f4166; BYTE $0xed                     // pminub    xmm5, xmm13
	LONG $0xac7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm5
	LONG $0xde0f4166; BYTE $0xc5                     // pmaxub    xmm0, xmm13
	LONG $0x6f0f42f3; WORD $0x116c; BYTE $0xea       // movdqu    xmm5, oword [rcx + r10 - 22]
	LONG $0x6f0f46f3; WORD $0x116c; BYTE $0xed       // movdqu    xmm13, oword [rcx + r10 - 19]
	LONG $0x6f0f4466; BYTE $0xf5                     // movdqa    xmm14, xmm5
	LONG $0xda0f4566; BYTE $0xf5                     // pminub    xmm14, xmm13
	LONG $0xde0f4166; BYTE $0xed                     // pmaxub    xmm5, xmm13
	LONG $0x6f0f4566; BYTE $0xef                     // movdqa    xmm13, xmm15
	LONG $0xda0f4466; BYTE $0xed                     // pminub    xmm13, xmm5
	LONG $0xde0f4166; BYTE $0xef                     // pmaxub    xmm5, xmm15
	LONG $0xac7f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm5
	LONG $0x6f0f4166; BYTE $0xed                     // movdqa    xmm5, xmm13
	LONG $0xda0f4166; BYTE $0xee                     // pminub    xmm5, xmm14
	LONG $0xde0f4566; BYTE $0xee                     // pmaxub    xmm13, xmm14
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4466; BYTE $0xfc                     // pminub    xmm15, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x546f0f66; WORD $0x4024                   // movdqa    xmm2, oword [rsp + 64]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf4                     // pminub    xmm14, xmm4
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xda0f4166; BYTE $0xd7                     // pminub    xmm2, xmm15
	LONG $0x947f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm2
	LONG $0xde0f4566; BYTE $0xf7                     // pmaxub    xmm14, xmm15
	LONG $0x6f0f42f3; WORD $0x1754; BYTE $0xea       // movdqu    xmm2, oword [rdi + r10 - 22]
	LONG $0x6f0f4466; BYTE $0xfa                     // movdqa    xmm15, xmm2
	LONG $0xda0f4566; BYTE $0xfa                     // pminub    xmm15, xmm10
	LONG $0xde0f4466; BYTE $0xd2                     // pmaxub    xmm10, xmm2
	LONG $0x6f0f4166; BYTE $0xd7                     // movdqa    xmm2, xmm15
	LONG $0xda0f4166; BYTE $0xd3                     // pminub    xmm2, xmm11
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0xde0f4566; BYTE $0xfb                     // pmaxub    xmm15, xmm11
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xde0f4166; BYTE $0xc8                     // pmaxub    xmm1, xmm8
	LONG $0xbc6f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 160]
	LONG $0x6f0f4466; BYTE $0xdf                     // movdqa    xmm11, xmm7
	LONG $0x6f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    xmm8, oword [rsp + 32]
	LONG $0xda0f4566; BYTE $0xd8                     // pminub    xmm11, xmm8
	LONG $0x7f0f4466; LONG $0x0080249c; WORD $0x0000 // movdqa    oword [rsp + 128], xmm11
	LONG $0xde0f4466; BYTE $0xc7                     // pmaxub    xmm8, xmm7
	LONG $0x7f0f4466; WORD $0x2444; BYTE $0x20       // movdqa    oword [rsp + 32], xmm8
	LONG $0x6f0f4566; BYTE $0xc1                     // movdqa    xmm8, xmm9
	LONG $0x6f0f4466; WORD $0x245c; BYTE $0x30       // movdqa    xmm11, oword [rsp + 48]
	LONG $0xda0f4566; BYTE $0xc3                     // pminub    xmm8, xmm11
	LONG $0xde0f4566; BYTE $0xd9                     // pmaxub    xmm11, xmm9
	LONG $0x7c6f0f66; WORD $0x7024                   // movdqa    xmm7, oword [rsp + 112]
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4566; BYTE $0xcb                     // pminub    xmm9, xmm11
	LONG $0xde0f4466; BYTE $0xdf                     // pmaxub    xmm11, xmm7
	LONG $0x7f0f4466; WORD $0x245c; BYTE $0x30       // movdqa    oword [rsp + 48], xmm11
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0xbc7f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm7
	LONG $0xde0f4566; BYTE $0xc8                     // pmaxub    xmm9, xmm8
	LONG $0x7f0f4466; LONG $0x0090248c; WORD $0x0000 // movdqa    oword [rsp + 144], xmm9
	LONG $0x7c6f0f66; WORD $0x1024                   // movdqa    xmm7, oword [rsp + 16]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0x6f0f4466; WORD $0x240c                   // movdqa    xmm9, oword [rsp]
	LONG $0xda0f4566; BYTE $0xc1                     // pminub    xmm8, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0xbc6f0f66; LONG $0x0000b024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 176]
	LONG $0x6f0f4466; BYTE $0xdf                     // movdqa    xmm11, xmm7
	LONG $0xda0f4566; BYTE $0xd9                     // pminub    xmm11, xmm9
	LONG $0xde0f4466; BYTE $0xcf                     // pmaxub    xmm9, xmm7
	LONG $0x7f0f4466; WORD $0x240c                   // movdqa    oword [rsp], xmm9
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0x7c7f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm7
	LONG $0xde0f4566; BYTE $0xd8                     // pmaxub    xmm11, xmm8
	LONG $0x7f0f4466; LONG $0x00b0249c; WORD $0x0000 // movdqa    oword [rsp + 176], xmm11
	LONG $0xbc6f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    xmm7, oword [rsp + 192]
	LONG $0x6f0f4466; BYTE $0xc7                     // movdqa    xmm8, xmm7
	LONG $0xda0f4466; BYTE $0xc5                     // pminub    xmm8, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0x7c6f0f66; WORD $0x6024                   // movdqa    xmm7, oword [rsp + 96]
	LONG $0x6f0f4466; BYTE $0xcf                     // movdqa    xmm9, xmm7
	LONG $0xda0f4466; BYTE $0xcd                     // pminub    xmm9, xmm5
	LONG $0xefde0f66                                 // pmaxub    xmm5, xmm7
	LONG $0x6c7f0f66; WORD $0x7024                   // movdqa    oword [rsp + 112], xmm5
	LONG $0x6f0f4166; BYTE $0xf9                     // movdqa    xmm7, xmm9
	LONG $0xda0f4166; BYTE $0xf8                     // pminub    xmm7, xmm8
	LONG $0xbc7f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm7
	LONG $0xde0f4566; BYTE $0xc8                     // pmaxub    xmm9, xmm8
	LONG $0x6f0f4466; BYTE $0xd8                     // movdqa    xmm11, xmm0
	LONG $0xda0f4566; BYTE $0xdd                     // pminub    xmm11, xmm13
	LONG $0xde0f4466; BYTE $0xe8                     // pmaxub    xmm13, xmm0
	LONG $0x6f0f4466; BYTE $0xc6                     // movdqa    xmm8, xmm6
	LONG $0xda0f4566; BYTE $0xc5                     // pminub    xmm8, xmm13
	LONG $0xde0f4466; BYTE $0xee                     // pmaxub    xmm13, xmm6
	LONG $0x7f0f4466; WORD $0x246c; BYTE $0x60       // movdqa    oword [rsp + 96], xmm13
	LONG $0x6f0f4166; BYTE $0xc0                     // movdqa    xmm0, xmm8
	LONG $0xda0f4166; BYTE $0xc3                     // pminub    xmm0, xmm11
	LONG $0xde0f4566; BYTE $0xc3                     // pmaxub    xmm8, xmm11
	LONG $0xf36f0f66                                 // movdqa    xmm6, xmm3
	LONG $0x6f0f4466; LONG $0x00e024ac; WORD $0x0000 // movdqa    xmm13, oword [rsp + 224]
	LONG $0xda0f4166; BYTE $0xf5                     // pminub    xmm6, xmm13
	LONG $0xde0f4466; BYTE $0xeb                     // pmaxub    xmm13, xmm3
	LONG $0x6f0f4566; BYTE $0xdc                     // movdqa    xmm11, xmm12
	LONG $0xda0f4566; BYTE $0xdd                     // pminub    xmm11, xmm13
	LONG $0xde0f4566; BYTE $0xec                     // pmaxub    xmm13, xmm12
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xfeda0f66                                 // pminub    xmm7, xmm6
	LONG $0xde0f4466; BYTE $0xde                     // pmaxub    xmm11, xmm6
	LONG $0x6c6f0f66; WORD $0x4024                   // movdqa    xmm5, oword [rsp + 64]
	LONG $0xdd6f0f66                                 // movdqa    xmm3, xmm5
	LONG $0x6f0f4466; BYTE $0xe2                     // movdqa    xmm12, xmm2
	LONG $0xda0f4166; BYTE $0xdc                     // pminub    xmm3, xmm12
	LONG $0xde0f4466; BYTE $0xe5                     // pmaxub    xmm12, xmm5
	LONG $0xb46f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    xmm6, oword [rsp + 208]
	LONG $0xee6f0f66                                 // movdqa    xmm5, xmm6
	LONG $0xda0f4166; BYTE $0xec                     // pminub    xmm5, xmm12
	LONG $0xde0f4466; BYTE $0xe6                     // pmaxub    xmm12, xmm6
	LONG $0xf56f0f66                                 // movdqa    xmm6, xmm5
	LONG $0xf3da0f66                                 // pminub    xmm6, xmm3
	LONG $0x747f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm6
	LONG $0xebde0f66                                 // pmaxub    xmm5, xmm3
	LONG $0x6f0f4166; BYTE $0xf7                     // movdqa    xmm6, xmm15
	LONG $0xf1da0f66                                 // pminub    xmm6, xmm1
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0x6f0f4166; BYTE $0xde                     // movdqa    xmm3, xmm14
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xde0f4166; BYTE $0xce                     // pmaxub    xmm1, xmm14
	LONG $0xd36f0f66                                 // movdqa    xmm2, xmm3
	LONG $0xd6da0f66                                 // pminub    xmm2, xmm6
	LONG $0xdede0f66                                 // pmaxub    xmm3, xmm6
	LONG $0xf46f0f66                                 // movdqa    xmm6, xmm4
	LONG $0xda0f4166; BYTE $0xf2                     // pminub    xmm6, xmm10
	LONG $0xde0f4466; BYTE $0xd4                     // pmaxub    xmm10, xmm4
	LONG $0x6f0f4466; BYTE $0xf0                     // movdqa    xmm14, xmm0
	LONG $0xda0f4466; BYTE $0xf2                     // pminub    xmm14, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x846f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 160]
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe2da0f66                                 // pminub    xmm4, xmm2
	LONG $0xd0de0f66                                 // pmaxub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x4024                   // movdqa    oword [rsp + 64], xmm2
	LONG $0x446f0f66; WORD $0x1024                   // movdqa    xmm0, oword [rsp + 16]
	LONG $0x84de0f66; LONG $0x0000c024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 192]
	LONG $0x447f0f66; WORD $0x1024                   // movdqa    oword [rsp + 16], xmm0
	LONG $0xde0f4166; BYTE $0xe6                     // pmaxub    xmm4, xmm14
	LONG $0xa47f0f66; LONG $0x0000a024; BYTE $0x00   // movdqa    oword [rsp + 160], xmm4
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xc6da0f66                                 // pminub    xmm0, xmm6
	LONG $0xf7de0f66                                 // pmaxub    xmm6, xmm7
	LONG $0x546f0f66; WORD $0x5024                   // movdqa    xmm2, oword [rsp + 80]
	LONG $0x6f0f4466; BYTE $0xf2                     // movdqa    xmm14, xmm2
	LONG $0xda0f4466; BYTE $0xf6                     // pminub    xmm14, xmm6
	LONG $0xf2de0f66                                 // pmaxub    xmm6, xmm2
	LONG $0x6f0f4166; BYTE $0xd6                     // movdqa    xmm2, xmm14
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0x547f0f66; WORD $0x5024                   // movdqa    oword [rsp + 80], xmm2
	LONG $0xde0f4466; BYTE $0xf0                     // pmaxub    xmm14, xmm0
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xc5da0f66                                 // pminub    xmm0, xmm5
	LONG $0xde0f4166; BYTE $0xe9                     // pmaxub    xmm5, xmm9
	LONG $0x946f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    xmm2, oword [rsp + 128]
	LONG $0xe26f0f66                                 // movdqa    xmm4, xmm2
	LONG $0xe5da0f66                                 // pminub    xmm4, xmm5
	LONG $0xeade0f66                                 // pmaxub    xmm5, xmm2
	LONG $0x6f0f4466; BYTE $0xfd                     // movdqa    xmm15, xmm5
	LONG $0x6f0f4166; BYTE $0xd0                     // movdqa    xmm2, xmm8
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xde0f4166; BYTE $0xd8                     // pmaxub    xmm3, xmm8
	LONG $0xe0de0f66                                 // pmaxub    xmm4, xmm0
	LONG $0xa47f0f66; LONG $0x00008024; BYTE $0x00   // movdqa    oword [rsp + 128], xmm4
	LONG $0x846f0f66; LONG $0x00009024; BYTE $0x00   // movdqa    xmm0, oword [rsp + 144]
	LONG $0xe06f0f66                                 // movdqa    xmm4, xmm0
	LONG $0xe3da0f66                                 // pminub    xmm4, xmm3
	LONG $0xd8de0f66                                 // pmaxub    xmm3, xmm0
	LONG $0xc46f0f66                                 // movdqa    xmm0, xmm4
	LONG $0xc2da0f66                                 // pminub    xmm0, xmm2
	LONG $0xe2de0f66                                 // pmaxub    xmm4, xmm2
	LONG $0x6f0f4166; BYTE $0xfb                     // movdqa    xmm7, xmm11
	LONG $0xda0f4166; BYTE $0xfa                     // pminub    xmm7, xmm10
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xda0f4466; LONG $0x00b02494; WORD $0x0000 // pminub    xmm10, oword [rsp + 176]
	LONG $0x6f0f4566; BYTE $0xca                     // movdqa    xmm9, xmm10
	LONG $0xda0f4466; BYTE $0xcf                     // pminub    xmm9, xmm7
	LONG $0xde0f4466; BYTE $0xd7                     // pmaxub    xmm10, xmm7
	LONG $0x546f0f66; WORD $0x7024                   // movdqa    xmm2, oword [rsp + 112]
	LONG $0xfa6f0f66                                 // movdqa    xmm7, xmm2
	LONG $0xda0f4166; BYTE $0xfc                     // pminub    xmm7, xmm12
	LONG $0xde0f4466; BYTE $0xe2                     // pmaxub    xmm12, xmm2
	LONG $0x546f0f66; WORD $0x2024                   // movdqa    xmm2, oword [rsp + 32]
	LONG $0x6f0f4466; BYTE $0xda                     // movdqa    xmm11, xmm2
	LONG $0xda0f4566; BYTE $0xdc                     // pminub    xmm11, xmm12
	LONG $0xde0f4466; BYTE $0xe2                     // pmaxub    xmm12, xmm2
	LONG $0x6f0f4566; BYTE $0xc3                     // movdqa    xmm8, xmm11
	LONG $0xda0f4466; BYTE $0xc7                     // pminub    xmm8, xmm7
	LONG $0xde0f4466; BYTE $0xdf                     // pmaxub    xmm11, xmm7
	LONG $0x6c6f0f66; WORD $0x6024                   // movdqa    xmm5, oword [rsp + 96]
	LONG $0xd56f0f66                                 // movdqa    xmm2, xmm5
	LONG $0xd1da0f66                                 // pminub    xmm2, xmm1
	LONG $0xcdde0f66                                 // pmaxub    xmm1, xmm5
	LONG $0x4cda0f66; WORD $0x3024                   // pminub    xmm1, oword [rsp + 48]
	LONG $0xf96f0f66                                 // movdqa    xmm7, xmm1
	LONG $0xfada0f66                                 // pminub    xmm7, xmm2
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xda0f4466; WORD $0x242c                   // pminub    xmm13, oword [rsp]
	LONG $0xda0f4466; BYTE $0xee                     // pminub    xmm13, xmm6
	LONG $0xda0f4466; BYTE $0xd3                     // pminub    xmm10, xmm3
	LONG $0xda0f4166; BYTE $0xcc                     // pminub    xmm1, xmm12
	LONG $0xda0f4566; BYTE $0xd5                     // pminub    xmm10, xmm13
	LONG $0xda0f4466; BYTE $0xd1                     // pminub    xmm10, xmm1
	LONG $0x4c6f0f66; WORD $0x5024                   // movdqa    xmm1, oword [rsp + 80]
	LONG $0x8cde0f66; LONG $0x0000a024; BYTE $0x00   // pmaxub    xmm1, oword [rsp + 160]
	LONG $0x84de0f66; LONG $0x00008024; BYTE $0x00   // pmaxub    xmm0, oword [rsp + 128]
	LONG $0xde0f4466; WORD $0x2444; BYTE $0x10       // pmaxub    xmm8, oword [rsp + 16]
	LONG $0xde0f4466; BYTE $0xc0                     // pmaxub    xmm8, xmm0
	LONG $0xde0f4466; BYTE $0xc1                     // pmaxub    xmm8, xmm1
	LONG $0x6f0f4166; BYTE $0xc1                     // movdqa    xmm0, xmm9
	LONG $0xda0f4166; BYTE $0xc6                     // pminub    xmm0, xmm14
	LONG $0xde0f4566; BYTE $0xce                     // pmaxub    xmm9, xmm14
	LONG $0xcf6f0f66                                 // movdqa    xmm1, xmm7
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xfcde0f66                                 // pmaxub    xmm7, xmm4
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xda0f4166; BYTE $0xd3                     // pminub    xmm2, xmm11
	LONG $0xde0f4566; BYTE $0xd3                     // pmaxub    xmm10, xmm11
	LONG $0xef0f4566; BYTE $0xdb                     // pxor    xmm11, xmm11
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0xdade0f66                                 // pmaxub    xmm3, xmm2
	LONG $0xc76f0f66                                 // movdqa    xmm0, xmm7
	LONG $0xda0f4166; BYTE $0xc2                     // pminub    xmm0, xmm10
	LONG $0xde0f4466; BYTE $0xd7                     // pmaxub    xmm10, xmm7
	LONG $0xda0f4566; BYTE $0xd1                     // pminub    xmm10, xmm9
	LONG $0xd16f0f66                                 // movdqa    xmm2, xmm1
	LONG $0xd3da0f66                                 // pminub    xmm2, xmm3
	LONG $0xd9de0f66                                 // pmaxub    xmm3, xmm1
	LONG $0x6f0f4166; BYTE $0xca                     // movdqa    xmm1, xmm10
	LONG $0xc8da0f66                                 // pminub    xmm1, xmm0
	LONG $0xde0f4466; BYTE $0xd0                     // pmaxub    xmm10, xmm0
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xc1da0f66                                 // pminub    xmm0, xmm1
	LONG $0xcade0f66                                 // pmaxub    xmm1, xmm2
	LONG $0xde0f4166; BYTE $0xc0                     // pmaxub    xmm0, xmm8
	LONG $0x6f0f4166; BYTE $0xd2                     // movdqa    xmm2, xmm10
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xde0f4166; BYTE $0xc2                     // pmaxub    xmm0, xmm10
	LONG $0xc3da0f66                                 // pminub    xmm0, xmm3
	LONG $0xd86f0f66                                 // movdqa    xmm3, xmm0
	LONG $0xd9da0f66                                 // pminub    xmm3, xmm1
	LONG $0xc1de0f66                                 // pmaxub    xmm0, xmm1
	LONG $0xca6f0f66                                 // movdqa    xmm1, xmm2
	LONG $0x646f0f66; WORD $0x4024                   // movdqa    xmm4, oword [rsp + 64]
	LONG $0xccda0f66                                 // pminub    xmm1, xmm4
	LONG $0xd4de0f66                                 // pmaxub    xmm2, xmm4
	LONG $0xcbde0f66                                 // pmaxub    xmm1, xmm3
	LONG $0xd0da0f66                                 // pminub    xmm2, xmm0
	LONG $0xc16f0f66                                 // movdqa    xmm0, xmm1
	LONG $0xda0f4166; BYTE $0xc7                     // pminub    xmm0, xmm15
	LONG $0xde0f4166; BYTE $0xcf                     // pmaxub    xmm1, xmm15
	LONG $0xcada0f66                                 // pminub    xmm1, xmm2
	LONG $0xc8de0f66                                 // pmaxub    xmm1, xmm0
	LONG $0x7f0f43f3; WORD $0x114c; BYTE $0xf0       // movdqu    oword [r9 + r10 - 16], xmm1
	WORD $0xff49; BYTE $0xc4                         // inc    r12
	LONG $0x248c034c; LONG $0x00000160               // add    r9, qword 352[rsp] /* [rbp + 16] */
	WORD $0x0149; BYTE $0xf6                         // add    r14, rsi
	LONG $0x24a43b4c; LONG $0x000000f0               // cmp    r12, qword [rsp + 240]
	JNE  LBB3_29

LBB3_62:
	MOVQ 360(SP), SP
	RET
