//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x008(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x010(SB)/8, $0x0001000100010001
DATA LCDATA1<>+0x018(SB)/8, $0x0001000100010001
GLOBL LCDATA1<>(SB), 8, $32

TEXT Â·_SimdSse2AlphaBlending(SB), 7, $0

    MOVQ arg1+0(FP), DI
    MOVQ arg2+8(FP), SI
    MOVQ arg3+16(FP), DX
    MOVQ arg4+24(FP), CX
    MOVQ arg5+32(FP), R8
    MOVQ arg6+40(FP), R9

    LEAQ LCDATA1<>(SB), BP

    WORD $0x8949; BYTE $0xca     // mov    r10, rcx
    WORD $0x8949; BYTE $0xd3     // mov    r11, rdx
    WORD $0x8949; BYTE $0xf4     // mov    r12, rsi
    WORD $0x8949; BYTE $0xfd     // mov    r13, rdi
    LONG $0x247c8b48; BYTE $0x48 // mov    rdi, qword 72[rsp] /* [rbp + 32] */
    LONG $0x24548b48; BYTE $0x40 // mov    rdx, qword 64[rsp] /* [rbp + 24] */
    LONG $0x03f88349             // cmp    r8, 3
	JNE    LBB0_6
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
    WORD $0x854d; BYTE $0xdb     // test    r11, r11
	JE    LBB0_118
    WORD $0x854d; BYTE $0xd2     // test    r10, r10
	JE    LBB0_118
LBB0_3:                                 
    WORD $0x8949; BYTE $0xfe     // mov    r14, rdi
    LONG $0x000002b8; BYTE $0x00 // mov    eax, 2
    WORD $0xdb31                 // xor    ebx, ebx
LBB0_4:                                 
    LONG $0x3cb60f45; BYTE $0x19 // movzx    r15d, byte [r9 + rbx]
    LONG $0x4cb60f41; WORD $0xfe05 // movzx    ecx, byte [r13 + rax - 2]
    WORD $0x8948; BYTE $0xd7     // mov    rdi, rdx
    LONG $0x0754b60f; BYTE $0xfe // movzx    edx, byte [rdi + rax - 2]
    LONG $0xcfaf0f41             // imul    ecx, r15d
    WORD $0x8944; BYTE $0xfe     // mov    esi, r15d
    LONG $0x00fff681; WORD $0x0000 // xor    esi, 255
    WORD $0xaf0f; BYTE $0xd6     // imul    edx, esi
    WORD $0xca01                 // add    edx, ecx
    WORD $0xd189                 // mov    ecx, edx
    WORD $0xe9c1; BYTE $0x08     // shr    ecx, 8
    LONG $0x01114c8d             // lea    ecx, [rcx + rdx + 1]
    LONG $0xfe076c88             // mov    byte [rdi + rax - 2], ch  
    LONG $0x4cb60f41; WORD $0xff05 // movzx    ecx, byte [r13 + rax - 1]
    LONG $0x0754b60f; BYTE $0xff // movzx    edx, byte [rdi + rax - 1]
    LONG $0xcfaf0f41             // imul    ecx, r15d
    WORD $0xaf0f; BYTE $0xd6     // imul    edx, esi
    WORD $0xca01                 // add    edx, ecx
    WORD $0xd189                 // mov    ecx, edx
    WORD $0xe9c1; BYTE $0x08     // shr    ecx, 8
    LONG $0x01114c8d             // lea    ecx, [rcx + rdx + 1]
    LONG $0xff076c88             // mov    byte [rdi + rax - 1], ch  
    LONG $0x4cb60f41; WORD $0x0005 // movzx    ecx, byte [r13 + rax]
    LONG $0x0714b60f             // movzx    edx, byte [rdi + rax]
    LONG $0xcfaf0f41             // imul    ecx, r15d
    WORD $0xaf0f; BYTE $0xd6     // imul    edx, esi
    WORD $0xca01                 // add    edx, ecx
    WORD $0xd189                 // mov    ecx, edx
    WORD $0xe9c1; BYTE $0x08     // shr    ecx, 8
    LONG $0x01114c8d             // lea    ecx, [rcx + rdx + 1]
    WORD $0x8948; BYTE $0xfa     // mov    rdx, rdi
    WORD $0x2c88; BYTE $0x02     // mov    byte [rdx + rax], ch  
    WORD $0xff48; BYTE $0xc3     // inc    rbx
    LONG $0x03c08348             // add    rax, 3
    WORD $0x3949; BYTE $0xdb     // cmp    r11, rbx
	JNE    LBB0_4
    WORD $0x014d; BYTE $0xe5     // add    r13, r12
    LONG $0x244c034c; BYTE $0x38 // add    r9, qword 56[rsp] /* [rbp + 16] */
    WORD $0x894c; BYTE $0xf7     // mov    rdi, r14
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xc0     // inc    r8
    WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE    LBB0_3
	JMP    LBB0_118
LBB0_6:
    WORD $0x894c; BYTE $0xe0     // mov    rax, r12
    LONG $0xf0e08348             // and    rax, -16
    WORD $0x394c; BYTE $0xe0     // cmp    rax, r12
	JNE    LBB0_65
    WORD $0x894c; BYTE $0xe8     // mov    rax, r13
    LONG $0xf0e08348             // and    rax, -16
    WORD $0x394c; BYTE $0xe8     // cmp    rax, r13
	JNE    LBB0_65
    LONG $0x24448b48; BYTE $0x38 // mov    rax, qword 56[rsp] /* [rbp + 16] */
    WORD $0x8948; BYTE $0xc1     // mov    rcx, rax
    LONG $0xf0e08348             // and    rax, -16
    WORD $0x3948; BYTE $0xc8     // cmp    rax, rcx
	JNE    LBB0_65
    WORD $0x894c; BYTE $0xc8     // mov    rax, r9
    LONG $0xf0e08348             // and    rax, -16
    WORD $0x394c; BYTE $0xc8     // cmp    rax, r9
	JNE    LBB0_65
    WORD $0x8948; BYTE $0xf8     // mov    rax, rdi
    LONG $0xf0e08348             // and    rax, -16
    WORD $0x3948; BYTE $0xf8     // cmp    rax, rdi
	JNE    LBB0_65
    WORD $0x8948; BYTE $0xd0     // mov    rax, rdx
    LONG $0xf0e08348             // and    rax, -16
    WORD $0x3948; BYTE $0xd0     // cmp    rax, rdx
	JNE    LBB0_65
    LONG $0x04f88349             // cmp    r8, 4
	JE    LBB0_51
    LONG $0x02f88349             // cmp    r8, 2
	JE    LBB0_37
    LONG $0x01f88349             // cmp    r8, 1
	JNE    LBB0_118
    WORD $0x894c; BYTE $0xd8     // mov    rax, r11
    LONG $0xf0e08348             // and    rax, -16
    LONG $0x000010bb; BYTE $0x00 // mov    ebx, 16
    WORD $0x294c; BYTE $0xdb     // sub    rbx, r11
    WORD $0x0148; BYTE $0xc3     // add    rbx, rax
    WORD $0xc3f6; BYTE $0x08     // test    bl, 8
    LONG $0x760f4566; BYTE $0xc0 // pcmpeqd    xmm8, xmm8
	JE    LBB0_17
    LONG $0xffc1c748; WORD $0xffff; BYTE $0xff // mov    rcx, -1
    LONG $0x6e0f4c66; BYTE $0xc1 // movq    xmm8, rcx
    LONG $0x730f4166; WORD $0x08f8 // pslldq    xmm8, 8
LBB0_17:
    WORD $0xc3f6; BYTE $0x04     // test    bl, 4
	JE    LBB0_19
    LONG $0x730f4166; WORD $0x04f8 // pslldq    xmm8, 4
LBB0_19:
    WORD $0xc3f6; BYTE $0x02     // test    bl, 2
	JE    LBB0_21
    LONG $0x730f4166; WORD $0x02f8 // pslldq    xmm8, 2
LBB0_21:
    WORD $0xc3f6; BYTE $0x01     // test    bl, 1
	JE    LBB0_23
    LONG $0x730f4166; WORD $0x01f8 // pslldq    xmm8, 1
LBB0_23:                                
    WORD $0x854d; BYTE $0xd2     // test    r10, r10
	JE    LBB0_118
    WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE    LBB0_30
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
    WORD $0x394c; BYTE $0xd8     // cmp    rax, r11
	JNE    LBB0_33
    LONG $0xc0ef0f66             // pxor    xmm0, xmm0
    LONG $0x6f0f4466; WORD $0x004d // movdqa    xmm9, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x6f0f4466; WORD $0x1045 // movdqa    xmm8, 16[rbp] /* [rip + LCPI0_1] */
LBB0_27:                                
    WORD $0xc031                 // xor    eax, eax
LBB0_28:                                
    LONG $0x6f0f4166; WORD $0x0114 // movdqa    xmm2, [r9 + rax]
    LONG $0x6f0f4166; WORD $0x055c; BYTE $0x00 // movdqa    xmm3, [r13 + rax]
    LONG $0x246f0f66; BYTE $0x02 // movdqa    xmm4, [rdx + rax]
    LONG $0xf36f0f66             // movdqa    xmm6, xmm3
    LONG $0xf0600f66             // punpcklbw    xmm6, xmm0
    LONG $0xfc6f0f66             // movdqa    xmm7, xmm4
    LONG $0xf8600f66             // punpcklbw    xmm7, xmm0
    LONG $0xea6f0f66             // movdqa    xmm5, xmm2
    LONG $0xe8600f66             // punpcklbw    xmm5, xmm0
    LONG $0xf5d50f66             // pmullw    xmm6, xmm5
    LONG $0x6f0f4166; BYTE $0xc9 // movdqa    xmm1, xmm9
    LONG $0xcdf90f66             // psubw    xmm1, xmm5
    LONG $0xcfd50f66             // pmullw    xmm1, xmm7
    LONG $0xcefd0f66             // paddw    xmm1, xmm6
    LONG $0xe96f0f66             // movdqa    xmm5, xmm1
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xe9fd0f66             // paddw    xmm5, xmm1
    LONG $0xfd0f4166; BYTE $0xe8 // paddw    xmm5, xmm8
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xd8680f66             // punpckhbw    xmm3, xmm0
    LONG $0xe0680f66             // punpckhbw    xmm4, xmm0
    LONG $0xd0680f66             // punpckhbw    xmm2, xmm0
    LONG $0xdad50f66             // pmullw    xmm3, xmm2
    LONG $0x6f0f4166; BYTE $0xc9 // movdqa    xmm1, xmm9
    LONG $0xcaf90f66             // psubw    xmm1, xmm2
    LONG $0xccd50f66             // pmullw    xmm1, xmm4
    LONG $0xcbfd0f66             // paddw    xmm1, xmm3
    LONG $0xd16f0f66             // movdqa    xmm2, xmm1
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xd1fd0f66             // paddw    xmm2, xmm1
    LONG $0xfd0f4166; BYTE $0xd0 // paddw    xmm2, xmm8
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xea670f66             // packuswb    xmm5, xmm2
    LONG $0x2c7f0f66; BYTE $0x02 // movdqa    [rdx + rax], xmm5
    LONG $0x10c08348             // add    rax, 16
    WORD $0x394c; BYTE $0xd8     // cmp    rax, r11
	JB    LBB0_28
    WORD $0x014d; BYTE $0xe5     // add    r13, r12
    LONG $0x244c034c; BYTE $0x38 // add    r9, qword 56[rsp] /* [rbp + 16] */
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xc0     // inc    r8
    WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE    LBB0_27
	JMP    LBB0_118
LBB0_65:
    LONG $0x04f88349             // cmp    r8, 4
	JE    LBB0_104
    LONG $0x02f88349             // cmp    r8, 2
	JE    LBB0_90
    LONG $0x01f88349             // cmp    r8, 1
	JNE    LBB0_118
    WORD $0x894c; BYTE $0xd8     // mov    rax, r11
    LONG $0xf0e08348             // and    rax, -16
    LONG $0x000010bb; BYTE $0x00 // mov    ebx, 16
    WORD $0x294c; BYTE $0xdb     // sub    rbx, r11
    WORD $0x0148; BYTE $0xc3     // add    rbx, rax
    WORD $0xc3f6; BYTE $0x08     // test    bl, 8
    LONG $0x760f4566; BYTE $0xc0 // pcmpeqd    xmm8, xmm8
	JE    LBB0_70
    LONG $0xffc1c748; WORD $0xffff; BYTE $0xff // mov    rcx, -1
    LONG $0x6e0f4c66; BYTE $0xc1 // movq    xmm8, rcx
    LONG $0x730f4166; WORD $0x08f8 // pslldq    xmm8, 8
LBB0_70:
    WORD $0xc3f6; BYTE $0x04     // test    bl, 4
	JE    LBB0_72
    LONG $0x730f4166; WORD $0x04f8 // pslldq    xmm8, 4
LBB0_72:
    WORD $0xc3f6; BYTE $0x02     // test    bl, 2
	JE    LBB0_74
    LONG $0x730f4166; WORD $0x02f8 // pslldq    xmm8, 2
LBB0_74:
    WORD $0xc3f6; BYTE $0x01     // test    bl, 1
	JE    LBB0_76
    LONG $0x730f4166; WORD $0x01f8 // pslldq    xmm8, 1
LBB0_76:                                
    WORD $0x854d; BYTE $0xd2     // test    r10, r10
	JE    LBB0_118
    WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE    LBB0_83
    WORD $0x3145; BYTE $0xc0     // xor    r8d, r8d
    WORD $0x394c; BYTE $0xd8     // cmp    rax, r11
	JNE    LBB0_86
    LONG $0xc0ef0f66             // pxor    xmm0, xmm0
    LONG $0x6f0f4466; WORD $0x004d // movdqa    xmm9, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x6f0f4466; WORD $0x1045 // movdqa    xmm8, 16[rbp] /* [rip + LCPI0_1] */
LBB0_80:                                
    WORD $0xc031                 // xor    eax, eax
LBB0_81:                                
    LONG $0x6f0f41f3; WORD $0x0114 // movdqu    xmm2, [r9 + rax]
    LONG $0x6f0f41f3; WORD $0x055c; BYTE $0x00 // movdqu    xmm3, [r13 + rax]
    LONG $0x246f0ff3; BYTE $0x02 // movdqu    xmm4, [rdx + rax]
    LONG $0xf36f0f66             // movdqa    xmm6, xmm3
    LONG $0xf0600f66             // punpcklbw    xmm6, xmm0
    LONG $0xfc6f0f66             // movdqa    xmm7, xmm4
    LONG $0xf8600f66             // punpcklbw    xmm7, xmm0
    LONG $0xea6f0f66             // movdqa    xmm5, xmm2
    LONG $0xe8600f66             // punpcklbw    xmm5, xmm0
    LONG $0xf5d50f66             // pmullw    xmm6, xmm5
    LONG $0x6f0f4166; BYTE $0xc9 // movdqa    xmm1, xmm9
    LONG $0xcdf90f66             // psubw    xmm1, xmm5
    LONG $0xcfd50f66             // pmullw    xmm1, xmm7
    LONG $0xcefd0f66             // paddw    xmm1, xmm6
    LONG $0xe96f0f66             // movdqa    xmm5, xmm1
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xe9fd0f66             // paddw    xmm5, xmm1
    LONG $0xfd0f4166; BYTE $0xe8 // paddw    xmm5, xmm8
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xd8680f66             // punpckhbw    xmm3, xmm0
    LONG $0xe0680f66             // punpckhbw    xmm4, xmm0
    LONG $0xd0680f66             // punpckhbw    xmm2, xmm0
    LONG $0xdad50f66             // pmullw    xmm3, xmm2
    LONG $0x6f0f4166; BYTE $0xc9 // movdqa    xmm1, xmm9
    LONG $0xcaf90f66             // psubw    xmm1, xmm2
    LONG $0xccd50f66             // pmullw    xmm1, xmm4
    LONG $0xcbfd0f66             // paddw    xmm1, xmm3
    LONG $0xd16f0f66             // movdqa    xmm2, xmm1
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xd1fd0f66             // paddw    xmm2, xmm1
    LONG $0xfd0f4166; BYTE $0xd0 // paddw    xmm2, xmm8
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xea670f66             // packuswb    xmm5, xmm2
    LONG $0x2c7f0ff3; BYTE $0x02 // movdqu    [rdx + rax], xmm5
    LONG $0x10c08348             // add    rax, 16
    WORD $0x394c; BYTE $0xd8     // cmp    rax, r11
	JB    LBB0_81
    WORD $0x014d; BYTE $0xe5     // add    r13, r12
    LONG $0x244c034c; BYTE $0x38 // add    r9, qword 56[rsp] /* [rbp + 16] */
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xc0     // inc    r8
    WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE    LBB0_80
	JMP    LBB0_118
LBB0_104:
    WORD $0x894d; BYTE $0xdf     // mov    r15, r11
    LONG $0xf0e78349             // and    r15, -16
    LONG $0x000010b8; BYTE $0x00 // mov    eax, 16
    WORD $0x294c; BYTE $0xd8     // sub    rax, r11
    WORD $0x014c; BYTE $0xf8     // add    rax, r15
    WORD $0x08a8                 // test    al, 8
    LONG $0x760f4566; BYTE $0xc0 // pcmpeqd    xmm8, xmm8
	JE    LBB0_106
    LONG $0xffc1c748; WORD $0xffff; BYTE $0xff // mov    rcx, -1
    LONG $0x6e0f4c66; BYTE $0xc1 // movq    xmm8, rcx
    LONG $0x730f4166; WORD $0x08f8 // pslldq    xmm8, 8
LBB0_106:
    WORD $0x04a8                 // test    al, 4
	JE    LBB0_108
    LONG $0x730f4166; WORD $0x04f8 // pslldq    xmm8, 4
LBB0_108:
    WORD $0x02a8                 // test    al, 2
	JE    LBB0_110
    LONG $0x730f4166; WORD $0x02f8 // pslldq    xmm8, 2
LBB0_110:
    WORD $0x01a8                 // test    al, 1
	JE    LBB0_112
    LONG $0x730f4166; WORD $0x01f8 // pslldq    xmm8, 1
LBB0_112:                               
    WORD $0x854d; BYTE $0xd2     // test    r10, r10
	JE    LBB0_118
    LONG $0x9d048d4e; LONG $0xffffffc0 // lea    r8, [4*r11 - 64]
    WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d
    LONG $0xef0f4566; BYTE $0xdb // pxor    xmm11, xmm11
    LONG $0x6f0f4466; WORD $0x0055 // movdqa    xmm10, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x6f0f4466; WORD $0x104d // movdqa    xmm9, 16[rbp] /* [rip + LCPI0_1] */
LBB0_114:                               
    WORD $0x854d; BYTE $0xff     // test    r15, r15
    LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE    LBB0_115
LBB0_122:                               
    LONG $0x6f0f45f3; WORD $0x0124 // movdqu    xmm12, [r9 + rax]
    LONG $0x6f0f4166; BYTE $0xe4 // movdqa    xmm4, xmm12
    LONG $0xe4600f66             // punpcklbw    xmm4, xmm4
    LONG $0xec6f0f66             // movdqa    xmm5, xmm4
    LONG $0xed600f66             // punpcklbw    xmm5, xmm5
    LONG $0x6f0f41f3; WORD $0x855c; BYTE $0x00 // movdqu    xmm3, [r13 + 4*rax]
    LONG $0x146f0ff3; BYTE $0x82 // movdqu    xmm2, [rdx + 4*rax]
    LONG $0xf36f0f66             // movdqa    xmm6, xmm3
    LONG $0x600f4166; BYTE $0xf3 // punpcklbw    xmm6, xmm11
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0x600f4166; BYTE $0xc3 // punpcklbw    xmm0, xmm11
    LONG $0xfd6f0f66             // movdqa    xmm7, xmm5
    LONG $0x600f4166; BYTE $0xfb // punpcklbw    xmm7, xmm11
    LONG $0xf7d50f66             // pmullw    xmm6, xmm7
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xcff90f66             // psubw    xmm1, xmm7
    LONG $0xc8d50f66             // pmullw    xmm1, xmm0
    LONG $0xcefd0f66             // paddw    xmm1, xmm6
    LONG $0xc16f0f66             // movdqa    xmm0, xmm1
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc1fd0f66             // paddw    xmm0, xmm1
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0x680f4166; BYTE $0xdb // punpckhbw    xmm3, xmm11
    LONG $0x680f4166; BYTE $0xd3 // punpckhbw    xmm2, xmm11
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0xddd50f66             // pmullw    xmm3, xmm5
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xcdf90f66             // psubw    xmm1, xmm5
    LONG $0xcad50f66             // pmullw    xmm1, xmm2
    LONG $0xcbfd0f66             // paddw    xmm1, xmm3
    LONG $0xd16f0f66             // movdqa    xmm2, xmm1
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xd1fd0f66             // paddw    xmm2, xmm1
    LONG $0xfd0f4166; BYTE $0xd1 // paddw    xmm2, xmm9
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xc2670f66             // packuswb    xmm0, xmm2
    LONG $0x047f0ff3; BYTE $0x82 // movdqu    [rdx + 4*rax], xmm0
    LONG $0xe4680f66             // punpckhbw    xmm4, xmm4
    LONG $0x6f0f41f3; WORD $0x8574; BYTE $0x10 // movdqu    xmm6, [r13 + 4*rax + 16]
    LONG $0x446f0ff3; WORD $0x1082 // movdqu    xmm0, [rdx + 4*rax + 16]
    LONG $0xce6f0f66             // movdqa    xmm1, xmm6
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xdc6f0f66             // movdqa    xmm3, xmm4
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xea // movdqa    xmm5, xmm10
    LONG $0xebf90f66             // psubw    xmm5, xmm3
    LONG $0xead50f66             // pmullw    xmm5, xmm2
    LONG $0xe9fd0f66             // paddw    xmm5, xmm1
    LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xcdfd0f66             // paddw    xmm1, xmm5
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xe3 // punpckhbw    xmm4, xmm11
    LONG $0xf4d50f66             // pmullw    xmm6, xmm4
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd4f90f66             // psubw    xmm2, xmm4
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd6fd0f66             // paddw    xmm2, xmm6
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x4c7f0ff3; WORD $0x1082 // movdqu    [rdx + 4*rax + 16], xmm1
    LONG $0x680f4566; BYTE $0xe4 // punpckhbw    xmm12, xmm12
    LONG $0x6f0f4166; BYTE $0xf4 // movdqa    xmm6, xmm12
    LONG $0xf6600f66             // punpcklbw    xmm6, xmm6
    LONG $0x6f0f41f3; WORD $0x856c; BYTE $0x20 // movdqu    xmm5, [r13 + 4*rax + 32]
    LONG $0x446f0ff3; WORD $0x2082 // movdqu    xmm0, [rdx + 4*rax + 32]
    LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xde6f0f66             // movdqa    xmm3, xmm6
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0xeed50f66             // pmullw    xmm5, xmm6
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd6f90f66             // psubw    xmm2, xmm6
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd5fd0f66             // paddw    xmm2, xmm5
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x4c7f0ff3; WORD $0x2082 // movdqu    [rdx + 4*rax + 32], xmm1
    LONG $0x680f4566; BYTE $0xe4 // punpckhbw    xmm12, xmm12
    LONG $0x6f0f41f3; WORD $0x856c; BYTE $0x30 // movdqu    xmm5, [r13 + 4*rax + 48]
    LONG $0x446f0ff3; WORD $0x3082 // movdqu    xmm0, [rdx + 4*rax + 48]
    LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0x6f0f4166; BYTE $0xdc // movdqa    xmm3, xmm12
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4566; BYTE $0xe3 // punpckhbw    xmm12, xmm11
    LONG $0xd50f4166; BYTE $0xec // pmullw    xmm5, xmm12
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xf90f4166; BYTE $0xd4 // psubw    xmm2, xmm12
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd5fd0f66             // paddw    xmm2, xmm5
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x4c7f0ff3; WORD $0x3082 // movdqu    [rdx + 4*rax + 48], xmm1
    LONG $0x10c08348             // add    rax, 16
    WORD $0x394c; BYTE $0xf8     // cmp    rax, r15
	JB    LBB0_122
LBB0_115:                               
    WORD $0x394d; BYTE $0xdf     // cmp    r15, r11
	JE    LBB0_117
    LONG $0x6f0f47f3; WORD $0x1964; BYTE $0xf0 // movdqu    xmm12, [r9 + r11 - 16]
    LONG $0xdb0f4566; BYTE $0xe0 // pand    xmm12, xmm8
    LONG $0x6f0f4166; BYTE $0xec // movdqa    xmm5, xmm12
    LONG $0xed600f66             // punpcklbw    xmm5, xmm5
    LONG $0xfd6f0f66             // movdqa    xmm7, xmm5
    LONG $0xff600f66             // punpcklbw    xmm7, xmm7
    LONG $0x6f0f43f3; WORD $0x9d74; BYTE $0xc0 // movdqu    xmm6, [r13 + 4*r11 - 64]
    LONG $0x6f0f42f3; WORD $0x9a44; BYTE $0xc0 // movdqu    xmm0, [rdx + 4*r11 - 64]
    LONG $0xce6f0f66             // movdqa    xmm1, xmm6
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xdf6f0f66             // movdqa    xmm3, xmm7
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xfb // punpckhbw    xmm7, xmm11
    LONG $0xf7d50f66             // pmullw    xmm6, xmm7
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd7f90f66             // psubw    xmm2, xmm7
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd6fd0f66             // paddw    xmm2, xmm6
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x7f0f42f3; WORD $0x020c // movdqu    [rdx + r8], xmm1
    LONG $0xed680f66             // punpckhbw    xmm5, xmm5
    LONG $0x6f0f43f3; WORD $0x9d74; BYTE $0xd0 // movdqu    xmm6, [r13 + 4*r11 - 48]
    LONG $0x6f0f42f3; WORD $0x9a44; BYTE $0xd0 // movdqu    xmm0, [rdx + 4*r11 - 48]
    LONG $0xce6f0f66             // movdqa    xmm1, xmm6
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xdd6f0f66             // movdqa    xmm3, xmm5
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0xf5d50f66             // pmullw    xmm6, xmm5
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd5f90f66             // psubw    xmm2, xmm5
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd6fd0f66             // paddw    xmm2, xmm6
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x7f0f42f3; WORD $0x024c; BYTE $0x10 // movdqu    [rdx + r8 + 16], xmm1
    LONG $0x680f4566; BYTE $0xe4 // punpckhbw    xmm12, xmm12
    LONG $0x6f0f4166; BYTE $0xf4 // movdqa    xmm6, xmm12
    LONG $0xf6600f66             // punpcklbw    xmm6, xmm6
    LONG $0x6f0f43f3; WORD $0x9d6c; BYTE $0xe0 // movdqu    xmm5, [r13 + 4*r11 - 32]
    LONG $0x6f0f42f3; WORD $0x9a44; BYTE $0xe0 // movdqu    xmm0, [rdx + 4*r11 - 32]
    LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xde6f0f66             // movdqa    xmm3, xmm6
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0xeed50f66             // pmullw    xmm5, xmm6
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd6f90f66             // psubw    xmm2, xmm6
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd5fd0f66             // paddw    xmm2, xmm5
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x7f0f42f3; WORD $0x024c; BYTE $0x20 // movdqu    [rdx + r8 + 32], xmm1
    LONG $0x680f4566; BYTE $0xe4 // punpckhbw    xmm12, xmm12
    LONG $0x6f0f43f3; WORD $0x9d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + 4*r11 - 16]
    LONG $0x6f0f42f3; WORD $0x9a44; BYTE $0xf0 // movdqu    xmm0, [rdx + 4*r11 - 16]
    LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0x6f0f4166; BYTE $0xdc // movdqa    xmm3, xmm12
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4566; BYTE $0xe3 // punpckhbw    xmm12, xmm11
    LONG $0xd50f4166; BYTE $0xec // pmullw    xmm5, xmm12
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xf90f4166; BYTE $0xd4 // psubw    xmm2, xmm12
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd5fd0f66             // paddw    xmm2, xmm5
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x7f0f42f3; WORD $0x024c; BYTE $0x30 // movdqu    [rdx + r8 + 48], xmm1
LBB0_117:                               
    WORD $0x014d; BYTE $0xe5     // add    r13, r12
    LONG $0x244c034c; BYTE $0x38 // add    r9, qword 56[rsp] /* [rbp + 16] */
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xc6     // inc    r14
    WORD $0x394d; BYTE $0xd6     // cmp    r14, r10
	JNE    LBB0_114
	JMP    LBB0_118
LBB0_90:
    WORD $0x894d; BYTE $0xdf     // mov    r15, r11
    LONG $0xf0e78349             // and    r15, -16
    LONG $0x000010b8; BYTE $0x00 // mov    eax, 16
    WORD $0x294c; BYTE $0xd8     // sub    rax, r11
    WORD $0x014c; BYTE $0xf8     // add    rax, r15
    WORD $0x08a8                 // test    al, 8
    LONG $0x760f4566; BYTE $0xc0 // pcmpeqd    xmm8, xmm8
	JE    LBB0_92
    LONG $0xffc1c748; WORD $0xffff; BYTE $0xff // mov    rcx, -1
    LONG $0x6e0f4c66; BYTE $0xc1 // movq    xmm8, rcx
    LONG $0x730f4166; WORD $0x08f8 // pslldq    xmm8, 8
LBB0_92:
    WORD $0x04a8                 // test    al, 4
	JE    LBB0_94
    LONG $0x730f4166; WORD $0x04f8 // pslldq    xmm8, 4
LBB0_94:
    WORD $0x02a8                 // test    al, 2
	JE    LBB0_96
    LONG $0x730f4166; WORD $0x02f8 // pslldq    xmm8, 2
LBB0_96:
    WORD $0x01a8                 // test    al, 1
	JE    LBB0_98
    LONG $0x730f4166; WORD $0x01f8 // pslldq    xmm8, 1
LBB0_98:                                
    WORD $0x854d; BYTE $0xd2     // test    r10, r10
	JE    LBB0_118
    LONG $0x1b448d4f; BYTE $0xe0 // lea    r8, [r11 + r11 - 32]
    WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d
    LONG $0xef0f4566; BYTE $0xdb // pxor    xmm11, xmm11
    LONG $0x6f0f4466; WORD $0x0055 // movdqa    xmm10, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x6f0f4466; WORD $0x104d // movdqa    xmm9, 16[rbp] /* [rip + LCPI0_1] */
LBB0_100:                               
    WORD $0x854d; BYTE $0xff     // test    r15, r15
    LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE    LBB0_101
LBB0_121:                               
    LONG $0x6f0f41f3; WORD $0x0114 // movdqu    xmm2, [r9 + rax]
    LONG $0xe26f0f66             // movdqa    xmm4, xmm2
    LONG $0xe4600f66             // punpcklbw    xmm4, xmm4
    LONG $0x6f0f41f3; WORD $0x4544; BYTE $0x00 // movdqu    xmm0, [r13 + 2*rax]
    LONG $0x1c6f0ff3; BYTE $0x42 // movdqu    xmm3, [rdx + 2*rax]
    LONG $0xe86f0f66             // movdqa    xmm5, xmm0
    LONG $0x600f4166; BYTE $0xeb // punpcklbw    xmm5, xmm11
    LONG $0xfb6f0f66             // movdqa    xmm7, xmm3
    LONG $0x600f4166; BYTE $0xfb // punpcklbw    xmm7, xmm11
    LONG $0xf46f0f66             // movdqa    xmm6, xmm4
    LONG $0x600f4166; BYTE $0xf3 // punpcklbw    xmm6, xmm11
    LONG $0xeed50f66             // pmullw    xmm5, xmm6
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xcef90f66             // psubw    xmm1, xmm6
    LONG $0xcfd50f66             // pmullw    xmm1, xmm7
    LONG $0xcdfd0f66             // paddw    xmm1, xmm5
    LONG $0xe96f0f66             // movdqa    xmm5, xmm1
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xe9fd0f66             // paddw    xmm5, xmm1
    LONG $0xfd0f4166; BYTE $0xe9 // paddw    xmm5, xmm9
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xdb // punpckhbw    xmm3, xmm11
    LONG $0x680f4166; BYTE $0xe3 // punpckhbw    xmm4, xmm11
    LONG $0xc4d50f66             // pmullw    xmm0, xmm4
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xccf90f66             // psubw    xmm1, xmm4
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0xc8fd0f66             // paddw    xmm1, xmm0
    LONG $0xc16f0f66             // movdqa    xmm0, xmm1
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc1fd0f66             // paddw    xmm0, xmm1
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xe8670f66             // packuswb    xmm5, xmm0
    LONG $0x2c7f0ff3; BYTE $0x42 // movdqu    [rdx + 2*rax], xmm5
    LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
    LONG $0x6f0f41f3; WORD $0x456c; BYTE $0x10 // movdqu    xmm5, [r13 + 2*rax + 16]
    LONG $0x746f0ff3; WORD $0x1042 // movdqu    xmm6, [rdx + 2*rax + 16]
    LONG $0xc56f0f66             // movdqa    xmm0, xmm5
    LONG $0x600f4166; BYTE $0xc3 // punpcklbw    xmm0, xmm11
    LONG $0xce6f0f66             // movdqa    xmm1, xmm6
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xda6f0f66             // movdqa    xmm3, xmm2
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xc3d50f66             // pmullw    xmm0, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe1d50f66             // pmullw    xmm4, xmm1
    LONG $0xe0fd0f66             // paddw    xmm4, xmm0
    LONG $0xc46f0f66             // movdqa    xmm0, xmm4
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc4fd0f66             // paddw    xmm0, xmm4
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0x680f4166; BYTE $0xd3 // punpckhbw    xmm2, xmm11
    LONG $0xead50f66             // pmullw    xmm5, xmm2
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xcaf90f66             // psubw    xmm1, xmm2
    LONG $0xced50f66             // pmullw    xmm1, xmm6
    LONG $0xcdfd0f66             // paddw    xmm1, xmm5
    LONG $0xd16f0f66             // movdqa    xmm2, xmm1
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xd1fd0f66             // paddw    xmm2, xmm1
    LONG $0xfd0f4166; BYTE $0xd1 // paddw    xmm2, xmm9
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xc2670f66             // packuswb    xmm0, xmm2
    LONG $0x447f0ff3; WORD $0x1042 // movdqu    [rdx + 2*rax + 16], xmm0
    LONG $0x10c08348             // add    rax, 16
    WORD $0x394c; BYTE $0xf8     // cmp    rax, r15
	JB    LBB0_121
LBB0_101:                               
    WORD $0x394d; BYTE $0xdf     // cmp    r15, r11
	JE    LBB0_103
    LONG $0x6f0f43f3; WORD $0x1964; BYTE $0xf0 // movdqu    xmm4, [r9 + r11 - 16]
    LONG $0xdb0f4166; BYTE $0xe0 // pand    xmm4, xmm8
    LONG $0xf46f0f66             // movdqa    xmm6, xmm4
    LONG $0xf6600f66             // punpcklbw    xmm6, xmm6
    LONG $0x6f0f43f3; WORD $0x5d6c; BYTE $0xe0 // movdqu    xmm5, [r13 + 2*r11 - 32]
    LONG $0x6f0f42f3; WORD $0x5a7c; BYTE $0xe0 // movdqu    xmm7, [rdx + 2*r11 - 32]
    LONG $0xc56f0f66             // movdqa    xmm0, xmm5
    LONG $0x600f4166; BYTE $0xc3 // punpcklbw    xmm0, xmm11
    LONG $0xcf6f0f66             // movdqa    xmm1, xmm7
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd66f0f66             // movdqa    xmm2, xmm6
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xc2d50f66             // pmullw    xmm0, xmm2
    LONG $0x6f0f4166; BYTE $0xda // movdqa    xmm3, xmm10
    LONG $0xdaf90f66             // psubw    xmm3, xmm2
    LONG $0xd9d50f66             // pmullw    xmm3, xmm1
    LONG $0xd8fd0f66             // paddw    xmm3, xmm0
    LONG $0xc36f0f66             // movdqa    xmm0, xmm3
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc3fd0f66             // paddw    xmm0, xmm3
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xfb // punpckhbw    xmm7, xmm11
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0xeed50f66             // pmullw    xmm5, xmm6
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xcef90f66             // psubw    xmm1, xmm6
    LONG $0xcfd50f66             // pmullw    xmm1, xmm7
    LONG $0xcdfd0f66             // paddw    xmm1, xmm5
    LONG $0xd16f0f66             // movdqa    xmm2, xmm1
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xd1fd0f66             // paddw    xmm2, xmm1
    LONG $0xfd0f4166; BYTE $0xd1 // paddw    xmm2, xmm9
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xc2670f66             // packuswb    xmm0, xmm2
    LONG $0x7f0f42f3; WORD $0x0204 // movdqu    [rdx + r8], xmm0
    LONG $0xe4680f66             // punpckhbw    xmm4, xmm4
    LONG $0x6f0f43f3; WORD $0x5d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + 2*r11 - 16]
    LONG $0x6f0f42f3; WORD $0x5a74; BYTE $0xf0 // movdqu    xmm6, [rdx + 2*r11 - 16]
    LONG $0xc56f0f66             // movdqa    xmm0, xmm5
    LONG $0x600f4166; BYTE $0xc3 // punpcklbw    xmm0, xmm11
    LONG $0xce6f0f66             // movdqa    xmm1, xmm6
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd46f0f66             // movdqa    xmm2, xmm4
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xc2d50f66             // pmullw    xmm0, xmm2
    LONG $0x6f0f4166; BYTE $0xda // movdqa    xmm3, xmm10
    LONG $0xdaf90f66             // psubw    xmm3, xmm2
    LONG $0xd9d50f66             // pmullw    xmm3, xmm1
    LONG $0xd8fd0f66             // paddw    xmm3, xmm0
    LONG $0xc36f0f66             // movdqa    xmm0, xmm3
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc3fd0f66             // paddw    xmm0, xmm3
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0x680f4166; BYTE $0xe3 // punpckhbw    xmm4, xmm11
    LONG $0xecd50f66             // pmullw    xmm5, xmm4
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xccf90f66             // psubw    xmm1, xmm4
    LONG $0xced50f66             // pmullw    xmm1, xmm6
    LONG $0xcdfd0f66             // paddw    xmm1, xmm5
    LONG $0xd16f0f66             // movdqa    xmm2, xmm1
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xd1fd0f66             // paddw    xmm2, xmm1
    LONG $0xfd0f4166; BYTE $0xd1 // paddw    xmm2, xmm9
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xc2670f66             // packuswb    xmm0, xmm2
    LONG $0x7f0f42f3; WORD $0x0244; BYTE $0x10 // movdqu    [rdx + r8 + 16], xmm0
LBB0_103:                               
    WORD $0x014d; BYTE $0xe5     // add    r13, r12
    LONG $0x244c034c; BYTE $0x38 // add    r9, qword 56[rsp] /* [rbp + 16] */
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xc6     // inc    r14
    WORD $0x394d; BYTE $0xd6     // cmp    r14, r10
	JNE    LBB0_100
	JMP    LBB0_118
LBB0_83:                                
    WORD $0x394c; BYTE $0xd8     // cmp    rax, r11
	JE    LBB0_118
    LONG $0x1d448d4b; BYTE $0xf0 // lea    rax, [r13 + r11 - 16]
    LONG $0x19748d4b; BYTE $0xf0 // lea    rsi, [r9 + r11 - 16]
    LONG $0x1a548d4a; BYTE $0xf0 // lea    rdx, [rdx + r11 - 16]
    LONG $0xc9ef0f66             // pxor    xmm1, xmm1
    LONG $0x6f0f4466; WORD $0x0055 // movdqa    xmm10, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x6f0f4466; WORD $0x104d // movdqa    xmm9, 16[rbp] /* [rip + LCPI0_1] */
LBB0_85:                                
    LONG $0x1e6f0ff3             // movdqu    xmm3, [rsi]
    LONG $0xdb0f4166; BYTE $0xd8 // pand    xmm3, xmm8
    LONG $0x206f0ff3             // movdqu    xmm4, [rax]
    LONG $0x326f0ff3             // movdqu    xmm6, [rdx]
    LONG $0xc46f0f66             // movdqa    xmm0, xmm4
    LONG $0xc1600f66             // punpcklbw    xmm0, xmm1
    LONG $0xfe6f0f66             // movdqa    xmm7, xmm6
    LONG $0xf9600f66             // punpcklbw    xmm7, xmm1
    LONG $0xeb6f0f66             // movdqa    xmm5, xmm3
    LONG $0xe9600f66             // punpcklbw    xmm5, xmm1
    LONG $0xc5d50f66             // pmullw    xmm0, xmm5
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd5f90f66             // psubw    xmm2, xmm5
    LONG $0xd7d50f66             // pmullw    xmm2, xmm7
    LONG $0xd0fd0f66             // paddw    xmm2, xmm0
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xe1680f66             // punpckhbw    xmm4, xmm1
    LONG $0xf1680f66             // punpckhbw    xmm6, xmm1
    LONG $0xd9680f66             // punpckhbw    xmm3, xmm1
    LONG $0xe3d50f66             // pmullw    xmm4, xmm3
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd3f90f66             // psubw    xmm2, xmm3
    LONG $0xd6d50f66             // pmullw    xmm2, xmm6
    LONG $0xd4fd0f66             // paddw    xmm2, xmm4
    LONG $0xda6f0f66             // movdqa    xmm3, xmm2
    LONG $0xd3710f66; BYTE $0x08 // psrlw    xmm3, 8
    LONG $0xdafd0f66             // paddw    xmm3, xmm2
    LONG $0xfd0f4166; BYTE $0xd9 // paddw    xmm3, xmm9
    LONG $0xd3710f66; BYTE $0x08 // psrlw    xmm3, 8
    LONG $0xc3670f66             // packuswb    xmm0, xmm3
    LONG $0x027f0ff3             // movdqu    [rdx], xmm0
    WORD $0x014c; BYTE $0xe0     // add    rax, r12
    LONG $0x24740348; BYTE $0x38 // add    rsi, qword 56[rsp] /* [rbp + 16] */
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xca     // dec    r10
	JNE    LBB0_85
	JMP    LBB0_118
LBB0_86:
    LONG $0xf0738d4d             // lea    r14, [r11 - 16]
    LONG $0xc9ef0f66             // pxor    xmm1, xmm1
    LONG $0x6f0f4466; WORD $0x0055 // movdqa    xmm10, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x6f0f4466; WORD $0x104d // movdqa    xmm9, 16[rbp] /* [rip + LCPI0_1] */
LBB0_87:                                
    WORD $0xdb31                 // xor    ebx, ebx
LBB0_88:                                
    LONG $0x6f0f41f3; WORD $0x191c // movdqu    xmm3, [r9 + rbx]
    LONG $0x6f0f41f3; WORD $0x1d64; BYTE $0x00 // movdqu    xmm4, [r13 + rbx]
    LONG $0x046f0ff3; BYTE $0x1a // movdqu    xmm0, [rdx + rbx]
    LONG $0xfc6f0f66             // movdqa    xmm7, xmm4
    LONG $0xf9600f66             // punpcklbw    xmm7, xmm1
    LONG $0xe86f0f66             // movdqa    xmm5, xmm0
    LONG $0xe9600f66             // punpcklbw    xmm5, xmm1
    LONG $0xf36f0f66             // movdqa    xmm6, xmm3
    LONG $0xf1600f66             // punpcklbw    xmm6, xmm1
    LONG $0xfed50f66             // pmullw    xmm7, xmm6
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd6f90f66             // psubw    xmm2, xmm6
    LONG $0xd5d50f66             // pmullw    xmm2, xmm5
    LONG $0xd7fd0f66             // paddw    xmm2, xmm7
    LONG $0xea6f0f66             // movdqa    xmm5, xmm2
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xeafd0f66             // paddw    xmm5, xmm2
    LONG $0xfd0f4166; BYTE $0xe9 // paddw    xmm5, xmm9
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xe1680f66             // punpckhbw    xmm4, xmm1
    LONG $0xc1680f66             // punpckhbw    xmm0, xmm1
    LONG $0xd9680f66             // punpckhbw    xmm3, xmm1
    LONG $0xe3d50f66             // pmullw    xmm4, xmm3
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd3f90f66             // psubw    xmm2, xmm3
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd4fd0f66             // paddw    xmm2, xmm4
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xe8670f66             // packuswb    xmm5, xmm0
    LONG $0x2c7f0ff3; BYTE $0x1a // movdqu    [rdx + rbx], xmm5
    LONG $0x10c38348             // add    rbx, 16
    WORD $0x3948; BYTE $0xc3     // cmp    rbx, rax
	JB    LBB0_88
    LONG $0x6f0f43f3; WORD $0x196c; BYTE $0xf0 // movdqu    xmm5, [r9 + r11 - 16]
    LONG $0xdb0f4166; BYTE $0xe8 // pand    xmm5, xmm8
    LONG $0x6f0f43f3; WORD $0x1d64; BYTE $0xf0 // movdqu    xmm4, [r13 + r11 - 16]
    LONG $0x6f0f42f3; WORD $0x1a74; BYTE $0xf0 // movdqu    xmm6, [rdx + r11 - 16]
    LONG $0xc46f0f66             // movdqa    xmm0, xmm4
    LONG $0xc1600f66             // punpcklbw    xmm0, xmm1
    LONG $0xd66f0f66             // movdqa    xmm2, xmm6
    LONG $0xd1600f66             // punpcklbw    xmm2, xmm1
    LONG $0xdd6f0f66             // movdqa    xmm3, xmm5
    LONG $0xd9600f66             // punpcklbw    xmm3, xmm1
    LONG $0xc3d50f66             // pmullw    xmm0, xmm3
    LONG $0x6f0f4166; BYTE $0xfa // movdqa    xmm7, xmm10
    LONG $0xfbf90f66             // psubw    xmm7, xmm3
    LONG $0xfad50f66             // pmullw    xmm7, xmm2
    LONG $0xf8fd0f66             // paddw    xmm7, xmm0
    LONG $0xc76f0f66             // movdqa    xmm0, xmm7
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc7fd0f66             // paddw    xmm0, xmm7
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xe1680f66             // punpckhbw    xmm4, xmm1
    LONG $0xf1680f66             // punpckhbw    xmm6, xmm1
    LONG $0xe9680f66             // punpckhbw    xmm5, xmm1
    LONG $0xe5d50f66             // pmullw    xmm4, xmm5
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd5f90f66             // psubw    xmm2, xmm5
    LONG $0xd6d50f66             // pmullw    xmm2, xmm6
    LONG $0xd4fd0f66             // paddw    xmm2, xmm4
    LONG $0xda6f0f66             // movdqa    xmm3, xmm2
    LONG $0xd3710f66; BYTE $0x08 // psrlw    xmm3, 8
    LONG $0xdafd0f66             // paddw    xmm3, xmm2
    LONG $0xfd0f4166; BYTE $0xd9 // paddw    xmm3, xmm9
    LONG $0xd3710f66; BYTE $0x08 // psrlw    xmm3, 8
    LONG $0xc3670f66             // packuswb    xmm0, xmm3
    LONG $0x7f0f42f3; WORD $0x3204 // movdqu    [rdx + r14], xmm0
    WORD $0x014d; BYTE $0xe5     // add    r13, r12
    LONG $0x244c034c; BYTE $0x38 // add    r9, qword 56[rsp] /* [rbp + 16] */
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xc0     // inc    r8
    WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE    LBB0_87
	JMP    LBB0_118
LBB0_51:
    WORD $0x894d; BYTE $0xdf     // mov    r15, r11
    LONG $0xf0e78349             // and    r15, -16
    LONG $0x000010b8; BYTE $0x00 // mov    eax, 16
    WORD $0x294c; BYTE $0xd8     // sub    rax, r11
    WORD $0x014c; BYTE $0xf8     // add    rax, r15
    WORD $0x08a8                 // test    al, 8
    LONG $0x760f4566; BYTE $0xc0 // pcmpeqd    xmm8, xmm8
	JE    LBB0_53
    LONG $0xffc1c748; WORD $0xffff; BYTE $0xff // mov    rcx, -1
    LONG $0x6e0f4c66; BYTE $0xc1 // movq    xmm8, rcx
    LONG $0x730f4166; WORD $0x08f8 // pslldq    xmm8, 8
LBB0_53:
    WORD $0x04a8                 // test    al, 4
	JE    LBB0_55
    LONG $0x730f4166; WORD $0x04f8 // pslldq    xmm8, 4
LBB0_55:
    WORD $0x02a8                 // test    al, 2
	JE    LBB0_57
    LONG $0x730f4166; WORD $0x02f8 // pslldq    xmm8, 2
LBB0_57:
    WORD $0x01a8                 // test    al, 1
	JE    LBB0_59
    LONG $0x730f4166; WORD $0x01f8 // pslldq    xmm8, 1
LBB0_59:                                
    WORD $0x854d; BYTE $0xd2     // test    r10, r10
	JE    LBB0_118
    LONG $0x9d048d4e; LONG $0xffffffc0 // lea    r8, [4*r11 - 64]
    WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d
    LONG $0xef0f4566; BYTE $0xdb // pxor    xmm11, xmm11
    LONG $0x6f0f4466; WORD $0x0055 // movdqa    xmm10, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x6f0f4466; WORD $0x104d // movdqa    xmm9, 16[rbp] /* [rip + LCPI0_1] */
LBB0_61:                                
    WORD $0x854d; BYTE $0xff     // test    r15, r15
    LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE    LBB0_62
LBB0_120:                               
    LONG $0x6f0f4566; WORD $0x0124 // movdqa    xmm12, [r9 + rax]
    LONG $0x6f0f4166; BYTE $0xe4 // movdqa    xmm4, xmm12
    LONG $0xe4600f66             // punpcklbw    xmm4, xmm4
    LONG $0xec6f0f66             // movdqa    xmm5, xmm4
    LONG $0xed600f66             // punpcklbw    xmm5, xmm5
    LONG $0x6f0f4166; WORD $0x855c; BYTE $0x00 // movdqa    xmm3, [r13 + 4*rax]
    LONG $0x146f0f66; BYTE $0x82 // movdqa    xmm2, [rdx + 4*rax]
    LONG $0xf36f0f66             // movdqa    xmm6, xmm3
    LONG $0x600f4166; BYTE $0xf3 // punpcklbw    xmm6, xmm11
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0x600f4166; BYTE $0xc3 // punpcklbw    xmm0, xmm11
    LONG $0xfd6f0f66             // movdqa    xmm7, xmm5
    LONG $0x600f4166; BYTE $0xfb // punpcklbw    xmm7, xmm11
    LONG $0xf7d50f66             // pmullw    xmm6, xmm7
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xcff90f66             // psubw    xmm1, xmm7
    LONG $0xc8d50f66             // pmullw    xmm1, xmm0
    LONG $0xcefd0f66             // paddw    xmm1, xmm6
    LONG $0xc16f0f66             // movdqa    xmm0, xmm1
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc1fd0f66             // paddw    xmm0, xmm1
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0x680f4166; BYTE $0xdb // punpckhbw    xmm3, xmm11
    LONG $0x680f4166; BYTE $0xd3 // punpckhbw    xmm2, xmm11
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0xddd50f66             // pmullw    xmm3, xmm5
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xcdf90f66             // psubw    xmm1, xmm5
    LONG $0xcad50f66             // pmullw    xmm1, xmm2
    LONG $0xcbfd0f66             // paddw    xmm1, xmm3
    LONG $0xd16f0f66             // movdqa    xmm2, xmm1
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xd1fd0f66             // paddw    xmm2, xmm1
    LONG $0xfd0f4166; BYTE $0xd1 // paddw    xmm2, xmm9
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xc2670f66             // packuswb    xmm0, xmm2
    LONG $0x047f0f66; BYTE $0x82 // movdqa    [rdx + 4*rax], xmm0
    LONG $0xe4680f66             // punpckhbw    xmm4, xmm4
    LONG $0x6f0f4166; WORD $0x8574; BYTE $0x10 // movdqa    xmm6, [r13 + 4*rax + 16]
    LONG $0x446f0f66; WORD $0x1082 // movdqa    xmm0, [rdx + 4*rax + 16]
    LONG $0xce6f0f66             // movdqa    xmm1, xmm6
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xdc6f0f66             // movdqa    xmm3, xmm4
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xea // movdqa    xmm5, xmm10
    LONG $0xebf90f66             // psubw    xmm5, xmm3
    LONG $0xead50f66             // pmullw    xmm5, xmm2
    LONG $0xe9fd0f66             // paddw    xmm5, xmm1
    LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xcdfd0f66             // paddw    xmm1, xmm5
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xe3 // punpckhbw    xmm4, xmm11
    LONG $0xf4d50f66             // pmullw    xmm6, xmm4
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd4f90f66             // psubw    xmm2, xmm4
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd6fd0f66             // paddw    xmm2, xmm6
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x4c7f0f66; WORD $0x1082 // movdqa    [rdx + 4*rax + 16], xmm1
    LONG $0x680f4566; BYTE $0xe4 // punpckhbw    xmm12, xmm12
    LONG $0x6f0f4166; BYTE $0xf4 // movdqa    xmm6, xmm12
    LONG $0xf6600f66             // punpcklbw    xmm6, xmm6
    LONG $0x6f0f4166; WORD $0x856c; BYTE $0x20 // movdqa    xmm5, [r13 + 4*rax + 32]
    LONG $0x446f0f66; WORD $0x2082 // movdqa    xmm0, [rdx + 4*rax + 32]
    LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xde6f0f66             // movdqa    xmm3, xmm6
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0xeed50f66             // pmullw    xmm5, xmm6
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd6f90f66             // psubw    xmm2, xmm6
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd5fd0f66             // paddw    xmm2, xmm5
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x4c7f0f66; WORD $0x2082 // movdqa    [rdx + 4*rax + 32], xmm1
    LONG $0x680f4566; BYTE $0xe4 // punpckhbw    xmm12, xmm12
    LONG $0x6f0f4166; WORD $0x856c; BYTE $0x30 // movdqa    xmm5, [r13 + 4*rax + 48]
    LONG $0x446f0f66; WORD $0x3082 // movdqa    xmm0, [rdx + 4*rax + 48]
    LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0x6f0f4166; BYTE $0xdc // movdqa    xmm3, xmm12
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4566; BYTE $0xe3 // punpckhbw    xmm12, xmm11
    LONG $0xd50f4166; BYTE $0xec // pmullw    xmm5, xmm12
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xf90f4166; BYTE $0xd4 // psubw    xmm2, xmm12
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd5fd0f66             // paddw    xmm2, xmm5
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x4c7f0f66; WORD $0x3082 // movdqa    [rdx + 4*rax + 48], xmm1
    LONG $0x10c08348             // add    rax, 16
    WORD $0x394c; BYTE $0xf8     // cmp    rax, r15
	JB    LBB0_120
LBB0_62:                                
    WORD $0x394d; BYTE $0xdf     // cmp    r15, r11
	JE    LBB0_64
    LONG $0x6f0f47f3; WORD $0x1964; BYTE $0xf0 // movdqu    xmm12, [r9 + r11 - 16]
    LONG $0xdb0f4566; BYTE $0xe0 // pand    xmm12, xmm8
    LONG $0x6f0f4166; BYTE $0xec // movdqa    xmm5, xmm12
    LONG $0xed600f66             // punpcklbw    xmm5, xmm5
    LONG $0xfd6f0f66             // movdqa    xmm7, xmm5
    LONG $0xff600f66             // punpcklbw    xmm7, xmm7
    LONG $0x6f0f43f3; WORD $0x9d74; BYTE $0xc0 // movdqu    xmm6, [r13 + 4*r11 - 64]
    LONG $0x6f0f42f3; WORD $0x9a44; BYTE $0xc0 // movdqu    xmm0, [rdx + 4*r11 - 64]
    LONG $0xce6f0f66             // movdqa    xmm1, xmm6
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xdf6f0f66             // movdqa    xmm3, xmm7
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xfb // punpckhbw    xmm7, xmm11
    LONG $0xf7d50f66             // pmullw    xmm6, xmm7
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd7f90f66             // psubw    xmm2, xmm7
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd6fd0f66             // paddw    xmm2, xmm6
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x7f0f42f3; WORD $0x020c // movdqu    [rdx + r8], xmm1
    LONG $0xed680f66             // punpckhbw    xmm5, xmm5
    LONG $0x6f0f43f3; WORD $0x9d74; BYTE $0xd0 // movdqu    xmm6, [r13 + 4*r11 - 48]
    LONG $0x6f0f42f3; WORD $0x9a44; BYTE $0xd0 // movdqu    xmm0, [rdx + 4*r11 - 48]
    LONG $0xce6f0f66             // movdqa    xmm1, xmm6
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xdd6f0f66             // movdqa    xmm3, xmm5
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0xf5d50f66             // pmullw    xmm6, xmm5
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd5f90f66             // psubw    xmm2, xmm5
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd6fd0f66             // paddw    xmm2, xmm6
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x7f0f42f3; WORD $0x024c; BYTE $0x10 // movdqu    [rdx + r8 + 16], xmm1
    LONG $0x680f4566; BYTE $0xe4 // punpckhbw    xmm12, xmm12
    LONG $0x6f0f4166; BYTE $0xf4 // movdqa    xmm6, xmm12
    LONG $0xf6600f66             // punpcklbw    xmm6, xmm6
    LONG $0x6f0f43f3; WORD $0x9d6c; BYTE $0xe0 // movdqu    xmm5, [r13 + 4*r11 - 32]
    LONG $0x6f0f42f3; WORD $0x9a44; BYTE $0xe0 // movdqu    xmm0, [rdx + 4*r11 - 32]
    LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xde6f0f66             // movdqa    xmm3, xmm6
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0xeed50f66             // pmullw    xmm5, xmm6
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd6f90f66             // psubw    xmm2, xmm6
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd5fd0f66             // paddw    xmm2, xmm5
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x7f0f42f3; WORD $0x024c; BYTE $0x20 // movdqu    [rdx + r8 + 32], xmm1
    LONG $0x680f4566; BYTE $0xe4 // punpckhbw    xmm12, xmm12
    LONG $0x6f0f43f3; WORD $0x9d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + 4*r11 - 16]
    LONG $0x6f0f42f3; WORD $0x9a44; BYTE $0xf0 // movdqu    xmm0, [rdx + 4*r11 - 16]
    LONG $0xcd6f0f66             // movdqa    xmm1, xmm5
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd06f0f66             // movdqa    xmm2, xmm0
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0x6f0f4166; BYTE $0xdc // movdqa    xmm3, xmm12
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe2d50f66             // pmullw    xmm4, xmm2
    LONG $0xe1fd0f66             // paddw    xmm4, xmm1
    LONG $0xcc6f0f66             // movdqa    xmm1, xmm4
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0xccfd0f66             // paddw    xmm1, xmm4
    LONG $0xfd0f4166; BYTE $0xc9 // paddw    xmm1, xmm9
    LONG $0xd1710f66; BYTE $0x08 // psrlw    xmm1, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4566; BYTE $0xe3 // punpckhbw    xmm12, xmm11
    LONG $0xd50f4166; BYTE $0xec // pmullw    xmm5, xmm12
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xf90f4166; BYTE $0xd4 // psubw    xmm2, xmm12
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd5fd0f66             // paddw    xmm2, xmm5
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc8670f66             // packuswb    xmm1, xmm0
    LONG $0x7f0f42f3; WORD $0x024c; BYTE $0x30 // movdqu    [rdx + r8 + 48], xmm1
LBB0_64:                                
    WORD $0x014d; BYTE $0xe5     // add    r13, r12
    LONG $0x244c034c; BYTE $0x38 // add    r9, qword 56[rsp] /* [rbp + 16] */
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xc6     // inc    r14
    WORD $0x394d; BYTE $0xd6     // cmp    r14, r10
	JNE    LBB0_61
	JMP    LBB0_118
LBB0_37:
    WORD $0x894d; BYTE $0xdf     // mov    r15, r11
    LONG $0xf0e78349             // and    r15, -16
    LONG $0x000010b8; BYTE $0x00 // mov    eax, 16
    WORD $0x294c; BYTE $0xd8     // sub    rax, r11
    WORD $0x014c; BYTE $0xf8     // add    rax, r15
    WORD $0x08a8                 // test    al, 8
    LONG $0x760f4566; BYTE $0xc0 // pcmpeqd    xmm8, xmm8
	JE    LBB0_39
    LONG $0xffc1c748; WORD $0xffff; BYTE $0xff // mov    rcx, -1
    LONG $0x6e0f4c66; BYTE $0xc1 // movq    xmm8, rcx
    LONG $0x730f4166; WORD $0x08f8 // pslldq    xmm8, 8
LBB0_39:
    WORD $0x04a8                 // test    al, 4
	JE    LBB0_41
    LONG $0x730f4166; WORD $0x04f8 // pslldq    xmm8, 4
LBB0_41:
    WORD $0x02a8                 // test    al, 2
	JE    LBB0_43
    LONG $0x730f4166; WORD $0x02f8 // pslldq    xmm8, 2
LBB0_43:
    WORD $0x01a8                 // test    al, 1
	JE    LBB0_45
    LONG $0x730f4166; WORD $0x01f8 // pslldq    xmm8, 1
LBB0_45:                                
    WORD $0x854d; BYTE $0xd2     // test    r10, r10
	JE    LBB0_118
    LONG $0x1b448d4f; BYTE $0xe0 // lea    r8, [r11 + r11 - 32]
    WORD $0x3145; BYTE $0xf6     // xor    r14d, r14d
    LONG $0xef0f4566; BYTE $0xdb // pxor    xmm11, xmm11
    LONG $0x6f0f4466; WORD $0x0055 // movdqa    xmm10, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x6f0f4466; WORD $0x104d // movdqa    xmm9, 16[rbp] /* [rip + LCPI0_1] */
LBB0_47:                                
    WORD $0x854d; BYTE $0xff     // test    r15, r15
    LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE    LBB0_48
LBB0_119:                               
    LONG $0x6f0f4166; WORD $0x0114 // movdqa    xmm2, [r9 + rax]
    LONG $0xe26f0f66             // movdqa    xmm4, xmm2
    LONG $0xe4600f66             // punpcklbw    xmm4, xmm4
    LONG $0x6f0f4166; WORD $0x4544; BYTE $0x00 // movdqa    xmm0, [r13 + 2*rax]
    LONG $0x1c6f0f66; BYTE $0x42 // movdqa    xmm3, [rdx + 2*rax]
    LONG $0xe86f0f66             // movdqa    xmm5, xmm0
    LONG $0x600f4166; BYTE $0xeb // punpcklbw    xmm5, xmm11
    LONG $0xfb6f0f66             // movdqa    xmm7, xmm3
    LONG $0x600f4166; BYTE $0xfb // punpcklbw    xmm7, xmm11
    LONG $0xf46f0f66             // movdqa    xmm6, xmm4
    LONG $0x600f4166; BYTE $0xf3 // punpcklbw    xmm6, xmm11
    LONG $0xeed50f66             // pmullw    xmm5, xmm6
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xcef90f66             // psubw    xmm1, xmm6
    LONG $0xcfd50f66             // pmullw    xmm1, xmm7
    LONG $0xcdfd0f66             // paddw    xmm1, xmm5
    LONG $0xe96f0f66             // movdqa    xmm5, xmm1
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xe9fd0f66             // paddw    xmm5, xmm1
    LONG $0xfd0f4166; BYTE $0xe9 // paddw    xmm5, xmm9
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0x680f4166; BYTE $0xc3 // punpckhbw    xmm0, xmm11
    LONG $0x680f4166; BYTE $0xdb // punpckhbw    xmm3, xmm11
    LONG $0x680f4166; BYTE $0xe3 // punpckhbw    xmm4, xmm11
    LONG $0xc4d50f66             // pmullw    xmm0, xmm4
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xccf90f66             // psubw    xmm1, xmm4
    LONG $0xcbd50f66             // pmullw    xmm1, xmm3
    LONG $0xc8fd0f66             // paddw    xmm1, xmm0
    LONG $0xc16f0f66             // movdqa    xmm0, xmm1
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc1fd0f66             // paddw    xmm0, xmm1
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xe8670f66             // packuswb    xmm5, xmm0
    LONG $0x2c7f0f66; BYTE $0x42 // movdqa    [rdx + 2*rax], xmm5
    LONG $0xd2680f66             // punpckhbw    xmm2, xmm2
    LONG $0x6f0f4166; WORD $0x456c; BYTE $0x10 // movdqa    xmm5, [r13 + 2*rax + 16]
    LONG $0x746f0f66; WORD $0x1042 // movdqa    xmm6, [rdx + 2*rax + 16]
    LONG $0xc56f0f66             // movdqa    xmm0, xmm5
    LONG $0x600f4166; BYTE $0xc3 // punpcklbw    xmm0, xmm11
    LONG $0xce6f0f66             // movdqa    xmm1, xmm6
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xda6f0f66             // movdqa    xmm3, xmm2
    LONG $0x600f4166; BYTE $0xdb // punpcklbw    xmm3, xmm11
    LONG $0xc3d50f66             // pmullw    xmm0, xmm3
    LONG $0x6f0f4166; BYTE $0xe2 // movdqa    xmm4, xmm10
    LONG $0xe3f90f66             // psubw    xmm4, xmm3
    LONG $0xe1d50f66             // pmullw    xmm4, xmm1
    LONG $0xe0fd0f66             // paddw    xmm4, xmm0
    LONG $0xc46f0f66             // movdqa    xmm0, xmm4
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc4fd0f66             // paddw    xmm0, xmm4
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0x680f4166; BYTE $0xd3 // punpckhbw    xmm2, xmm11
    LONG $0xead50f66             // pmullw    xmm5, xmm2
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xcaf90f66             // psubw    xmm1, xmm2
    LONG $0xced50f66             // pmullw    xmm1, xmm6
    LONG $0xcdfd0f66             // paddw    xmm1, xmm5
    LONG $0xd16f0f66             // movdqa    xmm2, xmm1
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xd1fd0f66             // paddw    xmm2, xmm1
    LONG $0xfd0f4166; BYTE $0xd1 // paddw    xmm2, xmm9
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xc2670f66             // packuswb    xmm0, xmm2
    LONG $0x447f0f66; WORD $0x1042 // movdqa    [rdx + 2*rax + 16], xmm0
    LONG $0x10c08348             // add    rax, 16
    WORD $0x394c; BYTE $0xf8     // cmp    rax, r15
	JB    LBB0_119
LBB0_48:                                
    WORD $0x394d; BYTE $0xdf     // cmp    r15, r11
	JE    LBB0_50
    LONG $0x6f0f43f3; WORD $0x1964; BYTE $0xf0 // movdqu    xmm4, [r9 + r11 - 16]
    LONG $0xdb0f4166; BYTE $0xe0 // pand    xmm4, xmm8
    LONG $0xf46f0f66             // movdqa    xmm6, xmm4
    LONG $0xf6600f66             // punpcklbw    xmm6, xmm6
    LONG $0x6f0f43f3; WORD $0x5d6c; BYTE $0xe0 // movdqu    xmm5, [r13 + 2*r11 - 32]
    LONG $0x6f0f42f3; WORD $0x5a7c; BYTE $0xe0 // movdqu    xmm7, [rdx + 2*r11 - 32]
    LONG $0xc56f0f66             // movdqa    xmm0, xmm5
    LONG $0x600f4166; BYTE $0xc3 // punpcklbw    xmm0, xmm11
    LONG $0xcf6f0f66             // movdqa    xmm1, xmm7
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd66f0f66             // movdqa    xmm2, xmm6
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xc2d50f66             // pmullw    xmm0, xmm2
    LONG $0x6f0f4166; BYTE $0xda // movdqa    xmm3, xmm10
    LONG $0xdaf90f66             // psubw    xmm3, xmm2
    LONG $0xd9d50f66             // pmullw    xmm3, xmm1
    LONG $0xd8fd0f66             // paddw    xmm3, xmm0
    LONG $0xc36f0f66             // movdqa    xmm0, xmm3
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc3fd0f66             // paddw    xmm0, xmm3
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xfb // punpckhbw    xmm7, xmm11
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0xeed50f66             // pmullw    xmm5, xmm6
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xcef90f66             // psubw    xmm1, xmm6
    LONG $0xcfd50f66             // pmullw    xmm1, xmm7
    LONG $0xcdfd0f66             // paddw    xmm1, xmm5
    LONG $0xd16f0f66             // movdqa    xmm2, xmm1
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xd1fd0f66             // paddw    xmm2, xmm1
    LONG $0xfd0f4166; BYTE $0xd1 // paddw    xmm2, xmm9
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xc2670f66             // packuswb    xmm0, xmm2
    LONG $0x7f0f42f3; WORD $0x0204 // movdqu    [rdx + r8], xmm0
    LONG $0xe4680f66             // punpckhbw    xmm4, xmm4
    LONG $0x6f0f43f3; WORD $0x5d6c; BYTE $0xf0 // movdqu    xmm5, [r13 + 2*r11 - 16]
    LONG $0x6f0f42f3; WORD $0x5a74; BYTE $0xf0 // movdqu    xmm6, [rdx + 2*r11 - 16]
    LONG $0xc56f0f66             // movdqa    xmm0, xmm5
    LONG $0x600f4166; BYTE $0xc3 // punpcklbw    xmm0, xmm11
    LONG $0xce6f0f66             // movdqa    xmm1, xmm6
    LONG $0x600f4166; BYTE $0xcb // punpcklbw    xmm1, xmm11
    LONG $0xd46f0f66             // movdqa    xmm2, xmm4
    LONG $0x600f4166; BYTE $0xd3 // punpcklbw    xmm2, xmm11
    LONG $0xc2d50f66             // pmullw    xmm0, xmm2
    LONG $0x6f0f4166; BYTE $0xda // movdqa    xmm3, xmm10
    LONG $0xdaf90f66             // psubw    xmm3, xmm2
    LONG $0xd9d50f66             // pmullw    xmm3, xmm1
    LONG $0xd8fd0f66             // paddw    xmm3, xmm0
    LONG $0xc36f0f66             // movdqa    xmm0, xmm3
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc3fd0f66             // paddw    xmm0, xmm3
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0x680f4166; BYTE $0xeb // punpckhbw    xmm5, xmm11
    LONG $0x680f4166; BYTE $0xf3 // punpckhbw    xmm6, xmm11
    LONG $0x680f4166; BYTE $0xe3 // punpckhbw    xmm4, xmm11
    LONG $0xecd50f66             // pmullw    xmm5, xmm4
    LONG $0x6f0f4166; BYTE $0xca // movdqa    xmm1, xmm10
    LONG $0xccf90f66             // psubw    xmm1, xmm4
    LONG $0xced50f66             // pmullw    xmm1, xmm6
    LONG $0xcdfd0f66             // paddw    xmm1, xmm5
    LONG $0xd16f0f66             // movdqa    xmm2, xmm1
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xd1fd0f66             // paddw    xmm2, xmm1
    LONG $0xfd0f4166; BYTE $0xd1 // paddw    xmm2, xmm9
    LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
    LONG $0xc2670f66             // packuswb    xmm0, xmm2
    LONG $0x7f0f42f3; WORD $0x0244; BYTE $0x10 // movdqu    [rdx + r8 + 16], xmm0
LBB0_50:                                
    WORD $0x014d; BYTE $0xe5     // add    r13, r12
    LONG $0x244c034c; BYTE $0x38 // add    r9, qword 56[rsp] /* [rbp + 16] */
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xc6     // inc    r14
    WORD $0x394d; BYTE $0xd6     // cmp    r14, r10
	JNE    LBB0_47
	JMP    LBB0_118
LBB0_30:                                
    WORD $0x394c; BYTE $0xd8     // cmp    rax, r11
	JE    LBB0_118
    LONG $0x1d448d4b; BYTE $0xf0 // lea    rax, [r13 + r11 - 16]
    LONG $0x19748d4b; BYTE $0xf0 // lea    rsi, [r9 + r11 - 16]
    LONG $0x1a548d4a; BYTE $0xf0 // lea    rdx, [rdx + r11 - 16]
    LONG $0xc9ef0f66             // pxor    xmm1, xmm1
    LONG $0x6f0f4466; WORD $0x0055 // movdqa    xmm10, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x6f0f4466; WORD $0x104d // movdqa    xmm9, 16[rbp] /* [rip + LCPI0_1] */
LBB0_32:                                
    LONG $0x1e6f0ff3             // movdqu    xmm3, [rsi]
    LONG $0xdb0f4166; BYTE $0xd8 // pand    xmm3, xmm8
    LONG $0x206f0ff3             // movdqu    xmm4, [rax]
    LONG $0x326f0ff3             // movdqu    xmm6, [rdx]
    LONG $0xc46f0f66             // movdqa    xmm0, xmm4
    LONG $0xc1600f66             // punpcklbw    xmm0, xmm1
    LONG $0xfe6f0f66             // movdqa    xmm7, xmm6
    LONG $0xf9600f66             // punpcklbw    xmm7, xmm1
    LONG $0xeb6f0f66             // movdqa    xmm5, xmm3
    LONG $0xe9600f66             // punpcklbw    xmm5, xmm1
    LONG $0xc5d50f66             // pmullw    xmm0, xmm5
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd5f90f66             // psubw    xmm2, xmm5
    LONG $0xd7d50f66             // pmullw    xmm2, xmm7
    LONG $0xd0fd0f66             // paddw    xmm2, xmm0
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xe1680f66             // punpckhbw    xmm4, xmm1
    LONG $0xf1680f66             // punpckhbw    xmm6, xmm1
    LONG $0xd9680f66             // punpckhbw    xmm3, xmm1
    LONG $0xe3d50f66             // pmullw    xmm4, xmm3
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd3f90f66             // psubw    xmm2, xmm3
    LONG $0xd6d50f66             // pmullw    xmm2, xmm6
    LONG $0xd4fd0f66             // paddw    xmm2, xmm4
    LONG $0xda6f0f66             // movdqa    xmm3, xmm2
    LONG $0xd3710f66; BYTE $0x08 // psrlw    xmm3, 8
    LONG $0xdafd0f66             // paddw    xmm3, xmm2
    LONG $0xfd0f4166; BYTE $0xd9 // paddw    xmm3, xmm9
    LONG $0xd3710f66; BYTE $0x08 // psrlw    xmm3, 8
    LONG $0xc3670f66             // packuswb    xmm0, xmm3
    LONG $0x027f0ff3             // movdqu    [rdx], xmm0
    WORD $0x014c; BYTE $0xe0     // add    rax, r12
    LONG $0x24740348; BYTE $0x38 // add    rsi, qword 56[rsp] /* [rbp + 16] */
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xca     // dec    r10
	JNE    LBB0_32
	JMP    LBB0_118
LBB0_33:
    LONG $0xf0738d4d             // lea    r14, [r11 - 16]
    LONG $0xc9ef0f66             // pxor    xmm1, xmm1
    LONG $0x6f0f4466; WORD $0x0055 // movdqa    xmm10, 0[rbp] /* [rip + LCPI0_0] */
    LONG $0x6f0f4466; WORD $0x104d // movdqa    xmm9, 16[rbp] /* [rip + LCPI0_1] */
LBB0_34:                                
    WORD $0xdb31                 // xor    ebx, ebx
LBB0_35:                                
    LONG $0x6f0f4166; WORD $0x191c // movdqa    xmm3, [r9 + rbx]
    LONG $0x6f0f4166; WORD $0x1d64; BYTE $0x00 // movdqa    xmm4, [r13 + rbx]
    LONG $0x046f0f66; BYTE $0x1a // movdqa    xmm0, [rdx + rbx]
    LONG $0xfc6f0f66             // movdqa    xmm7, xmm4
    LONG $0xf9600f66             // punpcklbw    xmm7, xmm1
    LONG $0xe86f0f66             // movdqa    xmm5, xmm0
    LONG $0xe9600f66             // punpcklbw    xmm5, xmm1
    LONG $0xf36f0f66             // movdqa    xmm6, xmm3
    LONG $0xf1600f66             // punpcklbw    xmm6, xmm1
    LONG $0xfed50f66             // pmullw    xmm7, xmm6
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd6f90f66             // psubw    xmm2, xmm6
    LONG $0xd5d50f66             // pmullw    xmm2, xmm5
    LONG $0xd7fd0f66             // paddw    xmm2, xmm7
    LONG $0xea6f0f66             // movdqa    xmm5, xmm2
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xeafd0f66             // paddw    xmm5, xmm2
    LONG $0xfd0f4166; BYTE $0xe9 // paddw    xmm5, xmm9
    LONG $0xd5710f66; BYTE $0x08 // psrlw    xmm5, 8
    LONG $0xe1680f66             // punpckhbw    xmm4, xmm1
    LONG $0xc1680f66             // punpckhbw    xmm0, xmm1
    LONG $0xd9680f66             // punpckhbw    xmm3, xmm1
    LONG $0xe3d50f66             // pmullw    xmm4, xmm3
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd3f90f66             // psubw    xmm2, xmm3
    LONG $0xd0d50f66             // pmullw    xmm2, xmm0
    LONG $0xd4fd0f66             // paddw    xmm2, xmm4
    LONG $0xc26f0f66             // movdqa    xmm0, xmm2
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc2fd0f66             // paddw    xmm0, xmm2
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xe8670f66             // packuswb    xmm5, xmm0
    LONG $0x2c7f0f66; BYTE $0x1a // movdqa    [rdx + rbx], xmm5
    LONG $0x10c38348             // add    rbx, 16
    WORD $0x3948; BYTE $0xc3     // cmp    rbx, rax
	JB    LBB0_35
    LONG $0x6f0f43f3; WORD $0x196c; BYTE $0xf0 // movdqu    xmm5, [r9 + r11 - 16]
    LONG $0xdb0f4166; BYTE $0xe8 // pand    xmm5, xmm8
    LONG $0x6f0f43f3; WORD $0x1d64; BYTE $0xf0 // movdqu    xmm4, [r13 + r11 - 16]
    LONG $0x6f0f42f3; WORD $0x1a74; BYTE $0xf0 // movdqu    xmm6, [rdx + r11 - 16]
    LONG $0xc46f0f66             // movdqa    xmm0, xmm4
    LONG $0xc1600f66             // punpcklbw    xmm0, xmm1
    LONG $0xd66f0f66             // movdqa    xmm2, xmm6
    LONG $0xd1600f66             // punpcklbw    xmm2, xmm1
    LONG $0xdd6f0f66             // movdqa    xmm3, xmm5
    LONG $0xd9600f66             // punpcklbw    xmm3, xmm1
    LONG $0xc3d50f66             // pmullw    xmm0, xmm3
    LONG $0x6f0f4166; BYTE $0xfa // movdqa    xmm7, xmm10
    LONG $0xfbf90f66             // psubw    xmm7, xmm3
    LONG $0xfad50f66             // pmullw    xmm7, xmm2
    LONG $0xf8fd0f66             // paddw    xmm7, xmm0
    LONG $0xc76f0f66             // movdqa    xmm0, xmm7
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xc7fd0f66             // paddw    xmm0, xmm7
    LONG $0xfd0f4166; BYTE $0xc1 // paddw    xmm0, xmm9
    LONG $0xd0710f66; BYTE $0x08 // psrlw    xmm0, 8
    LONG $0xe1680f66             // punpckhbw    xmm4, xmm1
    LONG $0xf1680f66             // punpckhbw    xmm6, xmm1
    LONG $0xe9680f66             // punpckhbw    xmm5, xmm1
    LONG $0xe5d50f66             // pmullw    xmm4, xmm5
    LONG $0x6f0f4166; BYTE $0xd2 // movdqa    xmm2, xmm10
    LONG $0xd5f90f66             // psubw    xmm2, xmm5
    LONG $0xd6d50f66             // pmullw    xmm2, xmm6
    LONG $0xd4fd0f66             // paddw    xmm2, xmm4
    LONG $0xda6f0f66             // movdqa    xmm3, xmm2
    LONG $0xd3710f66; BYTE $0x08 // psrlw    xmm3, 8
    LONG $0xdafd0f66             // paddw    xmm3, xmm2
    LONG $0xfd0f4166; BYTE $0xd9 // paddw    xmm3, xmm9
    LONG $0xd3710f66; BYTE $0x08 // psrlw    xmm3, 8
    LONG $0xc3670f66             // packuswb    xmm0, xmm3
    LONG $0x7f0f42f3; WORD $0x3204 // movdqu    [rdx + r14], xmm0
    WORD $0x014d; BYTE $0xe5     // add    r13, r12
    LONG $0x244c034c; BYTE $0x38 // add    r9, qword 56[rsp] /* [rbp + 16] */
    WORD $0x0148; BYTE $0xfa     // add    rdx, rdi
    WORD $0xff49; BYTE $0xc0     // inc    r8
    WORD $0x394d; BYTE $0xd0     // cmp    r8, r10
	JNE    LBB0_34
LBB0_118:                               
    RET
