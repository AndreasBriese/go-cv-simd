//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x008(SB)/8, $0xffffffff00000000
DATA LCDATA1<>+0x010(SB)/8, $0x0005000500050005
DATA LCDATA1<>+0x018(SB)/8, $0x0005000500050005
DATA LCDATA1<>+0x020(SB)/8, $0x1c711c711c711c71
DATA LCDATA1<>+0x028(SB)/8, $0x1c711c711c711c71
DATA LCDATA1<>+0x030(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x038(SB)/8, $0xffff000000000000
GLOBL LCDATA1<>(SB), 8, $64

TEXT ·_SimdSse2MeanFilter3x3(SB), 7, $128-64

	MOVQ SP, BP
	ANDQ $-16, BP
	SUBQ $64, BP
	MOVQ SP, -32(BP)
	MOVQ arg8+56(FP), DI
	MOVQ DI, -40(BP)
	MOVQ arg7+48(FP), DI
	MOVQ DI, -48(BP)
	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	LEAQ LCDATA1<>(SB), BP
	ANDQ $-16, SP
	SUBQ $64, SP

	WORD $0x894d; BYTE $0xcd       // mov    r13, r9
	LONG $0x240c8948               // mov    qword [rsp], rcx
	WORD $0x8948; BYTE $0xf0       // mov    rax, rsi
	LONG $0xf0e08348               // and    rax, -16
	LONG $0x24748948; BYTE $0x18   // mov    qword [rsp + 24], rsi
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	LONG $0x247c8948; BYTE $0x10   // mov    qword [rsp + 16], rdi
	LONG $0x24548948; BYTE $0x08   // mov    qword [rsp + 8], rdx
	JNE  LBB0_62
	WORD $0x8948; BYTE $0xf8       // mov    rax, rdi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JNE  LBB0_62
	WORD $0x894c; BYTE $0xc0       // mov    rax, r8
	LONG $0xc2af0f48               // imul    rax, rdx
	WORD $0x8948; BYTE $0xc1       // mov    rcx, rax
	LONG $0xf0e18348               // and    rcx, -16
	WORD $0x3948; BYTE $0xc1       // cmp    rcx, rax
	JNE  LBB0_62
	LONG $0x24448b48; BYTE $0xd0   // mov    rax, qword -48[rsp] /* [rbp + 16] */
	WORD $0x8948; BYTE $0xc1       // mov    rcx, rax
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_62
	WORD $0x894c; BYTE $0xe8       // mov    rax, r13
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x394c; BYTE $0xe8       // cmp    rax, r13
	JNE  LBB0_62
	LONG $0x02f88349               // cmp    r8, 2
	JG   LBB0_21
	LONG $0x01f88349               // cmp    r8, 1
	LONG $0x24748b48; BYTE $0xd8   // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	JE   LBB0_36
	LONG $0x02f88349               // cmp    r8, 2
	JNE  LBB0_119
	LONG $0x123c8d4c               // lea    r15, [rdx + rdx]
	LONG $0x12448d48; BYTE $0x0f   // lea    rax, [rdx + rdx + 15]
	LONG $0xf0e08348               // and    rax, -16
	LONG $0xf0608d4c               // lea    r12, [rax - 16]
	LONG $0x24448948; BYTE $0x08   // mov    qword [rsp + 8], rax
	LONG $0x461c8d48               // lea    rbx, [rsi + 2*rax]
	WORD $0x8949; BYTE $0xf6       // mov    r14, rsi
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x0e6f0f66               // movdqa    xmm1, [rsi]
	LONG $0xc16f0f66               // movdqa    xmm0, xmm1
	LONG $0xf8730f66; BYTE $0x02   // pslldq    xmm0, 2
	LONG $0x00ffffb8; BYTE $0x00   // mov    eax, 65535
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd1db0f66               // pand    xmm2, xmm1
	LONG $0xd0eb0f66               // por    xmm2, xmm0
	LONG $0x5e6f0ff3; BYTE $0x02   // movdqu    xmm3, [rsi + 2]
	LONG $0xc0ef0f66               // pxor    xmm0, xmm0
	LONG $0xe26f0f66               // movdqa    xmm4, xmm2
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xe96f0f66               // movdqa    xmm5, xmm1
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xf5fd0f66               // paddw    xmm6, xmm5
	LONG $0xf4fd0f66               // paddw    xmm6, xmm4
	LONG $0x7f0f4166; BYTE $0x36   // movdqa    [r14], xmm6
	LONG $0xd0680f66               // punpckhbw    xmm2, xmm0
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xd9fd0f66               // paddw    xmm3, xmm1
	LONG $0xdafd0f66               // paddw    xmm3, xmm2
	LONG $0x7f0f4166; WORD $0x105e // movdqa    [r14 + 16], xmm3
	LONG $0x11fc8349               // cmp    r12, 17
	JB   LBB0_11
	WORD $0xc031                   // xor    eax, eax

LBB0_10:
	LONG $0x4c6f0ff3; WORD $0x0e06             // movdqu    xmm1, [rsi + rax + 14]
	LONG $0x546f0f66; WORD $0x1006             // movdqa    xmm2, [rsi + rax + 16]
	LONG $0x5c6f0ff3; WORD $0x1206             // movdqu    xmm3, [rsi + rax + 18]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe8600f66                           // punpcklbw    xmm5, xmm0
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xecfd0f66                           // paddw    xmm5, xmm4
	LONG $0xeefd0f66                           // paddw    xmm5, xmm6
	LONG $0x7f0f4166; WORD $0x466c; BYTE $0x20 // movdqa    [r14 + 2*rax + 32], xmm5
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xd8680f66                           // punpckhbw    xmm3, xmm0
	LONG $0xd1fd0f66                           // paddw    xmm2, xmm1
	LONG $0xd3fd0f66                           // paddw    xmm2, xmm3
	LONG $0x7f0f4166; WORD $0x4654; BYTE $0x30 // movdqa    [r14 + 2*rax + 48], xmm2
	LONG $0x10488d48                           // lea    rcx, [rax + 16]
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	JB   LBB0_10

LBB0_11:
	LONG $0x4c6f0ff3; WORD $0xee56             // movdqu    xmm1, [rsi + 2*rdx - 18]
	LONG $0x546f0f66; WORD $0xf056             // movdqa    xmm2, [rsi + 2*rdx - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdb730f66; BYTE $0x02               // psrldq    xmm3, 2
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0xe2db0f66                           // pand    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe8600f66                           // punpcklbw    xmm5, xmm0
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xeefd0f66                           // paddw    xmm5, xmm6
	LONG $0x7f0f4366; WORD $0x7e6c; BYTE $0xe0 // movdqa    [r14 + 2*r15 - 32], xmm5
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xe0680f66                           // punpckhbw    xmm4, xmm0
	LONG $0xd1fd0f66                           // paddw    xmm2, xmm1
	LONG $0xd4fd0f66                           // paddw    xmm2, xmm4
	LONG $0x7f0f4366; WORD $0x7e54; BYTE $0xf0 // movdqa    [r14 + 2*r15 - 16], xmm2
	LONG $0x02e2c148                           // shl    rdx, 2
	WORD $0x8948; BYTE $0xdf                   // mov    rdi, rbx
	WORD $0x894c; BYTE $0xf6                   // mov    rsi, r14
	CALL clib·_memcpy(SB)
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	WORD $0x894c; BYTE $0xf6                   // mov    rsi, r14
	JE   LBB0_119
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x43048d48                           // lea    rax, [rbx + 2*rax]
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0xfe518d48                           // lea    rdx, [rcx - 2]
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0xff518d48                           // lea    rdx, [rcx - 1]
	LONG $0x24548948; BYTE $0x30               // mov    qword [rsp + 48], rdx
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x12528d48                           // lea    rdx, [rdx + 18]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x24548b48; BYTE $0x18               // mov    rdx, qword [rsp + 24]
	WORD $0xf748; BYTE $0xda                   // neg    rdx
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	LONG $0x0001b841; WORD $0x0000             // mov    r8d, 1
	WORD $0x2949; BYTE $0xc8                   // sub    r8, rcx
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff // mov    r11, -1
	WORD $0x3145; BYTE $0xc9                   // xor    r9d, r9d
	LONG $0x00ffffb9; BYTE $0x00               // mov    ecx, 65535
	LONG $0x6e0f4466; BYTE $0xc9               // movd    xmm9, ecx
	LONG $0xc9ef0f66                           // pxor    xmm1, xmm1
	LONG $0x6f0f4466; WORD $0x3045             // movdqa    xmm8, 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0x6f0f4466; WORD $0x1055             // movdqa    xmm10, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0x656f0f66; BYTE $0x20               // movdqa    xmm4, 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0x247c8b48; BYTE $0x10               // mov    rdi, qword [rsp + 16]

LBB0_13:
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	WORD $0x394d; BYTE $0xc3       // cmp    r11, r8
	WORD $0x894c; BYTE $0xc6       // mov    rsi, r8
	LONG $0xf3470f49               // cmova    rsi, r11
	LONG $0x244c3b4c; BYTE $0x08   // cmp    r9, qword [rsp + 8]
	LONG $0x01498d4d               // lea    r9, [r9 + 1]
	LONG $0x244c8b48; BYTE $0x30   // mov    rcx, qword [rsp + 48]
	LONG $0xc9420f49               // cmovb    rcx, r9
	LONG $0x4caf0f48; WORD $0x1824 // imul    rcx, qword [rsp + 24]
	LONG $0x0f348d4c               // lea    r14, [rdi + rcx]
	LONG $0x2c6f0f66; BYTE $0x0f   // movdqa    xmm5, [rdi + rcx]
	LONG $0xf56f0f66               // movdqa    xmm6, xmm5
	LONG $0xfe730f66; BYTE $0x02   // pslldq    xmm6, 2
	LONG $0xfd6f0f66               // movdqa    xmm7, xmm5
	LONG $0xdb0f4166; BYTE $0xf9   // pand    xmm7, xmm9
	LONG $0xfeeb0f66               // por    xmm7, xmm6
	LONG $0x5c6f0ff3; WORD $0x020f // movdqu    xmm3, [rdi + rcx + 2]
	LONG $0xd76f0f66               // movdqa    xmm2, xmm7
	LONG $0xd1600f66               // punpcklbw    xmm2, xmm1
	LONG $0xc56f0f66               // movdqa    xmm0, xmm5
	LONG $0xc1600f66               // punpcklbw    xmm0, xmm1
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf1600f66               // punpcklbw    xmm6, xmm1
	LONG $0xf0fd0f66               // paddw    xmm6, xmm0
	LONG $0xf2fd0f66               // paddw    xmm6, xmm2
	LONG $0x307f0f66               // movdqa    [rax], xmm6
	LONG $0xf9680f66               // punpckhbw    xmm7, xmm1
	LONG $0xe9680f66               // punpckhbw    xmm5, xmm1
	LONG $0xd9680f66               // punpckhbw    xmm3, xmm1
	LONG $0xddfd0f66               // paddw    xmm3, xmm5
	LONG $0xdffd0f66               // paddw    xmm3, xmm7
	LONG $0x587f0f66; BYTE $0x10   // movdqa    [rax + 16], xmm3
	LONG $0x11fc8349               // cmp    r12, 17
	JB   LBB0_16
	LONG $0x74af0f48; WORD $0x2024 // imul    rsi, qword [rsp + 32]
	LONG $0x24740348; BYTE $0x28   // add    rsi, qword [rsp + 40]
	WORD $0xc931                   // xor    ecx, ecx

LBB0_15:
	LONG $0x446f0ff3; WORD $0xfc0e // movdqu    xmm0, [rsi + rcx - 4]
	LONG $0x546f0f66; WORD $0xfe0e // movdqa    xmm2, [rsi + rcx - 2]
	LONG $0x1c6f0ff3; BYTE $0x0e   // movdqu    xmm3, [rsi + rcx]
	LONG $0xe86f0f66               // movdqa    xmm5, xmm0
	LONG $0xe9600f66               // punpcklbw    xmm5, xmm1
	LONG $0xf26f0f66               // movdqa    xmm6, xmm2
	LONG $0xf1600f66               // punpcklbw    xmm6, xmm1
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xf9600f66               // punpcklbw    xmm7, xmm1
	LONG $0xf5fd0f66               // paddw    xmm6, xmm5
	LONG $0xf7fd0f66               // paddw    xmm6, xmm7
	LONG $0x747f0f66; WORD $0x2048 // movdqa    [rax + 2*rcx + 32], xmm6
	LONG $0xc1680f66               // punpckhbw    xmm0, xmm1
	LONG $0xd1680f66               // punpckhbw    xmm2, xmm1
	LONG $0xd9680f66               // punpckhbw    xmm3, xmm1
	LONG $0xd0fd0f66               // paddw    xmm2, xmm0
	LONG $0xd3fd0f66               // paddw    xmm2, xmm3
	LONG $0x547f0f66; WORD $0x3048 // movdqa    [rax + 2*rcx + 48], xmm2
	LONG $0x10518d4c               // lea    r10, [rcx + 16]
	LONG $0x20c18348               // add    rcx, 32
	WORD $0x394c; BYTE $0xe1       // cmp    rcx, r12
	WORD $0x894c; BYTE $0xd1       // mov    rcx, r10
	JB   LBB0_15

LBB0_16:
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	LONG $0x6f0f43f3; WORD $0x3e44; BYTE $0xee // movdqu    xmm0, [r14 + r15 - 18]
	LONG $0x6f0f4366; WORD $0x3e6c; BYTE $0xf0 // movdqa    xmm5, [r14 + r15 - 16]
	LONG $0xd56f0f66                           // movdqa    xmm2, xmm5
	LONG $0xda730f66; BYTE $0x02               // psrldq    xmm2, 2
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdaeb0f66                           // por    xmm3, xmm2
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd1600f66                           // punpcklbw    xmm2, xmm1
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf1600f66                           // punpcklbw    xmm6, xmm1
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xf9600f66                           // punpcklbw    xmm7, xmm1
	LONG $0xf2fd0f66                           // paddw    xmm6, xmm2
	LONG $0xf7fd0f66                           // paddw    xmm6, xmm7
	LONG $0x7f0f4266; WORD $0x7874; BYTE $0xe0 // movdqa    [rax + 2*r15 - 32], xmm6
	LONG $0xc1680f66                           // punpckhbw    xmm0, xmm1
	LONG $0xe9680f66                           // punpckhbw    xmm5, xmm1
	LONG $0xd9680f66                           // punpckhbw    xmm3, xmm1
	LONG $0xe8fd0f66                           // paddw    xmm5, xmm0
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0x7f0f4266; WORD $0x786c; BYTE $0xf0 // movdqa    [rax + 2*r15 - 16], xmm5
	JE   LBB0_20
	WORD $0xc931                               // xor    ecx, ecx

LBB0_18:
	LONG $0x046f0f66; BYTE $0x4a               // movdqa    xmm0, [rdx + 2*rcx]
	LONG $0x04fd0f66; BYTE $0x4b               // paddw    xmm0, [rbx + 2*rcx]
	LONG $0x04fd0f66; BYTE $0x48               // paddw    xmm0, [rax + 2*rcx]
	LONG $0xfd0f4166; BYTE $0xc2               // paddw    xmm0, xmm10
	LONG $0xc4e40f66                           // pmulhuw    xmm0, xmm4
	LONG $0x546f0f66; WORD $0x104a             // movdqa    xmm2, [rdx + 2*rcx + 16]
	LONG $0x54fd0f66; WORD $0x104b             // paddw    xmm2, [rbx + 2*rcx + 16]
	LONG $0x54fd0f66; WORD $0x1048             // paddw    xmm2, [rax + 2*rcx + 16]
	LONG $0xfd0f4166; BYTE $0xd2               // paddw    xmm2, xmm10
	LONG $0xd4e40f66                           // pmulhuw    xmm2, xmm4
	LONG $0xc2670f66                           // packuswb    xmm0, xmm2
	LONG $0x7f0f4166; WORD $0x0d44; BYTE $0x00 // movdqa    [r13 + rcx], xmm0
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394c; BYTE $0xe1                   // cmp    rcx, r12
	JB   LBB0_18
	LONG $0x6f0f4266; WORD $0x7874; BYTE $0xe0 // movdqa    xmm6, [rax + 2*r15 - 32]
	LONG $0x6f0f4266; WORD $0x786c; BYTE $0xf0 // movdqa    xmm5, [rax + 2*r15 - 16]

LBB0_20:
	LONG $0xfd0f4266; WORD $0x7a74; BYTE $0xe0 // paddw    xmm6, [rdx + 2*r15 - 32]
	LONG $0xfd0f4266; WORD $0x7b74; BYTE $0xe0 // paddw    xmm6, [rbx + 2*r15 - 32]
	LONG $0xfd0f4166; BYTE $0xf2               // paddw    xmm6, xmm10
	LONG $0xf4e40f66                           // pmulhuw    xmm6, xmm4
	LONG $0xfd0f4266; WORD $0x7a6c; BYTE $0xf0 // paddw    xmm5, [rdx + 2*r15 - 16]
	LONG $0xfd0f4266; WORD $0x7b6c; BYTE $0xf0 // paddw    xmm5, [rbx + 2*r15 - 16]
	LONG $0xfd0f4166; BYTE $0xea               // paddw    xmm5, xmm10
	LONG $0xece40f66                           // pmulhuw    xmm5, xmm4
	LONG $0xf5670f66                           // packuswb    xmm6, xmm5
	LONG $0x7f0f4366; WORD $0x3d74; BYTE $0xf0 // movdqa    [r13 + r15 - 16], xmm6
	LONG $0x246c034c; BYTE $0xd0               // add    r13, qword -48[rsp] /* [rbp + 16] */
	WORD $0xff49; BYTE $0xcb                   // dec    r11
	LONG $0x240c3b4c                           // cmp    r9, qword [rsp]
	WORD $0x8948; BYTE $0xde                   // mov    rsi, rbx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JNE  LBB0_13
	JMP  LBB0_119

LBB0_62:
	LONG $0x02f88349               // cmp    r8, 2
	JG   LBB0_78
	LONG $0x01f88349               // cmp    r8, 1
	LONG $0x24748b48; BYTE $0xd8   // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	JE   LBB0_93
	LONG $0x02f88349               // cmp    r8, 2
	JNE  LBB0_119
	LONG $0x123c8d4c               // lea    r15, [rdx + rdx]
	LONG $0x12448d48; BYTE $0x0f   // lea    rax, [rdx + rdx + 15]
	LONG $0xf0e08348               // and    rax, -16
	LONG $0xf0608d4c               // lea    r12, [rax - 16]
	LONG $0x24448948; BYTE $0x08   // mov    qword [rsp + 8], rax
	LONG $0x461c8d48               // lea    rbx, [rsi + 2*rax]
	WORD $0x8949; BYTE $0xf6       // mov    r14, rsi
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x0e6f0ff3               // movdqu    xmm1, [rsi]
	LONG $0x566f0ff3; BYTE $0x02   // movdqu    xmm2, [rsi + 2]
	LONG $0xc16f0f66               // movdqa    xmm0, xmm1
	LONG $0xf8730f66; BYTE $0x02   // pslldq    xmm0, 2
	LONG $0x00ffffb8; BYTE $0x00   // mov    eax, 65535
	LONG $0xd86e0f66               // movd    xmm3, eax
	LONG $0xd9db0f66               // pand    xmm3, xmm1
	LONG $0xd8eb0f66               // por    xmm3, xmm0
	LONG $0xc0ef0f66               // pxor    xmm0, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xe96f0f66               // movdqa    xmm5, xmm1
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xf26f0f66               // movdqa    xmm6, xmm2
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xf5fd0f66               // paddw    xmm6, xmm5
	LONG $0xf4fd0f66               // paddw    xmm6, xmm4
	LONG $0x7f0f4166; BYTE $0x36   // movdqa    [r14], xmm6
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66               // punpckhbw    xmm2, xmm0
	LONG $0xd1fd0f66               // paddw    xmm2, xmm1
	LONG $0xd3fd0f66               // paddw    xmm2, xmm3
	LONG $0x7f0f4166; WORD $0x1056 // movdqa    [r14 + 16], xmm2
	LONG $0x11fc8349               // cmp    r12, 17
	JB   LBB0_68
	WORD $0xc031                   // xor    eax, eax

LBB0_67:
	LONG $0x4c6f0ff3; WORD $0x0e06             // movdqu    xmm1, [rsi + rax + 14]
	LONG $0x546f0ff3; WORD $0x1006             // movdqu    xmm2, [rsi + rax + 16]
	LONG $0x5c6f0ff3; WORD $0x1206             // movdqu    xmm3, [rsi + rax + 18]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe8600f66                           // punpcklbw    xmm5, xmm0
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xecfd0f66                           // paddw    xmm5, xmm4
	LONG $0xeefd0f66                           // paddw    xmm5, xmm6
	LONG $0x7f0f4166; WORD $0x466c; BYTE $0x20 // movdqa    [r14 + 2*rax + 32], xmm5
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xd8680f66                           // punpckhbw    xmm3, xmm0
	LONG $0xd1fd0f66                           // paddw    xmm2, xmm1
	LONG $0xd3fd0f66                           // paddw    xmm2, xmm3
	LONG $0x7f0f4166; WORD $0x4654; BYTE $0x30 // movdqa    [r14 + 2*rax + 48], xmm2
	LONG $0x10488d48                           // lea    rcx, [rax + 16]
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	JB   LBB0_67

LBB0_68:
	LONG $0x4c6f0ff3; WORD $0xee56             // movdqu    xmm1, [rsi + 2*rdx - 18]
	LONG $0x546f0ff3; WORD $0xf056             // movdqu    xmm2, [rsi + 2*rdx - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdb730f66; BYTE $0x02               // psrldq    xmm3, 2
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0xe2db0f66                           // pand    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe8600f66                           // punpcklbw    xmm5, xmm0
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xeefd0f66                           // paddw    xmm5, xmm6
	LONG $0x7f0f43f3; WORD $0x7e6c; BYTE $0xe0 // movdqu    [r14 + 2*r15 - 32], xmm5
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xe0680f66                           // punpckhbw    xmm4, xmm0
	LONG $0xd1fd0f66                           // paddw    xmm2, xmm1
	LONG $0xd4fd0f66                           // paddw    xmm2, xmm4
	LONG $0x7f0f43f3; WORD $0x7e54; BYTE $0xf0 // movdqu    [r14 + 2*r15 - 16], xmm2
	LONG $0x02e2c148                           // shl    rdx, 2
	WORD $0x8948; BYTE $0xdf                   // mov    rdi, rbx
	WORD $0x894c; BYTE $0xf6                   // mov    rsi, r14
	CALL clib·_memcpy(SB)
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	WORD $0x894c; BYTE $0xf6                   // mov    rsi, r14
	JE   LBB0_119
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x43048d48                           // lea    rax, [rbx + 2*rax]
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0xfe518d48                           // lea    rdx, [rcx - 2]
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0xff518d48                           // lea    rdx, [rcx - 1]
	LONG $0x24548948; BYTE $0x30               // mov    qword [rsp + 48], rdx
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x12528d48                           // lea    rdx, [rdx + 18]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x24548b48; BYTE $0x18               // mov    rdx, qword [rsp + 24]
	WORD $0xf748; BYTE $0xda                   // neg    rdx
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	LONG $0x0001b841; WORD $0x0000             // mov    r8d, 1
	WORD $0x2949; BYTE $0xc8                   // sub    r8, rcx
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff // mov    r11, -1
	WORD $0x3145; BYTE $0xc9                   // xor    r9d, r9d
	LONG $0x00ffffb9; BYTE $0x00               // mov    ecx, 65535
	LONG $0x6e0f4466; BYTE $0xc9               // movd    xmm9, ecx
	LONG $0xc9ef0f66                           // pxor    xmm1, xmm1
	LONG $0x6f0f4466; WORD $0x3045             // movdqa    xmm8, 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0x6f0f4466; WORD $0x1055             // movdqa    xmm10, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0x656f0f66; BYTE $0x20               // movdqa    xmm4, 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0x247c8b48; BYTE $0x10               // mov    rdi, qword [rsp + 16]

LBB0_70:
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	WORD $0x394d; BYTE $0xc3       // cmp    r11, r8
	WORD $0x894c; BYTE $0xc6       // mov    rsi, r8
	LONG $0xf3470f49               // cmova    rsi, r11
	LONG $0x244c3b4c; BYTE $0x08   // cmp    r9, qword [rsp + 8]
	LONG $0x01498d4d               // lea    r9, [r9 + 1]
	LONG $0x244c8b48; BYTE $0x30   // mov    rcx, qword [rsp + 48]
	LONG $0xc9420f49               // cmovb    rcx, r9
	LONG $0x4caf0f48; WORD $0x1824 // imul    rcx, qword [rsp + 24]
	LONG $0x0f348d4c               // lea    r14, [rdi + rcx]
	LONG $0x3c6f0ff3; BYTE $0x0f   // movdqu    xmm7, [rdi + rcx]
	LONG $0x5c6f0ff3; WORD $0x020f // movdqu    xmm3, [rdi + rcx + 2]
	LONG $0xd76f0f66               // movdqa    xmm2, xmm7
	LONG $0xfa730f66; BYTE $0x02   // pslldq    xmm2, 2
	LONG $0xef6f0f66               // movdqa    xmm5, xmm7
	LONG $0xdb0f4166; BYTE $0xe9   // pand    xmm5, xmm9
	LONG $0xeaeb0f66               // por    xmm5, xmm2
	LONG $0xd56f0f66               // movdqa    xmm2, xmm5
	LONG $0xd1600f66               // punpcklbw    xmm2, xmm1
	LONG $0xc76f0f66               // movdqa    xmm0, xmm7
	LONG $0xc1600f66               // punpcklbw    xmm0, xmm1
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf1600f66               // punpcklbw    xmm6, xmm1
	LONG $0xf0fd0f66               // paddw    xmm6, xmm0
	LONG $0xf2fd0f66               // paddw    xmm6, xmm2
	LONG $0x307f0f66               // movdqa    [rax], xmm6
	LONG $0xe9680f66               // punpckhbw    xmm5, xmm1
	LONG $0xf9680f66               // punpckhbw    xmm7, xmm1
	LONG $0xd9680f66               // punpckhbw    xmm3, xmm1
	LONG $0xdffd0f66               // paddw    xmm3, xmm7
	LONG $0xddfd0f66               // paddw    xmm3, xmm5
	LONG $0x587f0f66; BYTE $0x10   // movdqa    [rax + 16], xmm3
	LONG $0x11fc8349               // cmp    r12, 17
	JB   LBB0_73
	LONG $0x74af0f48; WORD $0x2024 // imul    rsi, qword [rsp + 32]
	LONG $0x24740348; BYTE $0x28   // add    rsi, qword [rsp + 40]
	WORD $0xc931                   // xor    ecx, ecx

LBB0_72:
	LONG $0x446f0ff3; WORD $0xfc0e // movdqu    xmm0, [rsi + rcx - 4]
	LONG $0x546f0ff3; WORD $0xfe0e // movdqu    xmm2, [rsi + rcx - 2]
	LONG $0x1c6f0ff3; BYTE $0x0e   // movdqu    xmm3, [rsi + rcx]
	LONG $0xe86f0f66               // movdqa    xmm5, xmm0
	LONG $0xe9600f66               // punpcklbw    xmm5, xmm1
	LONG $0xf26f0f66               // movdqa    xmm6, xmm2
	LONG $0xf1600f66               // punpcklbw    xmm6, xmm1
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xf9600f66               // punpcklbw    xmm7, xmm1
	LONG $0xf5fd0f66               // paddw    xmm6, xmm5
	LONG $0xf7fd0f66               // paddw    xmm6, xmm7
	LONG $0x747f0f66; WORD $0x2048 // movdqa    [rax + 2*rcx + 32], xmm6
	LONG $0xc1680f66               // punpckhbw    xmm0, xmm1
	LONG $0xd1680f66               // punpckhbw    xmm2, xmm1
	LONG $0xd9680f66               // punpckhbw    xmm3, xmm1
	LONG $0xd0fd0f66               // paddw    xmm2, xmm0
	LONG $0xd3fd0f66               // paddw    xmm2, xmm3
	LONG $0x547f0f66; WORD $0x3048 // movdqa    [rax + 2*rcx + 48], xmm2
	LONG $0x10518d4c               // lea    r10, [rcx + 16]
	LONG $0x20c18348               // add    rcx, 32
	WORD $0x394c; BYTE $0xe1       // cmp    rcx, r12
	WORD $0x894c; BYTE $0xd1       // mov    rcx, r10
	JB   LBB0_72

LBB0_73:
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	LONG $0x6f0f43f3; WORD $0x3e44; BYTE $0xee // movdqu    xmm0, [r14 + r15 - 18]
	LONG $0x6f0f43f3; WORD $0x3e6c; BYTE $0xf0 // movdqu    xmm5, [r14 + r15 - 16]
	LONG $0xd56f0f66                           // movdqa    xmm2, xmm5
	LONG $0xda730f66; BYTE $0x02               // psrldq    xmm2, 2
	LONG $0xdd6f0f66                           // movdqa    xmm3, xmm5
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xdaeb0f66                           // por    xmm3, xmm2
	LONG $0xd06f0f66                           // movdqa    xmm2, xmm0
	LONG $0xd1600f66                           // punpcklbw    xmm2, xmm1
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf1600f66                           // punpcklbw    xmm6, xmm1
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xf9600f66                           // punpcklbw    xmm7, xmm1
	LONG $0xf2fd0f66                           // paddw    xmm6, xmm2
	LONG $0xf7fd0f66                           // paddw    xmm6, xmm7
	LONG $0x7f0f42f3; WORD $0x7874; BYTE $0xe0 // movdqu    [rax + 2*r15 - 32], xmm6
	LONG $0xc1680f66                           // punpckhbw    xmm0, xmm1
	LONG $0xe9680f66                           // punpckhbw    xmm5, xmm1
	LONG $0xd9680f66                           // punpckhbw    xmm3, xmm1
	LONG $0xe8fd0f66                           // paddw    xmm5, xmm0
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0x7f0f42f3; WORD $0x786c; BYTE $0xf0 // movdqu    [rax + 2*r15 - 16], xmm5
	JE   LBB0_77
	WORD $0xc931                               // xor    ecx, ecx

LBB0_75:
	LONG $0x046f0f66; BYTE $0x4a               // movdqa    xmm0, [rdx + 2*rcx]
	LONG $0x04fd0f66; BYTE $0x4b               // paddw    xmm0, [rbx + 2*rcx]
	LONG $0x04fd0f66; BYTE $0x48               // paddw    xmm0, [rax + 2*rcx]
	LONG $0xfd0f4166; BYTE $0xc2               // paddw    xmm0, xmm10
	LONG $0xc4e40f66                           // pmulhuw    xmm0, xmm4
	LONG $0x546f0f66; WORD $0x104a             // movdqa    xmm2, [rdx + 2*rcx + 16]
	LONG $0x54fd0f66; WORD $0x104b             // paddw    xmm2, [rbx + 2*rcx + 16]
	LONG $0x54fd0f66; WORD $0x1048             // paddw    xmm2, [rax + 2*rcx + 16]
	LONG $0xfd0f4166; BYTE $0xd2               // paddw    xmm2, xmm10
	LONG $0xd4e40f66                           // pmulhuw    xmm2, xmm4
	LONG $0xc2670f66                           // packuswb    xmm0, xmm2
	LONG $0x7f0f41f3; WORD $0x0d44; BYTE $0x00 // movdqu    [r13 + rcx], xmm0
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394c; BYTE $0xe1                   // cmp    rcx, r12
	JB   LBB0_75
	LONG $0x6f0f42f3; WORD $0x7874; BYTE $0xe0 // movdqu    xmm6, [rax + 2*r15 - 32]
	LONG $0x6f0f42f3; WORD $0x786c; BYTE $0xf0 // movdqu    xmm5, [rax + 2*r15 - 16]

LBB0_77:
	LONG $0x6f0f42f3; WORD $0x7a44; BYTE $0xe0 // movdqu    xmm0, [rdx + 2*r15 - 32]
	LONG $0x6f0f42f3; WORD $0x7b54; BYTE $0xe0 // movdqu    xmm2, [rbx + 2*r15 - 32]
	LONG $0xc6fd0f66                           // paddw    xmm0, xmm6
	LONG $0xfd0f4166; BYTE $0xd2               // paddw    xmm2, xmm10
	LONG $0xd0fd0f66                           // paddw    xmm2, xmm0
	LONG $0xd4e40f66                           // pmulhuw    xmm2, xmm4
	LONG $0x6f0f42f3; WORD $0x7a44; BYTE $0xf0 // movdqu    xmm0, [rdx + 2*r15 - 16]
	LONG $0x6f0f42f3; WORD $0x7b5c; BYTE $0xf0 // movdqu    xmm3, [rbx + 2*r15 - 16]
	LONG $0xc5fd0f66                           // paddw    xmm0, xmm5
	LONG $0xfd0f4166; BYTE $0xda               // paddw    xmm3, xmm10
	LONG $0xd8fd0f66                           // paddw    xmm3, xmm0
	LONG $0xdce40f66                           // pmulhuw    xmm3, xmm4
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0x7f0f43f3; WORD $0x3d54; BYTE $0xf0 // movdqu    [r13 + r15 - 16], xmm2
	LONG $0x246c034c; BYTE $0xd0               // add    r13, qword -48[rsp] /* [rbp + 16] */
	WORD $0xff49; BYTE $0xcb                   // dec    r11
	LONG $0x240c3b4c                           // cmp    r9, qword [rsp]
	WORD $0x8948; BYTE $0xde                   // mov    rsi, rbx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JNE  LBB0_70
	JMP  LBB0_119

LBB0_78:
	LONG $0x03f88349                   // cmp    r8, 3
	LONG $0x24748b48; BYTE $0xd8       // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	JE   LBB0_106
	LONG $0x04f88349                   // cmp    r8, 4
	JNE  LBB0_119
	LONG $0x953c8d4c; LONG $0x00000000 // lea    r15, [4*rdx]
	LONG $0x95048d48; LONG $0x0000000f // lea    rax, [4*rdx + 15]
	LONG $0xf0e08348                   // and    rax, -16
	LONG $0xf0608d4c                   // lea    r12, [rax - 16]
	LONG $0x24448948; BYTE $0x08       // mov    qword [rsp + 8], rax
	LONG $0x461c8d48                   // lea    rbx, [rsi + 2*rax]
	WORD $0x8949; BYTE $0xf6           // mov    r14, rsi
	LONG $0x24748b48; BYTE $0x10       // mov    rsi, qword [rsp + 16]
	LONG $0x0e6f0ff3                   // movdqu    xmm1, [rsi]
	LONG $0x566f0ff3; BYTE $0x04       // movdqu    xmm2, [rsi + 4]
	LONG $0xd96f0f66                   // movdqa    xmm3, xmm1
	LONG $0xfb730f66; BYTE $0x04       // pslldq    xmm3, 4
	LONG $0xc0ef0f66                   // pxor    xmm0, xmm0
	WORD $0x570f; BYTE $0xe4           // xorps    xmm4, xmm4
	LONG $0xe1100ff3                   // movss    xmm4, xmm1
	WORD $0x560f; BYTE $0xe3           // orps    xmm4, xmm3
	WORD $0x280f; BYTE $0xdc           // movaps    xmm3, xmm4
	LONG $0xd8600f66                   // punpcklbw    xmm3, xmm0
	LONG $0xe96f0f66                   // movdqa    xmm5, xmm1
	LONG $0xe8600f66                   // punpcklbw    xmm5, xmm0
	LONG $0xf26f0f66                   // movdqa    xmm6, xmm2
	LONG $0xf0600f66                   // punpcklbw    xmm6, xmm0
	LONG $0xf5fd0f66                   // paddw    xmm6, xmm5
	LONG $0xf3fd0f66                   // paddw    xmm6, xmm3
	LONG $0x7f0f4166; BYTE $0x36       // movdqa    [r14], xmm6
	LONG $0xe0680f66                   // punpckhbw    xmm4, xmm0
	LONG $0xc8680f66                   // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66                   // punpckhbw    xmm2, xmm0
	LONG $0xd1fd0f66                   // paddw    xmm2, xmm1
	LONG $0xd4fd0f66                   // paddw    xmm2, xmm4
	LONG $0x7f0f4166; WORD $0x1056     // movdqa    [r14 + 16], xmm2
	LONG $0x11fc8349                   // cmp    r12, 17
	JB   LBB0_83
	WORD $0xc031                       // xor    eax, eax

LBB0_82:
	LONG $0x4c6f0ff3; WORD $0x0c06             // movdqu    xmm1, [rsi + rax + 12]
	LONG $0x546f0ff3; WORD $0x1006             // movdqu    xmm2, [rsi + rax + 16]
	LONG $0x5c6f0ff3; WORD $0x1406             // movdqu    xmm3, [rsi + rax + 20]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe8600f66                           // punpcklbw    xmm5, xmm0
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xecfd0f66                           // paddw    xmm5, xmm4
	LONG $0xeefd0f66                           // paddw    xmm5, xmm6
	LONG $0x7f0f4166; WORD $0x466c; BYTE $0x20 // movdqa    [r14 + 2*rax + 32], xmm5
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xd8680f66                           // punpckhbw    xmm3, xmm0
	LONG $0xd1fd0f66                           // paddw    xmm2, xmm1
	LONG $0xd3fd0f66                           // paddw    xmm2, xmm3
	LONG $0x7f0f4166; WORD $0x4654; BYTE $0x30 // movdqa    [r14 + 2*rax + 48], xmm2
	LONG $0x10488d48                           // lea    rcx, [rax + 16]
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	JB   LBB0_82

LBB0_83:
	LONG $0x4c6f0ff3; WORD $0xec96             // movdqu    xmm1, [rsi + 4*rdx - 20]
	LONG $0x546f0ff3; WORD $0xf096             // movdqu    xmm2, [rsi + 4*rdx - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdb730f66; BYTE $0x04               // psrldq    xmm3, 4
	LONG $0x656f0f66; BYTE $0x00               // movdqa    xmm4, 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xe2db0f66                           // pand    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe8600f66                           // punpcklbw    xmm5, xmm0
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xeefd0f66                           // paddw    xmm5, xmm6
	LONG $0x7f0f43f3; WORD $0x7e6c; BYTE $0xe0 // movdqu    [r14 + 2*r15 - 32], xmm5
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xe0680f66                           // punpckhbw    xmm4, xmm0
	LONG $0xd1fd0f66                           // paddw    xmm2, xmm1
	LONG $0xd4fd0f66                           // paddw    xmm2, xmm4
	LONG $0x7f0f43f3; WORD $0x7e54; BYTE $0xf0 // movdqu    [r14 + 2*r15 - 16], xmm2
	LONG $0x03e2c148                           // shl    rdx, 3
	WORD $0x8948; BYTE $0xdf                   // mov    rdi, rbx
	WORD $0x894c; BYTE $0xf6                   // mov    rsi, r14
	CALL clib·_memcpy(SB)
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	WORD $0x894c; BYTE $0xf6                   // mov    rsi, r14
	JE   LBB0_119
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x43048d48                           // lea    rax, [rbx + 2*rax]
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0xfe518d48                           // lea    rdx, [rcx - 2]
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0xff518d48                           // lea    rdx, [rcx - 1]
	LONG $0x24548948; BYTE $0x30               // mov    qword [rsp + 48], rdx
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x14528d48                           // lea    rdx, [rdx + 20]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x24548b48; BYTE $0x18               // mov    rdx, qword [rsp + 24]
	WORD $0xf748; BYTE $0xda                   // neg    rdx
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	LONG $0x0001b841; WORD $0x0000             // mov    r8d, 1
	WORD $0x2949; BYTE $0xc8                   // sub    r8, rcx
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff // mov    r11, -1
	WORD $0x3145; BYTE $0xc9                   // xor    r9d, r9d
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0x6f0f4466; WORD $0x0045             // movdqa    xmm8, 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x6f0f4466; WORD $0x104d             // movdqa    xmm9, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0x5d6f0f66; BYTE $0x20               // movdqa    xmm3, 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0x247c8b48; BYTE $0x10               // mov    rdi, qword [rsp + 16]

LBB0_85:
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	WORD $0x394d; BYTE $0xc3       // cmp    r11, r8
	WORD $0x894c; BYTE $0xc6       // mov    rsi, r8
	LONG $0xf3470f49               // cmova    rsi, r11
	LONG $0x244c3b4c; BYTE $0x08   // cmp    r9, qword [rsp + 8]
	LONG $0x01498d4d               // lea    r9, [r9 + 1]
	LONG $0x244c8b48; BYTE $0x30   // mov    rcx, qword [rsp + 48]
	LONG $0xc9420f49               // cmovb    rcx, r9
	LONG $0x4caf0f48; WORD $0x1824 // imul    rcx, qword [rsp + 24]
	LONG $0x0f348d4c               // lea    r14, [rdi + rcx]
	LONG $0x246f0ff3; BYTE $0x0f   // movdqu    xmm4, [rdi + rcx]
	LONG $0x546f0ff3; WORD $0x040f // movdqu    xmm2, [rdi + rcx + 4]
	LONG $0xf46f0f66               // movdqa    xmm6, xmm4
	LONG $0xfe730f66; BYTE $0x04   // pslldq    xmm6, 4
	WORD $0x570f; BYTE $0xff       // xorps    xmm7, xmm7
	LONG $0xfc100ff3               // movss    xmm7, xmm4
	WORD $0x560f; BYTE $0xfe       // orps    xmm7, xmm6
	WORD $0x280f; BYTE $0xf7       // movaps    xmm6, xmm7
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xcc6f0f66               // movdqa    xmm1, xmm4
	LONG $0xc8600f66               // punpcklbw    xmm1, xmm0
	LONG $0xea6f0f66               // movdqa    xmm5, xmm2
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xe9fd0f66               // paddw    xmm5, xmm1
	LONG $0xeefd0f66               // paddw    xmm5, xmm6
	LONG $0x287f0f66               // movdqa    [rax], xmm5
	LONG $0xf8680f66               // punpckhbw    xmm7, xmm0
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xd0680f66               // punpckhbw    xmm2, xmm0
	LONG $0xd4fd0f66               // paddw    xmm2, xmm4
	LONG $0xd7fd0f66               // paddw    xmm2, xmm7
	LONG $0x507f0f66; BYTE $0x10   // movdqa    [rax + 16], xmm2
	LONG $0x11fc8349               // cmp    r12, 17
	JB   LBB0_88
	LONG $0x74af0f48; WORD $0x2024 // imul    rsi, qword [rsp + 32]
	LONG $0x24740348; BYTE $0x28   // add    rsi, qword [rsp + 40]
	WORD $0xc931                   // xor    ecx, ecx

LBB0_87:
	LONG $0x4c6f0ff3; WORD $0xf80e // movdqu    xmm1, [rsi + rcx - 8]
	LONG $0x546f0ff3; WORD $0xfc0e // movdqu    xmm2, [rsi + rcx - 4]
	LONG $0x246f0ff3; BYTE $0x0e   // movdqu    xmm4, [rsi + rcx]
	LONG $0xe96f0f66               // movdqa    xmm5, xmm1
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xf26f0f66               // movdqa    xmm6, xmm2
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xf5fd0f66               // paddw    xmm6, xmm5
	LONG $0xf7fd0f66               // paddw    xmm6, xmm7
	LONG $0x747f0f66; WORD $0x2048 // movdqa    [rax + 2*rcx + 32], xmm6
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66               // punpckhbw    xmm2, xmm0
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xd1fd0f66               // paddw    xmm2, xmm1
	LONG $0xd4fd0f66               // paddw    xmm2, xmm4
	LONG $0x547f0f66; WORD $0x3048 // movdqa    [rax + 2*rcx + 48], xmm2
	LONG $0x10518d4c               // lea    r10, [rcx + 16]
	LONG $0x20c18348               // add    rcx, 32
	WORD $0x394c; BYTE $0xe1       // cmp    rcx, r12
	WORD $0x894c; BYTE $0xd1       // mov    rcx, r10
	JB   LBB0_87

LBB0_88:
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	LONG $0x6f0f43f3; WORD $0x3e4c; BYTE $0xec // movdqu    xmm1, [r14 + r15 - 20]
	LONG $0x6f0f43f3; WORD $0x3e64; BYTE $0xf0 // movdqu    xmm4, [r14 + r15 - 16]
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xda730f66; BYTE $0x04               // psrldq    xmm2, 4
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xdb0f4166; BYTE $0xf0               // pand    xmm6, xmm8
	LONG $0xf2eb0f66                           // por    xmm6, xmm2
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd0600f66                           // punpcklbw    xmm2, xmm0
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xe8600f66                           // punpcklbw    xmm5, xmm0
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xf8600f66                           // punpcklbw    xmm7, xmm0
	LONG $0xeafd0f66                           // paddw    xmm5, xmm2
	LONG $0xeffd0f66                           // paddw    xmm5, xmm7
	LONG $0x7f0f42f3; WORD $0x786c; BYTE $0xe0 // movdqu    [rax + 2*r15 - 32], xmm5
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xe0680f66                           // punpckhbw    xmm4, xmm0
	LONG $0xf0680f66                           // punpckhbw    xmm6, xmm0
	LONG $0xe1fd0f66                           // paddw    xmm4, xmm1
	LONG $0xe6fd0f66                           // paddw    xmm4, xmm6
	LONG $0x7f0f42f3; WORD $0x7864; BYTE $0xf0 // movdqu    [rax + 2*r15 - 16], xmm4
	JE   LBB0_92
	WORD $0xc931                               // xor    ecx, ecx

LBB0_90:
	LONG $0x0c6f0f66; BYTE $0x4a               // movdqa    xmm1, [rdx + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x4b               // paddw    xmm1, [rbx + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x48               // paddw    xmm1, [rax + 2*rcx]
	LONG $0xfd0f4166; BYTE $0xc9               // paddw    xmm1, xmm9
	LONG $0xcbe40f66                           // pmulhuw    xmm1, xmm3
	LONG $0x546f0f66; WORD $0x104a             // movdqa    xmm2, [rdx + 2*rcx + 16]
	LONG $0x54fd0f66; WORD $0x104b             // paddw    xmm2, [rbx + 2*rcx + 16]
	LONG $0x54fd0f66; WORD $0x1048             // paddw    xmm2, [rax + 2*rcx + 16]
	LONG $0xfd0f4166; BYTE $0xd1               // paddw    xmm2, xmm9
	LONG $0xd3e40f66                           // pmulhuw    xmm2, xmm3
	LONG $0xca670f66                           // packuswb    xmm1, xmm2
	LONG $0x7f0f41f3; WORD $0x0d4c; BYTE $0x00 // movdqu    [r13 + rcx], xmm1
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394c; BYTE $0xe1                   // cmp    rcx, r12
	JB   LBB0_90
	LONG $0x6f0f42f3; WORD $0x786c; BYTE $0xe0 // movdqu    xmm5, [rax + 2*r15 - 32]
	LONG $0x6f0f42f3; WORD $0x7864; BYTE $0xf0 // movdqu    xmm4, [rax + 2*r15 - 16]

LBB0_92:
	LONG $0x6f0f42f3; WORD $0x7a4c; BYTE $0xe0 // movdqu    xmm1, [rdx + 2*r15 - 32]
	LONG $0x6f0f42f3; WORD $0x7b54; BYTE $0xe0 // movdqu    xmm2, [rbx + 2*r15 - 32]
	LONG $0xcdfd0f66                           // paddw    xmm1, xmm5
	LONG $0xfd0f4166; BYTE $0xd1               // paddw    xmm2, xmm9
	LONG $0xd1fd0f66                           // paddw    xmm2, xmm1
	LONG $0xd3e40f66                           // pmulhuw    xmm2, xmm3
	LONG $0x6f0f42f3; WORD $0x7a4c; BYTE $0xf0 // movdqu    xmm1, [rdx + 2*r15 - 16]
	LONG $0x6f0f42f3; WORD $0x7b6c; BYTE $0xf0 // movdqu    xmm5, [rbx + 2*r15 - 16]
	LONG $0xccfd0f66                           // paddw    xmm1, xmm4
	LONG $0xfd0f4166; BYTE $0xe9               // paddw    xmm5, xmm9
	LONG $0xe9fd0f66                           // paddw    xmm5, xmm1
	LONG $0xebe40f66                           // pmulhuw    xmm5, xmm3
	LONG $0xd5670f66                           // packuswb    xmm2, xmm5
	LONG $0x7f0f43f3; WORD $0x3d54; BYTE $0xf0 // movdqu    [r13 + r15 - 16], xmm2
	LONG $0x246c034c; BYTE $0xd0               // add    r13, qword -48[rsp] /* [rbp + 16] */
	WORD $0xff49; BYTE $0xcb                   // dec    r11
	LONG $0x240c3b4c                           // cmp    r9, qword [rsp]
	WORD $0x8948; BYTE $0xde                   // mov    rsi, rbx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JNE  LBB0_85
	JMP  LBB0_119

LBB0_93:
	LONG $0x0f628d4c             // lea    r12, [rdx + 15]
	LONG $0xf0e48349             // and    r12, -16
	LONG $0x247c8d4d; BYTE $0xf0 // lea    r15, [r12 - 16]
	LONG $0x661c8d4a             // lea    rbx, [rsi + 2*r12]
	LONG $0x176f0ff3             // movdqu    xmm2, [rdi]
	LONG $0x4f6f0ff3; BYTE $0x01 // movdqu    xmm1, [rdi + 1]
	LONG $0xc0ef0f66             // pxor    xmm0, xmm0
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd8600f66             // punpcklbw    xmm3, xmm0
	LONG $0xe3700f66; BYTE $0x27 // pshufd    xmm4, xmm3, 39
	LONG $0xe96f0f66             // movdqa    xmm5, xmm1
	LONG $0xe8600f66             // punpcklbw    xmm5, xmm0
	LONG $0xebfd0f66             // paddw    xmm5, xmm3
	LONG $0xdb730f66; BYTE $0x0e // psrldq    xmm3, 14
	LONG $0xd0680f66             // punpckhbw    xmm2, xmm0
	LONG $0xc8680f66             // punpckhbw    xmm1, xmm0
	LONG $0xcafd0f66             // paddw    xmm1, xmm2
	LONG $0xfa730f66; BYTE $0x02 // pslldq    xmm2, 2
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	LONG $0xdc700ff2; BYTE $0xec // pshuflw    xmm3, xmm4, 236
	LONG $0xdb700f66; BYTE $0x27 // pshufd    xmm3, xmm3, 39
	LONG $0xdb700ff2; BYTE $0x90 // pshuflw    xmm3, xmm3, 144
	LONG $0xdb700ff3; BYTE $0x93 // pshufhw    xmm3, xmm3, 147
	LONG $0xda670f66             // packuswb    xmm3, xmm2
	LONG $0xd36f0f66             // movdqa    xmm2, xmm3
	LONG $0xd0600f66             // punpcklbw    xmm2, xmm0
	LONG $0xeafd0f66             // paddw    xmm5, xmm2
	LONG $0x2e7f0f66             // movdqa    [rsi], xmm5
	LONG $0xd8680f66             // punpckhbw    xmm3, xmm0
	LONG $0xcbfd0f66             // paddw    xmm1, xmm3
	LONG $0x4e7f0f66; BYTE $0x10 // movdqa    [rsi + 16], xmm1
	LONG $0x11ff8349             // cmp    r15, 17
	JB   LBB0_96
	WORD $0xc031                 // xor    eax, eax

LBB0_95:
	LONG $0x4c6f0ff3; WORD $0x0f07 // movdqu    xmm1, [rdi + rax + 15]
	LONG $0x546f0ff3; WORD $0x1007 // movdqu    xmm2, [rdi + rax + 16]
	LONG $0x5c6f0ff3; WORD $0x1107 // movdqu    xmm3, [rdi + rax + 17]
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xea6f0f66               // movdqa    xmm5, xmm2
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xecfd0f66               // paddw    xmm5, xmm4
	LONG $0xeefd0f66               // paddw    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x2046 // movdqa    [rsi + 2*rax + 32], xmm5
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66               // punpckhbw    xmm2, xmm0
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xd1fd0f66               // paddw    xmm2, xmm1
	LONG $0xd3fd0f66               // paddw    xmm2, xmm3
	LONG $0x547f0f66; WORD $0x3046 // movdqa    [rsi + 2*rax + 48], xmm2
	LONG $0x10488d48               // lea    rcx, [rax + 16]
	LONG $0x20c08348               // add    rax, 32
	WORD $0x394c; BYTE $0xf8       // cmp    rax, r15
	WORD $0x8948; BYTE $0xc8       // mov    rax, rcx
	JB   LBB0_95

LBB0_96:
	LONG $0x4c6f0ff3; WORD $0xef17             // movdqu    xmm1, [rdi + rdx - 17]
	LONG $0x546f0ff3; WORD $0xf017             // movdqu    xmm2, [rdi + rdx - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xdb730f66; BYTE $0x02               // psrldq    xmm3, 2
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xea700f66; BYTE $0x27               // pshufd    xmm5, xmm2, 39
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xcafd0f66                           // paddw    xmm1, xmm2
	LONG $0xfa730f66; BYTE $0x0e               // pslldq    xmm2, 14
	LONG $0xd3eb0f66                           // por    xmm2, xmm3
	LONG $0xdd700ff3; BYTE $0xc4               // pshufhw    xmm3, xmm5, 196
	LONG $0xdb700f66; BYTE $0x27               // pshufd    xmm3, xmm3, 39
	LONG $0xdb700ff2; BYTE $0x39               // pshuflw    xmm3, xmm3, 57
	LONG $0xdb700ff3; BYTE $0xf9               // pshufhw    xmm3, xmm3, 249
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0x647f0ff3; WORD $0xe056             // movdqu    [rsi + 2*rdx - 32], xmm4
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xcafd0f66                           // paddw    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0xf056             // movdqu    [rsi + 2*rdx - 16], xmm1
	LONG $0x12148d48                           // lea    rdx, [rdx + rdx]
	WORD $0x8948; BYTE $0xdf                   // mov    rdi, rbx
	LONG $0x24748b48; BYTE $0xd8               // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	CALL clib·_memcpy(SB)
	LONG $0x24748b48; BYTE $0xd8               // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB0_119
	LONG $0x63048d4a                           // lea    rax, [rbx + 2*r12]
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0xfe518d48                           // lea    rdx, [rcx - 2]
	LONG $0x24548948; BYTE $0x30               // mov    qword [rsp + 48], rdx
	LONG $0xff598d4c                           // lea    r11, [rcx - 1]
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x11528d48                           // lea    rdx, [rdx + 17]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x24548b48; BYTE $0x18               // mov    rdx, qword [rsp + 24]
	WORD $0xf748; BYTE $0xda                   // neg    rdx
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	LONG $0x0001bc41; WORD $0x0000             // mov    r12d, 1
	WORD $0x2949; BYTE $0xcc                   // sub    r12, rcx
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // mov    r10, -1
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0x6f0f4466; WORD $0x1045             // movdqa    xmm8, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0x556f0f66; BYTE $0x20               // movdqa    xmm2, 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0x247c8b48; BYTE $0x10               // mov    rdi, qword [rsp + 16]

LBB0_98:
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	WORD $0x394d; BYTE $0xe2       // cmp    r10, r12
	WORD $0x894c; BYTE $0xe6       // mov    rsi, r12
	LONG $0xf2470f49               // cmova    rsi, r10
	LONG $0x24443b4c; BYTE $0x30   // cmp    r8, qword [rsp + 48]
	LONG $0x01408d4d               // lea    r8, [r8 + 1]
	WORD $0x894c; BYTE $0xd9       // mov    rcx, r11
	LONG $0xc8420f49               // cmovb    rcx, r8
	LONG $0x4caf0f48; WORD $0x1824 // imul    rcx, qword [rsp + 24]
	LONG $0x0f348d4c               // lea    r14, [rdi + rcx]
	LONG $0x246f0ff3; BYTE $0x0f   // movdqu    xmm4, [rdi + rcx]
	LONG $0x5c6f0ff3; WORD $0x010f // movdqu    xmm3, [rdi + rcx + 1]
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xf5700f66; BYTE $0x27   // pshufd    xmm6, xmm5, 39
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xfdfd0f66               // paddw    xmm7, xmm5
	LONG $0xdd730f66; BYTE $0x0e   // psrldq    xmm5, 14
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xdcfd0f66               // paddw    xmm3, xmm4
	LONG $0xfc730f66; BYTE $0x02   // pslldq    xmm4, 2
	LONG $0xe5eb0f66               // por    xmm4, xmm5
	LONG $0xee700ff2; BYTE $0xec   // pshuflw    xmm5, xmm6, 236
	LONG $0xed700f66; BYTE $0x27   // pshufd    xmm5, xmm5, 39
	LONG $0xed700ff2; BYTE $0x90   // pshuflw    xmm5, xmm5, 144
	LONG $0xed700ff3; BYTE $0x93   // pshufhw    xmm5, xmm5, 147
	LONG $0xec670f66               // packuswb    xmm5, xmm4
	LONG $0xe56f0f66               // movdqa    xmm4, xmm5
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xfcfd0f66               // paddw    xmm7, xmm4
	LONG $0x387f0f66               // movdqa    [rax], xmm7
	LONG $0xe8680f66               // punpckhbw    xmm5, xmm0
	LONG $0xddfd0f66               // paddw    xmm3, xmm5
	LONG $0x587f0f66; BYTE $0x10   // movdqa    [rax + 16], xmm3
	LONG $0x11ff8349               // cmp    r15, 17
	JB   LBB0_101
	LONG $0x74af0f48; WORD $0x2024 // imul    rsi, qword [rsp + 32]
	LONG $0x24740348; BYTE $0x28   // add    rsi, qword [rsp + 40]
	WORD $0xc931                   // xor    ecx, ecx

LBB0_100:
	LONG $0x5c6f0ff3; WORD $0xfe0e // movdqu    xmm3, [rsi + rcx - 2]
	LONG $0x646f0ff3; WORD $0xff0e // movdqu    xmm4, [rsi + rcx - 1]
	LONG $0x0c6f0ff3; BYTE $0x0e   // movdqu    xmm1, [rsi + rcx]
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xe96f0f66               // movdqa    xmm5, xmm1
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xfefd0f66               // paddw    xmm7, xmm6
	LONG $0xfdfd0f66               // paddw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2048 // movdqa    [rax + 2*rcx + 32], xmm7
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xe1fd0f66               // paddw    xmm4, xmm1
	LONG $0x647f0f66; WORD $0x3048 // movdqa    [rax + 2*rcx + 48], xmm4
	LONG $0x10498d4c               // lea    r9, [rcx + 16]
	LONG $0x20c18348               // add    rcx, 32
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	WORD $0x894c; BYTE $0xc9       // mov    rcx, r9
	JB   LBB0_100

LBB0_101:
	WORD $0x854d; BYTE $0xff                   // test    r15, r15
	LONG $0x24748b48; BYTE $0x08               // mov    rsi, qword [rsp + 8]
	LONG $0x6f0f41f3; WORD $0x365c; BYTE $0xef // movdqu    xmm3, [r14 + rsi - 17]
	LONG $0x6f0f41f3; WORD $0x366c; BYTE $0xf0 // movdqu    xmm5, [r14 + rsi - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xe6fd0f66                           // paddw    xmm4, xmm6
	LONG $0xde730f66; BYTE $0x02               // psrldq    xmm6, 2
	LONG $0xe8680f66                           // punpckhbw    xmm5, xmm0
	LONG $0xfd700f66; BYTE $0x27               // pshufd    xmm7, xmm5, 39
	LONG $0xd8680f66                           // punpckhbw    xmm3, xmm0
	LONG $0xddfd0f66                           // paddw    xmm3, xmm5
	LONG $0xfd730f66; BYTE $0x0e               // pslldq    xmm5, 14
	LONG $0xeeeb0f66                           // por    xmm5, xmm6
	LONG $0xf7700ff3; BYTE $0xc4               // pshufhw    xmm6, xmm7, 196
	LONG $0xf6700f66; BYTE $0x27               // pshufd    xmm6, xmm6, 39
	LONG $0xf6700ff2; BYTE $0x39               // pshuflw    xmm6, xmm6, 57
	LONG $0xf6700ff3; BYTE $0xf9               // pshufhw    xmm6, xmm6, 249
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xe6fd0f66                           // paddw    xmm4, xmm6
	LONG $0x647f0ff3; WORD $0xe070             // movdqu    [rax + 2*rsi - 32], xmm4
	LONG $0xe8680f66                           // punpckhbw    xmm5, xmm0
	LONG $0xddfd0f66                           // paddw    xmm3, xmm5
	LONG $0x5c7f0ff3; WORD $0xf070             // movdqu    [rax + 2*rsi - 16], xmm3
	JE   LBB0_105
	WORD $0xc931                               // xor    ecx, ecx

LBB0_103:
	LONG $0x0c6f0f66; BYTE $0x4a               // movdqa    xmm1, [rdx + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x4b               // paddw    xmm1, [rbx + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x48               // paddw    xmm1, [rax + 2*rcx]
	LONG $0xfd0f4166; BYTE $0xc8               // paddw    xmm1, xmm8
	LONG $0xcae40f66                           // pmulhuw    xmm1, xmm2
	LONG $0x5c6f0f66; WORD $0x104a             // movdqa    xmm3, [rdx + 2*rcx + 16]
	LONG $0x5cfd0f66; WORD $0x104b             // paddw    xmm3, [rbx + 2*rcx + 16]
	LONG $0x5cfd0f66; WORD $0x1048             // paddw    xmm3, [rax + 2*rcx + 16]
	LONG $0xfd0f4166; BYTE $0xd8               // paddw    xmm3, xmm8
	LONG $0xdae40f66                           // pmulhuw    xmm3, xmm2
	LONG $0xcb670f66                           // packuswb    xmm1, xmm3
	LONG $0x7f0f41f3; WORD $0x0d4c; BYTE $0x00 // movdqu    [r13 + rcx], xmm1
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394c; BYTE $0xf9                   // cmp    rcx, r15
	JB   LBB0_103
	LONG $0x646f0ff3; WORD $0xe070             // movdqu    xmm4, [rax + 2*rsi - 32]
	LONG $0x5c6f0ff3; WORD $0xf070             // movdqu    xmm3, [rax + 2*rsi - 16]

LBB0_105:
	LONG $0x4c6f0ff3; WORD $0xe072             // movdqu    xmm1, [rdx + 2*rsi - 32]
	LONG $0x6c6f0ff3; WORD $0xe073             // movdqu    xmm5, [rbx + 2*rsi - 32]
	LONG $0xccfd0f66                           // paddw    xmm1, xmm4
	LONG $0xfd0f4166; BYTE $0xe8               // paddw    xmm5, xmm8
	LONG $0xe9fd0f66                           // paddw    xmm5, xmm1
	LONG $0xeae40f66                           // pmulhuw    xmm5, xmm2
	LONG $0x4c6f0ff3; WORD $0xf072             // movdqu    xmm1, [rdx + 2*rsi - 16]
	LONG $0x646f0ff3; WORD $0xf073             // movdqu    xmm4, [rbx + 2*rsi - 16]
	LONG $0xcbfd0f66                           // paddw    xmm1, xmm3
	LONG $0xfd0f4166; BYTE $0xe0               // paddw    xmm4, xmm8
	LONG $0xe1fd0f66                           // paddw    xmm4, xmm1
	LONG $0xe2e40f66                           // pmulhuw    xmm4, xmm2
	LONG $0xec670f66                           // packuswb    xmm5, xmm4
	LONG $0x7f0f41f3; WORD $0x356c; BYTE $0xf0 // movdqu    [r13 + rsi - 16], xmm5
	LONG $0x246c034c; BYTE $0xd0               // add    r13, qword -48[rsp] /* [rbp + 16] */
	WORD $0xff49; BYTE $0xca                   // dec    r10
	LONG $0x24043b4c                           // cmp    r8, qword [rsp]
	WORD $0x8948; BYTE $0xde                   // mov    rsi, rbx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JNE  LBB0_98
	JMP  LBB0_119

LBB0_106:
	LONG $0x52348d4c             // lea    r14, [rdx + 2*rdx]
	LONG $0x525c8d48; BYTE $0x0f // lea    rbx, [rdx + 2*rdx + 15]
	LONG $0xf0e38348             // and    rbx, -16
	LONG $0xf0638d4c             // lea    r12, [rbx - 16]
	LONG $0x5e3c8d4c             // lea    r15, [rsi + 2*rbx]
	LONG $0x176f0ff3             // movdqu    xmm2, [rdi]
	LONG $0x4f6f0ff3; BYTE $0x03 // movdqu    xmm1, [rdi + 3]
	LONG $0xc0ef0f66             // pxor    xmm0, xmm0
	LONG $0xda6f0f66             // movdqa    xmm3, xmm2
	LONG $0xd8600f66             // punpcklbw    xmm3, xmm0
	LONG $0xe3700f66; BYTE $0x27 // pshufd    xmm4, xmm3, 39
	LONG $0xe96f0f66             // movdqa    xmm5, xmm1
	LONG $0xe8600f66             // punpcklbw    xmm5, xmm0
	LONG $0xebfd0f66             // paddw    xmm5, xmm3
	LONG $0xdb730f66; BYTE $0x0a // psrldq    xmm3, 10
	LONG $0xd0680f66             // punpckhbw    xmm2, xmm0
	LONG $0xc8680f66             // punpckhbw    xmm1, xmm0
	LONG $0xcafd0f66             // paddw    xmm1, xmm2
	LONG $0xfa730f66; BYTE $0x06 // pslldq    xmm2, 6
	LONG $0xd3eb0f66             // por    xmm2, xmm3
	LONG $0xdc700ff3; BYTE $0xec // pshufhw    xmm3, xmm4, 236
	LONG $0xdb700f66; BYTE $0x67 // pshufd    xmm3, xmm3, 103
	LONG $0xdb700ff2; BYTE $0x24 // pshuflw    xmm3, xmm3, 36
	LONG $0xdb700ff3; BYTE $0x39 // pshufhw    xmm3, xmm3, 57
	LONG $0xda670f66             // packuswb    xmm3, xmm2
	LONG $0xd36f0f66             // movdqa    xmm2, xmm3
	LONG $0xd0600f66             // punpcklbw    xmm2, xmm0
	LONG $0xeafd0f66             // paddw    xmm5, xmm2
	LONG $0x2e7f0f66             // movdqa    [rsi], xmm5
	LONG $0xd8680f66             // punpckhbw    xmm3, xmm0
	LONG $0xcbfd0f66             // paddw    xmm1, xmm3
	LONG $0x4e7f0f66; BYTE $0x10 // movdqa    [rsi + 16], xmm1
	LONG $0x11fc8349             // cmp    r12, 17
	JB   LBB0_109
	WORD $0xc031                 // xor    eax, eax

LBB0_108:
	LONG $0x4c6f0ff3; WORD $0x0d07 // movdqu    xmm1, [rdi + rax + 13]
	LONG $0x546f0ff3; WORD $0x1007 // movdqu    xmm2, [rdi + rax + 16]
	LONG $0x5c6f0ff3; WORD $0x1307 // movdqu    xmm3, [rdi + rax + 19]
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xea6f0f66               // movdqa    xmm5, xmm2
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xecfd0f66               // paddw    xmm5, xmm4
	LONG $0xeefd0f66               // paddw    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x2046 // movdqa    [rsi + 2*rax + 32], xmm5
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66               // punpckhbw    xmm2, xmm0
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xd1fd0f66               // paddw    xmm2, xmm1
	LONG $0xd3fd0f66               // paddw    xmm2, xmm3
	LONG $0x547f0f66; WORD $0x3046 // movdqa    [rsi + 2*rax + 48], xmm2
	LONG $0x10488d48               // lea    rcx, [rax + 16]
	LONG $0x20c08348               // add    rax, 32
	WORD $0x394c; BYTE $0xe0       // cmp    rax, r12
	WORD $0x8948; BYTE $0xc8       // mov    rax, rcx
	JB   LBB0_108

LBB0_109:
	LONG $0x6f0f42f3; WORD $0x374c; BYTE $0xed // movdqu    xmm1, [rdi + r14 - 19]
	LONG $0x6f0f42f3; WORD $0x3754; BYTE $0xf0 // movdqu    xmm2, [rdi + r14 - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xdb730f66; BYTE $0x06               // psrldq    xmm3, 6
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xea700f66; BYTE $0x27               // pshufd    xmm5, xmm2, 39
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xcafd0f66                           // paddw    xmm1, xmm2
	LONG $0xfa730f66; BYTE $0x0a               // pslldq    xmm2, 10
	LONG $0xd3eb0f66                           // por    xmm2, xmm3
	LONG $0xdd700ff2; BYTE $0x4c               // pshuflw    xmm3, xmm5, 76
	LONG $0xdb700f66; BYTE $0x68               // pshufd    xmm3, xmm3, 104
	LONG $0xdb700ff2; BYTE $0x39               // pshuflw    xmm3, xmm3, 57
	LONG $0xdb700ff3; BYTE $0xe7               // pshufhw    xmm3, xmm3, 231
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7664; BYTE $0xe0 // movdqu    [rsi + 2*r14 - 32], xmm4
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xcafd0f66                           // paddw    xmm1, xmm2
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd2                   // add    rdx, rdx
	LONG $0x52148d48                           // lea    rdx, [rdx + 2*rdx]
	WORD $0x894c; BYTE $0xff                   // mov    rdi, r15
	LONG $0x24748b48; BYTE $0xd8               // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	CALL clib·_memcpy(SB)
	LONG $0x24748b48; BYTE $0xd8               // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB0_119
	LONG $0x5f048d49                           // lea    rax, [r15 + 2*rbx]
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0xfe518d48                           // lea    rdx, [rcx - 2]
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0xff518d48                           // lea    rdx, [rcx - 1]
	LONG $0x24548948; BYTE $0x30               // mov    qword [rsp + 48], rdx
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x13528d48                           // lea    rdx, [rdx + 19]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x24548b48; BYTE $0x18               // mov    rdx, qword [rsp + 24]
	WORD $0xf748; BYTE $0xda                   // neg    rdx
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	LONG $0x0001b841; WORD $0x0000             // mov    r8d, 1
	WORD $0x2949; BYTE $0xc8                   // sub    r8, rcx
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // mov    rdi, -1
	WORD $0x3145; BYTE $0xc9                   // xor    r9d, r9d
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0x6f0f4466; WORD $0x1045             // movdqa    xmm8, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0x556f0f66; BYTE $0x20               // movdqa    xmm2, 32[rbp] /* [rip + .LCPI0_2] */

LBB0_111:
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	WORD $0x394c; BYTE $0xc7       // cmp    rdi, r8
	WORD $0x894c; BYTE $0xc6       // mov    rsi, r8
	LONG $0xf7470f48               // cmova    rsi, rdi
	LONG $0x244c3b4c; BYTE $0x08   // cmp    r9, qword [rsp + 8]
	LONG $0x01498d4d               // lea    r9, [r9 + 1]
	LONG $0x245c8b48; BYTE $0x30   // mov    rbx, qword [rsp + 48]
	LONG $0xd9420f49               // cmovb    rbx, r9
	LONG $0x5caf0f48; WORD $0x1824 // imul    rbx, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0x10   // mov    rcx, qword [rsp + 16]
	LONG $0x191c8d4c               // lea    r11, [rcx + rbx]
	LONG $0x246f0ff3; BYTE $0x19   // movdqu    xmm4, [rcx + rbx]
	LONG $0x5c6f0ff3; WORD $0x0319 // movdqu    xmm3, [rcx + rbx + 3]
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xf5700f66; BYTE $0x27   // pshufd    xmm6, xmm5, 39
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xfdfd0f66               // paddw    xmm7, xmm5
	LONG $0xdd730f66; BYTE $0x0a   // psrldq    xmm5, 10
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xdcfd0f66               // paddw    xmm3, xmm4
	LONG $0xfc730f66; BYTE $0x06   // pslldq    xmm4, 6
	LONG $0xe5eb0f66               // por    xmm4, xmm5
	LONG $0xee700ff3; BYTE $0xec   // pshufhw    xmm5, xmm6, 236
	LONG $0xed700f66; BYTE $0x67   // pshufd    xmm5, xmm5, 103
	LONG $0xed700ff2; BYTE $0x24   // pshuflw    xmm5, xmm5, 36
	LONG $0xed700ff3; BYTE $0x39   // pshufhw    xmm5, xmm5, 57
	LONG $0xec670f66               // packuswb    xmm5, xmm4
	LONG $0xe56f0f66               // movdqa    xmm4, xmm5
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xfcfd0f66               // paddw    xmm7, xmm4
	LONG $0x387f0f66               // movdqa    [rax], xmm7
	LONG $0xe8680f66               // punpckhbw    xmm5, xmm0
	LONG $0xddfd0f66               // paddw    xmm3, xmm5
	LONG $0x587f0f66; BYTE $0x10   // movdqa    [rax + 16], xmm3
	LONG $0x11fc8349               // cmp    r12, 17
	JB   LBB0_114
	LONG $0x74af0f48; WORD $0x2024 // imul    rsi, qword [rsp + 32]
	LONG $0x24740348; BYTE $0x28   // add    rsi, qword [rsp + 40]
	WORD $0xdb31                   // xor    ebx, ebx

LBB0_113:
	LONG $0x5c6f0ff3; WORD $0xfa1e // movdqu    xmm3, [rsi + rbx - 6]
	LONG $0x646f0ff3; WORD $0xfd1e // movdqu    xmm4, [rsi + rbx - 3]
	LONG $0x0c6f0ff3; BYTE $0x1e   // movdqu    xmm1, [rsi + rbx]
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xe96f0f66               // movdqa    xmm5, xmm1
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xfefd0f66               // paddw    xmm7, xmm6
	LONG $0xfdfd0f66               // paddw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2058 // movdqa    [rax + 2*rbx + 32], xmm7
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xe1fd0f66               // paddw    xmm4, xmm1
	LONG $0x647f0f66; WORD $0x3058 // movdqa    [rax + 2*rbx + 48], xmm4
	LONG $0x10538d4c               // lea    r10, [rbx + 16]
	LONG $0x20c38348               // add    rbx, 32
	WORD $0x394c; BYTE $0xe3       // cmp    rbx, r12
	WORD $0x894c; BYTE $0xd3       // mov    rbx, r10
	JB   LBB0_113

LBB0_114:
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	LONG $0x6f0f43f3; WORD $0x335c; BYTE $0xed // movdqu    xmm3, [r11 + r14 - 19]
	LONG $0x6f0f43f3; WORD $0x336c; BYTE $0xf0 // movdqu    xmm5, [r11 + r14 - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xe6fd0f66                           // paddw    xmm4, xmm6
	LONG $0xde730f66; BYTE $0x06               // psrldq    xmm6, 6
	LONG $0xe8680f66                           // punpckhbw    xmm5, xmm0
	LONG $0xfd700f66; BYTE $0x27               // pshufd    xmm7, xmm5, 39
	LONG $0xd8680f66                           // punpckhbw    xmm3, xmm0
	LONG $0xddfd0f66                           // paddw    xmm3, xmm5
	LONG $0xfd730f66; BYTE $0x0a               // pslldq    xmm5, 10
	LONG $0xeeeb0f66                           // por    xmm5, xmm6
	LONG $0xf7700ff2; BYTE $0x4c               // pshuflw    xmm6, xmm7, 76
	LONG $0xf6700f66; BYTE $0x68               // pshufd    xmm6, xmm6, 104
	LONG $0xf6700ff2; BYTE $0x39               // pshuflw    xmm6, xmm6, 57
	LONG $0xf6700ff3; BYTE $0xe7               // pshufhw    xmm6, xmm6, 231
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xe6fd0f66                           // paddw    xmm4, xmm6
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xe0 // movdqu    [rax + 2*r14 - 32], xmm4
	LONG $0xe8680f66                           // punpckhbw    xmm5, xmm0
	LONG $0xddfd0f66                           // paddw    xmm3, xmm5
	LONG $0x7f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    [rax + 2*r14 - 16], xmm3
	JE   LBB0_118
	WORD $0xc931                               // xor    ecx, ecx

LBB0_116:
	LONG $0x0c6f0f66; BYTE $0x4a               // movdqa    xmm1, [rdx + 2*rcx]
	LONG $0xfd0f4166; WORD $0x4f0c             // paddw    xmm1, [r15 + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x48               // paddw    xmm1, [rax + 2*rcx]
	LONG $0xfd0f4166; BYTE $0xc8               // paddw    xmm1, xmm8
	LONG $0xcae40f66                           // pmulhuw    xmm1, xmm2
	LONG $0x5c6f0f66; WORD $0x104a             // movdqa    xmm3, [rdx + 2*rcx + 16]
	LONG $0xfd0f4166; WORD $0x4f5c; BYTE $0x10 // paddw    xmm3, [r15 + 2*rcx + 16]
	LONG $0x5cfd0f66; WORD $0x1048             // paddw    xmm3, [rax + 2*rcx + 16]
	LONG $0xfd0f4166; BYTE $0xd8               // paddw    xmm3, xmm8
	LONG $0xdae40f66                           // pmulhuw    xmm3, xmm2
	LONG $0xcb670f66                           // packuswb    xmm1, xmm3
	LONG $0x7f0f41f3; WORD $0x0d4c; BYTE $0x00 // movdqu    [r13 + rcx], xmm1
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394c; BYTE $0xe1                   // cmp    rcx, r12
	JB   LBB0_116
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xe0 // movdqu    xmm4, [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, [rax + 2*r14 - 16]

LBB0_118:
	LONG $0x6f0f42f3; WORD $0x724c; BYTE $0xe0 // movdqu    xmm1, [rdx + 2*r14 - 32]
	LONG $0x6f0f43f3; WORD $0x776c; BYTE $0xe0 // movdqu    xmm5, [r15 + 2*r14 - 32]
	LONG $0xccfd0f66                           // paddw    xmm1, xmm4
	LONG $0xfd0f4166; BYTE $0xe8               // paddw    xmm5, xmm8
	LONG $0xe9fd0f66                           // paddw    xmm5, xmm1
	LONG $0xeae40f66                           // pmulhuw    xmm5, xmm2
	LONG $0x6f0f42f3; WORD $0x724c; BYTE $0xf0 // movdqu    xmm1, [rdx + 2*r14 - 16]
	LONG $0x6f0f43f3; WORD $0x7764; BYTE $0xf0 // movdqu    xmm4, [r15 + 2*r14 - 16]
	LONG $0xcbfd0f66                           // paddw    xmm1, xmm3
	LONG $0xfd0f4166; BYTE $0xe0               // paddw    xmm4, xmm8
	LONG $0xe1fd0f66                           // paddw    xmm4, xmm1
	LONG $0xe2e40f66                           // pmulhuw    xmm4, xmm2
	LONG $0xec670f66                           // packuswb    xmm5, xmm4
	LONG $0x7f0f43f3; WORD $0x356c; BYTE $0xf0 // movdqu    [r13 + r14 - 16], xmm5
	LONG $0x246c034c; BYTE $0xd0               // add    r13, qword -48[rsp] /* [rbp + 16] */
	WORD $0xff48; BYTE $0xcf                   // dec    rdi
	LONG $0x240c3b4c                           // cmp    r9, qword [rsp]
	WORD $0x894c; BYTE $0xfe                   // mov    rsi, r15
	WORD $0x8949; BYTE $0xc7                   // mov    r15, rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JNE  LBB0_111

LBB0_119:
	MOVQ -32(SP), SP
	RET

LBB0_21:
	LONG $0x03f88349                   // cmp    r8, 3
	LONG $0x24748b48; BYTE $0xd8       // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	JE   LBB0_49
	LONG $0x04f88349                   // cmp    r8, 4
	JNE  LBB0_119
	LONG $0x953c8d4c; LONG $0x00000000 // lea    r15, [4*rdx]
	LONG $0x95048d48; LONG $0x0000000f // lea    rax, [4*rdx + 15]
	LONG $0xf0e08348                   // and    rax, -16
	LONG $0xf0608d4c                   // lea    r12, [rax - 16]
	LONG $0x24448948; BYTE $0x08       // mov    qword [rsp + 8], rax
	LONG $0x461c8d48                   // lea    rbx, [rsi + 2*rax]
	WORD $0x8949; BYTE $0xf6           // mov    r14, rsi
	LONG $0x24748b48; BYTE $0x10       // mov    rsi, qword [rsp + 16]
	LONG $0x0e6f0f66                   // movdqa    xmm1, [rsi]
	LONG $0xd16f0f66                   // movdqa    xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x04       // pslldq    xmm2, 4
	LONG $0xc0ef0f66                   // pxor    xmm0, xmm0
	WORD $0x570f; BYTE $0xdb           // xorps    xmm3, xmm3
	LONG $0xd9100ff3                   // movss    xmm3, xmm1
	WORD $0x560f; BYTE $0xda           // orps    xmm3, xmm2
	LONG $0x566f0ff3; BYTE $0x04       // movdqu    xmm2, [rsi + 4]
	WORD $0x280f; BYTE $0xe3           // movaps    xmm4, xmm3
	LONG $0xe0600f66                   // punpcklbw    xmm4, xmm0
	LONG $0xe96f0f66                   // movdqa    xmm5, xmm1
	LONG $0xe8600f66                   // punpcklbw    xmm5, xmm0
	LONG $0xf26f0f66                   // movdqa    xmm6, xmm2
	LONG $0xf0600f66                   // punpcklbw    xmm6, xmm0
	LONG $0xf5fd0f66                   // paddw    xmm6, xmm5
	LONG $0xf4fd0f66                   // paddw    xmm6, xmm4
	LONG $0x7f0f4166; BYTE $0x36       // movdqa    [r14], xmm6
	LONG $0xd8680f66                   // punpckhbw    xmm3, xmm0
	LONG $0xc8680f66                   // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66                   // punpckhbw    xmm2, xmm0
	LONG $0xd1fd0f66                   // paddw    xmm2, xmm1
	LONG $0xd3fd0f66                   // paddw    xmm2, xmm3
	LONG $0x7f0f4166; WORD $0x1056     // movdqa    [r14 + 16], xmm2
	LONG $0x11fc8349                   // cmp    r12, 17
	JB   LBB0_26
	WORD $0xc031                       // xor    eax, eax

LBB0_25:
	LONG $0x4c6f0ff3; WORD $0x0c06             // movdqu    xmm1, [rsi + rax + 12]
	LONG $0x546f0f66; WORD $0x1006             // movdqa    xmm2, [rsi + rax + 16]
	LONG $0x5c6f0ff3; WORD $0x1406             // movdqu    xmm3, [rsi + rax + 20]
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe8600f66                           // punpcklbw    xmm5, xmm0
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xecfd0f66                           // paddw    xmm5, xmm4
	LONG $0xeefd0f66                           // paddw    xmm5, xmm6
	LONG $0x7f0f4166; WORD $0x466c; BYTE $0x20 // movdqa    [r14 + 2*rax + 32], xmm5
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xd8680f66                           // punpckhbw    xmm3, xmm0
	LONG $0xd1fd0f66                           // paddw    xmm2, xmm1
	LONG $0xd3fd0f66                           // paddw    xmm2, xmm3
	LONG $0x7f0f4166; WORD $0x4654; BYTE $0x30 // movdqa    [r14 + 2*rax + 48], xmm2
	LONG $0x10488d48                           // lea    rcx, [rax + 16]
	LONG $0x20c08348                           // add    rax, 32
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	WORD $0x8948; BYTE $0xc8                   // mov    rax, rcx
	JB   LBB0_25

LBB0_26:
	LONG $0x4c6f0ff3; WORD $0xec96             // movdqu    xmm1, [rsi + 4*rdx - 20]
	LONG $0x546f0f66; WORD $0xf096             // movdqa    xmm2, [rsi + 4*rdx - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdb730f66; BYTE $0x04               // psrldq    xmm3, 4
	LONG $0x656f0f66; BYTE $0x00               // movdqa    xmm4, 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xe2db0f66                           // pand    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xea6f0f66                           // movdqa    xmm5, xmm2
	LONG $0xe8600f66                           // punpcklbw    xmm5, xmm0
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0xeefd0f66                           // paddw    xmm5, xmm6
	LONG $0x7f0f4366; WORD $0x7e6c; BYTE $0xe0 // movdqa    [r14 + 2*r15 - 32], xmm5
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xe0680f66                           // punpckhbw    xmm4, xmm0
	LONG $0xd1fd0f66                           // paddw    xmm2, xmm1
	LONG $0xd4fd0f66                           // paddw    xmm2, xmm4
	LONG $0x7f0f4366; WORD $0x7e54; BYTE $0xf0 // movdqa    [r14 + 2*r15 - 16], xmm2
	LONG $0x03e2c148                           // shl    rdx, 3
	WORD $0x8948; BYTE $0xdf                   // mov    rdi, rbx
	WORD $0x894c; BYTE $0xf6                   // mov    rsi, r14
	CALL clib·_memcpy(SB)
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	WORD $0x894c; BYTE $0xf6                   // mov    rsi, r14
	JE   LBB0_119
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x43048d48                           // lea    rax, [rbx + 2*rax]
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0xfe518d48                           // lea    rdx, [rcx - 2]
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0xff518d48                           // lea    rdx, [rcx - 1]
	LONG $0x24548948; BYTE $0x30               // mov    qword [rsp + 48], rdx
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x14528d48                           // lea    rdx, [rdx + 20]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x24548b48; BYTE $0x18               // mov    rdx, qword [rsp + 24]
	WORD $0xf748; BYTE $0xda                   // neg    rdx
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	LONG $0x0001b841; WORD $0x0000             // mov    r8d, 1
	WORD $0x2949; BYTE $0xc8                   // sub    r8, rcx
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff // mov    r11, -1
	WORD $0x3145; BYTE $0xc9                   // xor    r9d, r9d
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0x6f0f4466; WORD $0x0045             // movdqa    xmm8, 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x6f0f4466; WORD $0x104d             // movdqa    xmm9, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0x5d6f0f66; BYTE $0x20               // movdqa    xmm3, 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0x247c8b48; BYTE $0x10               // mov    rdi, qword [rsp + 16]

LBB0_28:
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	WORD $0x394d; BYTE $0xc3       // cmp    r11, r8
	WORD $0x894c; BYTE $0xc6       // mov    rsi, r8
	LONG $0xf3470f49               // cmova    rsi, r11
	LONG $0x244c3b4c; BYTE $0x08   // cmp    r9, qword [rsp + 8]
	LONG $0x01498d4d               // lea    r9, [r9 + 1]
	LONG $0x244c8b48; BYTE $0x30   // mov    rcx, qword [rsp + 48]
	LONG $0xc9420f49               // cmovb    rcx, r9
	LONG $0x4caf0f48; WORD $0x1824 // imul    rcx, qword [rsp + 24]
	LONG $0x0f348d4c               // lea    r14, [rdi + rcx]
	LONG $0x246f0f66; BYTE $0x0f   // movdqa    xmm4, [rdi + rcx]
	LONG $0xec6f0f66               // movdqa    xmm5, xmm4
	LONG $0xfd730f66; BYTE $0x04   // pslldq    xmm5, 4
	LONG $0xf6ef0f66               // pxor    xmm6, xmm6
	LONG $0xf4100ff3               // movss    xmm6, xmm4
	WORD $0x560f; BYTE $0xf5       // orps    xmm6, xmm5
	LONG $0x546f0ff3; WORD $0x040f // movdqu    xmm2, [rdi + rcx + 4]
	WORD $0x280f; BYTE $0xfe       // movaps    xmm7, xmm6
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xcc6f0f66               // movdqa    xmm1, xmm4
	LONG $0xc8600f66               // punpcklbw    xmm1, xmm0
	LONG $0xea6f0f66               // movdqa    xmm5, xmm2
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xe9fd0f66               // paddw    xmm5, xmm1
	LONG $0xeffd0f66               // paddw    xmm5, xmm7
	LONG $0x287f0f66               // movdqa    [rax], xmm5
	LONG $0xf0680f66               // punpckhbw    xmm6, xmm0
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xd0680f66               // punpckhbw    xmm2, xmm0
	LONG $0xd4fd0f66               // paddw    xmm2, xmm4
	LONG $0xd6fd0f66               // paddw    xmm2, xmm6
	LONG $0x507f0f66; BYTE $0x10   // movdqa    [rax + 16], xmm2
	LONG $0x11fc8349               // cmp    r12, 17
	JB   LBB0_31
	LONG $0x74af0f48; WORD $0x2024 // imul    rsi, qword [rsp + 32]
	LONG $0x24740348; BYTE $0x28   // add    rsi, qword [rsp + 40]
	WORD $0xc931                   // xor    ecx, ecx

LBB0_30:
	LONG $0x4c6f0ff3; WORD $0xf80e // movdqu    xmm1, [rsi + rcx - 8]
	LONG $0x546f0f66; WORD $0xfc0e // movdqa    xmm2, [rsi + rcx - 4]
	LONG $0x246f0ff3; BYTE $0x0e   // movdqu    xmm4, [rsi + rcx]
	LONG $0xe96f0f66               // movdqa    xmm5, xmm1
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xf26f0f66               // movdqa    xmm6, xmm2
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xf5fd0f66               // paddw    xmm6, xmm5
	LONG $0xf7fd0f66               // paddw    xmm6, xmm7
	LONG $0x747f0f66; WORD $0x2048 // movdqa    [rax + 2*rcx + 32], xmm6
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66               // punpckhbw    xmm2, xmm0
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xd1fd0f66               // paddw    xmm2, xmm1
	LONG $0xd4fd0f66               // paddw    xmm2, xmm4
	LONG $0x547f0f66; WORD $0x3048 // movdqa    [rax + 2*rcx + 48], xmm2
	LONG $0x10518d4c               // lea    r10, [rcx + 16]
	LONG $0x20c18348               // add    rcx, 32
	WORD $0x394c; BYTE $0xe1       // cmp    rcx, r12
	WORD $0x894c; BYTE $0xd1       // mov    rcx, r10
	JB   LBB0_30

LBB0_31:
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	LONG $0x6f0f43f3; WORD $0x3e4c; BYTE $0xec // movdqu    xmm1, [r14 + r15 - 20]
	LONG $0x6f0f4366; WORD $0x3e64; BYTE $0xf0 // movdqa    xmm4, [r14 + r15 - 16]
	LONG $0xd46f0f66                           // movdqa    xmm2, xmm4
	LONG $0xda730f66; BYTE $0x04               // psrldq    xmm2, 4
	LONG $0xf46f0f66                           // movdqa    xmm6, xmm4
	LONG $0xdb0f4166; BYTE $0xf0               // pand    xmm6, xmm8
	LONG $0xf2eb0f66                           // por    xmm6, xmm2
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd0600f66                           // punpcklbw    xmm2, xmm0
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xe8600f66                           // punpcklbw    xmm5, xmm0
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xf8600f66                           // punpcklbw    xmm7, xmm0
	LONG $0xeafd0f66                           // paddw    xmm5, xmm2
	LONG $0xeffd0f66                           // paddw    xmm5, xmm7
	LONG $0x7f0f4266; WORD $0x786c; BYTE $0xe0 // movdqa    [rax + 2*r15 - 32], xmm5
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xe0680f66                           // punpckhbw    xmm4, xmm0
	LONG $0xf0680f66                           // punpckhbw    xmm6, xmm0
	LONG $0xe1fd0f66                           // paddw    xmm4, xmm1
	LONG $0xe6fd0f66                           // paddw    xmm4, xmm6
	LONG $0x7f0f4266; WORD $0x7864; BYTE $0xf0 // movdqa    [rax + 2*r15 - 16], xmm4
	JE   LBB0_35
	WORD $0xc931                               // xor    ecx, ecx

LBB0_33:
	LONG $0x0c6f0f66; BYTE $0x4a               // movdqa    xmm1, [rdx + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x4b               // paddw    xmm1, [rbx + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x48               // paddw    xmm1, [rax + 2*rcx]
	LONG $0xfd0f4166; BYTE $0xc9               // paddw    xmm1, xmm9
	LONG $0xcbe40f66                           // pmulhuw    xmm1, xmm3
	LONG $0x546f0f66; WORD $0x104a             // movdqa    xmm2, [rdx + 2*rcx + 16]
	LONG $0x54fd0f66; WORD $0x104b             // paddw    xmm2, [rbx + 2*rcx + 16]
	LONG $0x54fd0f66; WORD $0x1048             // paddw    xmm2, [rax + 2*rcx + 16]
	LONG $0xfd0f4166; BYTE $0xd1               // paddw    xmm2, xmm9
	LONG $0xd3e40f66                           // pmulhuw    xmm2, xmm3
	LONG $0xca670f66                           // packuswb    xmm1, xmm2
	LONG $0x7f0f4166; WORD $0x0d4c; BYTE $0x00 // movdqa    [r13 + rcx], xmm1
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394c; BYTE $0xe1                   // cmp    rcx, r12
	JB   LBB0_33
	LONG $0x6f0f4266; WORD $0x786c; BYTE $0xe0 // movdqa    xmm5, [rax + 2*r15 - 32]
	LONG $0x6f0f4266; WORD $0x7864; BYTE $0xf0 // movdqa    xmm4, [rax + 2*r15 - 16]

LBB0_35:
	LONG $0xfd0f4266; WORD $0x7a6c; BYTE $0xe0 // paddw    xmm5, [rdx + 2*r15 - 32]
	LONG $0xfd0f4266; WORD $0x7b6c; BYTE $0xe0 // paddw    xmm5, [rbx + 2*r15 - 32]
	LONG $0xfd0f4166; BYTE $0xe9               // paddw    xmm5, xmm9
	LONG $0xebe40f66                           // pmulhuw    xmm5, xmm3
	LONG $0xfd0f4266; WORD $0x7a64; BYTE $0xf0 // paddw    xmm4, [rdx + 2*r15 - 16]
	LONG $0xfd0f4266; WORD $0x7b64; BYTE $0xf0 // paddw    xmm4, [rbx + 2*r15 - 16]
	LONG $0xfd0f4166; BYTE $0xe1               // paddw    xmm4, xmm9
	LONG $0xe3e40f66                           // pmulhuw    xmm4, xmm3
	LONG $0xec670f66                           // packuswb    xmm5, xmm4
	LONG $0x7f0f4366; WORD $0x3d6c; BYTE $0xf0 // movdqa    [r13 + r15 - 16], xmm5
	LONG $0x246c034c; BYTE $0xd0               // add    r13, qword -48[rsp] /* [rbp + 16] */
	WORD $0xff49; BYTE $0xcb                   // dec    r11
	LONG $0x240c3b4c                           // cmp    r9, qword [rsp]
	WORD $0x8948; BYTE $0xde                   // mov    rsi, rbx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JNE  LBB0_28
	JMP  LBB0_119

LBB0_36:
	LONG $0x0f628d4c             // lea    r12, [rdx + 15]
	LONG $0xf0e48349             // and    r12, -16
	LONG $0x247c8d4d; BYTE $0xf0 // lea    r15, [r12 - 16]
	LONG $0x661c8d4a             // lea    rbx, [rsi + 2*r12]
	LONG $0x0f6f0f66             // movdqa    xmm1, [rdi]
	LONG $0xc0ef0f66             // pxor    xmm0, xmm0
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd0600f66             // punpcklbw    xmm2, xmm0
	LONG $0xda700f66; BYTE $0x27 // pshufd    xmm3, xmm2, 39
	LONG $0x676f0ff3; BYTE $0x01 // movdqu    xmm4, [rdi + 1]
	LONG $0xec6f0f66             // movdqa    xmm5, xmm4
	LONG $0xe8600f66             // punpcklbw    xmm5, xmm0
	LONG $0xeafd0f66             // paddw    xmm5, xmm2
	LONG $0xda730f66; BYTE $0x0e // psrldq    xmm2, 14
	LONG $0xc8680f66             // punpckhbw    xmm1, xmm0
	LONG $0xe0680f66             // punpckhbw    xmm4, xmm0
	LONG $0xe1fd0f66             // paddw    xmm4, xmm1
	LONG $0xf9730f66; BYTE $0x02 // pslldq    xmm1, 2
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	LONG $0xd3700ff2; BYTE $0xec // pshuflw    xmm2, xmm3, 236
	LONG $0xd2700f66; BYTE $0x27 // pshufd    xmm2, xmm2, 39
	LONG $0xd2700ff2; BYTE $0x90 // pshuflw    xmm2, xmm2, 144
	LONG $0xd2700ff3; BYTE $0x93 // pshufhw    xmm2, xmm2, 147
	LONG $0xd1670f66             // packuswb    xmm2, xmm1
	LONG $0xca6f0f66             // movdqa    xmm1, xmm2
	LONG $0xc8600f66             // punpcklbw    xmm1, xmm0
	LONG $0xe9fd0f66             // paddw    xmm5, xmm1
	LONG $0x2e7f0f66             // movdqa    [rsi], xmm5
	LONG $0xd0680f66             // punpckhbw    xmm2, xmm0
	LONG $0xe2fd0f66             // paddw    xmm4, xmm2
	LONG $0x667f0f66; BYTE $0x10 // movdqa    [rsi + 16], xmm4
	LONG $0x11ff8349             // cmp    r15, 17
	JB   LBB0_39
	WORD $0xc031                 // xor    eax, eax

LBB0_38:
	LONG $0x4c6f0ff3; WORD $0x0f07 // movdqu    xmm1, [rdi + rax + 15]
	LONG $0x546f0f66; WORD $0x1007 // movdqa    xmm2, [rdi + rax + 16]
	LONG $0x5c6f0ff3; WORD $0x1107 // movdqu    xmm3, [rdi + rax + 17]
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xea6f0f66               // movdqa    xmm5, xmm2
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xecfd0f66               // paddw    xmm5, xmm4
	LONG $0xeefd0f66               // paddw    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x2046 // movdqa    [rsi + 2*rax + 32], xmm5
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66               // punpckhbw    xmm2, xmm0
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xd1fd0f66               // paddw    xmm2, xmm1
	LONG $0xd3fd0f66               // paddw    xmm2, xmm3
	LONG $0x547f0f66; WORD $0x3046 // movdqa    [rsi + 2*rax + 48], xmm2
	LONG $0x10488d48               // lea    rcx, [rax + 16]
	LONG $0x20c08348               // add    rax, 32
	WORD $0x394c; BYTE $0xf8       // cmp    rax, r15
	WORD $0x8948; BYTE $0xc8       // mov    rax, rcx
	JB   LBB0_38

LBB0_39:
	LONG $0x4c6f0ff3; WORD $0xef17             // movdqu    xmm1, [rdi + rdx - 17]
	LONG $0x546f0f66; WORD $0xf017             // movdqa    xmm2, [rdi + rdx - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xdb730f66; BYTE $0x02               // psrldq    xmm3, 2
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xea700f66; BYTE $0x27               // pshufd    xmm5, xmm2, 39
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xcafd0f66                           // paddw    xmm1, xmm2
	LONG $0xfa730f66; BYTE $0x0e               // pslldq    xmm2, 14
	LONG $0xd3eb0f66                           // por    xmm2, xmm3
	LONG $0xdd700ff3; BYTE $0xc4               // pshufhw    xmm3, xmm5, 196
	LONG $0xdb700f66; BYTE $0x27               // pshufd    xmm3, xmm3, 39
	LONG $0xdb700ff2; BYTE $0x39               // pshuflw    xmm3, xmm3, 57
	LONG $0xdb700ff3; BYTE $0xf9               // pshufhw    xmm3, xmm3, 249
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0x647f0f66; WORD $0xe056             // movdqa    [rsi + 2*rdx - 32], xmm4
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xcafd0f66                           // paddw    xmm1, xmm2
	LONG $0x4c7f0f66; WORD $0xf056             // movdqa    [rsi + 2*rdx - 16], xmm1
	LONG $0x12148d48                           // lea    rdx, [rdx + rdx]
	WORD $0x8948; BYTE $0xdf                   // mov    rdi, rbx
	LONG $0x24748b48; BYTE $0xd8               // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	CALL clib·_memcpy(SB)
	LONG $0x24748b48; BYTE $0xd8               // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB0_119
	LONG $0x63048d4a                           // lea    rax, [rbx + 2*r12]
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0xfe518d48                           // lea    rdx, [rcx - 2]
	LONG $0x24548948; BYTE $0x30               // mov    qword [rsp + 48], rdx
	LONG $0xff598d4c                           // lea    r11, [rcx - 1]
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x11528d48                           // lea    rdx, [rdx + 17]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x24548b48; BYTE $0x18               // mov    rdx, qword [rsp + 24]
	WORD $0xf748; BYTE $0xda                   // neg    rdx
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	LONG $0x0001bc41; WORD $0x0000             // mov    r12d, 1
	WORD $0x2949; BYTE $0xcc                   // sub    r12, rcx
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // mov    r10, -1
	WORD $0x3145; BYTE $0xc0                   // xor    r8d, r8d
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0x6f0f4466; WORD $0x1045             // movdqa    xmm8, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0x556f0f66; BYTE $0x20               // movdqa    xmm2, 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0x247c8b48; BYTE $0x10               // mov    rdi, qword [rsp + 16]

LBB0_41:
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	WORD $0x394d; BYTE $0xe2       // cmp    r10, r12
	WORD $0x894c; BYTE $0xe6       // mov    rsi, r12
	LONG $0xf2470f49               // cmova    rsi, r10
	LONG $0x24443b4c; BYTE $0x30   // cmp    r8, qword [rsp + 48]
	LONG $0x01408d4d               // lea    r8, [r8 + 1]
	WORD $0x894c; BYTE $0xd9       // mov    rcx, r11
	LONG $0xc8420f49               // cmovb    rcx, r8
	LONG $0x4caf0f48; WORD $0x1824 // imul    rcx, qword [rsp + 24]
	LONG $0x0f348d4c               // lea    r14, [rdi + rcx]
	LONG $0x1c6f0f66; BYTE $0x0f   // movdqa    xmm3, [rdi + rcx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xec700f66; BYTE $0x27   // pshufd    xmm5, xmm4, 39
	LONG $0x746f0ff3; WORD $0x010f // movdqu    xmm6, [rdi + rcx + 1]
	LONG $0xfe6f0f66               // movdqa    xmm7, xmm6
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xfcfd0f66               // paddw    xmm7, xmm4
	LONG $0xdc730f66; BYTE $0x0e   // psrldq    xmm4, 14
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xf0680f66               // punpckhbw    xmm6, xmm0
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xfb730f66; BYTE $0x02   // pslldq    xmm3, 2
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0xe5700ff2; BYTE $0xec   // pshuflw    xmm4, xmm5, 236
	LONG $0xe4700f66; BYTE $0x27   // pshufd    xmm4, xmm4, 39
	LONG $0xe4700ff2; BYTE $0x90   // pshuflw    xmm4, xmm4, 144
	LONG $0xe4700ff3; BYTE $0x93   // pshufhw    xmm4, xmm4, 147
	LONG $0xe3670f66               // packuswb    xmm4, xmm3
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd8600f66               // punpcklbw    xmm3, xmm0
	LONG $0xfbfd0f66               // paddw    xmm7, xmm3
	LONG $0x387f0f66               // movdqa    [rax], xmm7
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xf4fd0f66               // paddw    xmm6, xmm4
	LONG $0x707f0f66; BYTE $0x10   // movdqa    [rax + 16], xmm6
	LONG $0x11ff8349               // cmp    r15, 17
	JB   LBB0_44
	LONG $0x74af0f48; WORD $0x2024 // imul    rsi, qword [rsp + 32]
	LONG $0x24740348; BYTE $0x28   // add    rsi, qword [rsp + 40]
	WORD $0xc931                   // xor    ecx, ecx

LBB0_43:
	LONG $0x5c6f0ff3; WORD $0xfe0e // movdqu    xmm3, [rsi + rcx - 2]
	LONG $0x646f0f66; WORD $0xff0e // movdqa    xmm4, [rsi + rcx - 1]
	LONG $0x0c6f0ff3; BYTE $0x0e   // movdqu    xmm1, [rsi + rcx]
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xe96f0f66               // movdqa    xmm5, xmm1
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xfefd0f66               // paddw    xmm7, xmm6
	LONG $0xfdfd0f66               // paddw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2048 // movdqa    [rax + 2*rcx + 32], xmm7
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xe1fd0f66               // paddw    xmm4, xmm1
	LONG $0x647f0f66; WORD $0x3048 // movdqa    [rax + 2*rcx + 48], xmm4
	LONG $0x10498d4c               // lea    r9, [rcx + 16]
	LONG $0x20c18348               // add    rcx, 32
	WORD $0x394c; BYTE $0xf9       // cmp    rcx, r15
	WORD $0x894c; BYTE $0xc9       // mov    rcx, r9
	JB   LBB0_43

LBB0_44:
	WORD $0x854d; BYTE $0xff                   // test    r15, r15
	LONG $0x24748b48; BYTE $0x08               // mov    rsi, qword [rsp + 8]
	LONG $0x6f0f41f3; WORD $0x365c; BYTE $0xef // movdqu    xmm3, [r14 + rsi - 17]
	LONG $0x6f0f4166; WORD $0x366c; BYTE $0xf0 // movdqa    xmm5, [r14 + rsi - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xe6fd0f66                           // paddw    xmm4, xmm6
	LONG $0xde730f66; BYTE $0x02               // psrldq    xmm6, 2
	LONG $0xe8680f66                           // punpckhbw    xmm5, xmm0
	LONG $0xfd700f66; BYTE $0x27               // pshufd    xmm7, xmm5, 39
	LONG $0xd8680f66                           // punpckhbw    xmm3, xmm0
	LONG $0xddfd0f66                           // paddw    xmm3, xmm5
	LONG $0xfd730f66; BYTE $0x0e               // pslldq    xmm5, 14
	LONG $0xeeeb0f66                           // por    xmm5, xmm6
	LONG $0xf7700ff3; BYTE $0xc4               // pshufhw    xmm6, xmm7, 196
	LONG $0xf6700f66; BYTE $0x27               // pshufd    xmm6, xmm6, 39
	LONG $0xf6700ff2; BYTE $0x39               // pshuflw    xmm6, xmm6, 57
	LONG $0xf6700ff3; BYTE $0xf9               // pshufhw    xmm6, xmm6, 249
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xe6fd0f66                           // paddw    xmm4, xmm6
	LONG $0x647f0f66; WORD $0xe070             // movdqa    [rax + 2*rsi - 32], xmm4
	LONG $0xe8680f66                           // punpckhbw    xmm5, xmm0
	LONG $0xddfd0f66                           // paddw    xmm3, xmm5
	LONG $0x5c7f0f66; WORD $0xf070             // movdqa    [rax + 2*rsi - 16], xmm3
	JE   LBB0_48
	WORD $0xc931                               // xor    ecx, ecx

LBB0_46:
	LONG $0x0c6f0f66; BYTE $0x4a               // movdqa    xmm1, [rdx + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x4b               // paddw    xmm1, [rbx + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x48               // paddw    xmm1, [rax + 2*rcx]
	LONG $0xfd0f4166; BYTE $0xc8               // paddw    xmm1, xmm8
	LONG $0xcae40f66                           // pmulhuw    xmm1, xmm2
	LONG $0x5c6f0f66; WORD $0x104a             // movdqa    xmm3, [rdx + 2*rcx + 16]
	LONG $0x5cfd0f66; WORD $0x104b             // paddw    xmm3, [rbx + 2*rcx + 16]
	LONG $0x5cfd0f66; WORD $0x1048             // paddw    xmm3, [rax + 2*rcx + 16]
	LONG $0xfd0f4166; BYTE $0xd8               // paddw    xmm3, xmm8
	LONG $0xdae40f66                           // pmulhuw    xmm3, xmm2
	LONG $0xcb670f66                           // packuswb    xmm1, xmm3
	LONG $0x7f0f4166; WORD $0x0d4c; BYTE $0x00 // movdqa    [r13 + rcx], xmm1
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394c; BYTE $0xf9                   // cmp    rcx, r15
	JB   LBB0_46
	LONG $0x646f0f66; WORD $0xe070             // movdqa    xmm4, [rax + 2*rsi - 32]
	LONG $0x5c6f0f66; WORD $0xf070             // movdqa    xmm3, [rax + 2*rsi - 16]

LBB0_48:
	LONG $0x64fd0f66; WORD $0xe072             // paddw    xmm4, [rdx + 2*rsi - 32]
	LONG $0x64fd0f66; WORD $0xe073             // paddw    xmm4, [rbx + 2*rsi - 32]
	LONG $0xfd0f4166; BYTE $0xe0               // paddw    xmm4, xmm8
	LONG $0xe2e40f66                           // pmulhuw    xmm4, xmm2
	LONG $0x5cfd0f66; WORD $0xf072             // paddw    xmm3, [rdx + 2*rsi - 16]
	LONG $0x5cfd0f66; WORD $0xf073             // paddw    xmm3, [rbx + 2*rsi - 16]
	LONG $0xfd0f4166; BYTE $0xd8               // paddw    xmm3, xmm8
	LONG $0xdae40f66                           // pmulhuw    xmm3, xmm2
	LONG $0xe3670f66                           // packuswb    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x3564; BYTE $0xf0 // movdqa    [r13 + rsi - 16], xmm4
	LONG $0x246c034c; BYTE $0xd0               // add    r13, qword -48[rsp] /* [rbp + 16] */
	WORD $0xff49; BYTE $0xca                   // dec    r10
	LONG $0x24043b4c                           // cmp    r8, qword [rsp]
	WORD $0x8948; BYTE $0xde                   // mov    rsi, rbx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JNE  LBB0_41
	JMP  LBB0_119

LBB0_49:
	LONG $0x523c8d4c             // lea    r15, [rdx + 2*rdx]
	LONG $0x52748d4c; BYTE $0x0f // lea    r14, [rdx + 2*rdx + 15]
	LONG $0xf0e68349             // and    r14, -16
	LONG $0xf0668d4d             // lea    r12, [r14 - 16]
	LONG $0x761c8d4a             // lea    rbx, [rsi + 2*r14]
	LONG $0x0f6f0f66             // movdqa    xmm1, [rdi]
	LONG $0xc0ef0f66             // pxor    xmm0, xmm0
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xd0600f66             // punpcklbw    xmm2, xmm0
	LONG $0xda700f66; BYTE $0x27 // pshufd    xmm3, xmm2, 39
	LONG $0x676f0ff3; BYTE $0x03 // movdqu    xmm4, [rdi + 3]
	LONG $0xec6f0f66             // movdqa    xmm5, xmm4
	LONG $0xe8600f66             // punpcklbw    xmm5, xmm0
	LONG $0xeafd0f66             // paddw    xmm5, xmm2
	LONG $0xda730f66; BYTE $0x0a // psrldq    xmm2, 10
	LONG $0xc8680f66             // punpckhbw    xmm1, xmm0
	LONG $0xe0680f66             // punpckhbw    xmm4, xmm0
	LONG $0xe1fd0f66             // paddw    xmm4, xmm1
	LONG $0xf9730f66; BYTE $0x06 // pslldq    xmm1, 6
	LONG $0xcaeb0f66             // por    xmm1, xmm2
	LONG $0xd3700ff3; BYTE $0xec // pshufhw    xmm2, xmm3, 236
	LONG $0xd2700f66; BYTE $0x67 // pshufd    xmm2, xmm2, 103
	LONG $0xd2700ff2; BYTE $0x24 // pshuflw    xmm2, xmm2, 36
	LONG $0xd2700ff3; BYTE $0x39 // pshufhw    xmm2, xmm2, 57
	LONG $0xd1670f66             // packuswb    xmm2, xmm1
	LONG $0xca6f0f66             // movdqa    xmm1, xmm2
	LONG $0xc8600f66             // punpcklbw    xmm1, xmm0
	LONG $0xe9fd0f66             // paddw    xmm5, xmm1
	LONG $0x2e7f0f66             // movdqa    [rsi], xmm5
	LONG $0xd0680f66             // punpckhbw    xmm2, xmm0
	LONG $0xe2fd0f66             // paddw    xmm4, xmm2
	LONG $0x667f0f66; BYTE $0x10 // movdqa    [rsi + 16], xmm4
	LONG $0x11fc8349             // cmp    r12, 17
	JB   LBB0_52
	WORD $0xc031                 // xor    eax, eax

LBB0_51:
	LONG $0x4c6f0ff3; WORD $0x0d07 // movdqu    xmm1, [rdi + rax + 13]
	LONG $0x546f0f66; WORD $0x1007 // movdqa    xmm2, [rdi + rax + 16]
	LONG $0x5c6f0ff3; WORD $0x1307 // movdqu    xmm3, [rdi + rax + 19]
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xea6f0f66               // movdqa    xmm5, xmm2
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xecfd0f66               // paddw    xmm5, xmm4
	LONG $0xeefd0f66               // paddw    xmm5, xmm6
	LONG $0x6c7f0f66; WORD $0x2046 // movdqa    [rsi + 2*rax + 32], xmm5
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xd0680f66               // punpckhbw    xmm2, xmm0
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xd1fd0f66               // paddw    xmm2, xmm1
	LONG $0xd3fd0f66               // paddw    xmm2, xmm3
	LONG $0x547f0f66; WORD $0x3046 // movdqa    [rsi + 2*rax + 48], xmm2
	LONG $0x10488d48               // lea    rcx, [rax + 16]
	LONG $0x20c08348               // add    rax, 32
	WORD $0x394c; BYTE $0xe0       // cmp    rax, r12
	WORD $0x8948; BYTE $0xc8       // mov    rax, rcx
	JB   LBB0_51

LBB0_52:
	LONG $0x6f0f42f3; WORD $0x3f4c; BYTE $0xed // movdqu    xmm1, [rdi + r15 - 19]
	LONG $0x6f0f4266; WORD $0x3f54; BYTE $0xf0 // movdqa    xmm2, [rdi + r15 - 16]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0xdb730f66; BYTE $0x06               // psrldq    xmm3, 6
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xea700f66; BYTE $0x27               // pshufd    xmm5, xmm2, 39
	LONG $0xc8680f66                           // punpckhbw    xmm1, xmm0
	LONG $0xcafd0f66                           // paddw    xmm1, xmm2
	LONG $0xfa730f66; BYTE $0x0a               // pslldq    xmm2, 10
	LONG $0xd3eb0f66                           // por    xmm2, xmm3
	LONG $0xdd700ff2; BYTE $0x4c               // pshuflw    xmm3, xmm5, 76
	LONG $0xdb700f66; BYTE $0x68               // pshufd    xmm3, xmm3, 104
	LONG $0xdb700ff2; BYTE $0x39               // pshuflw    xmm3, xmm3, 57
	LONG $0xdb700ff3; BYTE $0xe7               // pshufhw    xmm3, xmm3, 231
	LONG $0xd3670f66                           // packuswb    xmm2, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xd8600f66                           // punpcklbw    xmm3, xmm0
	LONG $0xe3fd0f66                           // paddw    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x7e64; BYTE $0xe0 // movdqa    [rsi + 2*r15 - 32], xmm4
	LONG $0xd0680f66                           // punpckhbw    xmm2, xmm0
	LONG $0xcafd0f66                           // paddw    xmm1, xmm2
	LONG $0x7f0f4266; WORD $0x7e4c; BYTE $0xf0 // movdqa    [rsi + 2*r15 - 16], xmm1
	WORD $0x0148; BYTE $0xd2                   // add    rdx, rdx
	LONG $0x52148d48                           // lea    rdx, [rdx + 2*rdx]
	WORD $0x8948; BYTE $0xdf                   // mov    rdi, rbx
	LONG $0x24748b48; BYTE $0xd8               // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	CALL clib·_memcpy(SB)
	LONG $0x24748b48; BYTE $0xd8               // mov    rsi, qword -40[rsp] /* [rbp + 24] */
	LONG $0x243c8348; BYTE $0x00               // cmp    qword [rsp], 0
	JE   LBB0_119
	LONG $0x73048d4a                           // lea    rax, [rbx + 2*r14]
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0xfe518d48                           // lea    rdx, [rcx - 2]
	LONG $0x24548948; BYTE $0x08               // mov    qword [rsp + 8], rdx
	LONG $0xff518d48                           // lea    rdx, [rcx - 1]
	LONG $0x24548948; BYTE $0x30               // mov    qword [rsp + 48], rdx
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x13528d48                           // lea    rdx, [rdx + 19]
	LONG $0x24548948; BYTE $0x28               // mov    qword [rsp + 40], rdx
	LONG $0x24548b48; BYTE $0x18               // mov    rdx, qword [rsp + 24]
	WORD $0xf748; BYTE $0xda                   // neg    rdx
	LONG $0x24548948; BYTE $0x20               // mov    qword [rsp + 32], rdx
	LONG $0x0001b841; WORD $0x0000             // mov    r8d, 1
	WORD $0x2949; BYTE $0xc8                   // sub    r8, rcx
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff // mov    r11, -1
	WORD $0x3145; BYTE $0xc9                   // xor    r9d, r9d
	LONG $0xc0ef0f66                           // pxor    xmm0, xmm0
	LONG $0x6f0f4466; WORD $0x1045             // movdqa    xmm8, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0x556f0f66; BYTE $0x20               // movdqa    xmm2, 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0x247c8b48; BYTE $0x10               // mov    rdi, qword [rsp + 16]

LBB0_54:
	WORD $0x8948; BYTE $0xf2       // mov    rdx, rsi
	WORD $0x394d; BYTE $0xc3       // cmp    r11, r8
	WORD $0x894c; BYTE $0xc6       // mov    rsi, r8
	LONG $0xf3470f49               // cmova    rsi, r11
	LONG $0x244c3b4c; BYTE $0x08   // cmp    r9, qword [rsp + 8]
	LONG $0x01498d4d               // lea    r9, [r9 + 1]
	LONG $0x244c8b48; BYTE $0x30   // mov    rcx, qword [rsp + 48]
	LONG $0xc9420f49               // cmovb    rcx, r9
	LONG $0x4caf0f48; WORD $0x1824 // imul    rcx, qword [rsp + 24]
	LONG $0x0f348d4c               // lea    r14, [rdi + rcx]
	LONG $0x1c6f0f66; BYTE $0x0f   // movdqa    xmm3, [rdi + rcx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0600f66               // punpcklbw    xmm4, xmm0
	LONG $0xec700f66; BYTE $0x27   // pshufd    xmm5, xmm4, 39
	LONG $0x746f0ff3; WORD $0x030f // movdqu    xmm6, [rdi + rcx + 3]
	LONG $0xfe6f0f66               // movdqa    xmm7, xmm6
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xfcfd0f66               // paddw    xmm7, xmm4
	LONG $0xdc730f66; BYTE $0x0a   // psrldq    xmm4, 10
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xf0680f66               // punpckhbw    xmm6, xmm0
	LONG $0xf3fd0f66               // paddw    xmm6, xmm3
	LONG $0xfb730f66; BYTE $0x06   // pslldq    xmm3, 6
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0xe5700ff3; BYTE $0xec   // pshufhw    xmm4, xmm5, 236
	LONG $0xe4700f66; BYTE $0x67   // pshufd    xmm4, xmm4, 103
	LONG $0xe4700ff2; BYTE $0x24   // pshuflw    xmm4, xmm4, 36
	LONG $0xe4700ff3; BYTE $0x39   // pshufhw    xmm4, xmm4, 57
	LONG $0xe3670f66               // packuswb    xmm4, xmm3
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd8600f66               // punpcklbw    xmm3, xmm0
	LONG $0xfbfd0f66               // paddw    xmm7, xmm3
	LONG $0x387f0f66               // movdqa    [rax], xmm7
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xf4fd0f66               // paddw    xmm6, xmm4
	LONG $0x707f0f66; BYTE $0x10   // movdqa    [rax + 16], xmm6
	LONG $0x11fc8349               // cmp    r12, 17
	JB   LBB0_57
	LONG $0x74af0f48; WORD $0x2024 // imul    rsi, qword [rsp + 32]
	LONG $0x24740348; BYTE $0x28   // add    rsi, qword [rsp + 40]
	WORD $0xc931                   // xor    ecx, ecx

LBB0_56:
	LONG $0x5c6f0ff3; WORD $0xfa0e // movdqu    xmm3, [rsi + rcx - 6]
	LONG $0x646f0f66; WORD $0xfd0e // movdqa    xmm4, [rsi + rcx - 3]
	LONG $0x0c6f0ff3; BYTE $0x0e   // movdqu    xmm1, [rsi + rcx]
	LONG $0xf36f0f66               // movdqa    xmm6, xmm3
	LONG $0xf0600f66               // punpcklbw    xmm6, xmm0
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0xf8600f66               // punpcklbw    xmm7, xmm0
	LONG $0xe96f0f66               // movdqa    xmm5, xmm1
	LONG $0xe8600f66               // punpcklbw    xmm5, xmm0
	LONG $0xfefd0f66               // paddw    xmm7, xmm6
	LONG $0xfdfd0f66               // paddw    xmm7, xmm5
	LONG $0x7c7f0f66; WORD $0x2048 // movdqa    [rax + 2*rcx + 32], xmm7
	LONG $0xd8680f66               // punpckhbw    xmm3, xmm0
	LONG $0xe0680f66               // punpckhbw    xmm4, xmm0
	LONG $0xc8680f66               // punpckhbw    xmm1, xmm0
	LONG $0xe3fd0f66               // paddw    xmm4, xmm3
	LONG $0xe1fd0f66               // paddw    xmm4, xmm1
	LONG $0x647f0f66; WORD $0x3048 // movdqa    [rax + 2*rcx + 48], xmm4
	LONG $0x10518d4c               // lea    r10, [rcx + 16]
	LONG $0x20c18348               // add    rcx, 32
	WORD $0x394c; BYTE $0xe1       // cmp    rcx, r12
	WORD $0x894c; BYTE $0xd1       // mov    rcx, r10
	JB   LBB0_56

LBB0_57:
	WORD $0x854d; BYTE $0xe4                   // test    r12, r12
	LONG $0x6f0f43f3; WORD $0x3e5c; BYTE $0xed // movdqu    xmm3, [r14 + r15 - 19]
	LONG $0x6f0f4366; WORD $0x3e6c; BYTE $0xf0 // movdqa    xmm5, [r14 + r15 - 16]
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0600f66                           // punpcklbw    xmm4, xmm0
	LONG $0xe6fd0f66                           // paddw    xmm4, xmm6
	LONG $0xde730f66; BYTE $0x06               // psrldq    xmm6, 6
	LONG $0xe8680f66                           // punpckhbw    xmm5, xmm0
	LONG $0xfd700f66; BYTE $0x27               // pshufd    xmm7, xmm5, 39
	LONG $0xd8680f66                           // punpckhbw    xmm3, xmm0
	LONG $0xddfd0f66                           // paddw    xmm3, xmm5
	LONG $0xfd730f66; BYTE $0x0a               // pslldq    xmm5, 10
	LONG $0xeeeb0f66                           // por    xmm5, xmm6
	LONG $0xf7700ff2; BYTE $0x4c               // pshuflw    xmm6, xmm7, 76
	LONG $0xf6700f66; BYTE $0x68               // pshufd    xmm6, xmm6, 104
	LONG $0xf6700ff2; BYTE $0x39               // pshuflw    xmm6, xmm6, 57
	LONG $0xf6700ff3; BYTE $0xe7               // pshufhw    xmm6, xmm6, 231
	LONG $0xee670f66                           // packuswb    xmm5, xmm6
	LONG $0xf56f0f66                           // movdqa    xmm6, xmm5
	LONG $0xf0600f66                           // punpcklbw    xmm6, xmm0
	LONG $0xe6fd0f66                           // paddw    xmm4, xmm6
	LONG $0x7f0f4266; WORD $0x7864; BYTE $0xe0 // movdqa    [rax + 2*r15 - 32], xmm4
	LONG $0xe8680f66                           // punpckhbw    xmm5, xmm0
	LONG $0xddfd0f66                           // paddw    xmm3, xmm5
	LONG $0x7f0f4266; WORD $0x785c; BYTE $0xf0 // movdqa    [rax + 2*r15 - 16], xmm3
	JE   LBB0_61
	WORD $0xc931                               // xor    ecx, ecx

LBB0_59:
	LONG $0x0c6f0f66; BYTE $0x4a               // movdqa    xmm1, [rdx + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x4b               // paddw    xmm1, [rbx + 2*rcx]
	LONG $0x0cfd0f66; BYTE $0x48               // paddw    xmm1, [rax + 2*rcx]
	LONG $0xfd0f4166; BYTE $0xc8               // paddw    xmm1, xmm8
	LONG $0xcae40f66                           // pmulhuw    xmm1, xmm2
	LONG $0x5c6f0f66; WORD $0x104a             // movdqa    xmm3, [rdx + 2*rcx + 16]
	LONG $0x5cfd0f66; WORD $0x104b             // paddw    xmm3, [rbx + 2*rcx + 16]
	LONG $0x5cfd0f66; WORD $0x1048             // paddw    xmm3, [rax + 2*rcx + 16]
	LONG $0xfd0f4166; BYTE $0xd8               // paddw    xmm3, xmm8
	LONG $0xdae40f66                           // pmulhuw    xmm3, xmm2
	LONG $0xcb670f66                           // packuswb    xmm1, xmm3
	LONG $0x7f0f4166; WORD $0x0d4c; BYTE $0x00 // movdqa    [r13 + rcx], xmm1
	LONG $0x10c18348                           // add    rcx, 16
	WORD $0x394c; BYTE $0xe1                   // cmp    rcx, r12
	JB   LBB0_59
	LONG $0x6f0f4266; WORD $0x7864; BYTE $0xe0 // movdqa    xmm4, [rax + 2*r15 - 32]
	LONG $0x6f0f4266; WORD $0x785c; BYTE $0xf0 // movdqa    xmm3, [rax + 2*r15 - 16]

LBB0_61:
	LONG $0xfd0f4266; WORD $0x7a64; BYTE $0xe0 // paddw    xmm4, [rdx + 2*r15 - 32]
	LONG $0xfd0f4266; WORD $0x7b64; BYTE $0xe0 // paddw    xmm4, [rbx + 2*r15 - 32]
	LONG $0xfd0f4166; BYTE $0xe0               // paddw    xmm4, xmm8
	LONG $0xe2e40f66                           // pmulhuw    xmm4, xmm2
	LONG $0xfd0f4266; WORD $0x7a5c; BYTE $0xf0 // paddw    xmm3, [rdx + 2*r15 - 16]
	LONG $0xfd0f4266; WORD $0x7b5c; BYTE $0xf0 // paddw    xmm3, [rbx + 2*r15 - 16]
	LONG $0xfd0f4166; BYTE $0xd8               // paddw    xmm3, xmm8
	LONG $0xdae40f66                           // pmulhuw    xmm3, xmm2
	LONG $0xe3670f66                           // packuswb    xmm4, xmm3
	LONG $0x7f0f4366; WORD $0x3d64; BYTE $0xf0 // movdqa    [r13 + r15 - 16], xmm4
	LONG $0x246c034c; BYTE $0xd0               // add    r13, qword -48[rsp] /* [rbp + 16] */
	WORD $0xff49; BYTE $0xcb                   // dec    r11
	LONG $0x240c3b4c                           // cmp    r9, qword [rsp]
	WORD $0x8948; BYTE $0xde                   // mov    rsi, rbx
	WORD $0x8948; BYTE $0xc3                   // mov    rbx, rax
	WORD $0x8948; BYTE $0xd0                   // mov    rax, rdx
	JNE  LBB0_54
	JMP  LBB0_119

TEXT ·_SimdSse2MeanFilter3x3BufAllocSize(SB), 7, $0-24

	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI

	LONG $0xfeaf0f48         // imul    rdi, rsi
	LONG $0x0fc78348         // add    rdi, 15
	LONG $0xf0e78348         // and    rdi, -16
	WORD $0x0148; BYTE $0xff // add    rdi, rdi
	LONG $0x7f048d48         // lea    rax, [rdi + 2*rdi]

	MOVQ AX, ret+16(FP)
	RET
