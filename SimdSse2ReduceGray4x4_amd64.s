//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x008(SB)/8, $0x00ff00ff00ff00ff
DATA LCDATA1<>+0x010(SB)/8, $0x0003000300030003
DATA LCDATA1<>+0x018(SB)/8, $0x0003000300030003
DATA LCDATA1<>+0x020(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x028(SB)/8, $0xff00000000000000
DATA LCDATA1<>+0x030(SB)/8, $0x0020002000200020
DATA LCDATA1<>+0x038(SB)/8, $0x0020002000200020
GLOBL LCDATA1<>(SB), 8, $64

TEXT Â·_SimdSse2ReduceGray4x4(SB), 7, $56-72

	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	LEAQ LCDATA1<>(SB), BP
	SUBQ $56, SP

	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x246c8b4c; BYTE $0x58                     // mov    r13, qword 88[rsp] /* [rbp + 32] */
	WORD $0x8948; BYTE $0xf1                         // mov    rcx, rsi
	LONG $0xfee18348                                 // and    rcx, -2
	WORD $0x894d; BYTE $0xce                         // mov    r14, r9
	LONG $0xf8e68349                                 // and    r14, -8
	LONG $0xf1468d48                                 // lea    rax, [rsi - 15]
	LONG $0xfee08348                                 // and    rax, -2
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	LONG $0x0f598d49                                 // lea    rbx, [r9 + 15]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	WORD $0x2148; BYTE $0xd8                         // and    rax, rbx
	LONG $0x0000ffbb; BYTE $0x00                     // mov    ebx, 255
	LONG $0xcb6e0f66                                 // movd    xmm1, ebx
	LONG $0x455c8d49; BYTE $0x00                     // lea    rbx, [r13 + 2*rax]
	WORD $0x3948; BYTE $0xf1                         // cmp    rcx, rsi
	LONG $0x43148d4c                                 // lea    r10, [rbx + 2*rax]
	LONG $0x176f0ff3                                 // movdqu    xmm2, [rdi]
	LONG $0x5f6f0ff3; BYTE $0x01                     // movdqu    xmm3, [rdi + 1]
	LONG $0xc26f0f66                                 // movdqa    xmm0, xmm2
	LONG $0xf8730f66; BYTE $0x01                     // pslldq    xmm0, 1
	LONG $0xcadb0f66                                 // pand    xmm1, xmm2
	LONG $0xc8eb0f66                                 // por    xmm1, xmm0
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0xc8db0f66                                 // pand    xmm1, xmm0
	LONG $0xd0db0f66                                 // pand    xmm2, xmm0
	LONG $0xe36f0f66                                 // movdqa    xmm4, xmm3
	LONG $0xe0db0f66                                 // pand    xmm4, xmm0
	LONG $0xd3710f66; BYTE $0x08                     // psrlw    xmm3, 8
	LONG $0xe2fd0f66                                 // paddw    xmm4, xmm2
	LONG $0x65d50f66; BYTE $0x10                     // pmullw    xmm4, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0xe1fd0f66                                 // paddw    xmm4, xmm1
	LONG $0xe3fd0f66                                 // paddw    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x0065                   // movdqa    [r13], xmm4
	LONG $0x7f0f4166; WORD $0x4564; BYTE $0x00       // movdqa    [r13 + 2*rax], xmm4
	LONG $0x42048d49                                 // lea    rax, [r10 + 2*rax]
	LONG $0xf0668d4c                                 // lea    r12, [rsi - 16]
	JNE  LBB0_15
	LONG $0x11fc8349                                 // cmp    r12, 17
	JB   LBB0_4
	LONG $0x094c8d4b; BYTE $0x1e                     // lea    rcx, [r9 + r9 + 30]
	LONG $0xe0e18348                                 // and    rcx, -32
	LONG $0x295c8d4e; BYTE $0x10                     // lea    r11, [rcx + r13 + 16]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x4d6f0f66; BYTE $0x10                     // movdqa    xmm1, 16[rbp] /* [rip + .LCPI0_1] */

LBB0_3:
	LONG $0x546f0ff3; WORD $0x0f37             // movdqu    xmm2, [rdi + rsi + 15]
	LONG $0x5c6f0ff3; WORD $0x1137             // movdqu    xmm3, [rdi + rsi + 17]
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd2710f66; BYTE $0x08               // psrlw    xmm2, 8
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe8db0f66                           // pand    xmm5, xmm0
	LONG $0xd3710f66; BYTE $0x08               // psrlw    xmm3, 8
	LONG $0xdcfd0f66                           // paddw    xmm3, xmm4
	LONG $0xeafd0f66                           // paddw    xmm5, xmm2
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0x7f0f4166; WORD $0x356c; BYTE $0x10 // movdqa    [r13 + rsi + 16], xmm5
	LONG $0x7f0f4166; WORD $0x332c             // movdqa    [r11 + rsi], xmm5
	LONG $0x104e8d48                           // lea    rcx, [rsi + 16]
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x394c; BYTE $0xe6                   // cmp    rsi, r12
	WORD $0x8948; BYTE $0xce                   // mov    rsi, rcx
	JB   LBB0_3

LBB0_4:
	LONG $0x244c8b48; BYTE $0x30               // mov    rcx, qword [rsp + 48]
	LONG $0x4c6f0ff3; WORD $0xff0f             // movdqu    xmm1, [rdi + rcx - 1]
	LONG $0x146f0ff3; BYTE $0x0f               // movdqu    xmm2, [rdi + rcx]
	LONG $0x247c8948; BYTE $0x20               // mov    qword [rsp + 32], rdi
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdb730f66; BYTE $0x01               // psrldq    xmm3, 1
	LONG $0x656f0f66; BYTE $0x20               // movdqa    xmm4, 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0xe2db0f66                           // pand    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xd4710f66; BYTE $0x08               // psrlw    xmm4, 8
	LONG $0xdafd0f66                           // paddw    xmm3, xmm2
	LONG $0x5dd50f66; BYTE $0x10               // pmullw    xmm3, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0xd9fd0f66                           // paddw    xmm3, xmm1
	LONG $0xdcfd0f66                           // paddw    xmm3, xmm4
	WORD $0x894c; BYTE $0xc9                   // mov    rcx, r9
	LONG $0x244c8948; BYTE $0x10               // mov    qword [rsp + 16], rcx
	LONG $0x7f0f41f3; WORD $0x4d5c; BYTE $0xf0 // movdqu    [r13 + 2*rcx - 16], xmm3
	WORD $0x8948; BYTE $0xde                   // mov    rsi, rbx
	LONG $0x5c7f0ff3; WORD $0xf04e             // movdqu    [rsi + 2*rcx - 16], xmm3
	WORD $0x8548; BYTE $0xd2                   // test    rdx, rdx
	JE   LBB0_29
	LONG $0x24548948; BYTE $0x18               // mov    qword [rsp + 24], rdx
	LONG $0xfe4a8d48                           // lea    rcx, [rdx - 2]
	LONG $0x244c8948; BYTE $0x08               // mov    qword [rsp + 8], rcx
	LONG $0xff4a8d48                           // lea    rcx, [rdx - 1]
	LONG $0x4caf0f48; WORD $0x2824             // imul    rcx, qword [rsp + 40]
	LONG $0x244c0348; BYTE $0x20               // add    rcx, qword [rsp + 32]
	LONG $0x240c8948                           // mov    qword [rsp], rcx
	WORD $0x3145; BYTE $0xc9                   // xor    r9d, r9d
	LONG $0x0000ffb9; BYTE $0x00               // mov    ecx, 255
	LONG $0x6e0f4466; BYTE $0xc9               // movd    xmm9, ecx
	LONG $0x556f0f66; BYTE $0x10               // movdqa    xmm2, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0x6f0f4466; WORD $0x2045             // movdqa    xmm8, 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0xedef0f66                           // pxor    xmm5, xmm5

LBB0_6:
	WORD $0x8949; BYTE $0xf7     // mov    r15, rsi
	WORD $0x894d; BYTE $0xeb     // mov    r11, r13
	WORD $0x894c; BYTE $0xc9     // mov    rcx, r9
	LONG $0x01c98348             // or    rcx, 1
	LONG $0x24548b48; BYTE $0x28 // mov    rdx, qword [rsp + 40]
	LONG $0xcaaf0f48             // imul    rcx, rdx
	LONG $0x244c0348; BYTE $0x20 // add    rcx, qword [rsp + 32]
	LONG $0x244c3b4c; BYTE $0x08 // cmp    r9, qword [rsp + 8]
	LONG $0x241c8b48             // mov    rbx, qword [rsp]
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	LONG $0xf1420f48             // cmovb    rsi, rcx
	LONG $0x113c8d48             // lea    rdi, [rcx + rdx]
	LONG $0xfb430f48             // cmovae    rdi, rbx
	LONG $0x1e6f0ff3             // movdqu    xmm3, [rsi]
	LONG $0x7e6f0ff3; BYTE $0x01 // movdqu    xmm7, [rsi + 1]
	LONG $0xcb6f0f66             // movdqa    xmm1, xmm3
	LONG $0xf9730f66; BYTE $0x01 // pslldq    xmm1, 1
	LONG $0xf36f0f66             // movdqa    xmm6, xmm3
	LONG $0xdb0f4166; BYTE $0xf1 // pand    xmm6, xmm9
	LONG $0xf1eb0f66             // por    xmm6, xmm1
	LONG $0xf0db0f66             // pand    xmm6, xmm0
	LONG $0xd8db0f66             // pand    xmm3, xmm0
	LONG $0xcf6f0f66             // movdqa    xmm1, xmm7
	LONG $0xc8db0f66             // pand    xmm1, xmm0
	LONG $0xd7710f66; BYTE $0x08 // psrlw    xmm7, 8
	LONG $0xcbfd0f66             // paddw    xmm1, xmm3
	LONG $0xcad50f66             // pmullw    xmm1, xmm2
	LONG $0xcefd0f66             // paddw    xmm1, xmm6
	LONG $0xcffd0f66             // paddw    xmm1, xmm7
	LONG $0x7f0f4166; BYTE $0x0a // movdqa    [r10], xmm1
	LONG $0x0f6f0ff3             // movdqu    xmm1, [rdi]
	LONG $0x5f6f0ff3; BYTE $0x01 // movdqu    xmm3, [rdi + 1]
	LONG $0xf16f0f66             // movdqa    xmm6, xmm1
	LONG $0xfe730f66; BYTE $0x01 // pslldq    xmm6, 1
	LONG $0xf96f0f66             // movdqa    xmm7, xmm1
	LONG $0xdb0f4166; BYTE $0xf9 // pand    xmm7, xmm9
	LONG $0xfeeb0f66             // por    xmm7, xmm6
	LONG $0xf8db0f66             // pand    xmm7, xmm0
	LONG $0xc8db0f66             // pand    xmm1, xmm0
	LONG $0xf36f0f66             // movdqa    xmm6, xmm3
	LONG $0xf0db0f66             // pand    xmm6, xmm0
	LONG $0xd3710f66; BYTE $0x08 // psrlw    xmm3, 8
	LONG $0xf1fd0f66             // paddw    xmm6, xmm1
	LONG $0xf2d50f66             // pmullw    xmm6, xmm2
	LONG $0xf7fd0f66             // paddw    xmm6, xmm7
	LONG $0xf3fd0f66             // paddw    xmm6, xmm3
	LONG $0x307f0f66             // movdqa    [rax], xmm6
	LONG $0x11fc8349             // cmp    r12, 17
	JB   LBB0_9
	WORD $0xc931                 // xor    ecx, ecx

LBB0_8:
	LONG $0x4c6f0ff3; WORD $0x0f0e             // movdqu    xmm1, [rsi + rcx + 15]
	LONG $0x5c6f0ff3; WORD $0x110e             // movdqu    xmm3, [rsi + rcx + 17]
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xd1710f66; BYTE $0x08               // psrlw    xmm1, 8
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xf8db0f66                           // pand    xmm7, xmm0
	LONG $0xd3710f66; BYTE $0x08               // psrlw    xmm3, 8
	LONG $0xdefd0f66                           // paddw    xmm3, xmm6
	LONG $0xf9fd0f66                           // paddw    xmm7, xmm1
	LONG $0xfad50f66                           // pmullw    xmm7, xmm2
	LONG $0xfbfd0f66                           // paddw    xmm7, xmm3
	LONG $0x7f0f4166; WORD $0x0a7c; BYTE $0x10 // movdqa    [r10 + rcx + 16], xmm7
	LONG $0x4c6f0ff3; WORD $0x0f0f             // movdqu    xmm1, [rdi + rcx + 15]
	LONG $0x5c6f0ff3; WORD $0x110f             // movdqu    xmm3, [rdi + rcx + 17]
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xd1710f66; BYTE $0x08               // psrlw    xmm1, 8
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xf8db0f66                           // pand    xmm7, xmm0
	LONG $0xd3710f66; BYTE $0x08               // psrlw    xmm3, 8
	LONG $0xdefd0f66                           // paddw    xmm3, xmm6
	LONG $0xf9fd0f66                           // paddw    xmm7, xmm1
	LONG $0xfad50f66                           // pmullw    xmm7, xmm2
	LONG $0xfbfd0f66                           // paddw    xmm7, xmm3
	LONG $0x7c7f0f66; WORD $0x1008             // movdqa    [rax + rcx + 16], xmm7
	LONG $0x10518d48                           // lea    rdx, [rcx + 16]
	LONG $0x20c18348                           // add    rcx, 32
	WORD $0x394c; BYTE $0xe1                   // cmp    rcx, r12
	WORD $0x8948; BYTE $0xd1                   // mov    rcx, rdx
	JB   LBB0_8

LBB0_9:
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	LONG $0x244c8b48; BYTE $0x30               // mov    rcx, qword [rsp + 48]
	LONG $0x4c6f0ff3; WORD $0xff0e             // movdqu    xmm1, [rsi + rcx - 1]
	LONG $0x1c6f0ff3; BYTE $0x0e               // movdqu    xmm3, [rsi + rcx]
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xde730f66; BYTE $0x01               // psrldq    xmm6, 1
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xfeeb0f66                           // por    xmm7, xmm6
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xd7710f66; BYTE $0x08               // psrlw    xmm7, 8
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xf2d50f66                           // pmullw    xmm6, xmm2
	LONG $0xf1fd0f66                           // paddw    xmm6, xmm1
	LONG $0xf7fd0f66                           // paddw    xmm6, xmm7
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x7f0f41f3; WORD $0x5274; BYTE $0xf0 // movdqu    [r10 + 2*rdx - 16], xmm6
	LONG $0x4c6f0ff3; WORD $0xff0f             // movdqu    xmm1, [rdi + rcx - 1]
	LONG $0x1c6f0ff3; BYTE $0x0f               // movdqu    xmm3, [rdi + rcx]
	LONG $0xf36f0f66                           // movdqa    xmm6, xmm3
	LONG $0xde730f66; BYTE $0x01               // psrldq    xmm6, 1
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xfeeb0f66                           // por    xmm7, xmm6
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xd7710f66; BYTE $0x08               // psrlw    xmm7, 8
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xf2d50f66                           // pmullw    xmm6, xmm2
	LONG $0xf1fd0f66                           // paddw    xmm6, xmm1
	LONG $0xf7fd0f66                           // paddw    xmm6, xmm7
	LONG $0x747f0ff3; WORD $0xf050             // movdqu    [rax + 2*rdx - 16], xmm6
	JE   LBB0_12
	WORD $0xc931                               // xor    ecx, ecx

LBB0_11:
	LONG $0x6f0f4166; WORD $0x4b0c // movdqa    xmm1, [r11 + 2*rcx]
	LONG $0x6f0f4166; WORD $0x4a1c // movdqa    xmm3, [r10 + 2*rcx]
	LONG $0xfd0f4166; WORD $0x4f1c // paddw    xmm3, [r15 + 2*rcx]
	LONG $0xdad50f66               // pmullw    xmm3, xmm2
	LONG $0x0cfd0f66; BYTE $0x48   // paddw    xmm1, [rax + 2*rcx]
	LONG $0xcbfd0f66               // paddw    xmm1, xmm3
	LONG $0xccfd0f66               // paddw    xmm1, xmm4
	LONG $0xd1710f66; BYTE $0x06   // psrlw    xmm1, 6
	LONG $0xc8db0f66               // pand    xmm1, xmm0
	LONG $0xcd670f66               // packuswb    xmm1, xmm5
	LONG $0xd60f4166; WORD $0x080c // movq    qword [r8 + rcx], xmm1
	LONG $0x08c18348               // add    rcx, 8
	WORD $0x394c; BYTE $0xf1       // cmp    rcx, r14
	JB   LBB0_11

LBB0_12:
	WORD $0x3949; BYTE $0xd6                   // cmp    r14, rdx
	JE   LBB0_14
	LONG $0x6f0f41f3; WORD $0x534c; BYTE $0xf0 // movdqu    xmm1, [r11 + 2*rdx - 16]
	LONG $0x6f0f41f3; WORD $0x575c; BYTE $0xf0 // movdqu    xmm3, [r15 + 2*rdx - 16]
	LONG $0x6f0f41f3; WORD $0x5274; BYTE $0xf0 // movdqu    xmm6, [r10 + 2*rdx - 16]
	LONG $0x7c6f0ff3; WORD $0xf050             // movdqu    xmm7, [rax + 2*rdx - 16]
	LONG $0xf3fd0f66                           // paddw    xmm6, xmm3
	LONG $0xf2d50f66                           // pmullw    xmm6, xmm2
	LONG $0xf9fd0f66                           // paddw    xmm7, xmm1
	LONG $0xfefd0f66                           // paddw    xmm7, xmm6
	LONG $0xfcfd0f66                           // paddw    xmm7, xmm4
	LONG $0xd7710f66; BYTE $0x06               // psrlw    xmm7, 6
	LONG $0xf8db0f66                           // pand    xmm7, xmm0
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0xd60f4166; WORD $0x107c; BYTE $0xf8 // movq    qword [r8 + rdx - 8], xmm7

LBB0_14:
	LONG $0x02c18349             // add    r9, 2
	LONG $0x2444034c; BYTE $0x50 // add    r8, qword 80[rsp] /* [rbp + 24] */
	LONG $0x244c3b4c; BYTE $0x18 // cmp    r9, qword [rsp + 24]
	WORD $0x894d; BYTE $0xd5     // mov    r13, r10
	WORD $0x8948; BYTE $0xc6     // mov    rsi, rax
	WORD $0x894d; BYTE $0xda     // mov    r10, r11
	WORD $0x894c; BYTE $0xf8     // mov    rax, r15
	JB   LBB0_6
	JMP  LBB0_29

LBB0_15:
	LONG $0x11fc8349             // cmp    r12, 17
	JB   LBB0_18
	LONG $0x094c8d4b; BYTE $0x1e // lea    rcx, [r9 + r9 + 30]
	LONG $0xe0e18348             // and    rcx, -32
	LONG $0x295c8d4e; BYTE $0x10 // lea    r11, [rcx + r13 + 16]
	WORD $0xf631                 // xor    esi, esi
	LONG $0x4d6f0f66; BYTE $0x10 // movdqa    xmm1, 16[rbp] /* [rip + .LCPI0_1] */

LBB0_17:
	LONG $0x546f0ff3; WORD $0x0f37             // movdqu    xmm2, [rdi + rsi + 15]
	LONG $0x5c6f0ff3; WORD $0x1137             // movdqu    xmm3, [rdi + rsi + 17]
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe0db0f66                           // pand    xmm4, xmm0
	LONG $0xd2710f66; BYTE $0x08               // psrlw    xmm2, 8
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0xe8db0f66                           // pand    xmm5, xmm0
	LONG $0xd3710f66; BYTE $0x08               // psrlw    xmm3, 8
	LONG $0xdcfd0f66                           // paddw    xmm3, xmm4
	LONG $0xeafd0f66                           // paddw    xmm5, xmm2
	LONG $0xe9d50f66                           // pmullw    xmm5, xmm1
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0x7f0f4166; WORD $0x356c; BYTE $0x10 // movdqa    [r13 + rsi + 16], xmm5
	LONG $0x7f0f4166; WORD $0x332c             // movdqa    [r11 + rsi], xmm5
	LONG $0x104e8d48                           // lea    rcx, [rsi + 16]
	LONG $0x20c68348                           // add    rsi, 32
	WORD $0x394c; BYTE $0xe6                   // cmp    rsi, r12
	WORD $0x8948; BYTE $0xce                   // mov    rsi, rcx
	JB   LBB0_17

LBB0_18:
	LONG $0x244c8b48; BYTE $0x30               // mov    rcx, qword [rsp + 48]
	LONG $0x546f0ff3; WORD $0xff0f             // movdqu    xmm2, [rdi + rcx - 1]
	LONG $0x247c8948; BYTE $0x20               // mov    qword [rsp + 32], rdi
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdb730f66; BYTE $0x01               // psrldq    xmm3, 1
	LONG $0x6f0f4466; WORD $0x2045             // movdqa    xmm8, 32[rbp] /* [rip + .LCPI0_2] */
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0xdd730f66; BYTE $0x01               // psrldq    xmm5, 1
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0xe5eb0f66                           // por    xmm4, xmm5
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xe8db0f66                           // pand    xmm5, xmm0
	LONG $0xd4710f66; BYTE $0x08               // psrlw    xmm4, 8
	LONG $0xebfd0f66                           // paddw    xmm5, xmm3
	LONG $0x6dd50f66; BYTE $0x10               // pmullw    xmm5, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0xeafd0f66                           // paddw    xmm5, xmm2
	LONG $0xecfd0f66                           // paddw    xmm5, xmm4
	WORD $0x894d; BYTE $0xcb                   // mov    r11, r9
	LONG $0x7f0f43f3; WORD $0x5d6c; BYTE $0xf0 // movdqu    [r13 + 2*r11 - 16], xmm5
	WORD $0x8948; BYTE $0xdf                   // mov    rdi, rbx
	LONG $0x7f0f42f3; WORD $0x5f6c; BYTE $0xf0 // movdqu    [rdi + 2*r11 - 16], xmm5
	WORD $0x8548; BYTE $0xd2                   // test    rdx, rdx
	JE   LBB0_29
	LONG $0x24548948; BYTE $0x18               // mov    qword [rsp + 24], rdx
	LONG $0xfe4a8d48                           // lea    rcx, [rdx - 2]
	LONG $0x244c8948; BYTE $0x08               // mov    qword [rsp + 8], rcx
	LONG $0xff4a8d4c                           // lea    r9, [rdx - 1]
	LONG $0x4caf0f4c; WORD $0x2824             // imul    r9, qword [rsp + 40]
	LONG $0x244c034c; BYTE $0x20               // add    r9, qword [rsp + 32]
	WORD $0xf631                               // xor    esi, esi
	LONG $0x0000ffba; BYTE $0x00               // mov    edx, 255
	LONG $0x6e0f4466; BYTE $0xca               // movd    xmm9, edx
	LONG $0x5d6f0f66; BYTE $0x10               // movdqa    xmm3, 16[rbp] /* [rip + .LCPI0_1] */
	LONG $0x656f0f66; BYTE $0x30               // movdqa    xmm4, 48[rbp] /* [rip + .LCPI0_3] */
	LONG $0xedef0f66                           // pxor    xmm5, xmm5

LBB0_20:
	WORD $0x8949; BYTE $0xff     // mov    r15, rdi
	WORD $0x894c; BYTE $0xeb     // mov    rbx, r13
	WORD $0x8948; BYTE $0xf2     // mov    rdx, rsi
	LONG $0x01ca8348             // or    rdx, 1
	LONG $0x244c8b48; BYTE $0x28 // mov    rcx, qword [rsp + 40]
	LONG $0xd1af0f48             // imul    rdx, rcx
	LONG $0x24540348; BYTE $0x20 // add    rdx, qword [rsp + 32]
	LONG $0x24743b48; BYTE $0x08 // cmp    rsi, qword [rsp + 8]
	WORD $0x8949; BYTE $0xf5     // mov    r13, rsi
	WORD $0x894c; BYTE $0xce     // mov    rsi, r9
	LONG $0xf2420f48             // cmovb    rsi, rdx
	LONG $0x0a148d48             // lea    rdx, [rdx + rcx]
	LONG $0xd1430f49             // cmovae    rdx, r9
	LONG $0x0e6f0ff3             // movdqu    xmm1, [rsi]
	LONG $0x7e6f0ff3; BYTE $0x01 // movdqu    xmm7, [rsi + 1]
	LONG $0xd16f0f66             // movdqa    xmm2, xmm1
	LONG $0xfa730f66; BYTE $0x01 // pslldq    xmm2, 1
	LONG $0xf16f0f66             // movdqa    xmm6, xmm1
	LONG $0xdb0f4166; BYTE $0xf1 // pand    xmm6, xmm9
	LONG $0xf2eb0f66             // por    xmm6, xmm2
	LONG $0xf0db0f66             // pand    xmm6, xmm0
	LONG $0xc8db0f66             // pand    xmm1, xmm0
	LONG $0xd76f0f66             // movdqa    xmm2, xmm7
	LONG $0xd0db0f66             // pand    xmm2, xmm0
	LONG $0xd7710f66; BYTE $0x08 // psrlw    xmm7, 8
	LONG $0xd1fd0f66             // paddw    xmm2, xmm1
	LONG $0xd3d50f66             // pmullw    xmm2, xmm3
	LONG $0xd6fd0f66             // paddw    xmm2, xmm6
	LONG $0xd7fd0f66             // paddw    xmm2, xmm7
	LONG $0x7f0f4166; BYTE $0x12 // movdqa    [r10], xmm2
	LONG $0x0a6f0ff3             // movdqu    xmm1, [rdx]
	LONG $0x526f0ff3; BYTE $0x01 // movdqu    xmm2, [rdx + 1]
	LONG $0xf16f0f66             // movdqa    xmm6, xmm1
	LONG $0xfe730f66; BYTE $0x01 // pslldq    xmm6, 1
	LONG $0xf96f0f66             // movdqa    xmm7, xmm1
	LONG $0xdb0f4166; BYTE $0xf9 // pand    xmm7, xmm9
	LONG $0xfeeb0f66             // por    xmm7, xmm6
	LONG $0xf8db0f66             // pand    xmm7, xmm0
	LONG $0xc8db0f66             // pand    xmm1, xmm0
	LONG $0xf26f0f66             // movdqa    xmm6, xmm2
	LONG $0xf0db0f66             // pand    xmm6, xmm0
	LONG $0xd2710f66; BYTE $0x08 // psrlw    xmm2, 8
	LONG $0xf1fd0f66             // paddw    xmm6, xmm1
	LONG $0xf3d50f66             // pmullw    xmm6, xmm3
	LONG $0xf7fd0f66             // paddw    xmm6, xmm7
	LONG $0xf2fd0f66             // paddw    xmm6, xmm2
	LONG $0x307f0f66             // movdqa    [rax], xmm6
	LONG $0x11fc8349             // cmp    r12, 17
	JB   LBB0_23
	WORD $0xff31                 // xor    edi, edi

LBB0_22:
	LONG $0x4c6f0ff3; WORD $0x0f3e             // movdqu    xmm1, [rsi + rdi + 15]
	LONG $0x546f0ff3; WORD $0x113e             // movdqu    xmm2, [rsi + rdi + 17]
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xd1710f66; BYTE $0x08               // psrlw    xmm1, 8
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xf8db0f66                           // pand    xmm7, xmm0
	LONG $0xd2710f66; BYTE $0x08               // psrlw    xmm2, 8
	LONG $0xd6fd0f66                           // paddw    xmm2, xmm6
	LONG $0xf9fd0f66                           // paddw    xmm7, xmm1
	LONG $0xfbd50f66                           // pmullw    xmm7, xmm3
	LONG $0xfafd0f66                           // paddw    xmm7, xmm2
	LONG $0x7f0f4166; WORD $0x3a7c; BYTE $0x10 // movdqa    [r10 + rdi + 16], xmm7
	LONG $0x4c6f0ff3; WORD $0x0f3a             // movdqu    xmm1, [rdx + rdi + 15]
	LONG $0x546f0ff3; WORD $0x113a             // movdqu    xmm2, [rdx + rdi + 17]
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xf0db0f66                           // pand    xmm6, xmm0
	LONG $0xd1710f66; BYTE $0x08               // psrlw    xmm1, 8
	LONG $0xfa6f0f66                           // movdqa    xmm7, xmm2
	LONG $0xf8db0f66                           // pand    xmm7, xmm0
	LONG $0xd2710f66; BYTE $0x08               // psrlw    xmm2, 8
	LONG $0xd6fd0f66                           // paddw    xmm2, xmm6
	LONG $0xf9fd0f66                           // paddw    xmm7, xmm1
	LONG $0xfbd50f66                           // pmullw    xmm7, xmm3
	LONG $0xfafd0f66                           // paddw    xmm7, xmm2
	LONG $0x7c7f0f66; WORD $0x1038             // movdqa    [rax + rdi + 16], xmm7
	LONG $0x104f8d48                           // lea    rcx, [rdi + 16]
	LONG $0x20c78348                           // add    rdi, 32
	WORD $0x394c; BYTE $0xe7                   // cmp    rdi, r12
	WORD $0x8948; BYTE $0xcf                   // mov    rdi, rcx
	JB   LBB0_22

LBB0_23:
	WORD $0x854d; BYTE $0xf6                   // test    r14, r14
	LONG $0x244c8b48; BYTE $0x30               // mov    rcx, qword [rsp + 48]
	LONG $0x4c6f0ff3; WORD $0xff0e             // movdqu    xmm1, [rsi + rcx - 1]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xda730f66; BYTE $0x01               // psrldq    xmm2, 1
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xdb0f4166; BYTE $0xf0               // pand    xmm6, xmm8
	LONG $0xf2eb0f66                           // por    xmm6, xmm2
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xdf730f66; BYTE $0x01               // psrldq    xmm7, 1
	LONG $0xdb0f4166; BYTE $0xf0               // pand    xmm6, xmm8
	LONG $0xf7eb0f66                           // por    xmm6, xmm7
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0xf8db0f66                           // pand    xmm7, xmm0
	LONG $0xd6710f66; BYTE $0x08               // psrlw    xmm6, 8
	LONG $0xfafd0f66                           // paddw    xmm7, xmm2
	LONG $0xfbd50f66                           // pmullw    xmm7, xmm3
	LONG $0xf9fd0f66                           // paddw    xmm7, xmm1
	LONG $0xfefd0f66                           // paddw    xmm7, xmm6
	LONG $0x7f0f43f3; WORD $0x5a7c; BYTE $0xf0 // movdqu    [r10 + 2*r11 - 16], xmm7
	LONG $0x4c6f0ff3; WORD $0xff0a             // movdqu    xmm1, [rdx + rcx - 1]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xda730f66; BYTE $0x01               // psrldq    xmm2, 1
	LONG $0xf16f0f66                           // movdqa    xmm6, xmm1
	LONG $0xdb0f4166; BYTE $0xf0               // pand    xmm6, xmm8
	LONG $0xf2eb0f66                           // por    xmm6, xmm2
	LONG $0xfe6f0f66                           // movdqa    xmm7, xmm6
	LONG $0xdf730f66; BYTE $0x01               // psrldq    xmm7, 1
	LONG $0xdb0f4166; BYTE $0xf0               // pand    xmm6, xmm8
	LONG $0xf7eb0f66                           // por    xmm6, xmm7
	LONG $0xc8db0f66                           // pand    xmm1, xmm0
	LONG $0xd0db0f66                           // pand    xmm2, xmm0
	LONG $0xf8db0f66                           // pand    xmm7, xmm0
	LONG $0xd6710f66; BYTE $0x08               // psrlw    xmm6, 8
	LONG $0xfafd0f66                           // paddw    xmm7, xmm2
	LONG $0xfbd50f66                           // pmullw    xmm7, xmm3
	LONG $0xf9fd0f66                           // paddw    xmm7, xmm1
	LONG $0xfefd0f66                           // paddw    xmm7, xmm6
	LONG $0x7f0f42f3; WORD $0x587c; BYTE $0xf0 // movdqu    [rax + 2*r11 - 16], xmm7
	JE   LBB0_26
	WORD $0xd231                               // xor    edx, edx

LBB0_25:
	LONG $0x0c6f0f66; BYTE $0x53   // movdqa    xmm1, [rbx + 2*rdx]
	LONG $0x6f0f4166; WORD $0x5214 // movdqa    xmm2, [r10 + 2*rdx]
	LONG $0xfd0f4166; WORD $0x5714 // paddw    xmm2, [r15 + 2*rdx]
	LONG $0xd3d50f66               // pmullw    xmm2, xmm3
	LONG $0x0cfd0f66; BYTE $0x50   // paddw    xmm1, [rax + 2*rdx]
	LONG $0xcafd0f66               // paddw    xmm1, xmm2
	LONG $0xccfd0f66               // paddw    xmm1, xmm4
	LONG $0xd1710f66; BYTE $0x06   // psrlw    xmm1, 6
	LONG $0xc8db0f66               // pand    xmm1, xmm0
	LONG $0xcd670f66               // packuswb    xmm1, xmm5
	LONG $0xd60f4166; WORD $0x100c // movq    qword [r8 + rdx], xmm1
	LONG $0x08c28348               // add    rdx, 8
	WORD $0x394c; BYTE $0xf2       // cmp    rdx, r14
	JB   LBB0_25

LBB0_26:
	WORD $0x394d; BYTE $0xde                   // cmp    r14, r11
	WORD $0x894c; BYTE $0xee                   // mov    rsi, r13
	JE   LBB0_28
	LONG $0x6f0f42f3; WORD $0x5b4c; BYTE $0xf0 // movdqu    xmm1, [rbx + 2*r11 - 16]
	LONG $0x6f0f43f3; WORD $0x5f54; BYTE $0xf0 // movdqu    xmm2, [r15 + 2*r11 - 16]
	LONG $0x6f0f43f3; WORD $0x5a74; BYTE $0xf0 // movdqu    xmm6, [r10 + 2*r11 - 16]
	LONG $0x6f0f42f3; WORD $0x587c; BYTE $0xf0 // movdqu    xmm7, [rax + 2*r11 - 16]
	LONG $0xf2fd0f66                           // paddw    xmm6, xmm2
	LONG $0xf3d50f66                           // pmullw    xmm6, xmm3
	LONG $0xf9fd0f66                           // paddw    xmm7, xmm1
	LONG $0xfefd0f66                           // paddw    xmm7, xmm6
	LONG $0xfcfd0f66                           // paddw    xmm7, xmm4
	LONG $0xd7710f66; BYTE $0x06               // psrlw    xmm7, 6
	LONG $0xf8db0f66                           // pand    xmm7, xmm0
	LONG $0xfd670f66                           // packuswb    xmm7, xmm5
	LONG $0xd60f4366; WORD $0x187c; BYTE $0xf8 // movq    qword [r8 + r11 - 8], xmm7

LBB0_28:
	LONG $0x02c68348             // add    rsi, 2
	LONG $0x2444034c; BYTE $0x50 // add    r8, qword 80[rsp] /* [rbp + 24] */
	LONG $0x24743b48; BYTE $0x18 // cmp    rsi, qword [rsp + 24]
	WORD $0x894d; BYTE $0xd5     // mov    r13, r10
	WORD $0x8948; BYTE $0xc7     // mov    rdi, rax
	WORD $0x8949; BYTE $0xda     // mov    r10, rbx
	WORD $0x894c; BYTE $0xf8     // mov    rax, r15
	JB   LBB0_20

LBB0_29:
	ADDQ $56, SP
	RET

TEXT Â·_SimdSse2ReduceGray4x4BufAllocSize(SB), 7, $0-16

	MOVQ arg1+0(FP), DI

	LONG $0xfd048d48; LONG $0x00000078 // lea    rax, [8*rdi + 120]
	LONG $0x80e08348                   // and    rax, -128

	MOVQ AX, ret+8(FP)
	RET
