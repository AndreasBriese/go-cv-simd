//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·_SimdSse2Binarization(SB), 7, $24-80

	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	SUBQ $24, SP

	LONG $0x4024448b               // mov    eax, dword 64[rsp] /* [rbp + 40] */
	LONG $0x245c8b48; BYTE $0x38   // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	LONG $0x24648b4c; BYTE $0x30   // mov    r12, qword 48[rsp] /* [rbp + 24] */
	LONG $0x245c8a44; BYTE $0x28   // mov    r11b, byte 40[rsp] /* [rbp + 16] */
	WORD $0xf883; BYTE $0x02       // cmp    eax, 2
	JG   LBB0_18
	WORD $0xc085                   // test    eax, eax
	JE   LBB0_35
	WORD $0xf883; BYTE $0x01       // cmp    eax, 1
	JE   LBB0_93
	WORD $0xf883; BYTE $0x02       // cmp    eax, 2
	JNE  LBB0_318
	WORD $0x8948; BYTE $0xf0       // mov    rax, rsi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JNE  LBB0_165
	WORD $0x8948; BYTE $0xf8       // mov    rax, rdi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JNE  LBB0_165
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	WORD $0x8948; BYTE $0xc3       // mov    rbx, rax
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xd8       // cmp    rax, rbx
	JNE  LBB0_165
	WORD $0x894c; BYTE $0xe0       // mov    rax, r12
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x394c; BYTE $0xe0       // cmp    rax, r12
	JNE  LBB0_165
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_158
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_11
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010ba41; WORD $0x0000 // mov    r10d, 16
	LONG $0xd2470f4c               // cmova    r10, rdx
	WORD $0xff49; BYTE $0xca       // dec    r10
	LONG $0x04eac149               // shr    r10, 4
	LONG $0x014a8d45               // lea    r9d, [r10 + 1]
	LONG $0x01e18341               // and    r9d, 1
	LONG $0xff418d4d               // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0       // sub    r8, r10
	WORD $0xd231                   // xor    edx, edx

LBB0_152:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_155
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_154:
	LONG $0x1c6f0f66; BYTE $0x1f               // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24             // movdqa    oword [r12 + rbx], xmm4
	LONG $0x5c6f0f66; WORD $0x101f             // movdqa    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c64; BYTE $0x10 // movdqa    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_154

LBB0_155:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_157
	LONG $0x1c6f0f66; BYTE $0x1f   // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0da0f66               // pminub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe1df0f66               // pandn    xmm4, xmm1
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24 // movdqa    oword [r12 + rbx], xmm4

LBB0_157:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JNE  LBB0_152
	JMP  LBB0_318

LBB0_18:
	WORD $0xf883; BYTE $0x03       // cmp    eax, 3
	JE   LBB0_186
	WORD $0xf883; BYTE $0x04       // cmp    eax, 4
	JE   LBB0_234
	WORD $0xf883; BYTE $0x05       // cmp    eax, 5
	JNE  LBB0_318
	WORD $0x8948; BYTE $0xf0       // mov    rax, rsi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JNE  LBB0_293
	WORD $0x8948; BYTE $0xf8       // mov    rax, rdi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JNE  LBB0_293
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	WORD $0x8948; BYTE $0xc3       // mov    rbx, rax
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xd8       // cmp    rax, rbx
	JNE  LBB0_293
	WORD $0x894c; BYTE $0xe0       // mov    rax, r12
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x394c; BYTE $0xe0       // cmp    rax, r12
	JNE  LBB0_293
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_289
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_28
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010ba41; WORD $0x0000 // mov    r10d, 16
	LONG $0xd2470f4c               // cmova    r10, rdx
	WORD $0xff49; BYTE $0xca       // dec    r10
	LONG $0x04eac149               // shr    r10, 4
	LONG $0x014a8d45               // lea    r9d, [r10 + 1]
	LONG $0x01e18341               // and    r9d, 1
	LONG $0xff418d4d               // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0       // sub    r8, r10
	WORD $0xd231                   // xor    edx, edx

LBB0_283:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_286
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_285:
	LONG $0x1c6f0f66; BYTE $0x1f               // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24             // movdqa    oword [r12 + rbx], xmm4
	LONG $0x5c6f0f66; WORD $0x101f             // movdqa    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c64; BYTE $0x10 // movdqa    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_285

LBB0_286:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_288
	LONG $0x1c6f0f66; BYTE $0x1f   // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0da0f66               // pminub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66               // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe2df0f66               // pandn    xmm4, xmm2
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24 // movdqa    oword [r12 + rbx], xmm4

LBB0_288:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JNE  LBB0_283
	JMP  LBB0_318

LBB0_35:
	WORD $0x8948; BYTE $0xf0       // mov    rax, rsi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JNE  LBB0_66
	WORD $0x8948; BYTE $0xf8       // mov    rax, rdi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JNE  LBB0_66
	WORD $0x8948; BYTE $0xd8       // mov    rax, rbx
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xd8       // cmp    rax, rbx
	JNE  LBB0_66
	WORD $0x894c; BYTE $0xe0       // mov    rax, r12
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x394c; BYTE $0xe0       // cmp    rax, r12
	JNE  LBB0_66
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_58
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_42
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010bb41; WORD $0x0000 // mov    r11d, 16
	LONG $0xda470f4c               // cmova    r11, rdx
	WORD $0xff49; BYTE $0xcb       // dec    r11
	WORD $0x894c; BYTE $0xd8       // mov    rax, r11
	LONG $0x04e8c148               // shr    rax, 4
	LONG $0x01708d44               // lea    r14d, [rax + 1]
	LONG $0x03e68341               // and    r14d, 3
	LONG $0xff468d4d               // lea    r8, [r14 - 1]
	WORD $0x2949; BYTE $0xc0       // sub    r8, rax
	WORD $0x894d; BYTE $0xf1       // mov    r9, r14
	WORD $0xf749; BYTE $0xd9       // neg    r9
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d

LBB0_51:
	LONG $0x30fb8349             // cmp    r11, 48
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JB   LBB0_54
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0xd231                 // xor    edx, edx

LBB0_53:
	LONG $0x1c6f0f66; BYTE $0x17               // movdqa    xmm3, oword [rdi + rdx]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x141c             // movdqa    oword [r12 + rdx], xmm3
	LONG $0x5c6f0f66; WORD $0x1017             // movdqa    xmm3, oword [rdi + rdx + 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x145c; BYTE $0x10 // movdqa    oword [r12 + rdx + 16], xmm3
	LONG $0x5c6f0f66; WORD $0x2017             // movdqa    xmm3, oword [rdi + rdx + 32]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x145c; BYTE $0x20 // movdqa    oword [r12 + rdx + 32], xmm3
	LONG $0x5c6f0f66; WORD $0x3017             // movdqa    xmm3, oword [rdi + rdx + 48]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x145c; BYTE $0x30 // movdqa    oword [r12 + rdx + 48], xmm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x04c38348                           // add    rbx, 4
	JNE  LBB0_53

LBB0_54:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_57
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9

LBB0_56:
	LONG $0x1c6f0f66; BYTE $0x17   // movdqa    xmm3, oword [rdi + rdx]
	LONG $0xd8740f66               // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe3db0f66               // pand    xmm4, xmm3
	LONG $0xdadf0f66               // pandn    xmm3, xmm2
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x141c // movdqa    oword [r12 + rdx], xmm3
	LONG $0x10c28348               // add    rdx, 16
	WORD $0xff48; BYTE $0xc0       // inc    rax
	JNE  LBB0_56

LBB0_57:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc // add    r12, rbx
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB0_51
	JMP  LBB0_318

LBB0_93:
	WORD $0x8948; BYTE $0xf0       // mov    rax, rsi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JNE  LBB0_124
	WORD $0x8948; BYTE $0xf8       // mov    rax, rdi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JNE  LBB0_124
	WORD $0x8948; BYTE $0xd8       // mov    rax, rbx
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xd8       // cmp    rax, rbx
	JNE  LBB0_124
	WORD $0x894c; BYTE $0xe0       // mov    rax, r12
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x394c; BYTE $0xe0       // cmp    rax, r12
	JNE  LBB0_124
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_116
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_100
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010bb41; WORD $0x0000 // mov    r11d, 16
	LONG $0xda470f4c               // cmova    r11, rdx
	WORD $0xff49; BYTE $0xcb       // dec    r11
	WORD $0x894c; BYTE $0xd8       // mov    rax, r11
	LONG $0x04e8c148               // shr    rax, 4
	LONG $0x01708d44               // lea    r14d, [rax + 1]
	LONG $0x03e68341               // and    r14d, 3
	LONG $0xff468d4d               // lea    r8, [r14 - 1]
	WORD $0x2949; BYTE $0xc0       // sub    r8, rax
	WORD $0x894d; BYTE $0xf1       // mov    r9, r14
	WORD $0xf749; BYTE $0xd9       // neg    r9
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d

LBB0_109:
	LONG $0x30fb8349             // cmp    r11, 48
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JB   LBB0_112
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0xd231                 // xor    edx, edx

LBB0_111:
	LONG $0x1c6f0f66; BYTE $0x17               // movdqa    xmm3, oword [rdi + rdx]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x141c             // movdqa    oword [r12 + rdx], xmm3
	LONG $0x5c6f0f66; WORD $0x1017             // movdqa    xmm3, oword [rdi + rdx + 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x145c; BYTE $0x10 // movdqa    oword [r12 + rdx + 16], xmm3
	LONG $0x5c6f0f66; WORD $0x2017             // movdqa    xmm3, oword [rdi + rdx + 32]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x145c; BYTE $0x20 // movdqa    oword [r12 + rdx + 32], xmm3
	LONG $0x5c6f0f66; WORD $0x3017             // movdqa    xmm3, oword [rdi + rdx + 48]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x145c; BYTE $0x30 // movdqa    oword [r12 + rdx + 48], xmm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x04c38348                           // add    rbx, 4
	JNE  LBB0_111

LBB0_112:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_115
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9

LBB0_114:
	LONG $0x1c6f0f66; BYTE $0x17   // movdqa    xmm3, oword [rdi + rdx]
	LONG $0xd8740f66               // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66               // movdqa    xmm4, xmm2
	LONG $0xe3db0f66               // pand    xmm4, xmm3
	LONG $0xd9df0f66               // pandn    xmm3, xmm1
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x141c // movdqa    oword [r12 + rdx], xmm3
	LONG $0x10c28348               // add    rdx, 16
	WORD $0xff48; BYTE $0xc0       // inc    rax
	JNE  LBB0_114

LBB0_115:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc // add    r12, rbx
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB0_109
	JMP  LBB0_318

LBB0_186:
	WORD $0x8948; BYTE $0xf0       // mov    rax, rsi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JNE  LBB0_213
	WORD $0x8948; BYTE $0xf8       // mov    rax, rdi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JNE  LBB0_213
	WORD $0x8948; BYTE $0xd8       // mov    rax, rbx
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xd8       // cmp    rax, rbx
	JNE  LBB0_213
	WORD $0x894c; BYTE $0xe0       // mov    rax, r12
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x394c; BYTE $0xe0       // cmp    rax, r12
	JNE  LBB0_213
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_207
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_193
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010ba41; WORD $0x0000 // mov    r10d, 16
	LONG $0xd2470f4c               // cmova    r10, rdx
	WORD $0xff49; BYTE $0xca       // dec    r10
	LONG $0x04eac149               // shr    r10, 4
	LONG $0x014a8d45               // lea    r9d, [r10 + 1]
	LONG $0x01e18341               // and    r9d, 1
	LONG $0xff418d4d               // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0       // sub    r8, r10
	WORD $0xd231                   // xor    edx, edx

LBB0_201:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_204
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_203:
	LONG $0x1c6f0f66; BYTE $0x1f               // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24             // movdqa    oword [r12 + rbx], xmm4
	LONG $0x5c6f0f66; WORD $0x101f             // movdqa    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c64; BYTE $0x10 // movdqa    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_203

LBB0_204:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_206
	LONG $0x1c6f0f66; BYTE $0x1f   // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0de0f66               // pmaxub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66               // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe2df0f66               // pandn    xmm4, xmm2
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24 // movdqa    oword [r12 + rbx], xmm4

LBB0_206:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JNE  LBB0_201
	JMP  LBB0_318

LBB0_234:
	WORD $0x8948; BYTE $0xf0       // mov    rax, rsi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf0       // cmp    rax, rsi
	JNE  LBB0_261
	WORD $0x8948; BYTE $0xf8       // mov    rax, rdi
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xf8       // cmp    rax, rdi
	JNE  LBB0_261
	WORD $0x8948; BYTE $0xd8       // mov    rax, rbx
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x3948; BYTE $0xd8       // cmp    rax, rbx
	JNE  LBB0_261
	WORD $0x894c; BYTE $0xe0       // mov    rax, r12
	LONG $0xf0e08348               // and    rax, -16
	WORD $0x394c; BYTE $0xe0       // cmp    rax, r12
	JNE  LBB0_261
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_255
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_241
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010ba41; WORD $0x0000 // mov    r10d, 16
	LONG $0xd2470f4c               // cmova    r10, rdx
	WORD $0xff49; BYTE $0xca       // dec    r10
	LONG $0x04eac149               // shr    r10, 4
	LONG $0x014a8d45               // lea    r9d, [r10 + 1]
	LONG $0x01e18341               // and    r9d, 1
	LONG $0xff418d4d               // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0       // sub    r8, r10
	WORD $0xd231                   // xor    edx, edx

LBB0_249:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_252
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_251:
	LONG $0x1c6f0f66; BYTE $0x1f               // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24             // movdqa    oword [r12 + rbx], xmm4
	LONG $0x5c6f0f66; WORD $0x101f             // movdqa    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c64; BYTE $0x10 // movdqa    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_251

LBB0_252:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_254
	LONG $0x1c6f0f66; BYTE $0x1f   // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0de0f66               // pmaxub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe1df0f66               // pandn    xmm4, xmm1
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24 // movdqa    oword [r12 + rbx], xmm4

LBB0_254:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JNE  LBB0_249
	JMP  LBB0_318

LBB0_165:
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_182
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_168
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010ba41; WORD $0x0000 // mov    r10d, 16
	LONG $0xd2470f4c               // cmova    r10, rdx
	WORD $0xff49; BYTE $0xca       // dec    r10
	LONG $0x04eac149               // shr    r10, 4
	LONG $0x014a8d45               // lea    r9d, [r10 + 1]
	LONG $0x01e18341               // and    r9d, 1
	LONG $0xff418d4d               // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0       // sub    r8, r10
	WORD $0xd231                   // xor    edx, edx

LBB0_176:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_179
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_178:
	LONG $0x1c6f0ff3; BYTE $0x1f               // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24             // movdqu    oword [r12 + rbx], xmm4
	LONG $0x5c6f0ff3; WORD $0x101f             // movdqu    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c64; BYTE $0x10 // movdqu    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_178

LBB0_179:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_181
	LONG $0x1c6f0ff3; BYTE $0x1f   // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0da0f66               // pminub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe1df0f66               // pandn    xmm4, xmm1
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24 // movdqu    oword [r12 + rbx], xmm4

LBB0_181:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JNE  LBB0_176
	JMP  LBB0_318

LBB0_293:
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_310
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_296
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010ba41; WORD $0x0000 // mov    r10d, 16
	LONG $0xd2470f4c               // cmova    r10, rdx
	WORD $0xff49; BYTE $0xca       // dec    r10
	LONG $0x04eac149               // shr    r10, 4
	LONG $0x014a8d45               // lea    r9d, [r10 + 1]
	LONG $0x01e18341               // and    r9d, 1
	LONG $0xff418d4d               // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0       // sub    r8, r10
	WORD $0xd231                   // xor    edx, edx

LBB0_304:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_307
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_306:
	LONG $0x1c6f0ff3; BYTE $0x1f               // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24             // movdqu    oword [r12 + rbx], xmm4
	LONG $0x5c6f0ff3; WORD $0x101f             // movdqu    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c64; BYTE $0x10 // movdqu    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_306

LBB0_307:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_309
	LONG $0x1c6f0ff3; BYTE $0x1f   // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0da0f66               // pminub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66               // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe2df0f66               // pandn    xmm4, xmm2
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24 // movdqu    oword [r12 + rbx], xmm4

LBB0_309:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JNE  LBB0_304
	JMP  LBB0_318

LBB0_66:
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_85
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_69
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010bb41; WORD $0x0000 // mov    r11d, 16
	LONG $0xda470f4c               // cmova    r11, rdx
	WORD $0xff49; BYTE $0xcb       // dec    r11
	WORD $0x894c; BYTE $0xd8       // mov    rax, r11
	LONG $0x04e8c148               // shr    rax, 4
	LONG $0x01708d44               // lea    r14d, [rax + 1]
	LONG $0x03e68341               // and    r14d, 3
	LONG $0xff468d4d               // lea    r8, [r14 - 1]
	WORD $0x2949; BYTE $0xc0       // sub    r8, rax
	WORD $0x894d; BYTE $0xf1       // mov    r9, r14
	WORD $0xf749; BYTE $0xd9       // neg    r9
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d

LBB0_78:
	LONG $0x30fb8349             // cmp    r11, 48
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JB   LBB0_81
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0xd231                 // xor    edx, edx

LBB0_80:
	LONG $0x1c6f0ff3; BYTE $0x17               // movdqu    xmm3, oword [rdi + rdx]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x141c             // movdqu    oword [r12 + rdx], xmm3
	LONG $0x5c6f0ff3; WORD $0x1017             // movdqu    xmm3, oword [rdi + rdx + 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x145c; BYTE $0x10 // movdqu    oword [r12 + rdx + 16], xmm3
	LONG $0x5c6f0ff3; WORD $0x2017             // movdqu    xmm3, oword [rdi + rdx + 32]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x145c; BYTE $0x20 // movdqu    oword [r12 + rdx + 32], xmm3
	LONG $0x5c6f0ff3; WORD $0x3017             // movdqu    xmm3, oword [rdi + rdx + 48]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x145c; BYTE $0x30 // movdqu    oword [r12 + rdx + 48], xmm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x04c38348                           // add    rbx, 4
	JNE  LBB0_80

LBB0_81:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_84
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9

LBB0_83:
	LONG $0x1c6f0ff3; BYTE $0x17   // movdqu    xmm3, oword [rdi + rdx]
	LONG $0xd8740f66               // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe3db0f66               // pand    xmm4, xmm3
	LONG $0xdadf0f66               // pandn    xmm3, xmm2
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x141c // movdqu    oword [r12 + rdx], xmm3
	LONG $0x10c28348               // add    rdx, 16
	WORD $0xff48; BYTE $0xc0       // inc    rax
	JNE  LBB0_83

LBB0_84:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc // add    r12, rbx
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB0_78
	JMP  LBB0_318

LBB0_124:
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_143
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_127
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010bb41; WORD $0x0000 // mov    r11d, 16
	LONG $0xda470f4c               // cmova    r11, rdx
	WORD $0xff49; BYTE $0xcb       // dec    r11
	WORD $0x894c; BYTE $0xd8       // mov    rax, r11
	LONG $0x04e8c148               // shr    rax, 4
	LONG $0x01708d44               // lea    r14d, [rax + 1]
	LONG $0x03e68341               // and    r14d, 3
	LONG $0xff468d4d               // lea    r8, [r14 - 1]
	WORD $0x2949; BYTE $0xc0       // sub    r8, rax
	WORD $0x894d; BYTE $0xf1       // mov    r9, r14
	WORD $0xf749; BYTE $0xd9       // neg    r9
	WORD $0x3145; BYTE $0xd2       // xor    r10d, r10d

LBB0_136:
	LONG $0x30fb8349             // cmp    r11, 48
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JB   LBB0_139
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0xd231                 // xor    edx, edx

LBB0_138:
	LONG $0x1c6f0ff3; BYTE $0x17               // movdqu    xmm3, oword [rdi + rdx]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x141c             // movdqu    oword [r12 + rdx], xmm3
	LONG $0x5c6f0ff3; WORD $0x1017             // movdqu    xmm3, oword [rdi + rdx + 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x145c; BYTE $0x10 // movdqu    oword [r12 + rdx + 16], xmm3
	LONG $0x5c6f0ff3; WORD $0x2017             // movdqu    xmm3, oword [rdi + rdx + 32]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x145c; BYTE $0x20 // movdqu    oword [r12 + rdx + 32], xmm3
	LONG $0x5c6f0ff3; WORD $0x3017             // movdqu    xmm3, oword [rdi + rdx + 48]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x145c; BYTE $0x30 // movdqu    oword [r12 + rdx + 48], xmm3
	LONG $0x40c28348                           // add    rdx, 64
	LONG $0x04c38348                           // add    rbx, 4
	JNE  LBB0_138

LBB0_139:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_142
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9

LBB0_141:
	LONG $0x1c6f0ff3; BYTE $0x17   // movdqu    xmm3, oword [rdi + rdx]
	LONG $0xd8740f66               // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66               // movdqa    xmm4, xmm2
	LONG $0xe3db0f66               // pand    xmm4, xmm3
	LONG $0xd9df0f66               // pandn    xmm3, xmm1
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x141c // movdqu    oword [r12 + rdx], xmm3
	LONG $0x10c28348               // add    rdx, 16
	WORD $0xff48; BYTE $0xc0       // inc    rax
	JNE  LBB0_141

LBB0_142:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc // add    r12, rbx
	WORD $0xff49; BYTE $0xc2 // inc    r10
	WORD $0x3949; BYTE $0xca // cmp    r10, rcx
	JNE  LBB0_136
	JMP  LBB0_318

LBB0_213:
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_230
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_216
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010ba41; WORD $0x0000 // mov    r10d, 16
	LONG $0xd2470f4c               // cmova    r10, rdx
	WORD $0xff49; BYTE $0xca       // dec    r10
	LONG $0x04eac149               // shr    r10, 4
	LONG $0x014a8d45               // lea    r9d, [r10 + 1]
	LONG $0x01e18341               // and    r9d, 1
	LONG $0xff418d4d               // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0       // sub    r8, r10
	WORD $0xd231                   // xor    edx, edx

LBB0_224:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_227
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_226:
	LONG $0x1c6f0ff3; BYTE $0x1f               // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24             // movdqu    oword [r12 + rbx], xmm4
	LONG $0x5c6f0ff3; WORD $0x101f             // movdqu    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c64; BYTE $0x10 // movdqu    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_226

LBB0_227:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_229
	LONG $0x1c6f0ff3; BYTE $0x1f   // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0de0f66               // pmaxub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66               // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe2df0f66               // pandn    xmm4, xmm2
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24 // movdqu    oword [r12 + rbx], xmm4

LBB0_229:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JNE  LBB0_224
	JMP  LBB0_318

LBB0_261:
	WORD $0x8548; BYTE $0xc9       // test    rcx, rcx
	JE   LBB0_318
	WORD $0x8949; BYTE $0xd6       // mov    r14, rdx
	LONG $0xf0e68349               // and    r14, -16
	LONG $0xc0b60f41               // movzx    eax, r8b
	LONG $0xc06e0f66               // movd    xmm0, eax
	LONG $0xc0600f66               // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00   // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50   // pshufd    xmm0, xmm0, 80
	LONG $0xc1b60f41               // movzx    eax, r9b
	LONG $0xc86e0f66               // movd    xmm1, eax
	LONG $0xc9600f66               // punpcklbw    xmm1, xmm1
	LONG $0xc9700ff2; BYTE $0x00   // pshuflw    xmm1, xmm1, 0
	LONG $0xc9700f66; BYTE $0x50   // pshufd    xmm1, xmm1, 80
	LONG $0xc3b60f41               // movzx    eax, r11b
	LONG $0xd06e0f66               // movd    xmm2, eax
	LONG $0xd2600f66               // punpcklbw    xmm2, xmm2
	LONG $0xd2700ff2; BYTE $0x00   // pshuflw    xmm2, xmm2, 0
	LONG $0xd2700f66; BYTE $0x50   // pshufd    xmm2, xmm2, 80
	JE   LBB0_278
	WORD $0x3949; BYTE $0xd6       // cmp    r14, rdx
	JNE  LBB0_264
	LONG $0x10fa8348               // cmp    rdx, 16
	LONG $0x0010ba41; WORD $0x0000 // mov    r10d, 16
	LONG $0xd2470f4c               // cmova    r10, rdx
	WORD $0xff49; BYTE $0xca       // dec    r10
	LONG $0x04eac149               // shr    r10, 4
	LONG $0x014a8d45               // lea    r9d, [r10 + 1]
	LONG $0x01e18341               // and    r9d, 1
	LONG $0xff418d4d               // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0       // sub    r8, r10
	WORD $0xd231                   // xor    edx, edx

LBB0_272:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_275
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_274:
	LONG $0x1c6f0ff3; BYTE $0x1f               // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24             // movdqu    oword [r12 + rbx], xmm4
	LONG $0x5c6f0ff3; WORD $0x101f             // movdqu    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c64; BYTE $0x10 // movdqu    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_274

LBB0_275:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_277
	LONG $0x1c6f0ff3; BYTE $0x1f   // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0de0f66               // pmaxub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe1df0f66               // pandn    xmm4, xmm1
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24 // movdqu    oword [r12 + rbx], xmm4

LBB0_277:
	WORD $0x0148; BYTE $0xf7 // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4 // add    r12, rax
	WORD $0xff48; BYTE $0xc2 // inc    rdx
	WORD $0x3948; BYTE $0xca // cmp    rdx, rcx
	JNE  LBB0_272
	JMP  LBB0_318

LBB0_182:
	WORD $0x3949; BYTE $0xd6     // cmp    r14, rdx
	JE   LBB0_318
	WORD $0x8941; BYTE $0xc8     // mov    r8d, ecx
	LONG $0x01e08341             // and    r8d, 1
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB0_162
	LONG $0x164c8d4c; BYTE $0xf0 // lea    r9, [rsi + rdx - 16]
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	LONG $0x13548d4c; BYTE $0xf0 // lea    r10, [rbx + rdx - 16]
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx

LBB0_185:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x2264; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm4
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f43f3; WORD $0x2224             // movdqu    oword [r10 + r12], xmm4
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_185
	JMP  LBB0_162

LBB0_310:
	WORD $0x3949; BYTE $0xd6     // cmp    r14, rdx
	JE   LBB0_318
	WORD $0x8941; BYTE $0xc8     // mov    r8d, ecx
	LONG $0x01e08341             // and    r8d, 1
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB0_314
	LONG $0x164c8d4c; BYTE $0xf0 // lea    r9, [rsi + rdx - 16]
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	LONG $0x13548d4c; BYTE $0xf0 // lea    r10, [rbx + rdx - 16]
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx

LBB0_313:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x2264; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm4
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f43f3; WORD $0x2224             // movdqu    oword [r10 + r12], xmm4
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_313
	JMP  LBB0_314

LBB0_85:
	WORD $0x3949; BYTE $0xd6 // cmp    r14, rdx
	JE   LBB0_318
	LONG $0xff418d48         // lea    rax, [rcx - 1]
	WORD $0x8941; BYTE $0xcd // mov    r13d, ecx
	LONG $0x03e58341         // and    r13d, 3
	LONG $0x03f88348         // cmp    rax, 3
	JAE  LBB0_88
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x894c; BYTE $0xe3 // mov    rbx, r12
	JMP  LBB0_90

LBB0_143:
	WORD $0x3949; BYTE $0xd6 // cmp    r14, rdx
	JE   LBB0_318
	LONG $0xff418d48         // lea    rax, [rcx - 1]
	WORD $0x8941; BYTE $0xcd // mov    r13d, ecx
	LONG $0x03e58341         // and    r13d, 3
	LONG $0x03f88348         // cmp    rax, 3
	JAE  LBB0_146
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x894d; BYTE $0xe2 // mov    r10, r12
	JMP  LBB0_148

LBB0_230:
	WORD $0x3949; BYTE $0xd6     // cmp    r14, rdx
	JE   LBB0_318
	WORD $0x8941; BYTE $0xc8     // mov    r8d, ecx
	LONG $0x01e08341             // and    r8d, 1
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB0_211
	LONG $0x164c8d4c; BYTE $0xf0 // lea    r9, [rsi + rdx - 16]
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	LONG $0x13548d4c; BYTE $0xf0 // lea    r10, [rbx + rdx - 16]
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx

LBB0_233:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x2264; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm4
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f43f3; WORD $0x2224             // movdqu    oword [r10 + r12], xmm4
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_233
	JMP  LBB0_211

LBB0_278:
	WORD $0x3949; BYTE $0xd6     // cmp    r14, rdx
	JE   LBB0_318
	WORD $0x8941; BYTE $0xc8     // mov    r8d, ecx
	LONG $0x01e08341             // and    r8d, 1
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB0_259
	LONG $0x164c8d4c; BYTE $0xf0 // lea    r9, [rsi + rdx - 16]
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	LONG $0x13548d4c; BYTE $0xf0 // lea    r10, [rbx + rdx - 16]
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx

LBB0_281:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x2264; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm4
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f43f3; WORD $0x2224             // movdqu    oword [r10 + r12], xmm4
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_281
	JMP  LBB0_259

LBB0_168:
	WORD $0xff49; BYTE $0xce // dec    r14
	LONG $0x04eec149         // shr    r14, 4
	LONG $0x01468d45         // lea    r8d, [r14 + 1]
	LONG $0x01e08341         // and    r8d, 1
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x294d; BYTE $0xf1 // sub    r9, r14
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_169:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_172
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_171:
	LONG $0x1c6f0ff3; BYTE $0x1f               // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24             // movdqu    oword [r12 + rbx], xmm4
	LONG $0x5c6f0ff3; WORD $0x101f             // movdqu    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c64; BYTE $0x10 // movdqu    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_171

LBB0_172:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_174
	LONG $0x1c6f0ff3; BYTE $0x1f   // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0da0f66               // pminub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe1df0f66               // pandn    xmm4, xmm1
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24 // movdqu    oword [r12 + rbx], xmm4

LBB0_174:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1464; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm4
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4                   // add    r12, rax
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	WORD $0x3949; BYTE $0xca                   // cmp    r10, rcx
	JNE  LBB0_169
	JMP  LBB0_318

LBB0_296:
	WORD $0xff49; BYTE $0xce // dec    r14
	LONG $0x04eec149         // shr    r14, 4
	LONG $0x01468d45         // lea    r8d, [r14 + 1]
	LONG $0x01e08341         // and    r8d, 1
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x294d; BYTE $0xf1 // sub    r9, r14
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_297:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_300
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_299:
	LONG $0x1c6f0ff3; BYTE $0x1f               // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24             // movdqu    oword [r12 + rbx], xmm4
	LONG $0x5c6f0ff3; WORD $0x101f             // movdqu    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c64; BYTE $0x10 // movdqu    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_299

LBB0_300:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_302
	LONG $0x1c6f0ff3; BYTE $0x1f   // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0da0f66               // pminub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66               // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe2df0f66               // pandn    xmm4, xmm2
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24 // movdqu    oword [r12 + rbx], xmm4

LBB0_302:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1464; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm4
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4                   // add    r12, rax
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	WORD $0x3949; BYTE $0xca                   // cmp    r10, rcx
	JNE  LBB0_297
	JMP  LBB0_318

LBB0_69:
	WORD $0xff49; BYTE $0xce // dec    r14
	WORD $0x894c; BYTE $0xf0 // mov    rax, r14
	LONG $0x04e8c148         // shr    rax, 4
	LONG $0x01408d44         // lea    r8d, [rax + 1]
	LONG $0x03e08341         // and    r8d, 3
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x2949; BYTE $0xc1 // sub    r9, rax
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0xf749; BYTE $0xdb // neg    r11
	WORD $0x3145; BYTE $0xff // xor    r15d, r15d

LBB0_70:
	LONG $0x30fe8349             // cmp    r14, 48
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JB   LBB0_73
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_72:
	LONG $0x1c6f0ff3; BYTE $0x1f               // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x1c1c             // movdqu    oword [r12 + rbx], xmm3
	LONG $0x5c6f0ff3; WORD $0x101f             // movdqu    xmm3, oword [rdi + rbx + 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x1c5c; BYTE $0x10 // movdqu    oword [r12 + rbx + 16], xmm3
	LONG $0x5c6f0ff3; WORD $0x201f             // movdqu    xmm3, oword [rdi + rbx + 32]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x1c5c; BYTE $0x20 // movdqu    oword [r12 + rbx + 32], xmm3
	LONG $0x5c6f0ff3; WORD $0x301f             // movdqu    xmm3, oword [rdi + rbx + 48]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x1c5c; BYTE $0x30 // movdqu    oword [r12 + rbx + 48], xmm3
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_72

LBB0_73:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	LONG $0x24548b4c; BYTE $0x38 // mov    r10, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_76
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11

LBB0_75:
	LONG $0x1c6f0ff3; BYTE $0x1f   // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xd8740f66               // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe3db0f66               // pand    xmm4, xmm3
	LONG $0xdadf0f66               // pandn    xmm3, xmm2
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x1c1c // movdqu    oword [r12 + rbx], xmm3
	LONG $0x10c38348               // add    rbx, 16
	WORD $0xff48; BYTE $0xc0       // inc    rax
	JNE  LBB0_75

LBB0_76:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x145c; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm3
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x014d; BYTE $0xd4                   // add    r12, r10
	WORD $0xff49; BYTE $0xc7                   // inc    r15
	WORD $0x3949; BYTE $0xcf                   // cmp    r15, rcx
	JNE  LBB0_70
	JMP  LBB0_318

LBB0_127:
	WORD $0xff49; BYTE $0xce // dec    r14
	WORD $0x894c; BYTE $0xf0 // mov    rax, r14
	LONG $0x04e8c148         // shr    rax, 4
	LONG $0x01408d44         // lea    r8d, [rax + 1]
	LONG $0x03e08341         // and    r8d, 3
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x2949; BYTE $0xc1 // sub    r9, rax
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0xf749; BYTE $0xdb // neg    r11
	WORD $0x3145; BYTE $0xff // xor    r15d, r15d

LBB0_128:
	LONG $0x30fe8349             // cmp    r14, 48
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JB   LBB0_131
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_130:
	LONG $0x1c6f0ff3; BYTE $0x1f               // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x1c1c             // movdqu    oword [r12 + rbx], xmm3
	LONG $0x5c6f0ff3; WORD $0x101f             // movdqu    xmm3, oword [rdi + rbx + 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x1c5c; BYTE $0x10 // movdqu    oword [r12 + rbx + 16], xmm3
	LONG $0x5c6f0ff3; WORD $0x201f             // movdqu    xmm3, oword [rdi + rbx + 32]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x1c5c; BYTE $0x20 // movdqu    oword [r12 + rbx + 32], xmm3
	LONG $0x5c6f0ff3; WORD $0x301f             // movdqu    xmm3, oword [rdi + rbx + 48]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x1c5c; BYTE $0x30 // movdqu    oword [r12 + rbx + 48], xmm3
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_130

LBB0_131:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	LONG $0x24548b4c; BYTE $0x38 // mov    r10, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_134
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11

LBB0_133:
	LONG $0x1c6f0ff3; BYTE $0x1f   // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xd8740f66               // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66               // movdqa    xmm4, xmm2
	LONG $0xe3db0f66               // pand    xmm4, xmm3
	LONG $0xd9df0f66               // pandn    xmm3, xmm1
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x1c1c // movdqu    oword [r12 + rbx], xmm3
	LONG $0x10c38348               // add    rbx, 16
	WORD $0xff48; BYTE $0xc0       // inc    rax
	JNE  LBB0_133

LBB0_134:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x145c; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm3
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x014d; BYTE $0xd4                   // add    r12, r10
	WORD $0xff49; BYTE $0xc7                   // inc    r15
	WORD $0x3949; BYTE $0xcf                   // cmp    r15, rcx
	JNE  LBB0_128
	JMP  LBB0_318

LBB0_216:
	WORD $0xff49; BYTE $0xce // dec    r14
	LONG $0x04eec149         // shr    r14, 4
	LONG $0x01468d45         // lea    r8d, [r14 + 1]
	LONG $0x01e08341         // and    r8d, 1
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x294d; BYTE $0xf1 // sub    r9, r14
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_217:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_220
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_219:
	LONG $0x1c6f0ff3; BYTE $0x1f               // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24             // movdqu    oword [r12 + rbx], xmm4
	LONG $0x5c6f0ff3; WORD $0x101f             // movdqu    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c64; BYTE $0x10 // movdqu    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_219

LBB0_220:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_222
	LONG $0x1c6f0ff3; BYTE $0x1f   // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0de0f66               // pmaxub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66               // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe2df0f66               // pandn    xmm4, xmm2
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24 // movdqu    oword [r12 + rbx], xmm4

LBB0_222:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1464; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm4
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4                   // add    r12, rax
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	WORD $0x3949; BYTE $0xca                   // cmp    r10, rcx
	JNE  LBB0_217
	JMP  LBB0_318

LBB0_264:
	WORD $0xff49; BYTE $0xce // dec    r14
	LONG $0x04eec149         // shr    r14, 4
	LONG $0x01468d45         // lea    r8d, [r14 + 1]
	LONG $0x01e08341         // and    r8d, 1
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x294d; BYTE $0xf1 // sub    r9, r14
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_265:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_268
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_267:
	LONG $0x1c6f0ff3; BYTE $0x1f               // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24             // movdqu    oword [r12 + rbx], xmm4
	LONG $0x5c6f0ff3; WORD $0x101f             // movdqu    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c64; BYTE $0x10 // movdqu    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_267

LBB0_268:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_270
	LONG $0x1c6f0ff3; BYTE $0x1f   // movdqu    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0de0f66               // pmaxub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe1df0f66               // pandn    xmm4, xmm1
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1c24 // movdqu    oword [r12 + rbx], xmm4

LBB0_270:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1464; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm4
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4                   // add    r12, rax
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	WORD $0x3949; BYTE $0xca                   // cmp    r10, rcx
	JNE  LBB0_265
	JMP  LBB0_318

LBB0_158:
	WORD $0x3949; BYTE $0xd6     // cmp    r14, rdx
	JE   LBB0_318
	WORD $0x8941; BYTE $0xc8     // mov    r8d, ecx
	LONG $0x01e08341             // and    r8d, 1
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB0_162
	LONG $0x164c8d4c; BYTE $0xf0 // lea    r9, [rsi + rdx - 16]
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	LONG $0x13548d4c; BYTE $0xf0 // lea    r10, [rbx + rdx - 16]
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx

LBB0_161:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x2264; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm4
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f43f3; WORD $0x2224             // movdqu    oword [r10 + r12], xmm4
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_161

LBB0_162:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB0_318
	LONG $0x5c6f0ff3; WORD $0xf017 // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xc3da0f66               // pminub    xmm0, xmm3
	JMP  LBB0_164

LBB0_289:
	WORD $0x3949; BYTE $0xd6     // cmp    r14, rdx
	JE   LBB0_318
	WORD $0x8941; BYTE $0xc8     // mov    r8d, ecx
	LONG $0x01e08341             // and    r8d, 1
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB0_314
	LONG $0x164c8d4c; BYTE $0xf0 // lea    r9, [rsi + rdx - 16]
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	LONG $0x13548d4c; BYTE $0xf0 // lea    r10, [rbx + rdx - 16]
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx

LBB0_292:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x2264; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm4
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f43f3; WORD $0x2224             // movdqu    oword [r10 + r12], xmm4
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_292

LBB0_314:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB0_318
	LONG $0x5c6f0ff3; WORD $0xf017 // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xc3da0f66               // pminub    xmm0, xmm3
	JMP  LBB0_316

LBB0_58:
	WORD $0x3949; BYTE $0xd6 // cmp    r14, rdx
	JE   LBB0_318
	LONG $0xff418d48         // lea    rax, [rcx - 1]
	WORD $0x8941; BYTE $0xcd // mov    r13d, ecx
	LONG $0x03e58341         // and    r13d, 3
	LONG $0x03f88348         // cmp    rax, 3
	JAE  LBB0_61
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x894c; BYTE $0xe3 // mov    rbx, r12
	JMP  LBB0_63

LBB0_207:
	WORD $0x3949; BYTE $0xd6     // cmp    r14, rdx
	JE   LBB0_318
	WORD $0x8941; BYTE $0xc8     // mov    r8d, ecx
	LONG $0x01e08341             // and    r8d, 1
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB0_211
	LONG $0x164c8d4c; BYTE $0xf0 // lea    r9, [rsi + rdx - 16]
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	LONG $0x13548d4c; BYTE $0xf0 // lea    r10, [rbx + rdx - 16]
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx

LBB0_210:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x2264; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm4
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f43f3; WORD $0x2224             // movdqu    oword [r10 + r12], xmm4
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_210

LBB0_211:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB0_318
	LONG $0x5c6f0ff3; WORD $0xf017 // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xc3de0f66               // pmaxub    xmm0, xmm3

LBB0_316:
	LONG $0xc3740f66 // pcmpeqb    xmm0, xmm3
	LONG $0xc8db0f66 // pand    xmm1, xmm0
	LONG $0xc2df0f66 // pandn    xmm0, xmm2
	LONG $0xc1eb0f66 // por    xmm0, xmm1
	JMP  LBB0_317

LBB0_116:
	WORD $0x3949; BYTE $0xd6 // cmp    r14, rdx
	JE   LBB0_318
	LONG $0xff418d48         // lea    rax, [rcx - 1]
	WORD $0x8941; BYTE $0xcd // mov    r13d, ecx
	LONG $0x03e58341         // and    r13d, 3
	LONG $0x03f88348         // cmp    rax, 3
	JAE  LBB0_119
	WORD $0x8948; BYTE $0xf9 // mov    rcx, rdi
	WORD $0x894c; BYTE $0xe3 // mov    rbx, r12
	JMP  LBB0_121

LBB0_255:
	WORD $0x3949; BYTE $0xd6     // cmp    r14, rdx
	JE   LBB0_318
	WORD $0x8941; BYTE $0xc8     // mov    r8d, ecx
	LONG $0x01e08341             // and    r8d, 1
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB0_259
	LONG $0x164c8d4c; BYTE $0xf0 // lea    r9, [rsi + rdx - 16]
	LONG $0x245c8b48; BYTE $0x38 // mov    rbx, qword 56[rsp] /* [rbp + 32] */
	LONG $0x13548d4c; BYTE $0xf0 // lea    r10, [rbx + rdx - 16]
	WORD $0x894c; BYTE $0xc0     // mov    rax, r8
	WORD $0x2948; BYTE $0xc8     // sub    rax, rcx

LBB0_258:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x2264; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm4
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f43f3; WORD $0x2224             // movdqu    oword [r10 + r12], xmm4
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xdc                   // add    r12, rbx
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_258

LBB0_259:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	JE   LBB0_318
	LONG $0x5c6f0ff3; WORD $0xf017 // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xc3de0f66               // pmaxub    xmm0, xmm3

LBB0_164:
	LONG $0xc3740f66 // pcmpeqb    xmm0, xmm3
	LONG $0xd0db0f66 // pand    xmm2, xmm0
	LONG $0xc1df0f66 // pandn    xmm0, xmm1
	LONG $0xc2eb0f66 // por    xmm0, xmm2

LBB0_317:
	LONG $0x7f0f41f3; WORD $0x1444; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm0

LBB0_318:
	ADDQ $24, SP
	RET

LBB0_11:
	WORD $0xff49; BYTE $0xce // dec    r14
	LONG $0x04eec149         // shr    r14, 4
	LONG $0x01468d45         // lea    r8d, [r14 + 1]
	LONG $0x01e08341         // and    r8d, 1
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x294d; BYTE $0xf1 // sub    r9, r14
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_12:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_15
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_14:
	LONG $0x1c6f0f66; BYTE $0x1f               // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24             // movdqa    oword [r12 + rbx], xmm4
	LONG $0x5c6f0f66; WORD $0x101f             // movdqa    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c64; BYTE $0x10 // movdqa    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_14

LBB0_15:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_17
	LONG $0x1c6f0f66; BYTE $0x1f   // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0da0f66               // pminub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe1df0f66               // pandn    xmm4, xmm1
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24 // movdqa    oword [r12 + rbx], xmm4

LBB0_17:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1464; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm4
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4                   // add    r12, rax
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	WORD $0x3949; BYTE $0xca                   // cmp    r10, rcx
	JNE  LBB0_12
	JMP  LBB0_318

LBB0_28:
	WORD $0xff49; BYTE $0xce // dec    r14
	LONG $0x04eec149         // shr    r14, 4
	LONG $0x01468d45         // lea    r8d, [r14 + 1]
	LONG $0x01e08341         // and    r8d, 1
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x294d; BYTE $0xf1 // sub    r9, r14
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_29:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_32
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_31:
	LONG $0x1c6f0f66; BYTE $0x1f               // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24             // movdqa    oword [r12 + rbx], xmm4
	LONG $0x5c6f0f66; WORD $0x101f             // movdqa    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c64; BYTE $0x10 // movdqa    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_31

LBB0_32:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_34
	LONG $0x1c6f0f66; BYTE $0x1f   // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0da0f66               // pminub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66               // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe2df0f66               // pandn    xmm4, xmm2
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24 // movdqa    oword [r12 + rbx], xmm4

LBB0_34:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0da0f66                           // pminub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1464; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm4
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4                   // add    r12, rax
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	WORD $0x3949; BYTE $0xca                   // cmp    r10, rcx
	JNE  LBB0_29
	JMP  LBB0_318

LBB0_42:
	WORD $0xff49; BYTE $0xce // dec    r14
	WORD $0x894c; BYTE $0xf0 // mov    rax, r14
	LONG $0x04e8c148         // shr    rax, 4
	LONG $0x01408d44         // lea    r8d, [rax + 1]
	LONG $0x03e08341         // and    r8d, 3
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x2949; BYTE $0xc1 // sub    r9, rax
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0xf749; BYTE $0xdb // neg    r11
	WORD $0x3145; BYTE $0xff // xor    r15d, r15d

LBB0_43:
	LONG $0x30fe8349             // cmp    r14, 48
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JB   LBB0_46
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_45:
	LONG $0x1c6f0f66; BYTE $0x1f               // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x1c1c             // movdqa    oword [r12 + rbx], xmm3
	LONG $0x5c6f0f66; WORD $0x101f             // movdqa    xmm3, oword [rdi + rbx + 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x1c5c; BYTE $0x10 // movdqa    oword [r12 + rbx + 16], xmm3
	LONG $0x5c6f0f66; WORD $0x201f             // movdqa    xmm3, oword [rdi + rbx + 32]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x1c5c; BYTE $0x20 // movdqa    oword [r12 + rbx + 32], xmm3
	LONG $0x5c6f0f66; WORD $0x301f             // movdqa    xmm3, oword [rdi + rbx + 48]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x1c5c; BYTE $0x30 // movdqa    oword [r12 + rbx + 48], xmm3
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_45

LBB0_46:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	LONG $0x24548b4c; BYTE $0x38 // mov    r10, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_49
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11

LBB0_48:
	LONG $0x1c6f0f66; BYTE $0x1f   // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xd8740f66               // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66               // movdqa    xmm4, xmm1
	LONG $0xe3db0f66               // pand    xmm4, xmm3
	LONG $0xdadf0f66               // pandn    xmm3, xmm2
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x1c1c // movdqa    oword [r12 + rbx], xmm3
	LONG $0x10c38348               // add    rbx, 16
	WORD $0xff48; BYTE $0xc0       // inc    rax
	JNE  LBB0_48

LBB0_49:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x145c; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm3
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x014d; BYTE $0xd4                   // add    r12, r10
	WORD $0xff49; BYTE $0xc7                   // inc    r15
	WORD $0x3949; BYTE $0xcf                   // cmp    r15, rcx
	JNE  LBB0_43
	JMP  LBB0_318

LBB0_100:
	WORD $0xff49; BYTE $0xce // dec    r14
	WORD $0x894c; BYTE $0xf0 // mov    rax, r14
	LONG $0x04e8c148         // shr    rax, 4
	LONG $0x01408d44         // lea    r8d, [rax + 1]
	LONG $0x03e08341         // and    r8d, 3
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x2949; BYTE $0xc1 // sub    r9, rax
	WORD $0x894d; BYTE $0xc3 // mov    r11, r8
	WORD $0xf749; BYTE $0xdb // neg    r11
	WORD $0x3145; BYTE $0xff // xor    r15d, r15d

LBB0_101:
	LONG $0x30fe8349             // cmp    r14, 48
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JB   LBB0_104
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_103:
	LONG $0x1c6f0f66; BYTE $0x1f               // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x1c1c             // movdqa    oword [r12 + rbx], xmm3
	LONG $0x5c6f0f66; WORD $0x101f             // movdqa    xmm3, oword [rdi + rbx + 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x1c5c; BYTE $0x10 // movdqa    oword [r12 + rbx + 16], xmm3
	LONG $0x5c6f0f66; WORD $0x201f             // movdqa    xmm3, oword [rdi + rbx + 32]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x1c5c; BYTE $0x20 // movdqa    oword [r12 + rbx + 32], xmm3
	LONG $0x5c6f0f66; WORD $0x301f             // movdqa    xmm3, oword [rdi + rbx + 48]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x1c5c; BYTE $0x30 // movdqa    oword [r12 + rbx + 48], xmm3
	LONG $0x40c38348                           // add    rbx, 64
	LONG $0x04c08348                           // add    rax, 4
	JNE  LBB0_103

LBB0_104:
	WORD $0x854d; BYTE $0xc0     // test    r8, r8
	LONG $0x24548b4c; BYTE $0x38 // mov    r10, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_107
	WORD $0x894c; BYTE $0xd8     // mov    rax, r11

LBB0_106:
	LONG $0x1c6f0f66; BYTE $0x1f   // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xd8740f66               // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66               // movdqa    xmm4, xmm2
	LONG $0xe3db0f66               // pand    xmm4, xmm3
	LONG $0xd9df0f66               // pandn    xmm3, xmm1
	LONG $0xdceb0f66               // por    xmm3, xmm4
	LONG $0x7f0f4166; WORD $0x1c1c // movdqa    oword [r12 + rbx], xmm3
	LONG $0x10c38348               // add    rbx, 16
	WORD $0xff48; BYTE $0xc0       // inc    rax
	JNE  LBB0_106

LBB0_107:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f41f3; WORD $0x145c; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm3
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x014d; BYTE $0xd4                   // add    r12, r10
	WORD $0xff49; BYTE $0xc7                   // inc    r15
	WORD $0x3949; BYTE $0xcf                   // cmp    r15, rcx
	JNE  LBB0_101
	JMP  LBB0_318

LBB0_193:
	WORD $0xff49; BYTE $0xce // dec    r14
	LONG $0x04eec149         // shr    r14, 4
	LONG $0x01468d45         // lea    r8d, [r14 + 1]
	LONG $0x01e08341         // and    r8d, 1
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x294d; BYTE $0xf1 // sub    r9, r14
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_194:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_197
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_196:
	LONG $0x1c6f0f66; BYTE $0x1f               // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24             // movdqa    oword [r12 + rbx], xmm4
	LONG $0x5c6f0f66; WORD $0x101f             // movdqa    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c64; BYTE $0x10 // movdqa    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_196

LBB0_197:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_199
	LONG $0x1c6f0f66; BYTE $0x1f   // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0de0f66               // pmaxub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66               // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe2df0f66               // pandn    xmm4, xmm2
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24 // movdqa    oword [r12 + rbx], xmm4

LBB0_199:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xd96f0f66                           // movdqa    xmm3, xmm1
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe2df0f66                           // pandn    xmm4, xmm2
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1464; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm4
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4                   // add    r12, rax
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	WORD $0x3949; BYTE $0xca                   // cmp    r10, rcx
	JNE  LBB0_194
	JMP  LBB0_318

LBB0_241:
	WORD $0xff49; BYTE $0xce // dec    r14
	LONG $0x04eec149         // shr    r14, 4
	LONG $0x01468d45         // lea    r8d, [r14 + 1]
	LONG $0x01e08341         // and    r8d, 1
	LONG $0xff488d4d         // lea    r9, [r8 - 1]
	WORD $0x294d; BYTE $0xf1 // sub    r9, r14
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_242:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x000000bb; BYTE $0x00 // mov    ebx, 0
	JE   LBB0_245
	WORD $0x894c; BYTE $0xc8     // mov    rax, r9
	WORD $0xdb31                 // xor    ebx, ebx

LBB0_244:
	LONG $0x1c6f0f66; BYTE $0x1f               // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24             // movdqa    oword [r12 + rbx], xmm4
	LONG $0x5c6f0f66; WORD $0x101f             // movdqa    xmm3, oword [rdi + rbx + 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c64; BYTE $0x10 // movdqa    oword [r12 + rbx + 16], xmm4
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c08348                           // add    rax, 2
	JNE  LBB0_244

LBB0_245:
	WORD $0x854d; BYTE $0xc0       // test    r8, r8
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword 56[rsp] /* [rbp + 32] */
	JE   LBB0_247
	LONG $0x1c6f0f66; BYTE $0x1f   // movdqa    xmm3, oword [rdi + rbx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe0de0f66               // pmaxub    xmm4, xmm0
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66               // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66               // pand    xmm3, xmm4
	LONG $0xe1df0f66               // pandn    xmm4, xmm1
	LONG $0xe3eb0f66               // por    xmm4, xmm3
	LONG $0x7f0f4166; WORD $0x1c24 // movdqa    oword [r12 + rbx], xmm4

LBB0_247:
	LONG $0x5c6f0ff3; WORD $0xf017             // movdqu    xmm3, oword [rdi + rdx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe0de0f66                           // pmaxub    xmm4, xmm0
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xdcdb0f66                           // pand    xmm3, xmm4
	LONG $0xe1df0f66                           // pandn    xmm4, xmm1
	LONG $0xe3eb0f66                           // por    xmm4, xmm3
	LONG $0x7f0f41f3; WORD $0x1464; BYTE $0xf0 // movdqu    oword [r12 + rdx - 16], xmm4
	WORD $0x0148; BYTE $0xf7                   // add    rdi, rsi
	WORD $0x0149; BYTE $0xc4                   // add    r12, rax
	WORD $0xff49; BYTE $0xc2                   // inc    r10
	WORD $0x3949; BYTE $0xca                   // cmp    r10, rcx
	JNE  LBB0_242
	JMP  LBB0_318

LBB0_88:
	LONG $0x76048d48             // lea    rax, [rsi + 2*rsi]
	LONG $0x02448d48; BYTE $0xf0 // lea    rax, [rdx + rax - 16]
	LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
	LONG $0x72448d48; BYTE $0xf0 // lea    rax, [rdx + 2*rsi - 16]
	LONG $0x24448948; BYTE $0x08 // mov    qword [rsp + 8], rax
	LONG $0x16448d48; BYTE $0xf0 // lea    rax, [rsi + rdx - 16]
	LONG $0x24048948             // mov    qword [rsp], rax
	LONG $0x24448b4c; BYTE $0x38 // mov    r8, qword 56[rsp] /* [rbp + 32] */
	LONG $0x40048d4b             // lea    rax, [r8 + 2*r8]
	LONG $0x02748d4c; BYTE $0xf0 // lea    r14, [rdx + rax - 16]
	LONG $0x427c8d4e; BYTE $0xf0 // lea    r15, [rdx + 2*r8 - 16]
	LONG $0x105c8d4d; BYTE $0xf0 // lea    r11, [r8 + rdx - 16]
	WORD $0x894d; BYTE $0xea     // mov    r10, r13
	WORD $0x2949; BYTE $0xca     // sub    r10, rcx
	LONG $0x244c8b4c; BYTE $0x10 // mov    r9, qword [rsp + 16]

LBB0_89:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f42f3; WORD $0x225c; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm3
	LONG $0x370c8d48                           // lea    rcx, [rdi + rsi]
	LONG $0x041c8d4b                           // lea    rbx, [r12 + r8]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x1c6f0ff3; BYTE $0x38               // movdqu    xmm3, oword [rax + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x231c             // movdqu    oword [r11 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014c; BYTE $0xc3                   // add    rbx, r8
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x1c6f0ff3; BYTE $0x38               // movdqu    xmm3, oword [rax + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x271c             // movdqu    oword [r15 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014c; BYTE $0xc3                   // add    rbx, r8
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x261c             // movdqu    oword [r14 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014c; BYTE $0xc3                   // add    rbx, r8
	LONG $0x04c28349                           // add    r10, 4
	WORD $0x8948; BYTE $0xcf                   // mov    rdi, rcx
	WORD $0x8949; BYTE $0xdc                   // mov    r12, rbx
	JNE  LBB0_89

LBB0_90:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	JE   LBB0_318
	LONG $0x11448d48; BYTE $0xf0 // lea    rax, [rcx + rdx - 16]
	LONG $0x134c8d48; BYTE $0xf0 // lea    rcx, [rbx + rdx - 16]
	WORD $0xf749; BYTE $0xdd     // neg    r13

LBB0_92:
	LONG $0x186f0ff3             // movdqu    xmm3, oword [rax]
	LONG $0xd8740f66             // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66             // movdqa    xmm4, xmm1
	LONG $0xe3db0f66             // pand    xmm4, xmm3
	LONG $0xdadf0f66             // pandn    xmm3, xmm2
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x197f0ff3             // movdqu    oword [rcx], xmm3
	WORD $0x0148; BYTE $0xf0     // add    rax, rsi
	LONG $0x244c0348; BYTE $0x38 // add    rcx, qword 56[rsp] /* [rbp + 32] */
	WORD $0xff49; BYTE $0xc5     // inc    r13
	JNE  LBB0_92
	JMP  LBB0_318

LBB0_146:
	LONG $0x76048d48             // lea    rax, [rsi + 2*rsi]
	LONG $0x02448d48; BYTE $0xf0 // lea    rax, [rdx + rax - 16]
	LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
	LONG $0x72448d48; BYTE $0xf0 // lea    rax, [rdx + 2*rsi - 16]
	LONG $0x24448948; BYTE $0x08 // mov    qword [rsp + 8], rax
	LONG $0x16448d48; BYTE $0xf0 // lea    rax, [rsi + rdx - 16]
	LONG $0x24048948             // mov    qword [rsp], rax
	LONG $0x24448b4c; BYTE $0x38 // mov    r8, qword 56[rsp] /* [rbp + 32] */
	LONG $0x40048d4b             // lea    rax, [r8 + 2*r8]
	LONG $0x02748d4c; BYTE $0xf0 // lea    r14, [rdx + rax - 16]
	LONG $0x427c8d4e; BYTE $0xf0 // lea    r15, [rdx + 2*r8 - 16]
	LONG $0x105c8d4d; BYTE $0xf0 // lea    r11, [r8 + rdx - 16]
	WORD $0x894c; BYTE $0xeb     // mov    rbx, r13
	WORD $0x2948; BYTE $0xcb     // sub    rbx, rcx
	LONG $0x244c8b4c; BYTE $0x10 // mov    r9, qword [rsp + 16]

LBB0_147:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f42f3; WORD $0x225c; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm3
	LONG $0x370c8d48                           // lea    rcx, [rdi + rsi]
	LONG $0x04148d4f                           // lea    r10, [r12 + r8]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x1c6f0ff3; BYTE $0x38               // movdqu    xmm3, oword [rax + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x231c             // movdqu    oword [r11 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014d; BYTE $0xc2                   // add    r10, r8
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x1c6f0ff3; BYTE $0x38               // movdqu    xmm3, oword [rax + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x271c             // movdqu    oword [r15 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014d; BYTE $0xc2                   // add    r10, r8
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x261c             // movdqu    oword [r14 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014d; BYTE $0xc2                   // add    r10, r8
	LONG $0x04c38348                           // add    rbx, 4
	WORD $0x8948; BYTE $0xcf                   // mov    rdi, rcx
	WORD $0x894d; BYTE $0xd4                   // mov    r12, r10
	JNE  LBB0_147

LBB0_148:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	JE   LBB0_318
	LONG $0x11448d48; BYTE $0xf0 // lea    rax, [rcx + rdx - 16]
	LONG $0x124c8d49; BYTE $0xf0 // lea    rcx, [r10 + rdx - 16]
	WORD $0xf749; BYTE $0xdd     // neg    r13

LBB0_150:
	LONG $0x186f0ff3             // movdqu    xmm3, oword [rax]
	LONG $0xd8740f66             // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66             // movdqa    xmm4, xmm2
	LONG $0xe3db0f66             // pand    xmm4, xmm3
	LONG $0xd9df0f66             // pandn    xmm3, xmm1
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x197f0ff3             // movdqu    oword [rcx], xmm3
	WORD $0x0148; BYTE $0xf0     // add    rax, rsi
	LONG $0x244c0348; BYTE $0x38 // add    rcx, qword 56[rsp] /* [rbp + 32] */
	WORD $0xff49; BYTE $0xc5     // inc    r13
	JNE  LBB0_150
	JMP  LBB0_318

LBB0_61:
	LONG $0x76048d48             // lea    rax, [rsi + 2*rsi]
	LONG $0x02448d48; BYTE $0xf0 // lea    rax, [rdx + rax - 16]
	LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
	LONG $0x72448d48; BYTE $0xf0 // lea    rax, [rdx + 2*rsi - 16]
	LONG $0x24448948; BYTE $0x08 // mov    qword [rsp + 8], rax
	LONG $0x16448d48; BYTE $0xf0 // lea    rax, [rsi + rdx - 16]
	LONG $0x24048948             // mov    qword [rsp], rax
	LONG $0x24448b4c; BYTE $0x38 // mov    r8, qword 56[rsp] /* [rbp + 32] */
	LONG $0x40048d4b             // lea    rax, [r8 + 2*r8]
	LONG $0x02748d4c; BYTE $0xf0 // lea    r14, [rdx + rax - 16]
	LONG $0x427c8d4e; BYTE $0xf0 // lea    r15, [rdx + 2*r8 - 16]
	LONG $0x105c8d4d; BYTE $0xf0 // lea    r11, [r8 + rdx - 16]
	WORD $0x894d; BYTE $0xea     // mov    r10, r13
	WORD $0x2949; BYTE $0xca     // sub    r10, rcx
	LONG $0x244c8b4c; BYTE $0x10 // mov    r9, qword [rsp + 16]

LBB0_62:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f42f3; WORD $0x225c; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm3
	LONG $0x370c8d48                           // lea    rcx, [rdi + rsi]
	LONG $0x041c8d4b                           // lea    rbx, [r12 + r8]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x1c6f0ff3; BYTE $0x38               // movdqu    xmm3, oword [rax + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x231c             // movdqu    oword [r11 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014c; BYTE $0xc3                   // add    rbx, r8
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x1c6f0ff3; BYTE $0x38               // movdqu    xmm3, oword [rax + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x271c             // movdqu    oword [r15 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014c; BYTE $0xc3                   // add    rbx, r8
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66                           // movdqa    xmm4, xmm1
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xdadf0f66                           // pandn    xmm3, xmm2
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x261c             // movdqu    oword [r14 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014c; BYTE $0xc3                   // add    rbx, r8
	LONG $0x04c28349                           // add    r10, 4
	WORD $0x8948; BYTE $0xcf                   // mov    rdi, rcx
	WORD $0x8949; BYTE $0xdc                   // mov    r12, rbx
	JNE  LBB0_62

LBB0_63:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	JE   LBB0_318
	LONG $0x11448d48; BYTE $0xf0 // lea    rax, [rcx + rdx - 16]
	LONG $0x134c8d48; BYTE $0xf0 // lea    rcx, [rbx + rdx - 16]
	WORD $0xf749; BYTE $0xdd     // neg    r13

LBB0_65:
	LONG $0x186f0ff3             // movdqu    xmm3, oword [rax]
	LONG $0xd8740f66             // pcmpeqb    xmm3, xmm0
	LONG $0xe16f0f66             // movdqa    xmm4, xmm1
	LONG $0xe3db0f66             // pand    xmm4, xmm3
	LONG $0xdadf0f66             // pandn    xmm3, xmm2
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x197f0ff3             // movdqu    oword [rcx], xmm3
	WORD $0x0148; BYTE $0xf0     // add    rax, rsi
	LONG $0x244c0348; BYTE $0x38 // add    rcx, qword 56[rsp] /* [rbp + 32] */
	WORD $0xff49; BYTE $0xc5     // inc    r13
	JNE  LBB0_65
	JMP  LBB0_318

LBB0_119:
	LONG $0x76048d48             // lea    rax, [rsi + 2*rsi]
	LONG $0x02448d48; BYTE $0xf0 // lea    rax, [rdx + rax - 16]
	LONG $0x24448948; BYTE $0x10 // mov    qword [rsp + 16], rax
	LONG $0x72448d48; BYTE $0xf0 // lea    rax, [rdx + 2*rsi - 16]
	LONG $0x24448948; BYTE $0x08 // mov    qword [rsp + 8], rax
	LONG $0x16448d48; BYTE $0xf0 // lea    rax, [rsi + rdx - 16]
	LONG $0x24048948             // mov    qword [rsp], rax
	LONG $0x24448b4c; BYTE $0x38 // mov    r8, qword 56[rsp] /* [rbp + 32] */
	LONG $0x40048d4b             // lea    rax, [r8 + 2*r8]
	LONG $0x02748d4c; BYTE $0xf0 // lea    r14, [rdx + rax - 16]
	LONG $0x427c8d4e; BYTE $0xf0 // lea    r15, [rdx + 2*r8 - 16]
	LONG $0x105c8d4d; BYTE $0xf0 // lea    r11, [r8 + rdx - 16]
	WORD $0x894d; BYTE $0xea     // mov    r10, r13
	WORD $0x2949; BYTE $0xca     // sub    r10, rcx
	LONG $0x244c8b4c; BYTE $0x10 // mov    r9, qword [rsp + 16]

LBB0_120:
	LONG $0x5c6f0ff3; WORD $0xf03a             // movdqu    xmm3, oword [rdx + rdi - 16]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f42f3; WORD $0x225c; BYTE $0xf0 // movdqu    oword [rdx + r12 - 16], xmm3
	LONG $0x370c8d48                           // lea    rcx, [rdi + rsi]
	LONG $0x041c8d4b                           // lea    rbx, [r12 + r8]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x1c6f0ff3; BYTE $0x38               // movdqu    xmm3, oword [rax + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x231c             // movdqu    oword [r11 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014c; BYTE $0xc3                   // add    rbx, r8
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	LONG $0x1c6f0ff3; BYTE $0x38               // movdqu    xmm3, oword [rax + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x271c             // movdqu    oword [r15 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014c; BYTE $0xc3                   // add    rbx, r8
	LONG $0x6f0f41f3; WORD $0x391c             // movdqu    xmm3, oword [r9 + rdi]
	LONG $0xd8740f66                           // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66                           // movdqa    xmm4, xmm2
	LONG $0xe3db0f66                           // pand    xmm4, xmm3
	LONG $0xd9df0f66                           // pandn    xmm3, xmm1
	LONG $0xdceb0f66                           // por    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x261c             // movdqu    oword [r14 + r12], xmm3
	WORD $0x0148; BYTE $0xf1                   // add    rcx, rsi
	WORD $0x014c; BYTE $0xc3                   // add    rbx, r8
	LONG $0x04c28349                           // add    r10, 4
	WORD $0x8948; BYTE $0xcf                   // mov    rdi, rcx
	WORD $0x8949; BYTE $0xdc                   // mov    r12, rbx
	JNE  LBB0_120

LBB0_121:
	WORD $0x854d; BYTE $0xed     // test    r13, r13
	JE   LBB0_318
	LONG $0x11448d48; BYTE $0xf0 // lea    rax, [rcx + rdx - 16]
	LONG $0x134c8d48; BYTE $0xf0 // lea    rcx, [rbx + rdx - 16]
	WORD $0xf749; BYTE $0xdd     // neg    r13

LBB0_123:
	LONG $0x186f0ff3             // movdqu    xmm3, oword [rax]
	LONG $0xd8740f66             // pcmpeqb    xmm3, xmm0
	LONG $0xe26f0f66             // movdqa    xmm4, xmm2
	LONG $0xe3db0f66             // pand    xmm4, xmm3
	LONG $0xd9df0f66             // pandn    xmm3, xmm1
	LONG $0xdceb0f66             // por    xmm3, xmm4
	LONG $0x197f0ff3             // movdqu    oword [rcx], xmm3
	WORD $0x0148; BYTE $0xf0     // add    rax, rsi
	LONG $0x244c0348; BYTE $0x38 // add    rcx, qword 56[rsp] /* [rbp + 32] */
	WORD $0xff49; BYTE $0xc5     // inc    r13
	JNE  LBB0_123
	JMP  LBB0_318

DATA LCDATA1<>+0x000(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x008(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x010(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x018(SB)/8, $0x0101010101010101
GLOBL LCDATA1<>(SB), 8, $32

TEXT Â·_SimdSse2AveragingBinarization(SB), 7, $360-104

	MOVQ SP, BP
	ANDQ $-16, BP
	SUBQ $256, BP
	MOVQ SP, -32(BP)
	MOVQ arg13+96(FP), DI
	MOVQ DI, -40(BP)
	MOVQ arg12+88(FP), DI
	MOVQ DI, -48(BP)
	MOVQ arg11+80(FP), DI
	MOVQ DI, -56(BP)
	MOVQ arg10+72(FP), DI
	MOVQ DI, -64(BP)
	MOVQ arg9+64(FP), DI
	MOVQ DI, -72(BP)
	MOVQ arg8+56(FP), DI
	MOVQ DI, -80(BP)
	MOVQ arg7+48(FP), DI
	MOVQ DI, -88(BP)
	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI
	MOVQ arg3+16(FP), DX
	MOVQ arg4+24(FP), CX
	MOVQ arg5+32(FP), R8
	MOVQ arg6+40(FP), R9
	LEAQ LCDATA1<>(SB), BP
	ANDQ $-16, SP
	SUBQ $256, SP

	LONG $0x244c8948; BYTE $0x40                     // mov    qword [rsp + 64], rcx
	WORD $0x8949; BYTE $0xd6                         // mov    r14, rdx
	LONG $0x243c8948                                 // mov    qword [rsp], rdi
	LONG $0xd024448b                                 // mov    eax, dword -48[rsp] /* [rbp + 56] */
	LONG $0x24548b48; BYTE $0xc0                     // mov    rdx, qword -64[rsp] /* [rbp + 40] */
	WORD $0xf883; BYTE $0x02                         // cmp    eax, 2
	WORD $0x894c; BYTE $0xc9                         // mov    rcx, r9
	LONG $0x244c8948; BYTE $0x20                     // mov    qword [rsp + 32], rcx
	LONG $0x24748948; BYTE $0x08                     // mov    qword [rsp + 8], rsi
	LONG $0x2474894c; BYTE $0x48                     // mov    qword [rsp + 72], r14
	JG   LBB1_10
	WORD $0xc085                                     // test    eax, eax
	JE   LBB1_19
	WORD $0xf883; BYTE $0x01                         // cmp    eax, 1
	JE   LBB1_181
	WORD $0xf883; BYTE $0x02                         // cmp    eax, 2
	JNE  LBB1_929
	LONG $0x244c8b48; BYTE $0x08                     // mov    rcx, qword [rsp + 8]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_405
	LONG $0x240c8b48                                 // mov    rcx, qword [rsp]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_405
	LONG $0x24448b48; BYTE $0xc8                     // mov    rax, qword -56[rsp] /* [rbp + 48] */
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_405
	WORD $0x8948; BYTE $0xd0                         // mov    rax, rdx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xd0                         // cmp    rax, rdx
	JNE  LBB1_405
	LONG $0x24748b4c; BYTE $0x48                     // mov    r14, qword [rsp + 72]
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_9
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_334

LBB1_10:
	WORD $0xf883; BYTE $0x03                         // cmp    eax, 3
	JE   LBB1_479
	WORD $0xf883; BYTE $0x04                         // cmp    eax, 4
	JE   LBB1_631
	WORD $0xf883; BYTE $0x05                         // cmp    eax, 5
	JNE  LBB1_929
	LONG $0x244c8b48; BYTE $0x08                     // mov    rcx, qword [rsp + 8]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_855
	LONG $0x240c8b48                                 // mov    rcx, qword [rsp]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_855
	LONG $0x24448b48; BYTE $0xc8                     // mov    rax, qword -56[rsp] /* [rbp + 48] */
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_855
	WORD $0x8948; BYTE $0xd0                         // mov    rax, rdx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xd0                         // cmp    rax, rdx
	JNE  LBB1_855
	LONG $0x24748b4c; BYTE $0x48                     // mov    r14, qword [rsp + 72]
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_18
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_784

LBB1_19:
	WORD $0x8948; BYTE $0xf0                         // mov    rax, rsi
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xf0                         // cmp    rax, rsi
	JNE  LBB1_100
	LONG $0x240c8b48                                 // mov    rcx, qword [rsp]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_100
	LONG $0x24448b48; BYTE $0xc8                     // mov    rax, qword -56[rsp] /* [rbp + 48] */
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_100
	WORD $0x8948; BYTE $0xd0                         // mov    rax, rdx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xd0                         // cmp    rax, rdx
	JNE  LBB1_100
	WORD $0x894d; BYTE $0xf5                         // mov    r13, r14
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe8                         // add    rax, r13
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_24
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_26

LBB1_181:
	WORD $0x8948; BYTE $0xf0                         // mov    rax, rsi
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xf0                         // cmp    rax, rsi
	JNE  LBB1_259
	LONG $0x240c8b48                                 // mov    rcx, qword [rsp]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_259
	LONG $0x24448b48; BYTE $0xc8                     // mov    rax, qword -56[rsp] /* [rbp + 48] */
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_259
	WORD $0x8948; BYTE $0xd0                         // mov    rax, rdx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xd0                         // cmp    rax, rdx
	JNE  LBB1_259
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_186
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_188

LBB1_479:
	WORD $0x8948; BYTE $0xf0                         // mov    rax, rsi
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xf0                         // cmp    rax, rsi
	JNE  LBB1_557
	LONG $0x240c8b48                                 // mov    rcx, qword [rsp]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_557
	LONG $0x24448b48; BYTE $0xc8                     // mov    rax, qword -56[rsp] /* [rbp + 48] */
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_557
	WORD $0x8948; BYTE $0xd0                         // mov    rax, rdx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xd0                         // cmp    rax, rdx
	JNE  LBB1_557
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_484
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_486

LBB1_631:
	WORD $0x8948; BYTE $0xf0                         // mov    rax, rsi
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xf0                         // cmp    rax, rsi
	JNE  LBB1_709
	LONG $0x240c8b48                                 // mov    rcx, qword [rsp]
	WORD $0x8948; BYTE $0xc8                         // mov    rax, rcx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_709
	LONG $0x24448b48; BYTE $0xc8                     // mov    rax, qword -56[rsp] /* [rbp + 48] */
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xc8                         // cmp    rax, rcx
	JNE  LBB1_709
	WORD $0x8948; BYTE $0xd0                         // mov    rax, rdx
	LONG $0xf0e08348                                 // and    rax, -16
	WORD $0x3948; BYTE $0xd0                         // cmp    rax, rdx
	JNE  LBB1_709
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_636
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_638

LBB1_405:
	LONG $0x24748b4c; BYTE $0x48                     // mov    r14, qword [rsp + 72]
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_406
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_408

LBB1_855:
	LONG $0x24748b4c; BYTE $0x48                     // mov    r14, qword [rsp + 72]
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_856
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_858

LBB1_100:
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_101
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_103

LBB1_259:
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_260
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_262

LBB1_557:
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_558
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_560

LBB1_709:
	WORD $0x894d; BYTE $0xf4                         // mov    r12, r14
	LONG $0xf0e48349                                 // and    r12, -16
	LONG $0x000010b8; BYTE $0x00                     // mov    eax, 16
	WORD $0x294c; BYTE $0xf0                         // sub    rax, r14
	WORD $0x014c; BYTE $0xe0                         // add    rax, r12
	WORD $0x08a8                                     // test    al, 8
	JE   LBB1_710
	LONG $0x0101b948; LONG $0x01010101; WORD $0x0101 // mov    rcx, 72340172838076673
	LONG $0x6e0f4866; BYTE $0xc1                     // movq    xmm0, rcx
	LONG $0xf8730f66; BYTE $0x08                     // pslldq    xmm0, 8
	JMP  LBB1_712

LBB1_406:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_408:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_410
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_410:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_412
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_412:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_414
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_414:
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00c024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 192]
	LONG $0x6f048d4b                                 // lea    rax, [r15 + 2*r13]
	LONG $0x24448948; BYTE $0x10                     // mov    qword [rsp + 16], rax
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00e024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 224]
	JE   LBB1_424
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_458
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_417
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_452:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_455
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_454:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd047 // paddb    xmm3, oword [rdi + 2*rax - 48]
	LONG $0x5c7f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe047 // paddb    xmm4, oword [rdi + 2*rax - 32]
	LONG $0x647f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm4
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf047 // paddb    xmm3, oword [rdi + 2*rax - 16]
	LONG $0x5c7f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x47   // paddb    xmm4, oword [rdi + 2*rax]
	LONG $0x247f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm4
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_454

LBB1_455:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20   // mov    rbx, qword [rsp + 32]
	JE   LBB1_457
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824 // imul    rsi, qword [rsp + 8]
	LONG $0x24340348               // add    rsi, qword [rsp]
	LONG $0x1c6f0ff3; BYTE $0x06   // movdqu    xmm3, oword [rsi + rax]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x46   // paddb    xmm3, oword [rsi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x46   // movdqa    oword [rsi + 2*rax], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1046 // paddb    xmm4, oword [rsi + 2*rax + 16]
	LONG $0x647f0f66; WORD $0x1046 // movdqa    oword [rsi + 2*rax + 16], xmm4

LBB1_457:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_452
	JMP  LBB1_424

LBB1_856:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_858:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_860
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_860:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_862
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_862:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_864
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_864:
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00c024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 192]
	LONG $0x6f048d4b                                 // lea    rax, [r15 + 2*r13]
	LONG $0x24448948; BYTE $0x10                     // mov    qword [rsp + 16], rax
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00e024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 224]
	JE   LBB1_874
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_908
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_867
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_902:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_905
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_904:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd047 // paddb    xmm3, oword [rdi + 2*rax - 48]
	LONG $0x5c7f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe047 // paddb    xmm4, oword [rdi + 2*rax - 32]
	LONG $0x647f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm4
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf047 // paddb    xmm3, oword [rdi + 2*rax - 16]
	LONG $0x5c7f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x47   // paddb    xmm4, oword [rdi + 2*rax]
	LONG $0x247f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm4
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_904

LBB1_905:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20   // mov    rbx, qword [rsp + 32]
	JE   LBB1_907
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824 // imul    rsi, qword [rsp + 8]
	LONG $0x24340348               // add    rsi, qword [rsp]
	LONG $0x1c6f0ff3; BYTE $0x06   // movdqu    xmm3, oword [rsi + rax]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x46   // paddb    xmm3, oword [rsi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x46   // movdqa    oword [rsi + 2*rax], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1046 // paddb    xmm4, oword [rsi + 2*rax + 16]
	LONG $0x647f0f66; WORD $0x1046 // movdqa    oword [rsi + 2*rax + 16], xmm4

LBB1_907:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_902
	JMP  LBB1_874

LBB1_101:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_103:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_105
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_105:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_107
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_107:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_109
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_109:
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00d024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 208]
	LONG $0x6f3c8d4f                                 // lea    r15, [r15 + 2*r13]
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00c024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 192]
	JE   LBB1_131
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_126
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_112
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_120:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_123
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_122:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66               // pand    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xd047 // paddb    xmm4, oword [rdi + 2*rax - 48]
	LONG $0x647f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0xe047 // paddb    xmm3, oword [rdi + 2*rax - 32]
	LONG $0x5c7f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm3
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66               // pand    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xf047 // paddb    xmm4, oword [rdi + 2*rax - 16]
	LONG $0x647f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x1cfc0f66; BYTE $0x47   // paddb    xmm3, oword [rdi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm3
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_122

LBB1_123:
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20               // mov    rbx, qword [rsp + 32]
	JE   LBB1_125
	WORD $0x8948; BYTE $0xd6                   // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824             // imul    rsi, qword [rsp + 8]
	LONG $0x24340348                           // add    rsi, qword [rsp]
	LONG $0x1c6f0ff3; BYTE $0x06               // movdqu    xmm3, oword [rsi + rax]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe1600f66                           // punpcklbw    xmm4, xmm1
	LONG $0xfc0f4166; WORD $0x4724             // paddb    xmm4, oword [r15 + 2*rax]
	LONG $0x7f0f4166; WORD $0x4724             // movdqa    oword [r15 + 2*rax], xmm4
	LONG $0xda680f66                           // punpckhbw    xmm3, xmm2
	LONG $0xfc0f4166; WORD $0x475c; BYTE $0x10 // paddb    xmm3, oword [r15 + 2*rax + 16]
	LONG $0x7f0f4166; WORD $0x475c; BYTE $0x10 // movdqa    oword [r15 + 2*rax + 16], xmm3

LBB1_125:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_120
	JMP  LBB1_131

LBB1_260:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_262:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_264
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_264:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_266
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_266:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_268
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_268:
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00d024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 208]
	LONG $0x6f048d4b                                 // lea    rax, [r15 + 2*r13]
	LONG $0x24448948; BYTE $0x28                     // mov    qword [rsp + 40], rax
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00c024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 192]
	JE   LBB1_278
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_312
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_271
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_306:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_309
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_308:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xd047 // paddb    xmm4, oword [rdi + 2*rax - 48]
	LONG $0x647f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0xe047 // paddb    xmm3, oword [rdi + 2*rax - 32]
	LONG $0x5c7f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm3
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xf047 // paddb    xmm4, oword [rdi + 2*rax - 16]
	LONG $0x647f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x1cfc0f66; BYTE $0x47   // paddb    xmm3, oword [rdi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm3
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_308

LBB1_309:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20   // mov    rbx, qword [rsp + 32]
	JE   LBB1_311
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824 // imul    rsi, qword [rsp + 8]
	LONG $0x24340348               // add    rsi, qword [rsp]
	LONG $0x1c6f0ff3; BYTE $0x06   // movdqu    xmm3, oword [rsi + rax]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x24748b48; BYTE $0x28   // mov    rsi, qword [rsp + 40]
	LONG $0x24fc0f66; BYTE $0x46   // paddb    xmm4, oword [rsi + 2*rax]
	LONG $0x247f0f66; BYTE $0x46   // movdqa    oword [rsi + 2*rax], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0x1046 // paddb    xmm3, oword [rsi + 2*rax + 16]
	LONG $0x5c7f0f66; WORD $0x1046 // movdqa    oword [rsi + 2*rax + 16], xmm3

LBB1_311:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_306
	JMP  LBB1_278

LBB1_558:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_560:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_562
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_562:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_564
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_564:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_566
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_566:
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00c024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 192]
	LONG $0x6f048d4b                                 // lea    rax, [r15 + 2*r13]
	LONG $0x24448948; BYTE $0x10                     // mov    qword [rsp + 16], rax
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00e024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 224]
	JE   LBB1_576
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_610
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_569
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_604:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_607
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_606:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd047 // paddb    xmm3, oword [rdi + 2*rax - 48]
	LONG $0x5c7f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe047 // paddb    xmm4, oword [rdi + 2*rax - 32]
	LONG $0x647f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm4
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf047 // paddb    xmm3, oword [rdi + 2*rax - 16]
	LONG $0x5c7f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x47   // paddb    xmm4, oword [rdi + 2*rax]
	LONG $0x247f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm4
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_606

LBB1_607:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20   // mov    rbx, qword [rsp + 32]
	JE   LBB1_609
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824 // imul    rsi, qword [rsp + 8]
	LONG $0x24340348               // add    rsi, qword [rsp]
	LONG $0x1c6f0ff3; BYTE $0x06   // movdqu    xmm3, oword [rsi + rax]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x46   // paddb    xmm3, oword [rsi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x46   // movdqa    oword [rsi + 2*rax], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1046 // paddb    xmm4, oword [rsi + 2*rax + 16]
	LONG $0x647f0f66; WORD $0x1046 // movdqa    oword [rsi + 2*rax + 16], xmm4

LBB1_609:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_604
	JMP  LBB1_576

LBB1_710:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_712:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_714
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_714:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_716
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_716:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_718
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_718:
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00c024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 192]
	LONG $0x6f048d4b                                 // lea    rax, [r15 + 2*r13]
	LONG $0x24448948; BYTE $0x10                     // mov    qword [rsp + 16], rax
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00e024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 224]
	JE   LBB1_728
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_762
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_721
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_756:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_759
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_758:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd047 // paddb    xmm3, oword [rdi + 2*rax - 48]
	LONG $0x5c7f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe047 // paddb    xmm4, oword [rdi + 2*rax - 32]
	LONG $0x647f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm4
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf047 // paddb    xmm3, oword [rdi + 2*rax - 16]
	LONG $0x5c7f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x47   // paddb    xmm4, oword [rdi + 2*rax]
	LONG $0x247f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm4
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_758

LBB1_759:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20   // mov    rbx, qword [rsp + 32]
	JE   LBB1_761
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824 // imul    rsi, qword [rsp + 8]
	LONG $0x24340348               // add    rsi, qword [rsp]
	LONG $0x1c6f0ff3; BYTE $0x06   // movdqu    xmm3, oword [rsi + rax]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x46   // paddb    xmm3, oword [rsi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x46   // movdqa    oword [rsi + 2*rax], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1046 // paddb    xmm4, oword [rsi + 2*rax + 16]
	LONG $0x647f0f66; WORD $0x1046 // movdqa    oword [rsi + 2*rax + 16], xmm4

LBB1_761:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_756
	JMP  LBB1_728

LBB1_126:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_131
	LONG $0x6f0f43f3; WORD $0x774c; BYTE $0xe0 // movdqu    xmm1, oword [r15 + 2*r14 - 32]
	LONG $0x6f0f43f3; WORD $0x7744; BYTE $0xf0 // movdqu    xmm0, oword [r15 + 2*r14 - 16]
	LONG $0x24548b48; BYTE $0x20               // mov    rdx, qword [rsp + 32]
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe083; BYTE $0x01                   // and    eax, 1
	WORD $0xc931                               // xor    ecx, ecx
	LONG $0x01fa8348                           // cmp    rdx, 1
	JNE  LBB1_158
	LONG $0x245c8b48; BYTE $0x08               // mov    rbx, qword [rsp + 8]
	JMP  LBB1_129

LBB1_610:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_576
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x7044; BYTE $0xe0 // movdqu    xmm0, oword [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x704c; BYTE $0xf0 // movdqu    xmm1, oword [rax + 2*r14 - 16]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x30448d4a; BYTE $0xf0               // lea    rax, [rax + r14 - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]

LBB1_612:
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xda740f66                           // pcmpeqb    xmm3, xmm2
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0x600f4166; BYTE $0xd6               // punpcklbw    xmm2, xmm14
	LONG $0xc2fc0f66                           // paddb    xmm0, xmm2
	LONG $0x7f0f42f3; WORD $0x7644; BYTE $0xe0 // movdqu    oword [rsi + 2*r14 - 32], xmm0
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xcbfc0f66                           // paddb    xmm1, xmm3
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    oword [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	WORD $0xff48; BYTE $0xc9                   // dec    rcx
	JNE  LBB1_612
	JMP  LBB1_576

LBB1_458:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_424
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x7044; BYTE $0xe0 // movdqu    xmm0, oword [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x704c; BYTE $0xf0 // movdqu    xmm1, oword [rax + 2*r14 - 16]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x30448d4a; BYTE $0xf0               // lea    rax, [rax + r14 - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]

LBB1_460:
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xda740f66                           // pcmpeqb    xmm3, xmm2
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0x600f4166; BYTE $0xd6               // punpcklbw    xmm2, xmm14
	LONG $0xc2fc0f66                           // paddb    xmm0, xmm2
	LONG $0x7f0f42f3; WORD $0x7644; BYTE $0xe0 // movdqu    oword [rsi + 2*r14 - 32], xmm0
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xcbfc0f66                           // paddb    xmm1, xmm3
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    oword [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	WORD $0xff48; BYTE $0xc9                   // dec    rcx
	JNE  LBB1_460
	JMP  LBB1_424

LBB1_908:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_874
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x7044; BYTE $0xe0 // movdqu    xmm0, oword [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x704c; BYTE $0xf0 // movdqu    xmm1, oword [rax + 2*r14 - 16]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x30448d4a; BYTE $0xf0               // lea    rax, [rax + r14 - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]

LBB1_910:
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xda740f66                           // pcmpeqb    xmm3, xmm2
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0x600f4166; BYTE $0xd6               // punpcklbw    xmm2, xmm14
	LONG $0xc2fc0f66                           // paddb    xmm0, xmm2
	LONG $0x7f0f42f3; WORD $0x7644; BYTE $0xe0 // movdqu    oword [rsi + 2*r14 - 32], xmm0
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xcbfc0f66                           // paddb    xmm1, xmm3
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    oword [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	WORD $0xff48; BYTE $0xc9                   // dec    rcx
	JNE  LBB1_910
	JMP  LBB1_874

LBB1_312:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_278
	LONG $0x24448b48; BYTE $0x28               // mov    rax, qword [rsp + 40]
	LONG $0x6f0f42f3; WORD $0x7044; BYTE $0xe0 // movdqu    xmm0, oword [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x704c; BYTE $0xf0 // movdqu    xmm1, oword [rax + 2*r14 - 16]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x30448d4a; BYTE $0xf0               // lea    rax, [rax + r14 - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x28               // mov    rsi, qword [rsp + 40]

LBB1_314:
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0x740f4166; BYTE $0xd7               // pcmpeqb    xmm2, xmm15
	LONG $0xdf0f4166; BYTE $0xd6               // pandn    xmm2, xmm14
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0x600f4166; BYTE $0xde               // punpcklbw    xmm3, xmm14
	LONG $0xc3fc0f66                           // paddb    xmm0, xmm3
	LONG $0x7f0f42f3; WORD $0x7644; BYTE $0xe0 // movdqu    oword [rsi + 2*r14 - 32], xmm0
	LONG $0x680f4166; BYTE $0xd6               // punpckhbw    xmm2, xmm14
	LONG $0xcafc0f66                           // paddb    xmm1, xmm2
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    oword [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	WORD $0xff48; BYTE $0xc9                   // dec    rcx
	JNE  LBB1_314
	JMP  LBB1_278

LBB1_762:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_728
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x7044; BYTE $0xe0 // movdqu    xmm0, oword [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x704c; BYTE $0xf0 // movdqu    xmm1, oword [rax + 2*r14 - 16]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x30448d4a; BYTE $0xf0               // lea    rax, [rax + r14 - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]

LBB1_764:
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xda740f66                           // pcmpeqb    xmm3, xmm2
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0x600f4166; BYTE $0xd6               // punpcklbw    xmm2, xmm14
	LONG $0xc2fc0f66                           // paddb    xmm0, xmm2
	LONG $0x7f0f42f3; WORD $0x7644; BYTE $0xe0 // movdqu    oword [rsi + 2*r14 - 32], xmm0
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xcbfc0f66                           // paddb    xmm1, xmm3
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    oword [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	WORD $0xff48; BYTE $0xc9                   // dec    rcx
	JNE  LBB1_764
	JMP  LBB1_728

LBB1_112:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_113:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_116
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_115:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66               // pand    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xd057 // paddb    xmm4, oword [rdi + 2*rdx - 48]
	LONG $0x647f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0xe057 // paddb    xmm3, oword [rdi + 2*rdx - 32]
	LONG $0x5c7f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm3
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66               // pand    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xf057 // paddb    xmm4, oword [rdi + 2*rdx - 16]
	LONG $0x647f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x1cfc0f66; BYTE $0x57   // paddb    xmm3, oword [rdi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm3
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_115

LBB1_116:
	LONG $0x24040348                           // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	JE   LBB1_118
	LONG $0x1c6f0ff3; BYTE $0x10               // movdqu    xmm3, oword [rax + rdx]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe1600f66                           // punpcklbw    xmm4, xmm1
	LONG $0xfc0f4166; WORD $0x5724             // paddb    xmm4, oword [r15 + 2*rdx]
	LONG $0x7f0f4166; WORD $0x5724             // movdqa    oword [r15 + 2*rdx], xmm4
	LONG $0xda680f66                           // punpckhbw    xmm3, xmm2
	LONG $0xfc0f4166; WORD $0x575c; BYTE $0x10 // paddb    xmm3, oword [r15 + 2*rdx + 16]
	LONG $0x7f0f4166; WORD $0x575c; BYTE $0x10 // movdqa    oword [r15 + 2*rdx + 16], xmm3

LBB1_118:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0x6f0f43f3; WORD $0x7764; BYTE $0xe0 // movdqu    xmm4, oword [r15 + 2*r14 - 32]
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xecfc0f66                           // paddb    xmm5, xmm4
	LONG $0x7f0f43f3; WORD $0x776c; BYTE $0xe0 // movdqu    oword [r15 + 2*r14 - 32], xmm5
	LONG $0x6f0f43f3; WORD $0x7764; BYTE $0xf0 // movdqu    xmm4, oword [r15 + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdcfc0f66                           // paddb    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x775c; BYTE $0xf0 // movdqu    oword [r15 + 2*r14 - 16], xmm3
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_113
	JMP  LBB1_131

LBB1_569:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_570:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_573
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_572:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd057 // paddb    xmm3, oword [rdi + 2*rdx - 48]
	LONG $0x5c7f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe057 // paddb    xmm4, oword [rdi + 2*rdx - 32]
	LONG $0x647f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm4
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf057 // paddb    xmm3, oword [rdi + 2*rdx - 16]
	LONG $0x5c7f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x57   // paddb    xmm4, oword [rdi + 2*rdx]
	LONG $0x247f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm4
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_572

LBB1_573:
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2       // test    r10, r10
	JE   LBB1_575
	LONG $0x1c6f0ff3; BYTE $0x10   // movdqu    xmm3, oword [rax + rdx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x56   // paddb    xmm3, oword [rsi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x56   // movdqa    oword [rsi + 2*rdx], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1056 // paddb    xmm4, oword [rsi + 2*rdx + 16]
	LONG $0x647f0f66; WORD $0x1056 // movdqa    oword [rsi + 2*rdx + 16], xmm4

LBB1_575:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe6               // pand    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xe0 // movdqu    xmm3, oword [rax + 2*r14 - 32]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xebfc0f66                           // paddb    xmm5, xmm3
	LONG $0x7f0f42f3; WORD $0x706c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm5
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xe6               // punpckhbw    xmm4, xmm14
	LONG $0xe3fc0f66                           // paddb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_570

LBB1_576:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x24448b4c; BYTE $0x20       // mov    r8, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x10       // mov    rdi, qword [rsp + 16]
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000090 // mov    qword [rsp + 144], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	LONG $0xf8408d49                   // lea    rax, [r8 - 8]
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx
	LONG $0x248c894c; LONG $0x00000080 // mov    qword [rsp + 128], r9
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8948; BYTE $0xd9           // mov    rcx, rbx
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x24748b48; BYTE $0x30       // mov    rsi, qword [rsp + 48]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8949; BYTE $0xf7           // mov    r15, rsi
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x3a7c8d4a; BYTE $0x10       // lea    rdi, [rdx + r15 + 16]
	LONG $0xff498d49                   // lea    rcx, [r9 - 1]
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x248c8948; LONG $0x000000d0 // mov    qword [rsp + 208], rcx
	LONG $0x3a048d4a                   // lea    rax, [rdx + r15]
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	LONG $0x85048d4a; LONG $0x00000000 // lea    rax, [4*r8]
	WORD $0x894d; BYTE $0xc5           // mov    r13, r8
	LONG $0xaf048d4f                   // lea    r8, [r15 + 4*r13]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xde           // mov    r14, rbx
	LONG $0x05e6c149                   // shl    r14, 5
	LONG $0x5b048d48                   // lea    rax, [rbx + 2*rbx]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x761c8d48                   // lea    rbx, [rsi + 2*rsi]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x32548d4e; BYTE $0x30       // lea    r10, [rdx + r14 + 48]
	WORD $0x0149; BYTE $0xd6           // add    r14, rdx
	LONG $0x02448d4e; BYTE $0x04       // lea    r8, [rdx + r8 + 4]
	WORD $0x0149; BYTE $0xd7           // add    r15, rdx
	LONG $0x1a4c8d4c; BYTE $0x04       // lea    r9, [rdx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xe8           // sub    rax, r13
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	WORD $0x894d; BYTE $0xeb           // mov    r11, r13
	WORD $0xf749; BYTE $0xd3           // not    r11
	LONG $0x24548d49; BYTE $0xff       // lea    rdx, [r12 - 1]
	LONG $0x04eac148                   // shr    rdx, 4
	WORD $0x728d; BYTE $0x01           // lea    esi, [rdx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	WORD $0xc889                       // mov    eax, ecx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24848948; LONG $0x000000a8 // mov    qword [rsp + 168], rax
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x244c8948; BYTE $0x30       // mov    qword [rsp + 48], rcx
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0x245c8b48; BYTE $0x08       // mov    rbx, qword [rsp + 8]
	LONG $0xc3af0f48                   // imul    rax, rbx
	LONG $0x240c8b48                   // mov    rcx, qword [rsp]
	LONG $0x01448d48; BYTE $0x10       // lea    rax, [rcx + rax + 16]
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	LONG $0x24748948; BYTE $0x70       // mov    qword [rsp + 112], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x24548948; BYTE $0x78       // mov    qword [rsp + 120], rdx
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	WORD $0x894c; BYTE $0xda           // mov    rdx, r11
	LONG $0x24548948; BYTE $0x60       // mov    qword [rsp + 96], rdx
	LONG $0xdbaf0f49                   // imul    rbx, r11
	LONG $0x19448d48; BYTE $0x10       // lea    rax, [rcx + rbx + 16]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000080 // mov    rax, qword [rsp + 128]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b0 // mov    qword [rsp + 176], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0xd231                       // xor    edx, edx

LBB1_578:
	LONG $0x245c8948; BYTE $0x18       // mov    qword [rsp + 24], rbx
	LONG $0x24943b48; LONG $0x000000a0 // cmp    rdx, qword [rsp + 160]
	LONG $0x24548948; BYTE $0x28       // mov    qword [rsp + 40], rdx
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	JAE  LBB1_587
	LONG $0x24448b48; BYTE $0x20       // mov    rax, qword [rsp + 32]
	LONG $0x021c8d4c                   // lea    r11, [rdx + rax]
	LONG $0x5caf0f4c; WORD $0x0824     // imul    r11, qword [rsp + 8]
	LONG $0x241c034c                   // add    r11, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_585
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	JE   LBB1_583
	LONG $0x249c8b48; LONG $0x00000088 // mov    rbx, qword [rsp + 136]
	LONG $0x24448b48; BYTE $0x38       // mov    rax, qword [rsp + 56]
	WORD $0xd231                       // xor    edx, edx

LBB1_582:
	LONG $0x586f0ff3; BYTE $0xf0               // movdqu    xmm3, oword [rax - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xd0 // paddb    xmm3, oword [r10 + 2*rdx - 48]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xd0 // movdqa    oword [r10 + 2*rdx - 48], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x527c; BYTE $0xe0 // paddb    xmm7, oword [r10 + 2*rdx - 32]
	LONG $0x7f0f4166; WORD $0x527c; BYTE $0xe0 // movdqa    oword [r10 + 2*rdx - 32], xmm7
	LONG $0x186f0ff3                           // movdqu    xmm3, oword [rax]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xf0 // paddb    xmm3, oword [r10 + 2*rdx - 16]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xf0 // movdqa    oword [r10 + 2*rdx - 16], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x523c             // paddb    xmm7, oword [r10 + 2*rdx]
	LONG $0x7f0f4166; WORD $0x523c             // movdqa    oword [r10 + 2*rdx], xmm7
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_582

LBB1_583:
	LONG $0x247c8348; WORD $0x0070 // cmp    qword [rsp + 112], 0
	JE   LBB1_585
	LONG $0x6f0f41f3; WORD $0x131c // movdqu    xmm3, oword [r11 + rdx]
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff   // pmaxub    xmm7, xmm15
	LONG $0xfb740f66               // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8   // pand    xmm7, xmm8
	LONG $0xdf6f0f66               // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda   // punpcklbw    xmm3, xmm10
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x50   // paddb    xmm3, oword [rax + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm3
	LONG $0x680f4166; BYTE $0xfb   // punpckhbw    xmm7, xmm11
	LONG $0x7cfc0f66; WORD $0x1050 // paddb    xmm7, oword [rax + 2*rdx + 16]
	LONG $0x7c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm7

LBB1_585:
	WORD $0x3949; BYTE $0xcc                   // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28               // mov    rdx, qword [rsp + 40]
	JE   LBB1_587
	LONG $0x6f0f41f3; WORD $0x0b7c; BYTE $0xf0 // movdqu    xmm7, oword [r11 + rcx - 16]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f44f3; WORD $0x484c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*rcx - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xfc0f4166; BYTE $0xf9               // paddb    xmm7, xmm9
	LONG $0x7c7f0ff3; WORD $0xe048             // movdqu    oword [rax + 2*rcx - 32], xmm7
	LONG $0x7c6f0ff3; WORD $0xf048             // movdqu    xmm7, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdffc0f66                           // paddb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xf048             // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_587:
	LONG $0x246c8b4c; BYTE $0x20       // mov    r13, qword [rsp + 32]
	WORD $0x394c; BYTE $0xea           // cmp    rdx, r13
	JBE  LBB1_596
	LONG $0x24448b48; BYTE $0x60       // mov    rax, qword [rsp + 96]
	LONG $0x02048d48                   // lea    rax, [rdx + rax]
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x24040348                   // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_594
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	LONG $0x0000bb41; WORD $0x0000     // mov    r11d, 0
	JE   LBB1_592
	LONG $0x24948b48; LONG $0x00000088 // mov    rdx, qword [rsp + 136]
	LONG $0x245c8b48; BYTE $0x68       // mov    rbx, qword [rsp + 104]
	WORD $0x3145; BYTE $0xdb           // xor    r11d, r11d

LBB1_591:
	LONG $0x5b6f0ff3; BYTE $0xf0               // movdqu    xmm3, oword [rbx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    xmm3, oword [r10 + 2*r11 - 48]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    oword [r10 + 2*r11 - 48], xmm3
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    xmm3, oword [r10 + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    oword [r10 + 2*r11 - 32], xmm3
	LONG $0x1b6f0ff3                           // movdqu    xmm3, oword [rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    xmm3, oword [r10 + 2*r11 - 16]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    oword [r10 + 2*r11 - 16], xmm3
	LONG $0x6f0f4366; WORD $0x5a1c             // movdqa    xmm3, oword [r10 + 2*r11]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a1c             // movdqa    oword [r10 + 2*r11], xmm3
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB1_591

LBB1_592:
	LONG $0x247c8348; WORD $0x0070             // cmp    qword [rsp + 112], 0
	JE   LBB1_594
	LONG $0x6f0f42f3; WORD $0x183c             // movdqu    xmm7, oword [rax + r11]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x6f0f4266; WORD $0x5a24             // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a24             // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0x10 // movdqa    xmm4, oword [rdx + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0x10 // movdqa    oword [rdx + 2*r11 + 16], xmm4

LBB1_594:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x246c8b4c; BYTE $0x20   // mov    r13, qword [rsp + 32]
	JE   LBB1_596
	LONG $0x5c6f0ff3; WORD $0xf008 // movdqu    xmm3, oword [rax + rcx - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe6   // pand    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x5c6f0ff3; WORD $0xe048 // movdqu    xmm3, oword [rax + 2*rcx - 32]
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfe   // punpcklbw    xmm7, xmm14
	LONG $0xdff80f66               // psubb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xe048 // movdqu    oword [rax + 2*rcx - 32], xmm3
	LONG $0x5c6f0ff3; WORD $0xf048 // movdqu    xmm3, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xe6   // punpckhbw    xmm4, xmm14
	LONG $0xdcf80f66               // psubb    xmm3, xmm4
	LONG $0x5c7f0ff3; WORD $0xf048 // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_596:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB1_599
	WORD $0xc031             // xor    eax, eax

LBB1_598:
	LONG $0x6f0f4166; WORD $0x460c // movdqa    xmm1, oword [r14 + 2*rax]
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xd6600f66               // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087 // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66               // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87   // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348               // add    rax, 8
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JB   LBB1_598

LBB1_599:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xed                       // test    r13, r13
	JE   LBB1_621
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x07fd8349                               // cmp    r13, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_601
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x247c8348; WORD $0x0050                 // cmp    qword [rsp + 80], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_601
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x000000b8; BYTE $0x18 // cmp    qword [rsp + 184], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_617
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24948b48; LONG $0x000000d0             // mov    rdx, qword [rsp + 208]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_616:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c28348               // add    rdx, 4
	JNE  LBB1_616

LBB1_617:
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x00 // cmp    qword [rsp + 128], 0
	JE   LBB1_620
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24948b48; LONG $0x000000b0             // mov    rdx, qword [rsp + 176]

LBB1_619:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_619

LBB1_620:
	LONG $0x24548b48; BYTE $0x50 // mov    rdx, qword [rsp + 80]
	WORD $0x394c; BYTE $0xea     // cmp    rdx, r13
	LONG $0xfbfe0f66             // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66             // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5 // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66             // paddd    xmm2, xmm1
	LONG $0xd07e0f66             // movd    eax, xmm2
	JE   LBB1_621

LBB1_601:
	WORD $0x894c; BYTE $0xeb           // mov    rbx, r13
	WORD $0x2948; BYTE $0xd3           // sub    rbx, rdx
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	LONG $0x96148d48                   // lea    rdx, [rsi + 4*rdx]

LBB1_602:
	WORD $0x0203             // add    eax, dword [rdx]
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_602

LBB1_621:
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_625
	WORD $0xd231                 // xor    edx, edx
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB1_623

LBB1_936:
	LONG $0x90440341; BYTE $0xfc // add    eax, dword [r8 + 4*rdx - 4]
	LONG $0x97442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rdx - 4]
	LONG $0x91448941; BYTE $0xfc // mov    dword [r9 + 4*rdx - 4], eax
	LONG $0x90040341             // add    eax, dword [r8 + 4*rdx]
	LONG $0x97042b41             // sub    eax, dword [r15 + 4*rdx]
	LONG $0x91048941             // mov    dword [r9 + 4*rdx], eax
	LONG $0x02c28348             // add    rdx, 2
	LONG $0x24543948; BYTE $0x30 // cmp    qword [rsp + 48], rdx
	JNE  LBB1_936

LBB1_623:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_625
	LONG $0x2a1c8d4a                               // lea    rbx, [rdx + r13]
	LONG $0x24b48b48; LONG $0x00000090             // mov    rsi, qword [rsp + 144]
	WORD $0x0403; BYTE $0x9e                       // add    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b48; BYTE $0x60                   // mov    rbx, qword [rsp + 96]
	LONG $0x1a1c8d48                               // lea    rbx, [rdx + rbx]
	WORD $0x042b; BYTE $0x9e                       // sub    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b4c; BYTE $0x58                   // mov    r11, qword [rsp + 88]
	LONG $0x245c8b48; BYTE $0x18                   // mov    rbx, qword [rsp + 24]
	LONG $0x93048941                               // mov    dword [r11 + 4*rdx], eax

LBB1_625:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_628
	WORD $0xc031             // xor    eax, eax

LBB1_627:
	LONG $0x6f0f4166; WORD $0x814c; BYTE $0xfc // movdqa    xmm1, oword [r9 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8154; BYTE $0x0c // movdqa    xmm2, oword [r9 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x815c; BYTE $0x1c // movdqa    xmm3, oword [r9 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8164; BYTE $0x2c // movdqa    xmm4, oword [r9 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x03               // movdqu    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_627

LBB1_628:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	JE   LBB1_630
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x4c6f0ff3; WORD $0xc088 // movdqu    xmm1, oword [rax + 4*rcx - 64]
	LONG $0xc8f50f66               // pmaddwd    xmm1, xmm0
	LONG $0xce660f66               // pcmpgtd    xmm1, xmm6
	LONG $0x546f0ff3; WORD $0xd088 // movdqu    xmm2, oword [rax + 4*rcx - 48]
	LONG $0xd0f50f66               // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66               // pcmpgtd    xmm2, xmm6
	LONG $0x5c6f0ff3; WORD $0xe088 // movdqu    xmm3, oword [rax + 4*rcx - 32]
	LONG $0xd8f50f66               // pmaddwd    xmm3, xmm0
	LONG $0xde660f66               // pcmpgtd    xmm3, xmm6
	LONG $0x646f0ff3; WORD $0xf088 // movdqu    xmm4, oword [rax + 4*rcx - 16]
	LONG $0xe0f50f66               // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66               // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66               // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66               // packssdw    xmm3, xmm4
	LONG $0xcb630f66               // packsswb    xmm1, xmm3
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4   // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd   // pandn    xmm1, xmm13
	LONG $0xcaeb0f66               // por    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0xf00b // movdqu    oword [rbx + rcx - 16], xmm1

LBB1_630:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x24440148; BYTE $0x38 // add    qword [rsp + 56], rax
	LONG $0x24440148; BYTE $0x68 // add    qword [rsp + 104], rax
	LONG $0x24543b48; BYTE $0x40 // cmp    rdx, qword [rsp + 64]
	JNE  LBB1_578
	JMP  LBB1_929

LBB1_417:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_418:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_421
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_420:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd057 // paddb    xmm3, oword [rdi + 2*rdx - 48]
	LONG $0x5c7f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe057 // paddb    xmm4, oword [rdi + 2*rdx - 32]
	LONG $0x647f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm4
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf057 // paddb    xmm3, oword [rdi + 2*rdx - 16]
	LONG $0x5c7f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x57   // paddb    xmm4, oword [rdi + 2*rdx]
	LONG $0x247f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm4
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_420

LBB1_421:
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2       // test    r10, r10
	JE   LBB1_423
	LONG $0x1c6f0ff3; BYTE $0x10   // movdqu    xmm3, oword [rax + rdx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x56   // paddb    xmm3, oword [rsi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x56   // movdqa    oword [rsi + 2*rdx], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1056 // paddb    xmm4, oword [rsi + 2*rdx + 16]
	LONG $0x647f0f66; WORD $0x1056 // movdqa    oword [rsi + 2*rdx + 16], xmm4

LBB1_423:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe6               // pandn    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xe0 // movdqu    xmm3, oword [rax + 2*r14 - 32]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xebfc0f66                           // paddb    xmm5, xmm3
	LONG $0x7f0f42f3; WORD $0x706c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm5
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xe6               // punpckhbw    xmm4, xmm14
	LONG $0xe3fc0f66                           // paddb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_418

LBB1_424:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x24448b4c; BYTE $0x20       // mov    r8, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x10       // mov    rdi, qword [rsp + 16]
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000090 // mov    qword [rsp + 144], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	LONG $0xf8408d49                   // lea    rax, [r8 - 8]
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx
	LONG $0x248c894c; LONG $0x00000080 // mov    qword [rsp + 128], r9
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8948; BYTE $0xd9           // mov    rcx, rbx
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x24748b48; BYTE $0x30       // mov    rsi, qword [rsp + 48]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8949; BYTE $0xf7           // mov    r15, rsi
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x3a7c8d4a; BYTE $0x10       // lea    rdi, [rdx + r15 + 16]
	LONG $0xff498d49                   // lea    rcx, [r9 - 1]
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x248c8948; LONG $0x000000d0 // mov    qword [rsp + 208], rcx
	LONG $0x3a048d4a                   // lea    rax, [rdx + r15]
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	LONG $0x85048d4a; LONG $0x00000000 // lea    rax, [4*r8]
	WORD $0x894d; BYTE $0xc5           // mov    r13, r8
	LONG $0xaf048d4f                   // lea    r8, [r15 + 4*r13]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xde           // mov    r14, rbx
	LONG $0x05e6c149                   // shl    r14, 5
	LONG $0x5b048d48                   // lea    rax, [rbx + 2*rbx]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x761c8d48                   // lea    rbx, [rsi + 2*rsi]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x32548d4e; BYTE $0x30       // lea    r10, [rdx + r14 + 48]
	WORD $0x0149; BYTE $0xd6           // add    r14, rdx
	LONG $0x02448d4e; BYTE $0x04       // lea    r8, [rdx + r8 + 4]
	WORD $0x0149; BYTE $0xd7           // add    r15, rdx
	LONG $0x1a4c8d4c; BYTE $0x04       // lea    r9, [rdx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xe8           // sub    rax, r13
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	WORD $0x894d; BYTE $0xeb           // mov    r11, r13
	WORD $0xf749; BYTE $0xd3           // not    r11
	LONG $0x24548d49; BYTE $0xff       // lea    rdx, [r12 - 1]
	LONG $0x04eac148                   // shr    rdx, 4
	WORD $0x728d; BYTE $0x01           // lea    esi, [rdx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	WORD $0xc889                       // mov    eax, ecx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24448948; BYTE $0x78       // mov    qword [rsp + 120], rax
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x244c8948; BYTE $0x30       // mov    qword [rsp + 48], rcx
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0x245c8b48; BYTE $0x08       // mov    rbx, qword [rsp + 8]
	LONG $0xc3af0f48                   // imul    rax, rbx
	LONG $0x240c8b48                   // mov    rcx, qword [rsp]
	LONG $0x01448d48; BYTE $0x10       // lea    rax, [rcx + rax + 16]
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	LONG $0x24b48948; LONG $0x000000a8 // mov    qword [rsp + 168], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x24548948; BYTE $0x70       // mov    qword [rsp + 112], rdx
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	WORD $0x894c; BYTE $0xda           // mov    rdx, r11
	LONG $0x24548948; BYTE $0x60       // mov    qword [rsp + 96], rdx
	LONG $0xdbaf0f49                   // imul    rbx, r11
	LONG $0x19448d48; BYTE $0x10       // lea    rax, [rcx + rbx + 16]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000080 // mov    rax, qword [rsp + 128]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b0 // mov    qword [rsp + 176], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0xd231                       // xor    edx, edx

LBB1_426:
	LONG $0x245c8948; BYTE $0x18       // mov    qword [rsp + 24], rbx
	LONG $0x24943b48; LONG $0x000000a0 // cmp    rdx, qword [rsp + 160]
	LONG $0x24548948; BYTE $0x28       // mov    qword [rsp + 40], rdx
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	JAE  LBB1_435
	LONG $0x24448b48; BYTE $0x20       // mov    rax, qword [rsp + 32]
	LONG $0x021c8d4c                   // lea    r11, [rdx + rax]
	LONG $0x5caf0f4c; WORD $0x0824     // imul    r11, qword [rsp + 8]
	LONG $0x241c034c                   // add    r11, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_433
	LONG $0x247c8348; WORD $0x0070     // cmp    qword [rsp + 112], 0
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	JE   LBB1_431
	LONG $0x249c8b48; LONG $0x00000088 // mov    rbx, qword [rsp + 136]
	LONG $0x24448b48; BYTE $0x38       // mov    rax, qword [rsp + 56]
	WORD $0xd231                       // xor    edx, edx

LBB1_430:
	LONG $0x586f0ff3; BYTE $0xf0               // movdqu    xmm3, oword [rax - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8               // pandn    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xd0 // paddb    xmm3, oword [r10 + 2*rdx - 48]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xd0 // movdqa    oword [r10 + 2*rdx - 48], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x527c; BYTE $0xe0 // paddb    xmm7, oword [r10 + 2*rdx - 32]
	LONG $0x7f0f4166; WORD $0x527c; BYTE $0xe0 // movdqa    oword [r10 + 2*rdx - 32], xmm7
	LONG $0x186f0ff3                           // movdqu    xmm3, oword [rax]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8               // pandn    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xf0 // paddb    xmm3, oword [r10 + 2*rdx - 16]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xf0 // movdqa    oword [r10 + 2*rdx - 16], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x523c             // paddb    xmm7, oword [r10 + 2*rdx]
	LONG $0x7f0f4166; WORD $0x523c             // movdqa    oword [r10 + 2*rdx], xmm7
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_430

LBB1_431:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_433
	LONG $0x6f0f41f3; WORD $0x131c                 // movdqu    xmm3, oword [r11 + rdx]
	LONG $0xfb6f0f66                               // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff                   // pminub    xmm7, xmm15
	LONG $0xfb740f66                               // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8                   // pandn    xmm7, xmm8
	LONG $0xdf6f0f66                               // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda                   // punpcklbw    xmm3, xmm10
	LONG $0x24448b48; BYTE $0x10                   // mov    rax, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x50                   // paddb    xmm3, oword [rax + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x50                   // movdqa    oword [rax + 2*rdx], xmm3
	LONG $0x680f4166; BYTE $0xfb                   // punpckhbw    xmm7, xmm11
	LONG $0x7cfc0f66; WORD $0x1050                 // paddb    xmm7, oword [rax + 2*rdx + 16]
	LONG $0x7c7f0f66; WORD $0x1050                 // movdqa    oword [rax + 2*rdx + 16], xmm7

LBB1_433:
	WORD $0x3949; BYTE $0xcc                   // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28               // mov    rdx, qword [rsp + 40]
	JE   LBB1_435
	LONG $0x6f0f41f3; WORD $0x0b7c; BYTE $0xf0 // movdqu    xmm7, oword [r11 + rcx - 16]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f44f3; WORD $0x484c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*rcx - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xfc0f4166; BYTE $0xf9               // paddb    xmm7, xmm9
	LONG $0x7c7f0ff3; WORD $0xe048             // movdqu    oword [rax + 2*rcx - 32], xmm7
	LONG $0x7c6f0ff3; WORD $0xf048             // movdqu    xmm7, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdffc0f66                           // paddb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xf048             // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_435:
	LONG $0x246c8b4c; BYTE $0x20       // mov    r13, qword [rsp + 32]
	WORD $0x394c; BYTE $0xea           // cmp    rdx, r13
	JBE  LBB1_444
	LONG $0x24448b48; BYTE $0x60       // mov    rax, qword [rsp + 96]
	LONG $0x02048d48                   // lea    rax, [rdx + rax]
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x24040348                   // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_442
	LONG $0x247c8348; WORD $0x0070     // cmp    qword [rsp + 112], 0
	LONG $0x0000bb41; WORD $0x0000     // mov    r11d, 0
	JE   LBB1_440
	LONG $0x24948b48; LONG $0x00000088 // mov    rdx, qword [rsp + 136]
	LONG $0x245c8b48; BYTE $0x68       // mov    rbx, qword [rsp + 104]
	WORD $0x3145; BYTE $0xdb           // xor    r11d, r11d

LBB1_439:
	LONG $0x5b6f0ff3; BYTE $0xf0               // movdqu    xmm3, oword [rbx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe0               // pandn    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    xmm3, oword [r10 + 2*r11 - 48]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    oword [r10 + 2*r11 - 48], xmm3
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    xmm3, oword [r10 + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    oword [r10 + 2*r11 - 32], xmm3
	LONG $0x1b6f0ff3                           // movdqu    xmm3, oword [rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe0               // pandn    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    xmm3, oword [r10 + 2*r11 - 16]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    oword [r10 + 2*r11 - 16], xmm3
	LONG $0x6f0f4366; WORD $0x5a1c             // movdqa    xmm3, oword [r10 + 2*r11]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a1c             // movdqa    oword [r10 + 2*r11], xmm3
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB1_439

LBB1_440:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_442
	LONG $0x6f0f42f3; WORD $0x183c                 // movdqu    xmm7, oword [rax + r11]
	LONG $0xdf6f0f66                               // movdqa    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xdf                   // pminub    xmm3, xmm15
	LONG $0xdf740f66                               // pcmpeqb    xmm3, xmm7
	LONG $0xdf0f4166; BYTE $0xd8                   // pandn    xmm3, xmm8
	LONG $0x24548b48; BYTE $0x10                   // mov    rdx, qword [rsp + 16]
	LONG $0x6f0f4266; WORD $0x5a24                 // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0xfb6f0f66                               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa                   // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                               // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a24                 // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0x10     // movdqa    xmm4, oword [rdx + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xdb                   // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                               // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0x10     // movdqa    oword [rdx + 2*r11 + 16], xmm4

LBB1_442:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x246c8b4c; BYTE $0x20   // mov    r13, qword [rsp + 32]
	JE   LBB1_444
	LONG $0x5c6f0ff3; WORD $0xf008 // movdqu    xmm3, oword [rax + rcx - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe6   // pandn    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x5c6f0ff3; WORD $0xe048 // movdqu    xmm3, oword [rax + 2*rcx - 32]
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfe   // punpcklbw    xmm7, xmm14
	LONG $0xdff80f66               // psubb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xe048 // movdqu    oword [rax + 2*rcx - 32], xmm3
	LONG $0x5c6f0ff3; WORD $0xf048 // movdqu    xmm3, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xe6   // punpckhbw    xmm4, xmm14
	LONG $0xdcf80f66               // psubb    xmm3, xmm4
	LONG $0x5c7f0ff3; WORD $0xf048 // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_444:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB1_447
	WORD $0xc031             // xor    eax, eax

LBB1_446:
	LONG $0x6f0f4166; WORD $0x460c // movdqa    xmm1, oword [r14 + 2*rax]
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xd6600f66               // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087 // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66               // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87   // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348               // add    rax, 8
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JB   LBB1_446

LBB1_447:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xed                       // test    r13, r13
	JE   LBB1_469
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x07fd8349                               // cmp    r13, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_449
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x247c8348; WORD $0x0050                 // cmp    qword [rsp + 80], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_449
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x000000b8; BYTE $0x18 // cmp    qword [rsp + 184], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_465
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24948b48; LONG $0x000000d0             // mov    rdx, qword [rsp + 208]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_464:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c28348               // add    rdx, 4
	JNE  LBB1_464

LBB1_465:
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x00 // cmp    qword [rsp + 128], 0
	JE   LBB1_468
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24948b48; LONG $0x000000b0             // mov    rdx, qword [rsp + 176]

LBB1_467:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_467

LBB1_468:
	LONG $0x24548b48; BYTE $0x50 // mov    rdx, qword [rsp + 80]
	WORD $0x394c; BYTE $0xea     // cmp    rdx, r13
	LONG $0xfbfe0f66             // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66             // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5 // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66             // paddd    xmm2, xmm1
	LONG $0xd07e0f66             // movd    eax, xmm2
	JE   LBB1_469

LBB1_449:
	WORD $0x894c; BYTE $0xeb           // mov    rbx, r13
	WORD $0x2948; BYTE $0xd3           // sub    rbx, rdx
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	LONG $0x96148d48                   // lea    rdx, [rsi + 4*rdx]

LBB1_450:
	WORD $0x0203             // add    eax, dword [rdx]
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_450

LBB1_469:
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_473
	WORD $0xd231                 // xor    edx, edx
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB1_471

LBB1_934:
	LONG $0x90440341; BYTE $0xfc // add    eax, dword [r8 + 4*rdx - 4]
	LONG $0x97442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rdx - 4]
	LONG $0x91448941; BYTE $0xfc // mov    dword [r9 + 4*rdx - 4], eax
	LONG $0x90040341             // add    eax, dword [r8 + 4*rdx]
	LONG $0x97042b41             // sub    eax, dword [r15 + 4*rdx]
	LONG $0x91048941             // mov    dword [r9 + 4*rdx], eax
	LONG $0x02c28348             // add    rdx, 2
	LONG $0x24543948; BYTE $0x30 // cmp    qword [rsp + 48], rdx
	JNE  LBB1_934

LBB1_471:
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	JE   LBB1_473
	LONG $0x2a1c8d4a                   // lea    rbx, [rdx + r13]
	LONG $0x24b48b48; LONG $0x00000090 // mov    rsi, qword [rsp + 144]
	WORD $0x0403; BYTE $0x9e           // add    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b48; BYTE $0x60       // mov    rbx, qword [rsp + 96]
	LONG $0x1a1c8d48                   // lea    rbx, [rdx + rbx]
	WORD $0x042b; BYTE $0x9e           // sub    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b4c; BYTE $0x58       // mov    r11, qword [rsp + 88]
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x93048941                   // mov    dword [r11 + 4*rdx], eax

LBB1_473:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_476
	WORD $0xc031             // xor    eax, eax

LBB1_475:
	LONG $0x6f0f4166; WORD $0x814c; BYTE $0xfc // movdqa    xmm1, oword [r9 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8154; BYTE $0x0c // movdqa    xmm2, oword [r9 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x815c; BYTE $0x1c // movdqa    xmm3, oword [r9 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8164; BYTE $0x2c // movdqa    xmm4, oword [r9 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x03               // movdqu    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_475

LBB1_476:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	JE   LBB1_478
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x4c6f0ff3; WORD $0xc088 // movdqu    xmm1, oword [rax + 4*rcx - 64]
	LONG $0xc8f50f66               // pmaddwd    xmm1, xmm0
	LONG $0xce660f66               // pcmpgtd    xmm1, xmm6
	LONG $0x546f0ff3; WORD $0xd088 // movdqu    xmm2, oword [rax + 4*rcx - 48]
	LONG $0xd0f50f66               // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66               // pcmpgtd    xmm2, xmm6
	LONG $0x5c6f0ff3; WORD $0xe088 // movdqu    xmm3, oword [rax + 4*rcx - 32]
	LONG $0xd8f50f66               // pmaddwd    xmm3, xmm0
	LONG $0xde660f66               // pcmpgtd    xmm3, xmm6
	LONG $0x646f0ff3; WORD $0xf088 // movdqu    xmm4, oword [rax + 4*rcx - 16]
	LONG $0xe0f50f66               // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66               // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66               // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66               // packssdw    xmm3, xmm4
	LONG $0xcb630f66               // packsswb    xmm1, xmm3
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4   // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd   // pandn    xmm1, xmm13
	LONG $0xcaeb0f66               // por    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0xf00b // movdqu    oword [rbx + rcx - 16], xmm1

LBB1_478:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x24440148; BYTE $0x38 // add    qword [rsp + 56], rax
	LONG $0x24440148; BYTE $0x68 // add    qword [rsp + 104], rax
	LONG $0x24543b48; BYTE $0x40 // cmp    rdx, qword [rsp + 64]
	JNE  LBB1_426
	JMP  LBB1_929

LBB1_867:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_868:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_871
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_870:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd057 // paddb    xmm3, oword [rdi + 2*rdx - 48]
	LONG $0x5c7f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe057 // paddb    xmm4, oword [rdi + 2*rdx - 32]
	LONG $0x647f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm4
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf057 // paddb    xmm3, oword [rdi + 2*rdx - 16]
	LONG $0x5c7f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x57   // paddb    xmm4, oword [rdi + 2*rdx]
	LONG $0x247f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm4
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_870

LBB1_871:
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2       // test    r10, r10
	JE   LBB1_873
	LONG $0x1c6f0ff3; BYTE $0x10   // movdqu    xmm3, oword [rax + rdx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x56   // paddb    xmm3, oword [rsi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x56   // movdqa    oword [rsi + 2*rdx], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1056 // paddb    xmm4, oword [rsi + 2*rdx + 16]
	LONG $0x647f0f66; WORD $0x1056 // movdqa    oword [rsi + 2*rdx + 16], xmm4

LBB1_873:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe6               // pand    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xe0 // movdqu    xmm3, oword [rax + 2*r14 - 32]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xebfc0f66                           // paddb    xmm5, xmm3
	LONG $0x7f0f42f3; WORD $0x706c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm5
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xe6               // punpckhbw    xmm4, xmm14
	LONG $0xe3fc0f66                           // paddb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_868

LBB1_874:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x24448b4c; BYTE $0x20       // mov    r8, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x10       // mov    rdi, qword [rsp + 16]
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000090 // mov    qword [rsp + 144], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	LONG $0xf8408d49                   // lea    rax, [r8 - 8]
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx
	LONG $0x248c894c; LONG $0x00000080 // mov    qword [rsp + 128], r9
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8948; BYTE $0xd9           // mov    rcx, rbx
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x24748b48; BYTE $0x30       // mov    rsi, qword [rsp + 48]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8949; BYTE $0xf7           // mov    r15, rsi
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x3a7c8d4a; BYTE $0x10       // lea    rdi, [rdx + r15 + 16]
	LONG $0xff498d49                   // lea    rcx, [r9 - 1]
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x248c8948; LONG $0x000000d0 // mov    qword [rsp + 208], rcx
	LONG $0x3a048d4a                   // lea    rax, [rdx + r15]
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	LONG $0x85048d4a; LONG $0x00000000 // lea    rax, [4*r8]
	WORD $0x894d; BYTE $0xc5           // mov    r13, r8
	LONG $0xaf048d4f                   // lea    r8, [r15 + 4*r13]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xde           // mov    r14, rbx
	LONG $0x05e6c149                   // shl    r14, 5
	LONG $0x5b048d48                   // lea    rax, [rbx + 2*rbx]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x761c8d48                   // lea    rbx, [rsi + 2*rsi]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x32548d4e; BYTE $0x30       // lea    r10, [rdx + r14 + 48]
	WORD $0x0149; BYTE $0xd6           // add    r14, rdx
	LONG $0x02448d4e; BYTE $0x04       // lea    r8, [rdx + r8 + 4]
	WORD $0x0149; BYTE $0xd7           // add    r15, rdx
	LONG $0x1a4c8d4c; BYTE $0x04       // lea    r9, [rdx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xe8           // sub    rax, r13
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	WORD $0x894d; BYTE $0xeb           // mov    r11, r13
	WORD $0xf749; BYTE $0xd3           // not    r11
	LONG $0x24548d49; BYTE $0xff       // lea    rdx, [r12 - 1]
	LONG $0x04eac148                   // shr    rdx, 4
	WORD $0x728d; BYTE $0x01           // lea    esi, [rdx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	WORD $0xc889                       // mov    eax, ecx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24448948; BYTE $0x78       // mov    qword [rsp + 120], rax
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x244c8948; BYTE $0x30       // mov    qword [rsp + 48], rcx
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0x245c8b48; BYTE $0x08       // mov    rbx, qword [rsp + 8]
	LONG $0xc3af0f48                   // imul    rax, rbx
	LONG $0x240c8b48                   // mov    rcx, qword [rsp]
	LONG $0x01448d48; BYTE $0x10       // lea    rax, [rcx + rax + 16]
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	LONG $0x24b48948; LONG $0x000000a8 // mov    qword [rsp + 168], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x24548948; BYTE $0x70       // mov    qword [rsp + 112], rdx
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	WORD $0x894c; BYTE $0xda           // mov    rdx, r11
	LONG $0x24548948; BYTE $0x60       // mov    qword [rsp + 96], rdx
	LONG $0xdbaf0f49                   // imul    rbx, r11
	LONG $0x19448d48; BYTE $0x10       // lea    rax, [rcx + rbx + 16]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000080 // mov    rax, qword [rsp + 128]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b0 // mov    qword [rsp + 176], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0xd231                       // xor    edx, edx

LBB1_876:
	LONG $0x245c8948; BYTE $0x18       // mov    qword [rsp + 24], rbx
	LONG $0x24943b48; LONG $0x000000a0 // cmp    rdx, qword [rsp + 160]
	LONG $0x24548948; BYTE $0x28       // mov    qword [rsp + 40], rdx
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	JAE  LBB1_885
	LONG $0x24448b48; BYTE $0x20       // mov    rax, qword [rsp + 32]
	LONG $0x021c8d4c                   // lea    r11, [rdx + rax]
	LONG $0x5caf0f4c; WORD $0x0824     // imul    r11, qword [rsp + 8]
	LONG $0x241c034c                   // add    r11, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_883
	LONG $0x247c8348; WORD $0x0070     // cmp    qword [rsp + 112], 0
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	JE   LBB1_881
	LONG $0x249c8b48; LONG $0x00000088 // mov    rbx, qword [rsp + 136]
	LONG $0x24448b48; BYTE $0x38       // mov    rax, qword [rsp + 56]
	WORD $0xd231                       // xor    edx, edx

LBB1_880:
	LONG $0x586f0ff3; BYTE $0xf0               // movdqu    xmm3, oword [rax - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xd0 // paddb    xmm3, oword [r10 + 2*rdx - 48]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xd0 // movdqa    oword [r10 + 2*rdx - 48], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x527c; BYTE $0xe0 // paddb    xmm7, oword [r10 + 2*rdx - 32]
	LONG $0x7f0f4166; WORD $0x527c; BYTE $0xe0 // movdqa    oword [r10 + 2*rdx - 32], xmm7
	LONG $0x186f0ff3                           // movdqu    xmm3, oword [rax]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xf0 // paddb    xmm3, oword [r10 + 2*rdx - 16]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xf0 // movdqa    oword [r10 + 2*rdx - 16], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x523c             // paddb    xmm7, oword [r10 + 2*rdx]
	LONG $0x7f0f4166; WORD $0x523c             // movdqa    oword [r10 + 2*rdx], xmm7
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_880

LBB1_881:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_883
	LONG $0x6f0f41f3; WORD $0x131c                 // movdqu    xmm3, oword [r11 + rdx]
	LONG $0xfb6f0f66                               // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff                   // pminub    xmm7, xmm15
	LONG $0xfb740f66                               // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8                   // pand    xmm7, xmm8
	LONG $0xdf6f0f66                               // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda                   // punpcklbw    xmm3, xmm10
	LONG $0x24448b48; BYTE $0x10                   // mov    rax, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x50                   // paddb    xmm3, oword [rax + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x50                   // movdqa    oword [rax + 2*rdx], xmm3
	LONG $0x680f4166; BYTE $0xfb                   // punpckhbw    xmm7, xmm11
	LONG $0x7cfc0f66; WORD $0x1050                 // paddb    xmm7, oword [rax + 2*rdx + 16]
	LONG $0x7c7f0f66; WORD $0x1050                 // movdqa    oword [rax + 2*rdx + 16], xmm7

LBB1_883:
	WORD $0x3949; BYTE $0xcc                   // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28               // mov    rdx, qword [rsp + 40]
	JE   LBB1_885
	LONG $0x6f0f41f3; WORD $0x0b7c; BYTE $0xf0 // movdqu    xmm7, oword [r11 + rcx - 16]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f44f3; WORD $0x484c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*rcx - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xfc0f4166; BYTE $0xf9               // paddb    xmm7, xmm9
	LONG $0x7c7f0ff3; WORD $0xe048             // movdqu    oword [rax + 2*rcx - 32], xmm7
	LONG $0x7c6f0ff3; WORD $0xf048             // movdqu    xmm7, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdffc0f66                           // paddb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xf048             // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_885:
	LONG $0x246c8b4c; BYTE $0x20       // mov    r13, qword [rsp + 32]
	WORD $0x394c; BYTE $0xea           // cmp    rdx, r13
	JBE  LBB1_894
	LONG $0x24448b48; BYTE $0x60       // mov    rax, qword [rsp + 96]
	LONG $0x02048d48                   // lea    rax, [rdx + rax]
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x24040348                   // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_892
	LONG $0x247c8348; WORD $0x0070     // cmp    qword [rsp + 112], 0
	LONG $0x0000bb41; WORD $0x0000     // mov    r11d, 0
	JE   LBB1_890
	LONG $0x24948b48; LONG $0x00000088 // mov    rdx, qword [rsp + 136]
	LONG $0x245c8b48; BYTE $0x68       // mov    rbx, qword [rsp + 104]
	WORD $0x3145; BYTE $0xdb           // xor    r11d, r11d

LBB1_889:
	LONG $0x5b6f0ff3; BYTE $0xf0               // movdqu    xmm3, oword [rbx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    xmm3, oword [r10 + 2*r11 - 48]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    oword [r10 + 2*r11 - 48], xmm3
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    xmm3, oword [r10 + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    oword [r10 + 2*r11 - 32], xmm3
	LONG $0x1b6f0ff3                           // movdqu    xmm3, oword [rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    xmm3, oword [r10 + 2*r11 - 16]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    oword [r10 + 2*r11 - 16], xmm3
	LONG $0x6f0f4366; WORD $0x5a1c             // movdqa    xmm3, oword [r10 + 2*r11]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a1c             // movdqa    oword [r10 + 2*r11], xmm3
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB1_889

LBB1_890:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_892
	LONG $0x6f0f42f3; WORD $0x183c                 // movdqu    xmm7, oword [rax + r11]
	LONG $0xdf6f0f66                               // movdqa    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xdf                   // pminub    xmm3, xmm15
	LONG $0xdf740f66                               // pcmpeqb    xmm3, xmm7
	LONG $0xdb0f4166; BYTE $0xd8                   // pand    xmm3, xmm8
	LONG $0x24548b48; BYTE $0x10                   // mov    rdx, qword [rsp + 16]
	LONG $0x6f0f4266; WORD $0x5a24                 // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0xfb6f0f66                               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa                   // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                               // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a24                 // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0x10     // movdqa    xmm4, oword [rdx + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xdb                   // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                               // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0x10     // movdqa    oword [rdx + 2*r11 + 16], xmm4

LBB1_892:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x246c8b4c; BYTE $0x20   // mov    r13, qword [rsp + 32]
	JE   LBB1_894
	LONG $0x5c6f0ff3; WORD $0xf008 // movdqu    xmm3, oword [rax + rcx - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe6   // pand    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x5c6f0ff3; WORD $0xe048 // movdqu    xmm3, oword [rax + 2*rcx - 32]
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfe   // punpcklbw    xmm7, xmm14
	LONG $0xdff80f66               // psubb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xe048 // movdqu    oword [rax + 2*rcx - 32], xmm3
	LONG $0x5c6f0ff3; WORD $0xf048 // movdqu    xmm3, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xe6   // punpckhbw    xmm4, xmm14
	LONG $0xdcf80f66               // psubb    xmm3, xmm4
	LONG $0x5c7f0ff3; WORD $0xf048 // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_894:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB1_897
	WORD $0xc031             // xor    eax, eax

LBB1_896:
	LONG $0x6f0f4166; WORD $0x460c // movdqa    xmm1, oword [r14 + 2*rax]
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xd6600f66               // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087 // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66               // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87   // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348               // add    rax, 8
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JB   LBB1_896

LBB1_897:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xed                       // test    r13, r13
	JE   LBB1_919
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x07fd8349                               // cmp    r13, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_899
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x247c8348; WORD $0x0050                 // cmp    qword [rsp + 80], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_899
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x000000b8; BYTE $0x18 // cmp    qword [rsp + 184], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_915
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24948b48; LONG $0x000000d0             // mov    rdx, qword [rsp + 208]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_914:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c28348               // add    rdx, 4
	JNE  LBB1_914

LBB1_915:
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x00 // cmp    qword [rsp + 128], 0
	JE   LBB1_918
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24948b48; LONG $0x000000b0             // mov    rdx, qword [rsp + 176]

LBB1_917:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_917

LBB1_918:
	LONG $0x24548b48; BYTE $0x50 // mov    rdx, qword [rsp + 80]
	WORD $0x394c; BYTE $0xea     // cmp    rdx, r13
	LONG $0xfbfe0f66             // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66             // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5 // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66             // paddd    xmm2, xmm1
	LONG $0xd07e0f66             // movd    eax, xmm2
	JE   LBB1_919

LBB1_899:
	WORD $0x894c; BYTE $0xeb           // mov    rbx, r13
	WORD $0x2948; BYTE $0xd3           // sub    rbx, rdx
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	LONG $0x96148d48                   // lea    rdx, [rsi + 4*rdx]

LBB1_900:
	WORD $0x0203             // add    eax, dword [rdx]
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_900

LBB1_919:
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_923
	WORD $0xd231                 // xor    edx, edx
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB1_921

LBB1_940:
	LONG $0x90440341; BYTE $0xfc // add    eax, dword [r8 + 4*rdx - 4]
	LONG $0x97442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rdx - 4]
	LONG $0x91448941; BYTE $0xfc // mov    dword [r9 + 4*rdx - 4], eax
	LONG $0x90040341             // add    eax, dword [r8 + 4*rdx]
	LONG $0x97042b41             // sub    eax, dword [r15 + 4*rdx]
	LONG $0x91048941             // mov    dword [r9 + 4*rdx], eax
	LONG $0x02c28348             // add    rdx, 2
	LONG $0x24543948; BYTE $0x30 // cmp    qword [rsp + 48], rdx
	JNE  LBB1_940

LBB1_921:
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	JE   LBB1_923
	LONG $0x2a1c8d4a                   // lea    rbx, [rdx + r13]
	LONG $0x24b48b48; LONG $0x00000090 // mov    rsi, qword [rsp + 144]
	WORD $0x0403; BYTE $0x9e           // add    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b48; BYTE $0x60       // mov    rbx, qword [rsp + 96]
	LONG $0x1a1c8d48                   // lea    rbx, [rdx + rbx]
	WORD $0x042b; BYTE $0x9e           // sub    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b4c; BYTE $0x58       // mov    r11, qword [rsp + 88]
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x93048941                   // mov    dword [r11 + 4*rdx], eax

LBB1_923:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_926
	WORD $0xc031             // xor    eax, eax

LBB1_925:
	LONG $0x6f0f4166; WORD $0x814c; BYTE $0xfc // movdqa    xmm1, oword [r9 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8154; BYTE $0x0c // movdqa    xmm2, oword [r9 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x815c; BYTE $0x1c // movdqa    xmm3, oword [r9 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8164; BYTE $0x2c // movdqa    xmm4, oword [r9 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x03               // movdqu    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_925

LBB1_926:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	JE   LBB1_928
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x4c6f0ff3; WORD $0xc088 // movdqu    xmm1, oword [rax + 4*rcx - 64]
	LONG $0xc8f50f66               // pmaddwd    xmm1, xmm0
	LONG $0xce660f66               // pcmpgtd    xmm1, xmm6
	LONG $0x546f0ff3; WORD $0xd088 // movdqu    xmm2, oword [rax + 4*rcx - 48]
	LONG $0xd0f50f66               // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66               // pcmpgtd    xmm2, xmm6
	LONG $0x5c6f0ff3; WORD $0xe088 // movdqu    xmm3, oword [rax + 4*rcx - 32]
	LONG $0xd8f50f66               // pmaddwd    xmm3, xmm0
	LONG $0xde660f66               // pcmpgtd    xmm3, xmm6
	LONG $0x646f0ff3; WORD $0xf088 // movdqu    xmm4, oword [rax + 4*rcx - 16]
	LONG $0xe0f50f66               // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66               // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66               // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66               // packssdw    xmm3, xmm4
	LONG $0xcb630f66               // packsswb    xmm1, xmm3
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4   // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd   // pandn    xmm1, xmm13
	LONG $0xcaeb0f66               // por    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0xf00b // movdqu    oword [rbx + rcx - 16], xmm1

LBB1_928:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x24440148; BYTE $0x38 // add    qword [rsp + 56], rax
	LONG $0x24440148; BYTE $0x68 // add    qword [rsp + 104], rax
	LONG $0x24543b48; BYTE $0x40 // cmp    rdx, qword [rsp + 64]
	JNE  LBB1_876
	JMP  LBB1_929

LBB1_271:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_272:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_275
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_274:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xd057 // paddb    xmm4, oword [rdi + 2*rdx - 48]
	LONG $0x647f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0xe057 // paddb    xmm3, oword [rdi + 2*rdx - 32]
	LONG $0x5c7f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm3
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xf057 // paddb    xmm4, oword [rdi + 2*rdx - 16]
	LONG $0x647f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x1cfc0f66; BYTE $0x57   // paddb    xmm3, oword [rdi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm3
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_274

LBB1_275:
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2       // test    r10, r10
	JE   LBB1_277
	LONG $0x1c6f0ff3; BYTE $0x10   // movdqu    xmm3, oword [rax + rdx]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x24748b48; BYTE $0x28   // mov    rsi, qword [rsp + 40]
	LONG $0x24fc0f66; BYTE $0x56   // paddb    xmm4, oword [rsi + 2*rdx]
	LONG $0x247f0f66; BYTE $0x56   // movdqa    oword [rsi + 2*rdx], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0x1056 // paddb    xmm3, oword [rsi + 2*rdx + 16]
	LONG $0x5c7f0f66; WORD $0x1056 // movdqa    oword [rsi + 2*rdx + 16], xmm3

LBB1_277:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x28               // mov    rax, qword [rsp + 40]
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xe0 // movdqu    xmm4, oword [rax + 2*r14 - 32]
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xecfc0f66                           // paddb    xmm5, xmm4
	LONG $0x7f0f42f3; WORD $0x706c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm5
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    xmm4, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdcfc0f66                           // paddb    xmm3, xmm4
	LONG $0x7f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm3
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_272

LBB1_278:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x245c8b4c; BYTE $0x20       // mov    r11, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x28       // mov    rdi, qword [rsp + 40]
	LONG $0x245c8b48; BYTE $0x10       // mov    rbx, qword [rsp + 16]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	LONG $0xf8438d49                   // lea    rax, [r11 - 8]
	LONG $0x24848948; LONG $0x00000080 // mov    qword [rsp + 128], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x24948948; LONG $0x00000090 // mov    qword [rsp + 144], rdx
	LONG $0x24748b48; BYTE $0x18       // mov    rsi, qword [rsp + 24]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8948; BYTE $0xf1           // mov    rcx, rsi
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x245c8b48; BYTE $0x30       // mov    rbx, qword [rsp + 48]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8949; BYTE $0xdf           // mov    r15, rbx
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x397c8d4a; BYTE $0x10       // lea    rdi, [rcx + r15 + 16]
	WORD $0xff48; BYTE $0xca           // dec    rdx
	WORD $0x2948; BYTE $0xc2           // sub    rdx, rax
	LONG $0x24948948; LONG $0x000000b0 // mov    qword [rsp + 176], rdx
	LONG $0x39048d4a                   // lea    rax, [rcx + r15]
	LONG $0x24848948; LONG $0x000000a8 // mov    qword [rsp + 168], rax
	LONG $0x9d048d4a; LONG $0x00000000 // lea    rax, [4*r11]
	LONG $0x9f048d4f                   // lea    r8, [r15 + 4*r11]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xf5           // mov    r13, rsi
	LONG $0x05e5c149                   // shl    r13, 5
	LONG $0x76048d48                   // lea    rax, [rsi + 2*rsi]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x5b1c8d48                   // lea    rbx, [rbx + 2*rbx]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x29548d4a; BYTE $0x30       // lea    rdx, [rcx + r13 + 48]
	WORD $0x0149; BYTE $0xcd           // add    r13, rcx
	LONG $0x01548d4e; BYTE $0x04       // lea    r10, [rcx + r8 + 4]
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x19448d4c; BYTE $0x04       // lea    r8, [rcx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xd8           // sub    rax, r11
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	WORD $0x894d; BYTE $0xd9           // mov    r9, r11
	WORD $0xf749; BYTE $0xd1           // not    r9
	LONG $0x244c8d49; BYTE $0xff       // lea    rcx, [r12 - 1]
	LONG $0x04e9c148                   // shr    rcx, 4
	WORD $0x718d; BYTE $0x01           // lea    esi, [rcx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x245c8b48; BYTE $0x48       // mov    rbx, qword [rsp + 72]
	WORD $0xd889                       // mov    eax, ebx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24448948; BYTE $0x60       // mov    qword [rsp + 96], rax
	WORD $0x2948; BYTE $0xc3           // sub    rbx, rax
	LONG $0x245c8948; BYTE $0x30       // mov    qword [rsp + 48], rbx
	WORD $0x894c; BYTE $0xd8           // mov    rax, r11
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	WORD $0x894c; BYTE $0xd8           // mov    rax, r11
	LONG $0x24748b4c; BYTE $0x08       // mov    r14, qword [rsp + 8]
	LONG $0xc6af0f49                   // imul    rax, r14
	LONG $0x241c8b48                   // mov    rbx, qword [rsp]
	LONG $0x03448d48; BYTE $0x10       // lea    rax, [rbx + rax + 16]
	LONG $0x24448948; BYTE $0x10       // mov    qword [rsp + 16], rax
	LONG $0x24748948; BYTE $0x70       // mov    qword [rsp + 112], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x244c8948; BYTE $0x78       // mov    qword [rsp + 120], rcx
	WORD $0x2948; BYTE $0xc8           // sub    rax, rcx
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x894c; BYTE $0xce           // mov    rsi, r9
	LONG $0x24748948; BYTE $0x58       // mov    qword [rsp + 88], rsi
	LONG $0xf1af0f4d                   // imul    r14, r9
	LONG $0x33448d4a; BYTE $0x10       // lea    rax, [rbx + r14 + 16]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000090 // mov    rax, qword [rsp + 144]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0x3145; BYTE $0xc9           // xor    r9d, r9d
	LONG $0x24748b4c; BYTE $0x48       // mov    r14, qword [rsp + 72]

LBB1_280:
	LONG $0x245c8948; BYTE $0x18   // mov    qword [rsp + 24], rbx
	LONG $0x244c3b4c; BYTE $0x38   // cmp    r9, qword [rsp + 56]
	LONG $0x24748b48; BYTE $0x08   // mov    rsi, qword [rsp + 8]
	WORD $0x894c; BYTE $0xcb       // mov    rbx, r9
	JAE  LBB1_289
	WORD $0x894c; BYTE $0xd8       // mov    rax, r11
	WORD $0x8949; BYTE $0xdb       // mov    r11, rbx
	WORD $0x8948; BYTE $0xc1       // mov    rcx, rax
	LONG $0x030c8d4c               // lea    r9, [rbx + rax]
	LONG $0xceaf0f4c               // imul    r9, rsi
	LONG $0x240c034c               // add    r9, qword [rsp]
	WORD $0x854d; BYTE $0xe4       // test    r12, r12
	JE   LBB1_287
	LONG $0x247c8348; WORD $0x0078 // cmp    qword [rsp + 120], 0
	LONG $0x000000bb; BYTE $0x00   // mov    ebx, 0
	JE   LBB1_285
	LONG $0x24448b48; BYTE $0x50   // mov    rax, qword [rsp + 80]
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	WORD $0xdb31                   // xor    ebx, ebx

LBB1_284:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xd8   // pandn    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x7cfc0f66; WORD $0xd05a // paddb    xmm7, oword [rdx + 2*rbx - 48]
	LONG $0x7c7f0f66; WORD $0xd05a // movdqa    oword [rdx + 2*rbx - 48], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x5cfc0f66; WORD $0xe05a // paddb    xmm3, oword [rdx + 2*rbx - 32]
	LONG $0x5c7f0f66; WORD $0xe05a // movdqa    oword [rdx + 2*rbx - 32], xmm3
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xd8   // pandn    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x7cfc0f66; WORD $0xf05a // paddb    xmm7, oword [rdx + 2*rbx - 16]
	LONG $0x7c7f0f66; WORD $0xf05a // movdqa    oword [rdx + 2*rbx - 16], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x1cfc0f66; BYTE $0x5a   // paddb    xmm3, oword [rdx + 2*rbx]
	LONG $0x1c7f0f66; BYTE $0x5a   // movdqa    oword [rdx + 2*rbx], xmm3
	LONG $0x20c38348               // add    rbx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB1_284

LBB1_285:
	LONG $0x247c8348; WORD $0x0070 // cmp    qword [rsp + 112], 0
	LONG $0x24748b48; BYTE $0x08   // mov    rsi, qword [rsp + 8]
	JE   LBB1_287
	LONG $0x6f0f41f3; WORD $0x191c // movdqu    xmm3, oword [r9 + rbx]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xd8   // pandn    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x24448b48; BYTE $0x28   // mov    rax, qword [rsp + 40]
	LONG $0x3cfc0f66; BYTE $0x58   // paddb    xmm7, oword [rax + 2*rbx]
	LONG $0x3c7f0f66; BYTE $0x58   // movdqa    oword [rax + 2*rbx], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x5cfc0f66; WORD $0x1058 // paddb    xmm3, oword [rax + 2*rbx + 16]
	LONG $0x5c7f0f66; WORD $0x1058 // movdqa    oword [rax + 2*rbx + 16], xmm3

LBB1_287:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	WORD $0x8949; BYTE $0xcb                   // mov    r11, rcx
	JE   LBB1_289
	LONG $0x6f0f43f3; WORD $0x317c; BYTE $0xf0 // movdqu    xmm7, oword [r9 + r14 - 16]
	LONG $0x740f4166; BYTE $0xff               // pcmpeqb    xmm7, xmm15
	LONG $0xdf0f4166; BYTE $0xfe               // pandn    xmm7, xmm14
	LONG $0x24448b48; BYTE $0x28               // mov    rax, qword [rsp + 40]
	LONG $0x6f0f46f3; WORD $0x704c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*r14 - 32]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xde               // punpcklbw    xmm3, xmm14
	LONG $0xfc0f4166; BYTE $0xd9               // paddb    xmm3, xmm9
	LONG $0x7f0f42f3; WORD $0x705c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm3
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xfe               // punpckhbw    xmm7, xmm14
	LONG $0xfbfc0f66                           // paddb    xmm7, xmm3
	LONG $0x7f0f42f3; WORD $0x707c; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm7

LBB1_289:
	WORD $0x394c; BYTE $0xdb       // cmp    rbx, r11
	WORD $0x8949; BYTE $0xd9       // mov    r9, rbx
	JBE  LBB1_298
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x01048d49               // lea    rax, [r9 + rax]
	LONG $0xc6af0f48               // imul    rax, rsi
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4       // test    r12, r12
	JE   LBB1_296
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0x247c8348; WORD $0x0078 // cmp    qword [rsp + 120], 0
	LONG $0x0000bb41; WORD $0x0000 // mov    r11d, 0
	JE   LBB1_294
	LONG $0x245c8b48; BYTE $0x50   // mov    rbx, qword [rsp + 80]
	LONG $0x244c8b4c; BYTE $0x68   // mov    r9, qword [rsp + 104]
	WORD $0x3145; BYTE $0xdb       // xor    r11d, r11d

LBB1_293:
	LONG $0x6f0f41f3; WORD $0xf059             // movdqu    xmm3, oword [r9 - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xd8               // pandn    xmm3, xmm8
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0xd0 // movdqa    xmm4, oword [rdx + 2*r11 - 48]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0xd0 // movdqa    oword [rdx + 2*r11 - 48], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0xe0 // movdqa    xmm4, oword [rdx + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0xe0 // movdqa    oword [rdx + 2*r11 - 32], xmm4
	LONG $0x6f0f41f3; BYTE $0x19               // movdqu    xmm3, oword [r9]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xd8               // pandn    xmm3, xmm8
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0xf0 // movdqa    xmm4, oword [rdx + 2*r11 - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0xf0 // movdqa    oword [rdx + 2*r11 - 16], xmm4
	LONG $0x6f0f4266; WORD $0x5a24             // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a24             // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c18349                           // add    r9, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_293

LBB1_294:
	LONG $0x247c8348; WORD $0x0070             // cmp    qword [rsp + 112], 0
	WORD $0x8949; BYTE $0xf1                   // mov    r9, rsi
	JE   LBB1_296
	LONG $0x6f0f42f3; WORD $0x1824             // movdqu    xmm4, oword [rax + r11]
	LONG $0x740f4166; BYTE $0xe7               // pcmpeqb    xmm4, xmm15
	LONG $0xdf0f4166; BYTE $0xe0               // pandn    xmm4, xmm8
	LONG $0x24748b48; BYTE $0x28               // mov    rsi, qword [rsp + 40]
	LONG $0x6f0f4266; WORD $0x5e3c             // movdqa    xmm7, oword [rsi + 2*r11]
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfbf80f66                           // psubb    xmm7, xmm3
	LONG $0x7f0f4266; WORD $0x5e3c             // movdqa    oword [rsi + 2*r11], xmm7
	LONG $0x6f0f4266; WORD $0x5e5c; BYTE $0x10 // movdqa    xmm3, oword [rsi + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4266; WORD $0x5e5c; BYTE $0x10 // movdqa    oword [rsi + 2*r11 + 16], xmm3

LBB1_296:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	LONG $0x245c8b4c; BYTE $0x20               // mov    r11, qword [rsp + 32]
	JE   LBB1_298
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x28               // mov    rax, qword [rsp + 40]
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xe0 // movdqu    xmm4, oword [rax + 2*r14 - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm4
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    xmm4, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4

LBB1_298:
	WORD $0x854d; BYTE $0xf6 // test    r14, r14
	JE   LBB1_301
	WORD $0xc031             // xor    eax, eax

LBB1_300:
	LONG $0x6f0f4166; WORD $0x454c; BYTE $0x00 // movdqa    xmm1, oword [r13 + 2*rax]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd6600f66                           // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087             // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66                           // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87               // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348                           // add    rax, 8
	WORD $0x394c; BYTE $0xf0                   // cmp    rax, r14
	JB   LBB1_300

LBB1_301:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xdb                       // test    r11, r11
	JE   LBB1_323
	WORD $0xf631                                   // xor    esi, esi
	LONG $0x07fb8349                               // cmp    r11, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_303
	WORD $0xf631                                   // xor    esi, esi
	LONG $0x24bc8348; LONG $0x00000098; BYTE $0x00 // cmp    qword [rsp + 152], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_303
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x18 // cmp    qword [rsp + 128], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_319
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24b48b48; LONG $0x000000b0             // mov    rsi, qword [rsp + 176]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_318:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c68348               // add    rsi, 4
	JNE  LBB1_318

LBB1_319:
	LONG $0x24bc8348; LONG $0x00000090; BYTE $0x00 // cmp    qword [rsp + 144], 0
	JE   LBB1_322
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24b48b48; LONG $0x000000b8             // mov    rsi, qword [rsp + 184]

LBB1_321:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	JNE  LBB1_321

LBB1_322:
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	WORD $0x394c; BYTE $0xde           // cmp    rsi, r11
	LONG $0xfbfe0f66                   // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e       // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66                   // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5       // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66                   // paddd    xmm2, xmm1
	LONG $0xd07e0f66                   // movd    eax, xmm2
	JE   LBB1_323

LBB1_303:
	WORD $0x894c; BYTE $0xdb           // mov    rbx, r11
	WORD $0x2948; BYTE $0xf3           // sub    rbx, rsi
	LONG $0x248c8b48; LONG $0x000000a8 // mov    rcx, qword [rsp + 168]
	LONG $0xb1348d48                   // lea    rsi, [rcx + 4*rsi]

LBB1_304:
	WORD $0x0603             // add    eax, dword [rsi]
	LONG $0x04c68348         // add    rsi, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_304

LBB1_323:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_327
	WORD $0xf631                 // xor    esi, esi
	LONG $0x01fe8349             // cmp    r14, 1
	JE   LBB1_325

LBB1_932:
	LONG $0xb2440341; BYTE $0xfc // add    eax, dword [r10 + 4*rsi - 4]
	LONG $0xb7442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rsi - 4]
	LONG $0xb0448941; BYTE $0xfc // mov    dword [r8 + 4*rsi - 4], eax
	LONG $0xb2040341             // add    eax, dword [r10 + 4*rsi]
	LONG $0xb7042b41             // sub    eax, dword [r15 + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x02c68348             // add    rsi, 2
	LONG $0x24743948; BYTE $0x30 // cmp    qword [rsp + 48], rsi
	JNE  LBB1_932

LBB1_325:
	LONG $0x247c8348; WORD $0x0060     // cmp    qword [rsp + 96], 0
	JE   LBB1_327
	LONG $0x1e1c8d4a                   // lea    rbx, [rsi + r11]
	LONG $0x248c8b48; LONG $0x00000088 // mov    rcx, qword [rsp + 136]
	WORD $0x0403; BYTE $0x99           // add    eax, dword [rcx + 4*rbx]
	LONG $0x245c8b48; BYTE $0x58       // mov    rbx, qword [rsp + 88]
	LONG $0x1e1c8d48                   // lea    rbx, [rsi + rbx]
	WORD $0x042b; BYTE $0x99           // sub    eax, dword [rcx + 4*rbx]
	WORD $0x894c; BYTE $0xc9           // mov    rcx, r9
	LONG $0x248c8b4c; LONG $0x000000a0 // mov    r9, qword [rsp + 160]
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0xb1048941                   // mov    dword [r9 + 4*rsi], eax
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx

LBB1_327:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_330
	WORD $0xc031             // xor    eax, eax

LBB1_329:
	LONG $0x6f0f4166; WORD $0x804c; BYTE $0xfc // movdqa    xmm1, oword [r8 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8054; BYTE $0x0c // movdqa    xmm2, oword [r8 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x805c; BYTE $0x1c // movdqa    xmm3, oword [r8 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8064; BYTE $0x2c // movdqa    xmm4, oword [r8 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x03               // movdqu    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_329

LBB1_330:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	JE   LBB1_332
	LONG $0x248c8b48; LONG $0x000000a0         // mov    rcx, qword [rsp + 160]
	LONG $0x6f0f42f3; WORD $0xb14c; BYTE $0xc0 // movdqu    xmm1, oword [rcx + 4*r14 - 64]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f42f3; WORD $0xb154; BYTE $0xd0 // movdqu    xmm2, oword [rcx + 4*r14 - 48]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f42f3; WORD $0xb15c; BYTE $0xe0 // movdqu    xmm3, oword [rcx + 4*r14 - 32]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f42f3; WORD $0xb164; BYTE $0xf0 // movdqu    xmm4, oword [rcx + 4*r14 - 16]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x7f0f42f3; WORD $0x334c; BYTE $0xf0 // movdqu    oword [rbx + r14 - 16], xmm1

LBB1_332:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x24440148; BYTE $0x10 // add    qword [rsp + 16], rax
	LONG $0x24440148; BYTE $0x68 // add    qword [rsp + 104], rax
	LONG $0x244c3b4c; BYTE $0x40 // cmp    r9, qword [rsp + 64]
	JNE  LBB1_280
	JMP  LBB1_929

LBB1_721:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_722:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_725
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_724:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd057 // paddb    xmm3, oword [rdi + 2*rdx - 48]
	LONG $0x5c7f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe057 // paddb    xmm4, oword [rdi + 2*rdx - 32]
	LONG $0x647f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm4
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf057 // paddb    xmm3, oword [rdi + 2*rdx - 16]
	LONG $0x5c7f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x57   // paddb    xmm4, oword [rdi + 2*rdx]
	LONG $0x247f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm4
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_724

LBB1_725:
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2       // test    r10, r10
	JE   LBB1_727
	LONG $0x1c6f0ff3; BYTE $0x10   // movdqu    xmm3, oword [rax + rdx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x56   // paddb    xmm3, oword [rsi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x56   // movdqa    oword [rsi + 2*rdx], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1056 // paddb    xmm4, oword [rsi + 2*rdx + 16]
	LONG $0x647f0f66; WORD $0x1056 // movdqa    oword [rsi + 2*rdx + 16], xmm4

LBB1_727:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe6               // pandn    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xe0 // movdqu    xmm3, oword [rax + 2*r14 - 32]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xebfc0f66                           // paddb    xmm5, xmm3
	LONG $0x7f0f42f3; WORD $0x706c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm5
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xe6               // punpckhbw    xmm4, xmm14
	LONG $0xe3fc0f66                           // paddb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_722

LBB1_728:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x24448b4c; BYTE $0x20       // mov    r8, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x10       // mov    rdi, qword [rsp + 16]
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000090 // mov    qword [rsp + 144], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	LONG $0xf8408d49                   // lea    rax, [r8 - 8]
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx
	LONG $0x248c894c; LONG $0x00000080 // mov    qword [rsp + 128], r9
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8948; BYTE $0xd9           // mov    rcx, rbx
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x24748b48; BYTE $0x30       // mov    rsi, qword [rsp + 48]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8949; BYTE $0xf7           // mov    r15, rsi
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x3a7c8d4a; BYTE $0x10       // lea    rdi, [rdx + r15 + 16]
	LONG $0xff498d49                   // lea    rcx, [r9 - 1]
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x248c8948; LONG $0x000000d0 // mov    qword [rsp + 208], rcx
	LONG $0x3a048d4a                   // lea    rax, [rdx + r15]
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	LONG $0x85048d4a; LONG $0x00000000 // lea    rax, [4*r8]
	WORD $0x894d; BYTE $0xc5           // mov    r13, r8
	LONG $0xaf048d4f                   // lea    r8, [r15 + 4*r13]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xde           // mov    r14, rbx
	LONG $0x05e6c149                   // shl    r14, 5
	LONG $0x5b048d48                   // lea    rax, [rbx + 2*rbx]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x761c8d48                   // lea    rbx, [rsi + 2*rsi]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x32548d4e; BYTE $0x30       // lea    r10, [rdx + r14 + 48]
	WORD $0x0149; BYTE $0xd6           // add    r14, rdx
	LONG $0x02448d4e; BYTE $0x04       // lea    r8, [rdx + r8 + 4]
	WORD $0x0149; BYTE $0xd7           // add    r15, rdx
	LONG $0x1a4c8d4c; BYTE $0x04       // lea    r9, [rdx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xe8           // sub    rax, r13
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	WORD $0x894d; BYTE $0xeb           // mov    r11, r13
	WORD $0xf749; BYTE $0xd3           // not    r11
	LONG $0x24548d49; BYTE $0xff       // lea    rdx, [r12 - 1]
	LONG $0x04eac148                   // shr    rdx, 4
	WORD $0x728d; BYTE $0x01           // lea    esi, [rdx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	WORD $0xc889                       // mov    eax, ecx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24448948; BYTE $0x78       // mov    qword [rsp + 120], rax
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x244c8948; BYTE $0x30       // mov    qword [rsp + 48], rcx
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0x245c8b48; BYTE $0x08       // mov    rbx, qword [rsp + 8]
	LONG $0xc3af0f48                   // imul    rax, rbx
	LONG $0x240c8b48                   // mov    rcx, qword [rsp]
	LONG $0x01448d48; BYTE $0x10       // lea    rax, [rcx + rax + 16]
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	LONG $0x24b48948; LONG $0x000000a8 // mov    qword [rsp + 168], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x24548948; BYTE $0x70       // mov    qword [rsp + 112], rdx
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	WORD $0x894c; BYTE $0xda           // mov    rdx, r11
	LONG $0x24548948; BYTE $0x60       // mov    qword [rsp + 96], rdx
	LONG $0xdbaf0f49                   // imul    rbx, r11
	LONG $0x19448d48; BYTE $0x10       // lea    rax, [rcx + rbx + 16]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000080 // mov    rax, qword [rsp + 128]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b0 // mov    qword [rsp + 176], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0xd231                       // xor    edx, edx

LBB1_730:
	LONG $0x245c8948; BYTE $0x18       // mov    qword [rsp + 24], rbx
	LONG $0x24943b48; LONG $0x000000a0 // cmp    rdx, qword [rsp + 160]
	LONG $0x24548948; BYTE $0x28       // mov    qword [rsp + 40], rdx
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	JAE  LBB1_739
	LONG $0x24448b48; BYTE $0x20       // mov    rax, qword [rsp + 32]
	LONG $0x021c8d4c                   // lea    r11, [rdx + rax]
	LONG $0x5caf0f4c; WORD $0x0824     // imul    r11, qword [rsp + 8]
	LONG $0x241c034c                   // add    r11, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_737
	LONG $0x247c8348; WORD $0x0070     // cmp    qword [rsp + 112], 0
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	JE   LBB1_735
	LONG $0x249c8b48; LONG $0x00000088 // mov    rbx, qword [rsp + 136]
	LONG $0x24448b48; BYTE $0x38       // mov    rax, qword [rsp + 56]
	WORD $0xd231                       // xor    edx, edx

LBB1_734:
	LONG $0x586f0ff3; BYTE $0xf0               // movdqu    xmm3, oword [rax - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8               // pandn    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xd0 // paddb    xmm3, oword [r10 + 2*rdx - 48]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xd0 // movdqa    oword [r10 + 2*rdx - 48], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x527c; BYTE $0xe0 // paddb    xmm7, oword [r10 + 2*rdx - 32]
	LONG $0x7f0f4166; WORD $0x527c; BYTE $0xe0 // movdqa    oword [r10 + 2*rdx - 32], xmm7
	LONG $0x186f0ff3                           // movdqu    xmm3, oword [rax]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8               // pandn    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xf0 // paddb    xmm3, oword [r10 + 2*rdx - 16]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xf0 // movdqa    oword [r10 + 2*rdx - 16], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x523c             // paddb    xmm7, oword [r10 + 2*rdx]
	LONG $0x7f0f4166; WORD $0x523c             // movdqa    oword [r10 + 2*rdx], xmm7
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_734

LBB1_735:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_737
	LONG $0x6f0f41f3; WORD $0x131c                 // movdqu    xmm3, oword [r11 + rdx]
	LONG $0xfb6f0f66                               // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff                   // pmaxub    xmm7, xmm15
	LONG $0xfb740f66                               // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8                   // pandn    xmm7, xmm8
	LONG $0xdf6f0f66                               // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda                   // punpcklbw    xmm3, xmm10
	LONG $0x24448b48; BYTE $0x10                   // mov    rax, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x50                   // paddb    xmm3, oword [rax + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x50                   // movdqa    oword [rax + 2*rdx], xmm3
	LONG $0x680f4166; BYTE $0xfb                   // punpckhbw    xmm7, xmm11
	LONG $0x7cfc0f66; WORD $0x1050                 // paddb    xmm7, oword [rax + 2*rdx + 16]
	LONG $0x7c7f0f66; WORD $0x1050                 // movdqa    oword [rax + 2*rdx + 16], xmm7

LBB1_737:
	WORD $0x3949; BYTE $0xcc                   // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28               // mov    rdx, qword [rsp + 40]
	JE   LBB1_739
	LONG $0x6f0f41f3; WORD $0x0b7c; BYTE $0xf0 // movdqu    xmm7, oword [r11 + rcx - 16]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f44f3; WORD $0x484c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*rcx - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xfc0f4166; BYTE $0xf9               // paddb    xmm7, xmm9
	LONG $0x7c7f0ff3; WORD $0xe048             // movdqu    oword [rax + 2*rcx - 32], xmm7
	LONG $0x7c6f0ff3; WORD $0xf048             // movdqu    xmm7, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdffc0f66                           // paddb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xf048             // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_739:
	LONG $0x246c8b4c; BYTE $0x20       // mov    r13, qword [rsp + 32]
	WORD $0x394c; BYTE $0xea           // cmp    rdx, r13
	JBE  LBB1_748
	LONG $0x24448b48; BYTE $0x60       // mov    rax, qword [rsp + 96]
	LONG $0x02048d48                   // lea    rax, [rdx + rax]
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x24040348                   // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_746
	LONG $0x247c8348; WORD $0x0070     // cmp    qword [rsp + 112], 0
	LONG $0x0000bb41; WORD $0x0000     // mov    r11d, 0
	JE   LBB1_744
	LONG $0x24948b48; LONG $0x00000088 // mov    rdx, qword [rsp + 136]
	LONG $0x245c8b48; BYTE $0x68       // mov    rbx, qword [rsp + 104]
	WORD $0x3145; BYTE $0xdb           // xor    r11d, r11d

LBB1_743:
	LONG $0x5b6f0ff3; BYTE $0xf0               // movdqu    xmm3, oword [rbx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe0               // pandn    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    xmm3, oword [r10 + 2*r11 - 48]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    oword [r10 + 2*r11 - 48], xmm3
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    xmm3, oword [r10 + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    oword [r10 + 2*r11 - 32], xmm3
	LONG $0x1b6f0ff3                           // movdqu    xmm3, oword [rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe0               // pandn    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    xmm3, oword [r10 + 2*r11 - 16]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    oword [r10 + 2*r11 - 16], xmm3
	LONG $0x6f0f4366; WORD $0x5a1c             // movdqa    xmm3, oword [r10 + 2*r11]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a1c             // movdqa    oword [r10 + 2*r11], xmm3
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB1_743

LBB1_744:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_746
	LONG $0x6f0f42f3; WORD $0x183c                 // movdqu    xmm7, oword [rax + r11]
	LONG $0xdf6f0f66                               // movdqa    xmm3, xmm7
	LONG $0xde0f4166; BYTE $0xdf                   // pmaxub    xmm3, xmm15
	LONG $0xdf740f66                               // pcmpeqb    xmm3, xmm7
	LONG $0xdf0f4166; BYTE $0xd8                   // pandn    xmm3, xmm8
	LONG $0x24548b48; BYTE $0x10                   // mov    rdx, qword [rsp + 16]
	LONG $0x6f0f4266; WORD $0x5a24                 // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0xfb6f0f66                               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa                   // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                               // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a24                 // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0x10     // movdqa    xmm4, oword [rdx + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xdb                   // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                               // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0x10     // movdqa    oword [rdx + 2*r11 + 16], xmm4

LBB1_746:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x246c8b4c; BYTE $0x20   // mov    r13, qword [rsp + 32]
	JE   LBB1_748
	LONG $0x5c6f0ff3; WORD $0xf008 // movdqu    xmm3, oword [rax + rcx - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe6   // pandn    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x5c6f0ff3; WORD $0xe048 // movdqu    xmm3, oword [rax + 2*rcx - 32]
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfe   // punpcklbw    xmm7, xmm14
	LONG $0xdff80f66               // psubb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xe048 // movdqu    oword [rax + 2*rcx - 32], xmm3
	LONG $0x5c6f0ff3; WORD $0xf048 // movdqu    xmm3, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xe6   // punpckhbw    xmm4, xmm14
	LONG $0xdcf80f66               // psubb    xmm3, xmm4
	LONG $0x5c7f0ff3; WORD $0xf048 // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_748:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB1_751
	WORD $0xc031             // xor    eax, eax

LBB1_750:
	LONG $0x6f0f4166; WORD $0x460c // movdqa    xmm1, oword [r14 + 2*rax]
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xd6600f66               // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087 // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66               // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87   // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348               // add    rax, 8
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JB   LBB1_750

LBB1_751:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xed                       // test    r13, r13
	JE   LBB1_773
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x07fd8349                               // cmp    r13, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_753
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x247c8348; WORD $0x0050                 // cmp    qword [rsp + 80], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_753
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x000000b8; BYTE $0x18 // cmp    qword [rsp + 184], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_769
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24948b48; LONG $0x000000d0             // mov    rdx, qword [rsp + 208]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_768:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c28348               // add    rdx, 4
	JNE  LBB1_768

LBB1_769:
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x00 // cmp    qword [rsp + 128], 0
	JE   LBB1_772
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24948b48; LONG $0x000000b0             // mov    rdx, qword [rsp + 176]

LBB1_771:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_771

LBB1_772:
	LONG $0x24548b48; BYTE $0x50 // mov    rdx, qword [rsp + 80]
	WORD $0x394c; BYTE $0xea     // cmp    rdx, r13
	LONG $0xfbfe0f66             // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66             // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5 // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66             // paddd    xmm2, xmm1
	LONG $0xd07e0f66             // movd    eax, xmm2
	JE   LBB1_773

LBB1_753:
	WORD $0x894c; BYTE $0xeb           // mov    rbx, r13
	WORD $0x2948; BYTE $0xd3           // sub    rbx, rdx
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	LONG $0x96148d48                   // lea    rdx, [rsi + 4*rdx]

LBB1_754:
	WORD $0x0203             // add    eax, dword [rdx]
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_754

LBB1_773:
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_777
	WORD $0xd231                 // xor    edx, edx
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB1_775

LBB1_938:
	LONG $0x90440341; BYTE $0xfc // add    eax, dword [r8 + 4*rdx - 4]
	LONG $0x97442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rdx - 4]
	LONG $0x91448941; BYTE $0xfc // mov    dword [r9 + 4*rdx - 4], eax
	LONG $0x90040341             // add    eax, dword [r8 + 4*rdx]
	LONG $0x97042b41             // sub    eax, dword [r15 + 4*rdx]
	LONG $0x91048941             // mov    dword [r9 + 4*rdx], eax
	LONG $0x02c28348             // add    rdx, 2
	LONG $0x24543948; BYTE $0x30 // cmp    qword [rsp + 48], rdx
	JNE  LBB1_938

LBB1_775:
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	JE   LBB1_777
	LONG $0x2a1c8d4a                   // lea    rbx, [rdx + r13]
	LONG $0x24b48b48; LONG $0x00000090 // mov    rsi, qword [rsp + 144]
	WORD $0x0403; BYTE $0x9e           // add    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b48; BYTE $0x60       // mov    rbx, qword [rsp + 96]
	LONG $0x1a1c8d48                   // lea    rbx, [rdx + rbx]
	WORD $0x042b; BYTE $0x9e           // sub    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b4c; BYTE $0x58       // mov    r11, qword [rsp + 88]
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x93048941                   // mov    dword [r11 + 4*rdx], eax

LBB1_777:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_780
	WORD $0xc031             // xor    eax, eax

LBB1_779:
	LONG $0x6f0f4166; WORD $0x814c; BYTE $0xfc // movdqa    xmm1, oword [r9 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8154; BYTE $0x0c // movdqa    xmm2, oword [r9 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x815c; BYTE $0x1c // movdqa    xmm3, oword [r9 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8164; BYTE $0x2c // movdqa    xmm4, oword [r9 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x03               // movdqu    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_779

LBB1_780:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	JE   LBB1_782
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x4c6f0ff3; WORD $0xc088 // movdqu    xmm1, oword [rax + 4*rcx - 64]
	LONG $0xc8f50f66               // pmaddwd    xmm1, xmm0
	LONG $0xce660f66               // pcmpgtd    xmm1, xmm6
	LONG $0x546f0ff3; WORD $0xd088 // movdqu    xmm2, oword [rax + 4*rcx - 48]
	LONG $0xd0f50f66               // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66               // pcmpgtd    xmm2, xmm6
	LONG $0x5c6f0ff3; WORD $0xe088 // movdqu    xmm3, oword [rax + 4*rcx - 32]
	LONG $0xd8f50f66               // pmaddwd    xmm3, xmm0
	LONG $0xde660f66               // pcmpgtd    xmm3, xmm6
	LONG $0x646f0ff3; WORD $0xf088 // movdqu    xmm4, oword [rax + 4*rcx - 16]
	LONG $0xe0f50f66               // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66               // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66               // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66               // packssdw    xmm3, xmm4
	LONG $0xcb630f66               // packsswb    xmm1, xmm3
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4   // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd   // pandn    xmm1, xmm13
	LONG $0xcaeb0f66               // por    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0xf00b // movdqu    oword [rbx + rcx - 16], xmm1

LBB1_782:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x24440148; BYTE $0x38 // add    qword [rsp + 56], rax
	LONG $0x24440148; BYTE $0x68 // add    qword [rsp + 104], rax
	LONG $0x24543b48; BYTE $0x40 // cmp    rdx, qword [rsp + 64]
	JNE  LBB1_730
	JMP  LBB1_929

LBB1_9:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_334:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_336
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_336:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_338
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_338:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_340
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_340:
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00e024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 224]
	LONG $0x6f048d4b                                 // lea    rax, [r15 + 2*r13]
	LONG $0x24448948; BYTE $0x10                     // mov    qword [rsp + 16], rax
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00c024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 192]
	JE   LBB1_350
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_384
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_343
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_378:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_381
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_380:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd047 // paddb    xmm3, oword [rdi + 2*rax - 48]
	LONG $0x5c7f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe047 // paddb    xmm4, oword [rdi + 2*rax - 32]
	LONG $0x647f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm4
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf047 // paddb    xmm3, oword [rdi + 2*rax - 16]
	LONG $0x5c7f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x47   // paddb    xmm4, oword [rdi + 2*rax]
	LONG $0x247f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm4
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_380

LBB1_381:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20   // mov    rbx, qword [rsp + 32]
	JE   LBB1_383
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824 // imul    rsi, qword [rsp + 8]
	LONG $0x24340348               // add    rsi, qword [rsp]
	LONG $0x1c6f0f66; BYTE $0x06   // movdqa    xmm3, oword [rsi + rax]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x46   // paddb    xmm3, oword [rsi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x46   // movdqa    oword [rsi + 2*rax], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1046 // paddb    xmm4, oword [rsi + 2*rax + 16]
	LONG $0x647f0f66; WORD $0x1046 // movdqa    oword [rsi + 2*rax + 16], xmm4

LBB1_383:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_378
	JMP  LBB1_350

LBB1_18:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_784:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_786
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_786:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_788
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_788:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_790
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_790:
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00e024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 224]
	LONG $0x6f048d4b                                 // lea    rax, [r15 + 2*r13]
	LONG $0x24448948; BYTE $0x10                     // mov    qword [rsp + 16], rax
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00c024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 192]
	JE   LBB1_800
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_834
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_793
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_828:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_831
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_830:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd047 // paddb    xmm3, oword [rdi + 2*rax - 48]
	LONG $0x5c7f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe047 // paddb    xmm4, oword [rdi + 2*rax - 32]
	LONG $0x647f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm4
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf047 // paddb    xmm3, oword [rdi + 2*rax - 16]
	LONG $0x5c7f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x47   // paddb    xmm4, oword [rdi + 2*rax]
	LONG $0x247f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm4
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_830

LBB1_831:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20   // mov    rbx, qword [rsp + 32]
	JE   LBB1_833
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824 // imul    rsi, qword [rsp + 8]
	LONG $0x24340348               // add    rsi, qword [rsp]
	LONG $0x1c6f0f66; BYTE $0x06   // movdqa    xmm3, oword [rsi + rax]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x46   // paddb    xmm3, oword [rsi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x46   // movdqa    oword [rsi + 2*rax], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1046 // paddb    xmm4, oword [rsi + 2*rax + 16]
	LONG $0x647f0f66; WORD $0x1046 // movdqa    oword [rsi + 2*rax + 16], xmm4

LBB1_833:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_828
	JMP  LBB1_800

LBB1_24:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_26:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_28
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_28:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_30
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_30:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_32
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_32:
	LONG $0x847f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10798d4d                                 // lea    r15, [r9 + 16]
	LONG $0x247c894c; BYTE $0x18                     // mov    qword [rsp + 24], r15
	LONG $0xf0e78349                                 // and    r15, -16
	LONG $0x79048d4a                                 // lea    rax, [rcx + 2*r15]
	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x790c8d4a                                 // lea    rcx, [rcx + 2*r15]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x24648b4c; BYTE $0xd8                     // mov    r12, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xe7                         // mov    rdi, r12
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00c024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 192]
	LONG $0x7c248d4f                                 // lea    r12, [r12 + 2*r15]
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x6f0f4466; LONG $0x00d024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 208]
	JE   LBB1_55
	WORD $0x854d; BYTE $0xed                         // test    r13, r13
	JE   LBB1_49
	WORD $0x394d; BYTE $0xf5                         // cmp    r13, r14
	JNE  LBB1_35
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xdb31                                     // xor    ebx, ebx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_43:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_46
	WORD $0x894c; BYTE $0xc2     // mov    rdx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_45:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66               // pand    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xd047 // paddb    xmm4, oword [rdi + 2*rax - 48]
	LONG $0x647f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0xe047 // paddb    xmm3, oword [rdi + 2*rax - 32]
	LONG $0x5c7f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm3
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66               // pand    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xf047 // paddb    xmm4, oword [rdi + 2*rax - 16]
	LONG $0x647f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x1cfc0f66; BYTE $0x47   // paddb    xmm3, oword [rdi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm3
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c28348               // add    rdx, 2
	JNE  LBB1_45

LBB1_46:
	WORD $0x854d; BYTE $0xc9                   // test    r9, r9
	LONG $0x24748b48; BYTE $0x20               // mov    rsi, qword [rsp + 32]
	JE   LBB1_48
	WORD $0x8948; BYTE $0xda                   // mov    rdx, rbx
	LONG $0x54af0f48; WORD $0x0824             // imul    rdx, qword [rsp + 8]
	LONG $0x24140348                           // add    rdx, qword [rsp]
	LONG $0x1c6f0f66; BYTE $0x02               // movdqa    xmm3, oword [rdx + rax]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe1600f66                           // punpcklbw    xmm4, xmm1
	LONG $0xfc0f4166; WORD $0x4424             // paddb    xmm4, oword [r12 + 2*rax]
	LONG $0x7f0f4166; WORD $0x4424             // movdqa    oword [r12 + 2*rax], xmm4
	LONG $0xda680f66                           // punpckhbw    xmm3, xmm2
	LONG $0xfc0f4166; WORD $0x445c; BYTE $0x10 // paddb    xmm3, oword [r12 + 2*rax + 16]
	LONG $0x7f0f4166; WORD $0x445c; BYTE $0x10 // movdqa    oword [r12 + 2*rax + 16], xmm3

LBB1_48:
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xf3     // cmp    rbx, rsi
	JNE  LBB1_43
	JMP  LBB1_55

LBB1_186:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_188:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_190
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_190:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_192
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_192:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_194
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_194:
	LONG $0x847f0f66; LONG $0x0000d024; BYTE $0x00   // movdqa    oword [rsp + 208], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x10                     // mov    qword [rsp + 16], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00c024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 192]
	LONG $0x6f048d4b                                 // lea    rax, [r15 + 2*r13]
	LONG $0x24448948; BYTE $0x28                     // mov    qword [rsp + 40], rax
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00d024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 208]
	JE   LBB1_204
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_238
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_197
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_232:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_235
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_234:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xd047 // paddb    xmm4, oword [rdi + 2*rax - 48]
	LONG $0x647f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0xe047 // paddb    xmm3, oword [rdi + 2*rax - 32]
	LONG $0x5c7f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm3
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xf047 // paddb    xmm4, oword [rdi + 2*rax - 16]
	LONG $0x647f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x1cfc0f66; BYTE $0x47   // paddb    xmm3, oword [rdi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm3
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_234

LBB1_235:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20   // mov    rbx, qword [rsp + 32]
	JE   LBB1_237
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824 // imul    rsi, qword [rsp + 8]
	LONG $0x24340348               // add    rsi, qword [rsp]
	LONG $0x1c6f0f66; BYTE $0x06   // movdqa    xmm3, oword [rsi + rax]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x24748b48; BYTE $0x28   // mov    rsi, qword [rsp + 40]
	LONG $0x24fc0f66; BYTE $0x46   // paddb    xmm4, oword [rsi + 2*rax]
	LONG $0x247f0f66; BYTE $0x46   // movdqa    oword [rsi + 2*rax], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0x1046 // paddb    xmm3, oword [rsi + 2*rax + 16]
	LONG $0x5c7f0f66; WORD $0x1046 // movdqa    oword [rsi + 2*rax + 16], xmm3

LBB1_237:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_232
	JMP  LBB1_204

LBB1_484:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_486:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_488
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_488:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_490
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_490:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_492
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_492:
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00e024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 224]
	LONG $0x6f048d4b                                 // lea    rax, [r15 + 2*r13]
	LONG $0x24448948; BYTE $0x10                     // mov    qword [rsp + 16], rax
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00c024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 192]
	JE   LBB1_502
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_536
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_495
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_530:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_533
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_532:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd047 // paddb    xmm3, oword [rdi + 2*rax - 48]
	LONG $0x5c7f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe047 // paddb    xmm4, oword [rdi + 2*rax - 32]
	LONG $0x647f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm4
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf047 // paddb    xmm3, oword [rdi + 2*rax - 16]
	LONG $0x5c7f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x47   // paddb    xmm4, oword [rdi + 2*rax]
	LONG $0x247f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm4
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_532

LBB1_533:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20   // mov    rbx, qword [rsp + 32]
	JE   LBB1_535
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824 // imul    rsi, qword [rsp + 8]
	LONG $0x24340348               // add    rsi, qword [rsp]
	LONG $0x1c6f0f66; BYTE $0x06   // movdqa    xmm3, oword [rsi + rax]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x46   // paddb    xmm3, oword [rsi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x46   // movdqa    oword [rsi + 2*rax], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1046 // paddb    xmm4, oword [rsi + 2*rax + 16]
	LONG $0x647f0f66; WORD $0x1046 // movdqa    oword [rsi + 2*rax + 16], xmm4

LBB1_535:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_530
	JMP  LBB1_502

LBB1_636:
	LONG $0x456f0f66; BYTE $0x00 // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */

LBB1_638:
	WORD $0x04a8                 // test    al, 4
	JE   LBB1_640
	LONG $0xf8730f66; BYTE $0x04 // pslldq    xmm0, 4

LBB1_640:
	WORD $0x02a8                 // test    al, 2
	JE   LBB1_642
	LONG $0xf8730f66; BYTE $0x02 // pslldq    xmm0, 2

LBB1_642:
	WORD $0x01a8                 // test    al, 1
	JE   LBB1_644
	LONG $0xf8730f66; BYTE $0x01 // pslldq    xmm0, 1

LBB1_644:
	LONG $0x847f0f66; LONG $0x0000c024; BYTE $0x00   // movdqa    oword [rsp + 192], xmm0
	LONG $0xc0b60f41                                 // movzx    eax, r8b
	LONG $0xc06e0f66                                 // movd    xmm0, eax
	LONG $0xc0600f66                                 // punpcklbw    xmm0, xmm0
	LONG $0xc0700ff2; BYTE $0x00                     // pshuflw    xmm0, xmm0, 0
	LONG $0xc0700f66; BYTE $0x50                     // pshufd    xmm0, xmm0, 80
	LONG $0x847f0f66; LONG $0x0000e024; BYTE $0x00   // movdqa    oword [rsp + 224], xmm0
	LONG $0x0f468d49                                 // lea    rax, [r14 + 15]
	LONG $0x24448948; BYTE $0x30                     // mov    qword [rsp + 48], rax
	WORD $0x8948; BYTE $0xc1                         // mov    rcx, rax
	LONG $0xf0e18348                                 // and    rcx, -16
	LONG $0x10698d4d                                 // lea    r13, [r9 + 16]
	LONG $0x246c894c; BYTE $0x18                     // mov    qword [rsp + 24], r13
	LONG $0xf0e58349                                 // and    r13, -16
	LONG $0x69048d4a                                 // lea    rax, [rcx + 2*r13]
	LONG $0x244c8948; BYTE $0x28                     // mov    qword [rsp + 40], rcx
	LONG $0x090c8d48                                 // lea    rcx, [rcx + rcx]
	LONG $0x690c8d4a                                 // lea    rcx, [rcx + 2*r13]
	LONG $0x02e1c148                                 // shl    rcx, 2
	LONG $0x41148d48                                 // lea    rdx, [rcx + 2*rax]
	WORD $0xf631                                     // xor    esi, esi
	LONG $0x247c8b4c; BYTE $0xd8                     // mov    r15, qword -40[rsp] /* [rbp + 64] */
	WORD $0x894c; BYTE $0xff                         // mov    rdi, r15
	WORD $0x894c; BYTE $0xcb                         // mov    rbx, r9
	CALL clibÂ·_memset(SB)
	LONG $0x6f0f4466; LONG $0x00e024bc; WORD $0x0000 // movdqa    xmm15, oword [rsp + 224]
	LONG $0x6f048d4b                                 // lea    rax, [r15 + 2*r13]
	LONG $0x24448948; BYTE $0x10                     // mov    qword [rsp + 16], rax
	WORD $0x8548; BYTE $0xdb                         // test    rbx, rbx
	LONG $0x24548b48; BYTE $0x08                     // mov    rdx, qword [rsp + 8]
	LONG $0x6f0f4466; LONG $0x00c024b4; WORD $0x0000 // movdqa    xmm14, oword [rsp + 192]
	JE   LBB1_654
	WORD $0x854d; BYTE $0xe4                         // test    r12, r12
	JE   LBB1_688
	WORD $0x394d; BYTE $0xf4                         // cmp    r12, r14
	JNE  LBB1_647
	LONG $0x10fe8349                                 // cmp    r14, 16
	LONG $0x0010ba41; WORD $0x0000                   // mov    r10d, 16
	LONG $0xd6470f4d                                 // cmova    r10, r14
	WORD $0xff49; BYTE $0xca                         // dec    r10
	LONG $0x04eac149                                 // shr    r10, 4
	LONG $0x014a8d45                                 // lea    r9d, [r10 + 1]
	LONG $0x01e18341                                 // and    r9d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10488d48                                 // lea    rcx, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x24548b48; BYTE $0xd8                     // mov    rdx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x427c8d48; BYTE $0x30                     // lea    rdi, [rdx + 2*rax + 48]
	LONG $0xff418d4d                                 // lea    r8, [r9 - 1]
	WORD $0x294d; BYTE $0xd0                         // sub    r8, r10
	WORD $0xd231                                     // xor    edx, edx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_682:
	WORD $0x854d; BYTE $0xd2     // test    r10, r10
	LONG $0x000000b8; BYTE $0x00 // mov    eax, 0
	JE   LBB1_685
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x8948; BYTE $0xce     // mov    rsi, rcx
	WORD $0xc031                 // xor    eax, eax

LBB1_684:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd047 // paddb    xmm3, oword [rdi + 2*rax - 48]
	LONG $0x5c7f0f66; WORD $0xd047 // movdqa    oword [rdi + 2*rax - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe047 // paddb    xmm4, oword [rdi + 2*rax - 32]
	LONG $0x647f0f66; WORD $0xe047 // movdqa    oword [rdi + 2*rax - 32], xmm4
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf047 // paddb    xmm3, oword [rdi + 2*rax - 16]
	LONG $0x5c7f0f66; WORD $0xf047 // movdqa    oword [rdi + 2*rax - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x47   // paddb    xmm4, oword [rdi + 2*rax]
	LONG $0x247f0f66; BYTE $0x47   // movdqa    oword [rdi + 2*rax], xmm4
	LONG $0x20c08348               // add    rax, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_684

LBB1_685:
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x245c8b48; BYTE $0x20   // mov    rbx, qword [rsp + 32]
	JE   LBB1_687
	WORD $0x8948; BYTE $0xd6       // mov    rsi, rdx
	LONG $0x74af0f48; WORD $0x0824 // imul    rsi, qword [rsp + 8]
	LONG $0x24340348               // add    rsi, qword [rsp]
	LONG $0x1c6f0f66; BYTE $0x06   // movdqa    xmm3, oword [rsi + rax]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x46   // paddb    xmm3, oword [rsi + 2*rax]
	LONG $0x1c7f0f66; BYTE $0x46   // movdqa    oword [rsi + 2*rax], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1046 // paddb    xmm4, oword [rsi + 2*rax + 16]
	LONG $0x647f0f66; WORD $0x1046 // movdqa    oword [rsi + 2*rax + 16], xmm4

LBB1_687:
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x244c0348; BYTE $0x08 // add    rcx, qword [rsp + 8]
	WORD $0x3948; BYTE $0xda     // cmp    rdx, rbx
	JNE  LBB1_682
	JMP  LBB1_654

LBB1_384:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_350
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x7044; BYTE $0xe0 // movdqu    xmm0, oword [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x704c; BYTE $0xf0 // movdqu    xmm1, oword [rax + 2*r14 - 16]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x30448d4a; BYTE $0xf0               // lea    rax, [rax + r14 - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]

LBB1_386:
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xda740f66                           // pcmpeqb    xmm3, xmm2
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0x600f4166; BYTE $0xd6               // punpcklbw    xmm2, xmm14
	LONG $0xc2fc0f66                           // paddb    xmm0, xmm2
	LONG $0x7f0f42f3; WORD $0x7644; BYTE $0xe0 // movdqu    oword [rsi + 2*r14 - 32], xmm0
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xcbfc0f66                           // paddb    xmm1, xmm3
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    oword [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	WORD $0xff48; BYTE $0xc9                   // dec    rcx
	JNE  LBB1_386
	JMP  LBB1_350

LBB1_834:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_800
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x7044; BYTE $0xe0 // movdqu    xmm0, oword [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x704c; BYTE $0xf0 // movdqu    xmm1, oword [rax + 2*r14 - 16]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x30448d4a; BYTE $0xf0               // lea    rax, [rax + r14 - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]

LBB1_836:
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xda740f66                           // pcmpeqb    xmm3, xmm2
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0x600f4166; BYTE $0xd6               // punpcklbw    xmm2, xmm14
	LONG $0xc2fc0f66                           // paddb    xmm0, xmm2
	LONG $0x7f0f42f3; WORD $0x7644; BYTE $0xe0 // movdqu    oword [rsi + 2*r14 - 32], xmm0
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xcbfc0f66                           // paddb    xmm1, xmm3
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    oword [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	WORD $0xff48; BYTE $0xc9                   // dec    rcx
	JNE  LBB1_836
	JMP  LBB1_800

LBB1_49:
	WORD $0x394d; BYTE $0xf5                   // cmp    r13, r14
	JE   LBB1_55
	LONG $0x6f0f43f3; WORD $0x744c; BYTE $0xe0 // movdqu    xmm1, oword [r12 + 2*r14 - 32]
	LONG $0x6f0f43f3; WORD $0x7444; BYTE $0xf0 // movdqu    xmm0, oword [r12 + 2*r14 - 16]
	LONG $0x24548b48; BYTE $0x20               // mov    rdx, qword [rsp + 32]
	WORD $0xd089                               // mov    eax, edx
	WORD $0xe083; BYTE $0x01                   // and    eax, 1
	WORD $0xc931                               // xor    ecx, ecx
	LONG $0x01fa8348                           // cmp    rdx, 1
	JE   LBB1_53
	WORD $0x2948; BYTE $0xc2                   // sub    rdx, rax
	LONG $0x240c8b48                           // mov    rcx, qword [rsp]
	LONG $0x31748d4a; BYTE $0xf0               // lea    rsi, [rcx + r14 - 16]
	LONG $0x245c8b48; BYTE $0x08               // mov    rbx, qword [rsp + 8]
	LONG $0x1b3c8d48                           // lea    rdi, [rbx + rbx]
	WORD $0xc931                               // xor    ecx, ecx

LBB1_52:
	LONG $0x166f0ff3                           // movdqu    xmm2, oword [rsi]
	LONG $0x740f4166; BYTE $0xd7               // pcmpeqb    xmm2, xmm15
	LONG $0xdb0f4166; BYTE $0xd6               // pand    xmm2, xmm14
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0x600f4166; BYTE $0xde               // punpcklbw    xmm3, xmm14
	LONG $0xd9fc0f66                           // paddb    xmm3, xmm1
	LONG $0x7f0f43f3; WORD $0x745c; BYTE $0xe0 // movdqu    oword [r12 + 2*r14 - 32], xmm3
	LONG $0x680f4166; BYTE $0xd6               // punpckhbw    xmm2, xmm14
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f43f3; WORD $0x7454; BYTE $0xf0 // movdqu    oword [r12 + 2*r14 - 16], xmm2
	LONG $0x046f0ff3; BYTE $0x33               // movdqu    xmm0, oword [rbx + rsi]
	LONG $0x740f4166; BYTE $0xc7               // pcmpeqb    xmm0, xmm15
	LONG $0xdb0f4166; BYTE $0xc6               // pand    xmm0, xmm14
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0x600f4166; BYTE $0xce               // punpcklbw    xmm1, xmm14
	LONG $0xcbfc0f66                           // paddb    xmm1, xmm3
	LONG $0x7f0f43f3; WORD $0x744c; BYTE $0xe0 // movdqu    oword [r12 + 2*r14 - 32], xmm1
	LONG $0x680f4166; BYTE $0xc6               // punpckhbw    xmm0, xmm14
	LONG $0xc2fc0f66                           // paddb    xmm0, xmm2
	LONG $0x7f0f43f3; WORD $0x7444; BYTE $0xf0 // movdqu    oword [r12 + 2*r14 - 16], xmm0
	LONG $0x02c18348                           // add    rcx, 2
	WORD $0x0148; BYTE $0xfe                   // add    rsi, rdi
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JNE  LBB1_52

LBB1_53:
	WORD $0x8548; BYTE $0xc0                   // test    rax, rax
	JE   LBB1_55
	LONG $0x4caf0f48; WORD $0x0824             // imul    rcx, qword [rsp + 8]
	LONG $0x240c0348                           // add    rcx, qword [rsp]
	LONG $0x6f0f41f3; WORD $0x0e54; BYTE $0xf0 // movdqu    xmm2, oword [r14 + rcx - 16]
	LONG $0x740f4166; BYTE $0xd7               // pcmpeqb    xmm2, xmm15
	LONG $0xdb0f4166; BYTE $0xd6               // pand    xmm2, xmm14
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0x600f4166; BYTE $0xde               // punpcklbw    xmm3, xmm14
	LONG $0xd9fc0f66                           // paddb    xmm3, xmm1
	LONG $0x7f0f43f3; WORD $0x745c; BYTE $0xe0 // movdqu    oword [r12 + 2*r14 - 32], xmm3
	LONG $0x680f4166; BYTE $0xd6               // punpckhbw    xmm2, xmm14
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f43f3; WORD $0x7454; BYTE $0xf0 // movdqu    oword [r12 + 2*r14 - 16], xmm2
	JMP  LBB1_55

LBB1_238:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_204
	LONG $0x24448b48; BYTE $0x28               // mov    rax, qword [rsp + 40]
	LONG $0x6f0f42f3; WORD $0x7044; BYTE $0xe0 // movdqu    xmm0, oword [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x704c; BYTE $0xf0 // movdqu    xmm1, oword [rax + 2*r14 - 16]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x30448d4a; BYTE $0xf0               // lea    rax, [rax + r14 - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x28               // mov    rsi, qword [rsp + 40]

LBB1_240:
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0x740f4166; BYTE $0xd7               // pcmpeqb    xmm2, xmm15
	LONG $0xdf0f4166; BYTE $0xd6               // pandn    xmm2, xmm14
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0x600f4166; BYTE $0xde               // punpcklbw    xmm3, xmm14
	LONG $0xc3fc0f66                           // paddb    xmm0, xmm3
	LONG $0x7f0f42f3; WORD $0x7644; BYTE $0xe0 // movdqu    oword [rsi + 2*r14 - 32], xmm0
	LONG $0x680f4166; BYTE $0xd6               // punpckhbw    xmm2, xmm14
	LONG $0xcafc0f66                           // paddb    xmm1, xmm2
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    oword [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	WORD $0xff48; BYTE $0xc9                   // dec    rcx
	JNE  LBB1_240
	JMP  LBB1_204

LBB1_536:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_502
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x7044; BYTE $0xe0 // movdqu    xmm0, oword [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x704c; BYTE $0xf0 // movdqu    xmm1, oword [rax + 2*r14 - 16]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x30448d4a; BYTE $0xf0               // lea    rax, [rax + r14 - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]

LBB1_538:
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xda740f66                           // pcmpeqb    xmm3, xmm2
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0x600f4166; BYTE $0xd6               // punpcklbw    xmm2, xmm14
	LONG $0xc2fc0f66                           // paddb    xmm0, xmm2
	LONG $0x7f0f42f3; WORD $0x7644; BYTE $0xe0 // movdqu    oword [rsi + 2*r14 - 32], xmm0
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xcbfc0f66                           // paddb    xmm1, xmm3
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    oword [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	WORD $0xff48; BYTE $0xc9                   // dec    rcx
	JNE  LBB1_538
	JMP  LBB1_502

LBB1_688:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	JE   LBB1_654
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x7044; BYTE $0xe0 // movdqu    xmm0, oword [rax + 2*r14 - 32]
	LONG $0x6f0f42f3; WORD $0x704c; BYTE $0xf0 // movdqu    xmm1, oword [rax + 2*r14 - 16]
	LONG $0x24048b48                           // mov    rax, qword [rsp]
	LONG $0x30448d4a; BYTE $0xf0               // lea    rax, [rax + r14 - 16]
	LONG $0x244c8b48; BYTE $0x20               // mov    rcx, qword [rsp + 32]
	LONG $0x24748b48; BYTE $0x10               // mov    rsi, qword [rsp + 16]

LBB1_690:
	LONG $0x106f0ff3                           // movdqu    xmm2, oword [rax]
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xda740f66                           // pcmpeqb    xmm3, xmm2
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0xd36f0f66                           // movdqa    xmm2, xmm3
	LONG $0x600f4166; BYTE $0xd6               // punpcklbw    xmm2, xmm14
	LONG $0xc2fc0f66                           // paddb    xmm0, xmm2
	LONG $0x7f0f42f3; WORD $0x7644; BYTE $0xe0 // movdqu    oword [rsi + 2*r14 - 32], xmm0
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xcbfc0f66                           // paddb    xmm1, xmm3
	LONG $0x7f0f42f3; WORD $0x764c; BYTE $0xf0 // movdqu    oword [rsi + 2*r14 - 16], xmm1
	WORD $0x0148; BYTE $0xd0                   // add    rax, rdx
	WORD $0xff48; BYTE $0xc9                   // dec    rcx
	JNE  LBB1_690
	JMP  LBB1_654

LBB1_343:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_344:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_347
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_346:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd057 // paddb    xmm3, oword [rdi + 2*rdx - 48]
	LONG $0x5c7f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe057 // paddb    xmm4, oword [rdi + 2*rdx - 32]
	LONG $0x647f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm4
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf057 // paddb    xmm3, oword [rdi + 2*rdx - 16]
	LONG $0x5c7f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x57   // paddb    xmm4, oword [rdi + 2*rdx]
	LONG $0x247f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm4
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_346

LBB1_347:
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2       // test    r10, r10
	JE   LBB1_349
	LONG $0x1c6f0f66; BYTE $0x10   // movdqa    xmm3, oword [rax + rdx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x56   // paddb    xmm3, oword [rsi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x56   // movdqa    oword [rsi + 2*rdx], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1056 // paddb    xmm4, oword [rsi + 2*rdx + 16]
	LONG $0x647f0f66; WORD $0x1056 // movdqa    oword [rsi + 2*rdx + 16], xmm4

LBB1_349:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe6               // pandn    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xe0 // movdqu    xmm3, oword [rax + 2*r14 - 32]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xebfc0f66                           // paddb    xmm5, xmm3
	LONG $0x7f0f42f3; WORD $0x706c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm5
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xe6               // punpckhbw    xmm4, xmm14
	LONG $0xe3fc0f66                           // paddb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_344

LBB1_350:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x24448b4c; BYTE $0x20       // mov    r8, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x10       // mov    rdi, qword [rsp + 16]
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000090 // mov    qword [rsp + 144], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	LONG $0xf8408d49                   // lea    rax, [r8 - 8]
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx
	LONG $0x248c894c; LONG $0x00000080 // mov    qword [rsp + 128], r9
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8948; BYTE $0xd9           // mov    rcx, rbx
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x24748b48; BYTE $0x30       // mov    rsi, qword [rsp + 48]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8949; BYTE $0xf7           // mov    r15, rsi
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x3a7c8d4a; BYTE $0x10       // lea    rdi, [rdx + r15 + 16]
	LONG $0xff498d49                   // lea    rcx, [r9 - 1]
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x248c8948; LONG $0x000000d0 // mov    qword [rsp + 208], rcx
	LONG $0x3a048d4a                   // lea    rax, [rdx + r15]
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	LONG $0x85048d4a; LONG $0x00000000 // lea    rax, [4*r8]
	WORD $0x894d; BYTE $0xc5           // mov    r13, r8
	LONG $0xaf048d4f                   // lea    r8, [r15 + 4*r13]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xde           // mov    r14, rbx
	LONG $0x05e6c149                   // shl    r14, 5
	LONG $0x5b048d48                   // lea    rax, [rbx + 2*rbx]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x761c8d48                   // lea    rbx, [rsi + 2*rsi]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x32548d4e; BYTE $0x30       // lea    r10, [rdx + r14 + 48]
	WORD $0x0149; BYTE $0xd6           // add    r14, rdx
	LONG $0x02448d4e; BYTE $0x04       // lea    r8, [rdx + r8 + 4]
	WORD $0x0149; BYTE $0xd7           // add    r15, rdx
	LONG $0x1a4c8d4c; BYTE $0x04       // lea    r9, [rdx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xe8           // sub    rax, r13
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	WORD $0x894d; BYTE $0xeb           // mov    r11, r13
	WORD $0xf749; BYTE $0xd3           // not    r11
	LONG $0x24548d49; BYTE $0xff       // lea    rdx, [r12 - 1]
	LONG $0x04eac148                   // shr    rdx, 4
	WORD $0x728d; BYTE $0x01           // lea    esi, [rdx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	WORD $0xc889                       // mov    eax, ecx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24848948; LONG $0x000000a8 // mov    qword [rsp + 168], rax
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x244c8948; BYTE $0x30       // mov    qword [rsp + 48], rcx
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0x245c8b48; BYTE $0x08       // mov    rbx, qword [rsp + 8]
	LONG $0xc3af0f48                   // imul    rax, rbx
	LONG $0x240c8b48                   // mov    rcx, qword [rsp]
	LONG $0x01448d48; BYTE $0x10       // lea    rax, [rcx + rax + 16]
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	LONG $0x24748948; BYTE $0x70       // mov    qword [rsp + 112], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x24548948; BYTE $0x78       // mov    qword [rsp + 120], rdx
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	WORD $0x894c; BYTE $0xda           // mov    rdx, r11
	LONG $0x24548948; BYTE $0x60       // mov    qword [rsp + 96], rdx
	LONG $0xdbaf0f49                   // imul    rbx, r11
	LONG $0x19448d48; BYTE $0x10       // lea    rax, [rcx + rbx + 16]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000080 // mov    rax, qword [rsp + 128]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b0 // mov    qword [rsp + 176], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0xd231                       // xor    edx, edx

LBB1_352:
	LONG $0x245c8948; BYTE $0x18       // mov    qword [rsp + 24], rbx
	LONG $0x24943b48; LONG $0x000000a0 // cmp    rdx, qword [rsp + 160]
	LONG $0x24548948; BYTE $0x28       // mov    qword [rsp + 40], rdx
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	JAE  LBB1_361
	LONG $0x24448b48; BYTE $0x20       // mov    rax, qword [rsp + 32]
	LONG $0x021c8d4c                   // lea    r11, [rdx + rax]
	LONG $0x5caf0f4c; WORD $0x0824     // imul    r11, qword [rsp + 8]
	LONG $0x241c034c                   // add    r11, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_359
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	JE   LBB1_357
	LONG $0x249c8b48; LONG $0x00000088 // mov    rbx, qword [rsp + 136]
	LONG $0x24448b48; BYTE $0x38       // mov    rax, qword [rsp + 56]
	WORD $0xd231                       // xor    edx, edx

LBB1_356:
	LONG $0x586f0f66; BYTE $0xf0               // movdqa    xmm3, oword [rax - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8               // pandn    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xd0 // paddb    xmm3, oword [r10 + 2*rdx - 48]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xd0 // movdqa    oword [r10 + 2*rdx - 48], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x527c; BYTE $0xe0 // paddb    xmm7, oword [r10 + 2*rdx - 32]
	LONG $0x7f0f4166; WORD $0x527c; BYTE $0xe0 // movdqa    oword [r10 + 2*rdx - 32], xmm7
	LONG $0x186f0f66                           // movdqa    xmm3, oword [rax]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8               // pandn    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xf0 // paddb    xmm3, oword [r10 + 2*rdx - 16]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xf0 // movdqa    oword [r10 + 2*rdx - 16], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x523c             // paddb    xmm7, oword [r10 + 2*rdx]
	LONG $0x7f0f4166; WORD $0x523c             // movdqa    oword [r10 + 2*rdx], xmm7
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_356

LBB1_357:
	LONG $0x247c8348; WORD $0x0070 // cmp    qword [rsp + 112], 0
	JE   LBB1_359
	LONG $0x6f0f4166; WORD $0x131c // movdqa    xmm3, oword [r11 + rdx]
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff   // pminub    xmm7, xmm15
	LONG $0xfb740f66               // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8   // pandn    xmm7, xmm8
	LONG $0xdf6f0f66               // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda   // punpcklbw    xmm3, xmm10
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x50   // paddb    xmm3, oword [rax + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm3
	LONG $0x680f4166; BYTE $0xfb   // punpckhbw    xmm7, xmm11
	LONG $0x7cfc0f66; WORD $0x1050 // paddb    xmm7, oword [rax + 2*rdx + 16]
	LONG $0x7c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm7

LBB1_359:
	WORD $0x3949; BYTE $0xcc                   // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28               // mov    rdx, qword [rsp + 40]
	JE   LBB1_361
	LONG $0x6f0f41f3; WORD $0x0b7c; BYTE $0xf0 // movdqu    xmm7, oword [r11 + rcx - 16]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f44f3; WORD $0x484c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*rcx - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xfc0f4166; BYTE $0xf9               // paddb    xmm7, xmm9
	LONG $0x7c7f0ff3; WORD $0xe048             // movdqu    oword [rax + 2*rcx - 32], xmm7
	LONG $0x7c6f0ff3; WORD $0xf048             // movdqu    xmm7, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdffc0f66                           // paddb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xf048             // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_361:
	LONG $0x246c8b4c; BYTE $0x20       // mov    r13, qword [rsp + 32]
	WORD $0x394c; BYTE $0xea           // cmp    rdx, r13
	JBE  LBB1_370
	LONG $0x24448b48; BYTE $0x60       // mov    rax, qword [rsp + 96]
	LONG $0x02048d48                   // lea    rax, [rdx + rax]
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x24040348                   // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_368
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	LONG $0x0000bb41; WORD $0x0000     // mov    r11d, 0
	JE   LBB1_366
	LONG $0x24948b48; LONG $0x00000088 // mov    rdx, qword [rsp + 136]
	LONG $0x245c8b48; BYTE $0x68       // mov    rbx, qword [rsp + 104]
	WORD $0x3145; BYTE $0xdb           // xor    r11d, r11d

LBB1_365:
	LONG $0x5b6f0f66; BYTE $0xf0               // movdqa    xmm3, oword [rbx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe0               // pandn    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    xmm3, oword [r10 + 2*r11 - 48]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    oword [r10 + 2*r11 - 48], xmm3
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    xmm3, oword [r10 + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    oword [r10 + 2*r11 - 32], xmm3
	LONG $0x1b6f0f66                           // movdqa    xmm3, oword [rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe0               // pandn    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    xmm3, oword [r10 + 2*r11 - 16]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    oword [r10 + 2*r11 - 16], xmm3
	LONG $0x6f0f4366; WORD $0x5a1c             // movdqa    xmm3, oword [r10 + 2*r11]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a1c             // movdqa    oword [r10 + 2*r11], xmm3
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB1_365

LBB1_366:
	LONG $0x247c8348; WORD $0x0070             // cmp    qword [rsp + 112], 0
	JE   LBB1_368
	LONG $0x6f0f4266; WORD $0x183c             // movdqa    xmm7, oword [rax + r11]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdf0f4166; BYTE $0xd8               // pandn    xmm3, xmm8
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x6f0f4266; WORD $0x5a24             // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a24             // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0x10 // movdqa    xmm4, oword [rdx + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0x10 // movdqa    oword [rdx + 2*r11 + 16], xmm4

LBB1_368:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x246c8b4c; BYTE $0x20   // mov    r13, qword [rsp + 32]
	JE   LBB1_370
	LONG $0x5c6f0ff3; WORD $0xf008 // movdqu    xmm3, oword [rax + rcx - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe6   // pandn    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x5c6f0ff3; WORD $0xe048 // movdqu    xmm3, oword [rax + 2*rcx - 32]
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfe   // punpcklbw    xmm7, xmm14
	LONG $0xdff80f66               // psubb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xe048 // movdqu    oword [rax + 2*rcx - 32], xmm3
	LONG $0x5c6f0ff3; WORD $0xf048 // movdqu    xmm3, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xe6   // punpckhbw    xmm4, xmm14
	LONG $0xdcf80f66               // psubb    xmm3, xmm4
	LONG $0x5c7f0ff3; WORD $0xf048 // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_370:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB1_373
	WORD $0xc031             // xor    eax, eax

LBB1_372:
	LONG $0x6f0f4166; WORD $0x460c // movdqa    xmm1, oword [r14 + 2*rax]
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xd6600f66               // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087 // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66               // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87   // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348               // add    rax, 8
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JB   LBB1_372

LBB1_373:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xed                       // test    r13, r13
	JE   LBB1_395
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x07fd8349                               // cmp    r13, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_375
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x247c8348; WORD $0x0050                 // cmp    qword [rsp + 80], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_375
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x000000b8; BYTE $0x18 // cmp    qword [rsp + 184], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_391
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24948b48; LONG $0x000000d0             // mov    rdx, qword [rsp + 208]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_390:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c28348               // add    rdx, 4
	JNE  LBB1_390

LBB1_391:
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x00 // cmp    qword [rsp + 128], 0
	JE   LBB1_394
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24948b48; LONG $0x000000b0             // mov    rdx, qword [rsp + 176]

LBB1_393:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_393

LBB1_394:
	LONG $0x24548b48; BYTE $0x50 // mov    rdx, qword [rsp + 80]
	WORD $0x394c; BYTE $0xea     // cmp    rdx, r13
	LONG $0xfbfe0f66             // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66             // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5 // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66             // paddd    xmm2, xmm1
	LONG $0xd07e0f66             // movd    eax, xmm2
	JE   LBB1_395

LBB1_375:
	WORD $0x894c; BYTE $0xeb           // mov    rbx, r13
	WORD $0x2948; BYTE $0xd3           // sub    rbx, rdx
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	LONG $0x96148d48                   // lea    rdx, [rsi + 4*rdx]

LBB1_376:
	WORD $0x0203             // add    eax, dword [rdx]
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_376

LBB1_395:
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_399
	WORD $0xd231                 // xor    edx, edx
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB1_397

LBB1_933:
	LONG $0x90440341; BYTE $0xfc // add    eax, dword [r8 + 4*rdx - 4]
	LONG $0x97442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rdx - 4]
	LONG $0x91448941; BYTE $0xfc // mov    dword [r9 + 4*rdx - 4], eax
	LONG $0x90040341             // add    eax, dword [r8 + 4*rdx]
	LONG $0x97042b41             // sub    eax, dword [r15 + 4*rdx]
	LONG $0x91048941             // mov    dword [r9 + 4*rdx], eax
	LONG $0x02c28348             // add    rdx, 2
	LONG $0x24543948; BYTE $0x30 // cmp    qword [rsp + 48], rdx
	JNE  LBB1_933

LBB1_397:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_399
	LONG $0x2a1c8d4a                               // lea    rbx, [rdx + r13]
	LONG $0x24b48b48; LONG $0x00000090             // mov    rsi, qword [rsp + 144]
	WORD $0x0403; BYTE $0x9e                       // add    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b48; BYTE $0x60                   // mov    rbx, qword [rsp + 96]
	LONG $0x1a1c8d48                               // lea    rbx, [rdx + rbx]
	WORD $0x042b; BYTE $0x9e                       // sub    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b4c; BYTE $0x58                   // mov    r11, qword [rsp + 88]
	LONG $0x245c8b48; BYTE $0x18                   // mov    rbx, qword [rsp + 24]
	LONG $0x93048941                               // mov    dword [r11 + 4*rdx], eax

LBB1_399:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_402
	WORD $0xc031             // xor    eax, eax

LBB1_401:
	LONG $0x6f0f4166; WORD $0x814c; BYTE $0xfc // movdqa    xmm1, oword [r9 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8154; BYTE $0x0c // movdqa    xmm2, oword [r9 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x815c; BYTE $0x1c // movdqa    xmm3, oword [r9 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8164; BYTE $0x2c // movdqa    xmm4, oword [r9 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0f66; BYTE $0x03               // movdqa    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_401

LBB1_402:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	JE   LBB1_404
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x4c6f0ff3; WORD $0xc088 // movdqu    xmm1, oword [rax + 4*rcx - 64]
	LONG $0xc8f50f66               // pmaddwd    xmm1, xmm0
	LONG $0xce660f66               // pcmpgtd    xmm1, xmm6
	LONG $0x546f0ff3; WORD $0xd088 // movdqu    xmm2, oword [rax + 4*rcx - 48]
	LONG $0xd0f50f66               // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66               // pcmpgtd    xmm2, xmm6
	LONG $0x5c6f0ff3; WORD $0xe088 // movdqu    xmm3, oword [rax + 4*rcx - 32]
	LONG $0xd8f50f66               // pmaddwd    xmm3, xmm0
	LONG $0xde660f66               // pcmpgtd    xmm3, xmm6
	LONG $0x646f0ff3; WORD $0xf088 // movdqu    xmm4, oword [rax + 4*rcx - 16]
	LONG $0xe0f50f66               // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66               // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66               // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66               // packssdw    xmm3, xmm4
	LONG $0xcb630f66               // packsswb    xmm1, xmm3
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4   // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd   // pandn    xmm1, xmm13
	LONG $0xcaeb0f66               // por    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0xf00b // movdqu    oword [rbx + rcx - 16], xmm1

LBB1_404:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x24440148; BYTE $0x38 // add    qword [rsp + 56], rax
	LONG $0x24440148; BYTE $0x68 // add    qword [rsp + 104], rax
	LONG $0x24543b48; BYTE $0x40 // cmp    rdx, qword [rsp + 64]
	JNE  LBB1_352
	JMP  LBB1_929

LBB1_793:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_794:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_797
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_796:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd057 // paddb    xmm3, oword [rdi + 2*rdx - 48]
	LONG $0x5c7f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe057 // paddb    xmm4, oword [rdi + 2*rdx - 32]
	LONG $0x647f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm4
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf057 // paddb    xmm3, oword [rdi + 2*rdx - 16]
	LONG $0x5c7f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x57   // paddb    xmm4, oword [rdi + 2*rdx]
	LONG $0x247f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm4
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_796

LBB1_797:
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2       // test    r10, r10
	JE   LBB1_799
	LONG $0x1c6f0f66; BYTE $0x10   // movdqa    xmm3, oword [rax + rdx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x56   // paddb    xmm3, oword [rsi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x56   // movdqa    oword [rsi + 2*rdx], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1056 // paddb    xmm4, oword [rsi + 2*rdx + 16]
	LONG $0x647f0f66; WORD $0x1056 // movdqa    oword [rsi + 2*rdx + 16], xmm4

LBB1_799:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe6               // pand    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xe0 // movdqu    xmm3, oword [rax + 2*r14 - 32]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xebfc0f66                           // paddb    xmm5, xmm3
	LONG $0x7f0f42f3; WORD $0x706c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm5
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xe6               // punpckhbw    xmm4, xmm14
	LONG $0xe3fc0f66                           // paddb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_794

LBB1_800:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x24448b4c; BYTE $0x20       // mov    r8, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x10       // mov    rdi, qword [rsp + 16]
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000090 // mov    qword [rsp + 144], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	LONG $0xf8408d49                   // lea    rax, [r8 - 8]
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx
	LONG $0x248c894c; LONG $0x00000080 // mov    qword [rsp + 128], r9
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8948; BYTE $0xd9           // mov    rcx, rbx
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x24748b48; BYTE $0x30       // mov    rsi, qword [rsp + 48]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8949; BYTE $0xf7           // mov    r15, rsi
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x3a7c8d4a; BYTE $0x10       // lea    rdi, [rdx + r15 + 16]
	LONG $0xff498d49                   // lea    rcx, [r9 - 1]
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x248c8948; LONG $0x000000d0 // mov    qword [rsp + 208], rcx
	LONG $0x3a048d4a                   // lea    rax, [rdx + r15]
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	LONG $0x85048d4a; LONG $0x00000000 // lea    rax, [4*r8]
	WORD $0x894d; BYTE $0xc5           // mov    r13, r8
	LONG $0xaf048d4f                   // lea    r8, [r15 + 4*r13]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xde           // mov    r14, rbx
	LONG $0x05e6c149                   // shl    r14, 5
	LONG $0x5b048d48                   // lea    rax, [rbx + 2*rbx]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x761c8d48                   // lea    rbx, [rsi + 2*rsi]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x32548d4e; BYTE $0x30       // lea    r10, [rdx + r14 + 48]
	WORD $0x0149; BYTE $0xd6           // add    r14, rdx
	LONG $0x02448d4e; BYTE $0x04       // lea    r8, [rdx + r8 + 4]
	WORD $0x0149; BYTE $0xd7           // add    r15, rdx
	LONG $0x1a4c8d4c; BYTE $0x04       // lea    r9, [rdx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xe8           // sub    rax, r13
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	WORD $0x894d; BYTE $0xeb           // mov    r11, r13
	WORD $0xf749; BYTE $0xd3           // not    r11
	LONG $0x24548d49; BYTE $0xff       // lea    rdx, [r12 - 1]
	LONG $0x04eac148                   // shr    rdx, 4
	WORD $0x728d; BYTE $0x01           // lea    esi, [rdx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	WORD $0xc889                       // mov    eax, ecx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24848948; LONG $0x000000a8 // mov    qword [rsp + 168], rax
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x244c8948; BYTE $0x30       // mov    qword [rsp + 48], rcx
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0x245c8b48; BYTE $0x08       // mov    rbx, qword [rsp + 8]
	LONG $0xc3af0f48                   // imul    rax, rbx
	LONG $0x240c8b48                   // mov    rcx, qword [rsp]
	LONG $0x01448d48; BYTE $0x10       // lea    rax, [rcx + rax + 16]
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	LONG $0x24748948; BYTE $0x70       // mov    qword [rsp + 112], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x24548948; BYTE $0x78       // mov    qword [rsp + 120], rdx
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	WORD $0x894c; BYTE $0xda           // mov    rdx, r11
	LONG $0x24548948; BYTE $0x60       // mov    qword [rsp + 96], rdx
	LONG $0xdbaf0f49                   // imul    rbx, r11
	LONG $0x19448d48; BYTE $0x10       // lea    rax, [rcx + rbx + 16]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000080 // mov    rax, qword [rsp + 128]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b0 // mov    qword [rsp + 176], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0xd231                       // xor    edx, edx

LBB1_802:
	LONG $0x245c8948; BYTE $0x18       // mov    qword [rsp + 24], rbx
	LONG $0x24943b48; LONG $0x000000a0 // cmp    rdx, qword [rsp + 160]
	LONG $0x24548948; BYTE $0x28       // mov    qword [rsp + 40], rdx
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	JAE  LBB1_811
	LONG $0x24448b48; BYTE $0x20       // mov    rax, qword [rsp + 32]
	LONG $0x021c8d4c                   // lea    r11, [rdx + rax]
	LONG $0x5caf0f4c; WORD $0x0824     // imul    r11, qword [rsp + 8]
	LONG $0x241c034c                   // add    r11, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_809
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	JE   LBB1_807
	LONG $0x249c8b48; LONG $0x00000088 // mov    rbx, qword [rsp + 136]
	LONG $0x24448b48; BYTE $0x38       // mov    rax, qword [rsp + 56]
	WORD $0xd231                       // xor    edx, edx

LBB1_806:
	LONG $0x586f0f66; BYTE $0xf0               // movdqa    xmm3, oword [rax - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xd0 // paddb    xmm3, oword [r10 + 2*rdx - 48]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xd0 // movdqa    oword [r10 + 2*rdx - 48], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x527c; BYTE $0xe0 // paddb    xmm7, oword [r10 + 2*rdx - 32]
	LONG $0x7f0f4166; WORD $0x527c; BYTE $0xe0 // movdqa    oword [r10 + 2*rdx - 32], xmm7
	LONG $0x186f0f66                           // movdqa    xmm3, oword [rax]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff               // pminub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xf0 // paddb    xmm3, oword [r10 + 2*rdx - 16]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xf0 // movdqa    oword [r10 + 2*rdx - 16], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x523c             // paddb    xmm7, oword [r10 + 2*rdx]
	LONG $0x7f0f4166; WORD $0x523c             // movdqa    oword [r10 + 2*rdx], xmm7
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_806

LBB1_807:
	LONG $0x247c8348; WORD $0x0070 // cmp    qword [rsp + 112], 0
	JE   LBB1_809
	LONG $0x6f0f4166; WORD $0x131c // movdqa    xmm3, oword [r11 + rdx]
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xda0f4166; BYTE $0xff   // pminub    xmm7, xmm15
	LONG $0xfb740f66               // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8   // pand    xmm7, xmm8
	LONG $0xdf6f0f66               // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda   // punpcklbw    xmm3, xmm10
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x50   // paddb    xmm3, oword [rax + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm3
	LONG $0x680f4166; BYTE $0xfb   // punpckhbw    xmm7, xmm11
	LONG $0x7cfc0f66; WORD $0x1050 // paddb    xmm7, oword [rax + 2*rdx + 16]
	LONG $0x7c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm7

LBB1_809:
	WORD $0x3949; BYTE $0xcc                   // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28               // mov    rdx, qword [rsp + 40]
	JE   LBB1_811
	LONG $0x6f0f41f3; WORD $0x0b7c; BYTE $0xf0 // movdqu    xmm7, oword [r11 + rcx - 16]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f44f3; WORD $0x484c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*rcx - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xfc0f4166; BYTE $0xf9               // paddb    xmm7, xmm9
	LONG $0x7c7f0ff3; WORD $0xe048             // movdqu    oword [rax + 2*rcx - 32], xmm7
	LONG $0x7c6f0ff3; WORD $0xf048             // movdqu    xmm7, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdffc0f66                           // paddb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xf048             // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_811:
	LONG $0x246c8b4c; BYTE $0x20       // mov    r13, qword [rsp + 32]
	WORD $0x394c; BYTE $0xea           // cmp    rdx, r13
	JBE  LBB1_820
	LONG $0x24448b48; BYTE $0x60       // mov    rax, qword [rsp + 96]
	LONG $0x02048d48                   // lea    rax, [rdx + rax]
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x24040348                   // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_818
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	LONG $0x0000bb41; WORD $0x0000     // mov    r11d, 0
	JE   LBB1_816
	LONG $0x24948b48; LONG $0x00000088 // mov    rdx, qword [rsp + 136]
	LONG $0x245c8b48; BYTE $0x68       // mov    rbx, qword [rsp + 104]
	WORD $0x3145; BYTE $0xdb           // xor    r11d, r11d

LBB1_815:
	LONG $0x5b6f0f66; BYTE $0xf0               // movdqa    xmm3, oword [rbx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    xmm3, oword [r10 + 2*r11 - 48]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    oword [r10 + 2*r11 - 48], xmm3
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    xmm3, oword [r10 + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    oword [r10 + 2*r11 - 32], xmm3
	LONG $0x1b6f0f66                           // movdqa    xmm3, oword [rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7               // pminub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    xmm3, oword [r10 + 2*r11 - 16]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    oword [r10 + 2*r11 - 16], xmm3
	LONG $0x6f0f4366; WORD $0x5a1c             // movdqa    xmm3, oword [r10 + 2*r11]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a1c             // movdqa    oword [r10 + 2*r11], xmm3
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB1_815

LBB1_816:
	LONG $0x247c8348; WORD $0x0070             // cmp    qword [rsp + 112], 0
	JE   LBB1_818
	LONG $0x6f0f4266; WORD $0x183c             // movdqa    xmm7, oword [rax + r11]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xda0f4166; BYTE $0xdf               // pminub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x6f0f4266; WORD $0x5a24             // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a24             // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0x10 // movdqa    xmm4, oword [rdx + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0x10 // movdqa    oword [rdx + 2*r11 + 16], xmm4

LBB1_818:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x246c8b4c; BYTE $0x20   // mov    r13, qword [rsp + 32]
	JE   LBB1_820
	LONG $0x5c6f0ff3; WORD $0xf008 // movdqu    xmm3, oword [rax + rcx - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xda0f4166; BYTE $0xe7   // pminub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe6   // pand    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x5c6f0ff3; WORD $0xe048 // movdqu    xmm3, oword [rax + 2*rcx - 32]
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfe   // punpcklbw    xmm7, xmm14
	LONG $0xdff80f66               // psubb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xe048 // movdqu    oword [rax + 2*rcx - 32], xmm3
	LONG $0x5c6f0ff3; WORD $0xf048 // movdqu    xmm3, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xe6   // punpckhbw    xmm4, xmm14
	LONG $0xdcf80f66               // psubb    xmm3, xmm4
	LONG $0x5c7f0ff3; WORD $0xf048 // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_820:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB1_823
	WORD $0xc031             // xor    eax, eax

LBB1_822:
	LONG $0x6f0f4166; WORD $0x460c // movdqa    xmm1, oword [r14 + 2*rax]
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xd6600f66               // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087 // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66               // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87   // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348               // add    rax, 8
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JB   LBB1_822

LBB1_823:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xed                       // test    r13, r13
	JE   LBB1_845
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x07fd8349                               // cmp    r13, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_825
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x247c8348; WORD $0x0050                 // cmp    qword [rsp + 80], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_825
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x000000b8; BYTE $0x18 // cmp    qword [rsp + 184], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_841
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24948b48; LONG $0x000000d0             // mov    rdx, qword [rsp + 208]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_840:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c28348               // add    rdx, 4
	JNE  LBB1_840

LBB1_841:
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x00 // cmp    qword [rsp + 128], 0
	JE   LBB1_844
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24948b48; LONG $0x000000b0             // mov    rdx, qword [rsp + 176]

LBB1_843:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_843

LBB1_844:
	LONG $0x24548b48; BYTE $0x50 // mov    rdx, qword [rsp + 80]
	WORD $0x394c; BYTE $0xea     // cmp    rdx, r13
	LONG $0xfbfe0f66             // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66             // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5 // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66             // paddd    xmm2, xmm1
	LONG $0xd07e0f66             // movd    eax, xmm2
	JE   LBB1_845

LBB1_825:
	WORD $0x894c; BYTE $0xeb           // mov    rbx, r13
	WORD $0x2948; BYTE $0xd3           // sub    rbx, rdx
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	LONG $0x96148d48                   // lea    rdx, [rsi + 4*rdx]

LBB1_826:
	WORD $0x0203             // add    eax, dword [rdx]
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_826

LBB1_845:
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_849
	WORD $0xd231                 // xor    edx, edx
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB1_847

LBB1_939:
	LONG $0x90440341; BYTE $0xfc // add    eax, dword [r8 + 4*rdx - 4]
	LONG $0x97442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rdx - 4]
	LONG $0x91448941; BYTE $0xfc // mov    dword [r9 + 4*rdx - 4], eax
	LONG $0x90040341             // add    eax, dword [r8 + 4*rdx]
	LONG $0x97042b41             // sub    eax, dword [r15 + 4*rdx]
	LONG $0x91048941             // mov    dword [r9 + 4*rdx], eax
	LONG $0x02c28348             // add    rdx, 2
	LONG $0x24543948; BYTE $0x30 // cmp    qword [rsp + 48], rdx
	JNE  LBB1_939

LBB1_847:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_849
	LONG $0x2a1c8d4a                               // lea    rbx, [rdx + r13]
	LONG $0x24b48b48; LONG $0x00000090             // mov    rsi, qword [rsp + 144]
	WORD $0x0403; BYTE $0x9e                       // add    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b48; BYTE $0x60                   // mov    rbx, qword [rsp + 96]
	LONG $0x1a1c8d48                               // lea    rbx, [rdx + rbx]
	WORD $0x042b; BYTE $0x9e                       // sub    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b4c; BYTE $0x58                   // mov    r11, qword [rsp + 88]
	LONG $0x245c8b48; BYTE $0x18                   // mov    rbx, qword [rsp + 24]
	LONG $0x93048941                               // mov    dword [r11 + 4*rdx], eax

LBB1_849:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_852
	WORD $0xc031             // xor    eax, eax

LBB1_851:
	LONG $0x6f0f4166; WORD $0x814c; BYTE $0xfc // movdqa    xmm1, oword [r9 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8154; BYTE $0x0c // movdqa    xmm2, oword [r9 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x815c; BYTE $0x1c // movdqa    xmm3, oword [r9 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8164; BYTE $0x2c // movdqa    xmm4, oword [r9 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0f66; BYTE $0x03               // movdqa    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_851

LBB1_852:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	JE   LBB1_854
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x4c6f0ff3; WORD $0xc088 // movdqu    xmm1, oword [rax + 4*rcx - 64]
	LONG $0xc8f50f66               // pmaddwd    xmm1, xmm0
	LONG $0xce660f66               // pcmpgtd    xmm1, xmm6
	LONG $0x546f0ff3; WORD $0xd088 // movdqu    xmm2, oword [rax + 4*rcx - 48]
	LONG $0xd0f50f66               // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66               // pcmpgtd    xmm2, xmm6
	LONG $0x5c6f0ff3; WORD $0xe088 // movdqu    xmm3, oword [rax + 4*rcx - 32]
	LONG $0xd8f50f66               // pmaddwd    xmm3, xmm0
	LONG $0xde660f66               // pcmpgtd    xmm3, xmm6
	LONG $0x646f0ff3; WORD $0xf088 // movdqu    xmm4, oword [rax + 4*rcx - 16]
	LONG $0xe0f50f66               // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66               // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66               // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66               // packssdw    xmm3, xmm4
	LONG $0xcb630f66               // packsswb    xmm1, xmm3
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4   // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd   // pandn    xmm1, xmm13
	LONG $0xcaeb0f66               // por    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0xf00b // movdqu    oword [rbx + rcx - 16], xmm1

LBB1_854:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x24440148; BYTE $0x38 // add    qword [rsp + 56], rax
	LONG $0x24440148; BYTE $0x68 // add    qword [rsp + 104], rax
	LONG $0x24543b48; BYTE $0x40 // cmp    rdx, qword [rsp + 64]
	JNE  LBB1_802
	JMP  LBB1_929

LBB1_35:
	LONG $0xff4d8d4d                                 // lea    r9, [r13 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xdb31                                     // xor    ebx, ebx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_36:
	WORD $0x8948; BYTE $0xd8       // mov    rax, rbx
	LONG $0x44af0f48; WORD $0x0824 // imul    rax, qword [rsp + 8]
	WORD $0x854d; BYTE $0xc9       // test    r9, r9
	LONG $0x000000b9; BYTE $0x00   // mov    ecx, 0
	JE   LBB1_39
	WORD $0x894c; BYTE $0xc2       // mov    rdx, r8
	WORD $0x894c; BYTE $0xde       // mov    rsi, r11
	WORD $0xc931                   // xor    ecx, ecx

LBB1_38:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66               // pand    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xd04f // paddb    xmm4, oword [rdi + 2*rcx - 48]
	LONG $0x647f0f66; WORD $0xd04f // movdqa    oword [rdi + 2*rcx - 48], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0xe04f // paddb    xmm3, oword [rdi + 2*rcx - 32]
	LONG $0x5c7f0f66; WORD $0xe04f // movdqa    oword [rdi + 2*rcx - 32], xmm3
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66               // pand    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xf04f // paddb    xmm4, oword [rdi + 2*rcx - 16]
	LONG $0x647f0f66; WORD $0xf04f // movdqa    oword [rdi + 2*rcx - 16], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x1cfc0f66; BYTE $0x4f   // paddb    xmm3, oword [rdi + 2*rcx]
	LONG $0x1c7f0f66; BYTE $0x4f   // movdqa    oword [rdi + 2*rcx], xmm3
	LONG $0x20c18348               // add    rcx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c28348               // add    rdx, 2
	JNE  LBB1_38

LBB1_39:
	LONG $0x24040348                           // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2                   // test    r10, r10
	JE   LBB1_41
	LONG $0x1c6f0f66; BYTE $0x08               // movdqa    xmm3, oword [rax + rcx]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xd8db0f66                           // pand    xmm3, xmm0
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xe1600f66                           // punpcklbw    xmm4, xmm1
	LONG $0xfc0f4166; WORD $0x4c24             // paddb    xmm4, oword [r12 + 2*rcx]
	LONG $0x7f0f4166; WORD $0x4c24             // movdqa    oword [r12 + 2*rcx], xmm4
	LONG $0xda680f66                           // punpckhbw    xmm3, xmm2
	LONG $0xfc0f4166; WORD $0x4c5c; BYTE $0x10 // paddb    xmm3, oword [r12 + 2*rcx + 16]
	LONG $0x7f0f4166; WORD $0x4c5c; BYTE $0x10 // movdqa    oword [r12 + 2*rcx + 16], xmm3

LBB1_41:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0x6f0f43f3; WORD $0x7464; BYTE $0xe0 // movdqu    xmm4, oword [r12 + 2*r14 - 32]
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xecfc0f66                           // paddb    xmm5, xmm4
	LONG $0x7f0f43f3; WORD $0x746c; BYTE $0xe0 // movdqu    oword [r12 + 2*r14 - 32], xmm5
	LONG $0x6f0f43f3; WORD $0x7464; BYTE $0xf0 // movdqu    xmm4, oword [r12 + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdcfc0f66                           // paddb    xmm3, xmm4
	LONG $0x7f0f43f3; WORD $0x745c; BYTE $0xf0 // movdqu    oword [r12 + 2*r14 - 16], xmm3
	WORD $0xff48; BYTE $0xc3                   // inc    rbx
	LONG $0x245c034c; BYTE $0x08               // add    r11, qword [rsp + 8]
	LONG $0x245c3b48; BYTE $0x20               // cmp    rbx, qword [rsp + 32]
	JNE  LBB1_36

LBB1_55:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x24748b4c; BYTE $0x20       // mov    r14, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	LONG $0x5c3c8d49                   // lea    rdi, [r12 + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x7f048d4a                   // lea    rax, [rdi + 2*r15]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xb8048d4a                   // lea    rax, [rax + 4*r15]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xb8048d4a                   // lea    rax, [rax + 4*r15]
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	LONG $0xf8468d49                   // lea    rax, [r14 - 8]
	LONG $0x24848948; LONG $0x00000080 // mov    qword [rsp + 128], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8949; BYTE $0xc8           // mov    r8, rcx
	LONG $0x2484894c; LONG $0x00000090 // mov    qword [rsp + 144], r8
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8948; BYTE $0xd9           // mov    rcx, rbx
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x247c8b48; BYTE $0x30       // mov    rdi, qword [rsp + 48]
	LONG $0x04efc148                   // shr    rdi, 4
	WORD $0x8949; BYTE $0xfa           // mov    r10, rdi
	LONG $0x05e2c149                   // shl    r10, 5
	WORD $0x0149; BYTE $0xca           // add    r10, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x12748d4a; BYTE $0x10       // lea    rsi, [rdx + r10 + 16]
	LONG $0xff488d49                   // lea    rcx, [r8 - 1]
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x248c8948; LONG $0x000000b0 // mov    qword [rsp + 176], rcx
	LONG $0x12048d4a                   // lea    rax, [rdx + r10]
	LONG $0x24848948; LONG $0x000000a8 // mov    qword [rsp + 168], rax
	LONG $0xb5048d4a; LONG $0x00000000 // lea    rax, [4*r14]
	LONG $0xb2048d4f                   // lea    r8, [r10 + 4*r14]
	WORD $0x2949; BYTE $0xc2           // sub    r10, rax
	WORD $0x8949; BYTE $0xdf           // mov    r15, rbx
	LONG $0x05e7c149                   // shl    r15, 5
	LONG $0x5b048d48                   // lea    rax, [rbx + 2*rbx]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x7f1c8d48                   // lea    rbx, [rdi + 2*rdi]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x3a4c8d4a; BYTE $0x30       // lea    rcx, [rdx + r15 + 48]
	WORD $0x0149; BYTE $0xd7           // add    r15, rdx
	LONG $0x024c8d4e; BYTE $0x04       // lea    r9, [rdx + r8 + 4]
	WORD $0x0149; BYTE $0xd2           // add    r10, rdx
	LONG $0x1a448d4c; BYTE $0x04       // lea    r8, [rdx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xf0           // sub    rax, r14
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	WORD $0x894d; BYTE $0xf3           // mov    r11, r14
	WORD $0xf749; BYTE $0xd3           // not    r11
	LONG $0xff558d49                   // lea    rdx, [r13 - 1]
	LONG $0x04eac148                   // shr    rdx, 4
	WORD $0x7a8d; BYTE $0x01           // lea    edi, [rdx + 1]
	WORD $0xe783; BYTE $0x01           // and    edi, 1
	LONG $0x245c8b48; BYTE $0x48       // mov    rbx, qword [rsp + 72]
	WORD $0xd889                       // mov    eax, ebx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24448948; BYTE $0x70       // mov    qword [rsp + 112], rax
	WORD $0x2948; BYTE $0xc3           // sub    rbx, rax
	WORD $0x894c; BYTE $0xf0           // mov    rax, r14
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	WORD $0x894c; BYTE $0xf0           // mov    rax, r14
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x24348b4c                   // mov    r14, qword [rsp]
	LONG $0x06448d49; BYTE $0x10       // lea    rax, [r14 + rax + 16]
	LONG $0x24448948; BYTE $0x28       // mov    qword [rsp + 40], rax
	LONG $0x247c8948; BYTE $0x78       // mov    qword [rsp + 120], rdi
	LONG $0xff478d48                   // lea    rax, [rdi - 1]
	WORD $0x8948; BYTE $0xdf           // mov    rdi, rbx
	LONG $0x24548948; BYTE $0x60       // mov    qword [rsp + 96], rdx
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	LONG $0x24448b48; BYTE $0x08       // mov    rax, qword [rsp + 8]
	WORD $0x894c; BYTE $0xda           // mov    rdx, r11
	LONG $0x24548948; BYTE $0x58       // mov    qword [rsp + 88], rdx
	LONG $0xc3af0f49                   // imul    rax, r11
	LONG $0x06448d49; BYTE $0x10       // lea    rax, [r14 + rax + 16]
	LONG $0x24448948; BYTE $0x10       // mov    qword [rsp + 16], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000090 // mov    rax, qword [rsp + 144]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0xd231                       // xor    edx, edx
	LONG $0x247c8948; BYTE $0x38       // mov    qword [rsp + 56], rdi
	LONG $0x24748b4c; BYTE $0x48       // mov    r14, qword [rsp + 72]

LBB1_57:
	LONG $0x245c8948; BYTE $0x18   // mov    qword [rsp + 24], rbx
	LONG $0x24543b48; BYTE $0x68   // cmp    rdx, qword [rsp + 104]
	LONG $0x24548948; BYTE $0x30   // mov    qword [rsp + 48], rdx
	JAE  LBB1_66
	LONG $0x24448b48; BYTE $0x20   // mov    rax, qword [rsp + 32]
	LONG $0x021c8d4c               // lea    r11, [rdx + rax]
	LONG $0x5caf0f4c; WORD $0x0824 // imul    r11, qword [rsp + 8]
	LONG $0x241c034c               // add    r11, qword [rsp]
	WORD $0x854d; BYTE $0xed       // test    r13, r13
	JE   LBB1_64
	LONG $0x247c8348; WORD $0x0060 // cmp    qword [rsp + 96], 0
	LONG $0x000000ba; BYTE $0x00   // mov    edx, 0
	JE   LBB1_62
	LONG $0x24448b48; BYTE $0x50   // mov    rax, qword [rsp + 80]
	LONG $0x245c8b48; BYTE $0x28   // mov    rbx, qword [rsp + 40]
	WORD $0xd231                   // xor    edx, edx

LBB1_61:
	LONG $0x5b6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rbx - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xd8   // pand    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x7cfc0f66; WORD $0xd051 // paddb    xmm7, oword [rcx + 2*rdx - 48]
	LONG $0x7c7f0f66; WORD $0xd051 // movdqa    oword [rcx + 2*rdx - 48], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x5cfc0f66; WORD $0xe051 // paddb    xmm3, oword [rcx + 2*rdx - 32]
	LONG $0x5c7f0f66; WORD $0xe051 // movdqa    oword [rcx + 2*rdx - 32], xmm3
	LONG $0x1b6f0f66               // movdqa    xmm3, oword [rbx]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xd8   // pand    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x7cfc0f66; WORD $0xf051 // paddb    xmm7, oword [rcx + 2*rdx - 16]
	LONG $0x7c7f0f66; WORD $0xf051 // movdqa    oword [rcx + 2*rdx - 16], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x1cfc0f66; BYTE $0x51   // paddb    xmm3, oword [rcx + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x51   // movdqa    oword [rcx + 2*rdx], xmm3
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c38348               // add    rbx, 32
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB1_61

LBB1_62:
	LONG $0x247c8348; WORD $0x0078             // cmp    qword [rsp + 120], 0
	JE   LBB1_64
	LONG $0x6f0f4166; WORD $0x131c             // movdqa    xmm3, oword [r11 + rdx]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xfc0f4166; WORD $0x543c             // paddb    xmm7, oword [r12 + 2*rdx]
	LONG $0x7f0f4166; WORD $0x543c             // movdqa    oword [r12 + 2*rdx], xmm7
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xfc0f4166; WORD $0x545c; BYTE $0x10 // paddb    xmm3, oword [r12 + 2*rdx + 16]
	LONG $0x7f0f4166; WORD $0x545c; BYTE $0x10 // movdqa    oword [r12 + 2*rdx + 16], xmm3

LBB1_64:
	WORD $0x394d; BYTE $0xf5                   // cmp    r13, r14
	LONG $0x24548b48; BYTE $0x30               // mov    rdx, qword [rsp + 48]
	JE   LBB1_66
	LONG $0x6f0f43f3; WORD $0x337c; BYTE $0xf0 // movdqu    xmm7, oword [r11 + r14 - 16]
	LONG $0x740f4166; BYTE $0xff               // pcmpeqb    xmm7, xmm15
	LONG $0xdb0f4166; BYTE $0xfe               // pand    xmm7, xmm14
	LONG $0x6f0f47f3; WORD $0x744c; BYTE $0xe0 // movdqu    xmm9, oword [r12 + 2*r14 - 32]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xde               // punpcklbw    xmm3, xmm14
	LONG $0xfc0f4166; BYTE $0xd9               // paddb    xmm3, xmm9
	LONG $0x7f0f43f3; WORD $0x745c; BYTE $0xe0 // movdqu    oword [r12 + 2*r14 - 32], xmm3
	LONG $0x6f0f43f3; WORD $0x745c; BYTE $0xf0 // movdqu    xmm3, oword [r12 + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xfe               // punpckhbw    xmm7, xmm14
	LONG $0xfbfc0f66                           // paddb    xmm7, xmm3
	LONG $0x7f0f43f3; WORD $0x747c; BYTE $0xf0 // movdqu    oword [r12 + 2*r14 - 16], xmm7

LBB1_66:
	WORD $0x894c; BYTE $0xe3       // mov    rbx, r12
	LONG $0x245c8b4c; BYTE $0x20   // mov    r11, qword [rsp + 32]
	WORD $0x394c; BYTE $0xda       // cmp    rdx, r11
	JBE  LBB1_75
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x02248d4c               // lea    r12, [rdx + rax]
	LONG $0x64af0f4c; WORD $0x0824 // imul    r12, qword [rsp + 8]
	LONG $0x2424034c               // add    r12, qword [rsp]
	WORD $0x854d; BYTE $0xed       // test    r13, r13
	JE   LBB1_73
	LONG $0x247c8348; WORD $0x0060 // cmp    qword [rsp + 96], 0
	LONG $0x0000bb41; WORD $0x0000 // mov    r11d, 0
	JE   LBB1_71
	LONG $0x24548b48; BYTE $0x50   // mov    rdx, qword [rsp + 80]
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	WORD $0x3145; BYTE $0xdb       // xor    r11d, r11d

LBB1_70:
	LONG $0x586f0f66; BYTE $0xf0               // movdqa    xmm3, oword [rax - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0x6f0f4266; WORD $0x5964; BYTE $0xd0 // movdqa    xmm4, oword [rcx + 2*r11 - 48]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5964; BYTE $0xd0 // movdqa    oword [rcx + 2*r11 - 48], xmm4
	LONG $0x6f0f4266; WORD $0x5964; BYTE $0xe0 // movdqa    xmm4, oword [rcx + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5964; BYTE $0xe0 // movdqa    oword [rcx + 2*r11 - 32], xmm4
	LONG $0x186f0f66                           // movdqa    xmm3, oword [rax]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0x6f0f4266; WORD $0x5964; BYTE $0xf0 // movdqa    xmm4, oword [rcx + 2*r11 - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5964; BYTE $0xf0 // movdqa    oword [rcx + 2*r11 - 16], xmm4
	LONG $0x6f0f4266; WORD $0x5924             // movdqa    xmm4, oword [rcx + 2*r11]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5924             // movdqa    oword [rcx + 2*r11], xmm4
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB1_70

LBB1_71:
	LONG $0x247c8348; WORD $0x0078             // cmp    qword [rsp + 120], 0
	JE   LBB1_73
	LONG $0x6f0f4366; WORD $0x1c24             // movdqa    xmm4, oword [r12 + r11]
	LONG $0x740f4166; BYTE $0xe7               // pcmpeqb    xmm4, xmm15
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0x6f0f4266; WORD $0x583c             // movdqa    xmm7, oword [rax + 2*r11]
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfbf80f66                           // psubb    xmm7, xmm3
	LONG $0x7f0f4266; WORD $0x583c             // movdqa    oword [rax + 2*r11], xmm7
	LONG $0x6f0f4266; WORD $0x585c; BYTE $0x10 // movdqa    xmm3, oword [rax + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4266; WORD $0x585c; BYTE $0x10 // movdqa    oword [rax + 2*r11 + 16], xmm3

LBB1_73:
	WORD $0x394d; BYTE $0xf5                   // cmp    r13, r14
	LONG $0x245c8b4c; BYTE $0x20               // mov    r11, qword [rsp + 32]
	JE   LBB1_75
	LONG $0x6f0f43f3; WORD $0x345c; BYTE $0xf0 // movdqu    xmm3, oword [r12 + r14 - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	WORD $0x8948; BYTE $0xd8                   // mov    rax, rbx
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xe0 // movdqu    xmm4, oword [rax + 2*r14 - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm4
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    xmm4, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4

LBB1_75:
	WORD $0x854d; BYTE $0xf6 // test    r14, r14
	JE   LBB1_78
	WORD $0xc031             // xor    eax, eax

LBB1_77:
	LONG $0x6f0f4166; WORD $0x470c // movdqa    xmm1, oword [r15 + 2*rax]
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xd6600f66               // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf086 // movdqa    oword [rsi + 4*rax - 16], xmm2
	LONG $0xce680f66               // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x86   // movdqa    oword [rsi + 4*rax], xmm1
	LONG $0x08c08348               // add    rax, 8
	WORD $0x394c; BYTE $0xf0       // cmp    rax, r14
	JB   LBB1_77

LBB1_78:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xdb                       // test    r11, r11
	WORD $0x8949; BYTE $0xdc                       // mov    r12, rbx
	JE   LBB1_90
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x07fb8349                               // cmp    r11, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_80
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x24bc8348; LONG $0x00000098; BYTE $0x00 // cmp    qword [rsp + 152], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_80
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x18 // cmp    qword [rsp + 128], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_86
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24948b48; LONG $0x000000b0             // mov    rdx, qword [rsp + 176]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_85:
	LONG $0x646f0ff3; WORD $0xf086 // movdqu    xmm4, oword [rsi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x86   // movdqu    xmm5, oword [rsi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1086 // movdqu    xmm3, oword [rsi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2086 // movdqu    xmm7, oword [rsi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3086 // movdqu    xmm1, oword [rsi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4086 // movdqu    xmm2, oword [rsi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5086 // movdqu    xmm7, oword [rsi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6086 // movdqu    xmm3, oword [rsi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c28348               // add    rdx, 4
	JNE  LBB1_85

LBB1_86:
	LONG $0x24bc8348; LONG $0x00000090; BYTE $0x00 // cmp    qword [rsp + 144], 0
	JE   LBB1_89
	LONG $0x86048d48                               // lea    rax, [rsi + 4*rax]
	LONG $0x24948b48; LONG $0x000000b8             // mov    rdx, qword [rsp + 184]

LBB1_88:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_88

LBB1_89:
	LONG $0x24948b48; LONG $0x00000098 // mov    rdx, qword [rsp + 152]
	WORD $0x394c; BYTE $0xda           // cmp    rdx, r11
	LONG $0xfbfe0f66                   // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e       // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66                   // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5       // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66                   // paddd    xmm2, xmm1
	LONG $0xd07e0f66                   // movd    eax, xmm2
	JE   LBB1_90

LBB1_80:
	WORD $0x894c; BYTE $0xdb           // mov    rbx, r11
	WORD $0x2948; BYTE $0xd3           // sub    rbx, rdx
	LONG $0x24bc8b48; LONG $0x000000a8 // mov    rdi, qword [rsp + 168]
	LONG $0x97148d48                   // lea    rdx, [rdi + 4*rdx]
	LONG $0x247c8b48; BYTE $0x38       // mov    rdi, qword [rsp + 56]

LBB1_81:
	WORD $0x0203             // add    eax, dword [rdx]
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_81

LBB1_90:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_94
	WORD $0xd231                 // xor    edx, edx
	LONG $0x01fe8349             // cmp    r14, 1
	JE   LBB1_92

LBB1_930:
	LONG $0x91440341; BYTE $0xfc // add    eax, dword [r9 + 4*rdx - 4]
	LONG $0x92442b41; BYTE $0xfc // sub    eax, dword [r10 + 4*rdx - 4]
	LONG $0x90448941; BYTE $0xfc // mov    dword [r8 + 4*rdx - 4], eax
	LONG $0x91040341             // add    eax, dword [r9 + 4*rdx]
	LONG $0x92042b41             // sub    eax, dword [r10 + 4*rdx]
	LONG $0x90048941             // mov    dword [r8 + 4*rdx], eax
	LONG $0x02c28348             // add    rdx, 2
	WORD $0x3948; BYTE $0xd7     // cmp    rdi, rdx
	JNE  LBB1_930

LBB1_92:
	LONG $0x247c8348; WORD $0x0070     // cmp    qword [rsp + 112], 0
	JE   LBB1_94
	LONG $0x1a1c8d4a                   // lea    rbx, [rdx + r11]
	LONG $0x24bc8b48; LONG $0x00000088 // mov    rdi, qword [rsp + 136]
	WORD $0x0403; BYTE $0x9f           // add    eax, dword [rdi + 4*rbx]
	LONG $0x245c8b48; BYTE $0x58       // mov    rbx, qword [rsp + 88]
	LONG $0x1a1c8d48                   // lea    rbx, [rdx + rbx]
	WORD $0x042b; BYTE $0x9f           // sub    eax, dword [rdi + 4*rbx]
	LONG $0x247c8b48; BYTE $0x38       // mov    rdi, qword [rsp + 56]
	LONG $0x249c8b4c; LONG $0x000000a0 // mov    r11, qword [rsp + 160]
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x93048941                   // mov    dword [r11 + 4*rdx], eax

LBB1_94:
	WORD $0x854d; BYTE $0xed // test    r13, r13
	JE   LBB1_97
	WORD $0xc031             // xor    eax, eax

LBB1_96:
	LONG $0x6f0f4166; WORD $0x804c; BYTE $0xfc // movdqa    xmm1, oword [r8 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8054; BYTE $0x0c // movdqa    xmm2, oword [r8 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x805c; BYTE $0x1c // movdqa    xmm3, oword [r8 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8064; BYTE $0x2c // movdqa    xmm4, oword [r8 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0f66; BYTE $0x03               // movdqa    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe8                   // cmp    rax, r13
	JB   LBB1_96

LBB1_97:
	WORD $0x394d; BYTE $0xf5                   // cmp    r13, r14
	LONG $0x24548b48; BYTE $0x30               // mov    rdx, qword [rsp + 48]
	JE   LBB1_99
	LONG $0x24848b48; LONG $0x000000a0         // mov    rax, qword [rsp + 160]
	LONG $0x6f0f42f3; WORD $0xb04c; BYTE $0xc0 // movdqu    xmm1, oword [rax + 4*r14 - 64]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f42f3; WORD $0xb054; BYTE $0xd0 // movdqu    xmm2, oword [rax + 4*r14 - 48]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f42f3; WORD $0xb05c; BYTE $0xe0 // movdqu    xmm3, oword [rax + 4*r14 - 32]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f42f3; WORD $0xb064; BYTE $0xf0 // movdqu    xmm4, oword [rax + 4*r14 - 16]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x7f0f42f3; WORD $0x334c; BYTE $0xf0 // movdqu    oword [rbx + r14 - 16], xmm1

LBB1_99:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x24440148; BYTE $0x28 // add    qword [rsp + 40], rax
	LONG $0x24440148; BYTE $0x10 // add    qword [rsp + 16], rax
	LONG $0x24543b48; BYTE $0x40 // cmp    rdx, qword [rsp + 64]
	JNE  LBB1_57
	JMP  LBB1_929

LBB1_197:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_198:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_201
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_200:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xd057 // paddb    xmm4, oword [rdi + 2*rdx - 48]
	LONG $0x647f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0xe057 // paddb    xmm3, oword [rdi + 2*rdx - 32]
	LONG $0x5c7f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm3
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x64fc0f66; WORD $0xf057 // paddb    xmm4, oword [rdi + 2*rdx - 16]
	LONG $0x647f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x1cfc0f66; BYTE $0x57   // paddb    xmm3, oword [rdi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm3
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_200

LBB1_201:
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2       // test    r10, r10
	JE   LBB1_203
	LONG $0x1c6f0f66; BYTE $0x10   // movdqa    xmm3, oword [rax + rdx]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xd8df0f66               // pandn    xmm3, xmm0
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xe1600f66               // punpcklbw    xmm4, xmm1
	LONG $0x24748b48; BYTE $0x28   // mov    rsi, qword [rsp + 40]
	LONG $0x24fc0f66; BYTE $0x56   // paddb    xmm4, oword [rsi + 2*rdx]
	LONG $0x247f0f66; BYTE $0x56   // movdqa    oword [rsi + 2*rdx], xmm4
	LONG $0xda680f66               // punpckhbw    xmm3, xmm2
	LONG $0x5cfc0f66; WORD $0x1056 // paddb    xmm3, oword [rsi + 2*rdx + 16]
	LONG $0x5c7f0f66; WORD $0x1056 // movdqa    oword [rsi + 2*rdx + 16], xmm3

LBB1_203:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x28               // mov    rax, qword [rsp + 40]
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xe0 // movdqu    xmm4, oword [rax + 2*r14 - 32]
	LONG $0xeb6f0f66                           // movdqa    xmm5, xmm3
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xecfc0f66                           // paddb    xmm5, xmm4
	LONG $0x7f0f42f3; WORD $0x706c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm5
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    xmm4, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdcfc0f66                           // paddb    xmm3, xmm4
	LONG $0x7f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm3
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_198

LBB1_204:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x245c8b4c; BYTE $0x20       // mov    r11, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x28       // mov    rdi, qword [rsp + 40]
	LONG $0x245c8b48; BYTE $0x10       // mov    rbx, qword [rsp + 16]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	LONG $0xf8438d49                   // lea    rax, [r11 - 8]
	LONG $0x24848948; LONG $0x00000080 // mov    qword [rsp + 128], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x24948948; LONG $0x00000090 // mov    qword [rsp + 144], rdx
	LONG $0x24748b48; BYTE $0x18       // mov    rsi, qword [rsp + 24]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8948; BYTE $0xf1           // mov    rcx, rsi
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x245c8b48; BYTE $0x30       // mov    rbx, qword [rsp + 48]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8949; BYTE $0xdf           // mov    r15, rbx
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x397c8d4a; BYTE $0x10       // lea    rdi, [rcx + r15 + 16]
	WORD $0xff48; BYTE $0xca           // dec    rdx
	WORD $0x2948; BYTE $0xc2           // sub    rdx, rax
	LONG $0x24948948; LONG $0x000000b0 // mov    qword [rsp + 176], rdx
	LONG $0x39048d4a                   // lea    rax, [rcx + r15]
	LONG $0x24848948; LONG $0x000000a8 // mov    qword [rsp + 168], rax
	LONG $0x9d048d4a; LONG $0x00000000 // lea    rax, [4*r11]
	LONG $0x9f048d4f                   // lea    r8, [r15 + 4*r11]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xf5           // mov    r13, rsi
	LONG $0x05e5c149                   // shl    r13, 5
	LONG $0x76048d48                   // lea    rax, [rsi + 2*rsi]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x5b1c8d48                   // lea    rbx, [rbx + 2*rbx]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x29548d4a; BYTE $0x30       // lea    rdx, [rcx + r13 + 48]
	WORD $0x0149; BYTE $0xcd           // add    r13, rcx
	LONG $0x01548d4e; BYTE $0x04       // lea    r10, [rcx + r8 + 4]
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x19448d4c; BYTE $0x04       // lea    r8, [rcx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xd8           // sub    rax, r11
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	WORD $0x894d; BYTE $0xd9           // mov    r9, r11
	WORD $0xf749; BYTE $0xd1           // not    r9
	LONG $0x244c8d49; BYTE $0xff       // lea    rcx, [r12 - 1]
	LONG $0x04e9c148                   // shr    rcx, 4
	WORD $0x718d; BYTE $0x01           // lea    esi, [rcx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x245c8b48; BYTE $0x48       // mov    rbx, qword [rsp + 72]
	WORD $0xd889                       // mov    eax, ebx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24448948; BYTE $0x70       // mov    qword [rsp + 112], rax
	WORD $0x2948; BYTE $0xc3           // sub    rbx, rax
	LONG $0x245c8948; BYTE $0x30       // mov    qword [rsp + 48], rbx
	WORD $0x894c; BYTE $0xd8           // mov    rax, r11
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	WORD $0x894c; BYTE $0xd8           // mov    rax, r11
	LONG $0x24748b4c; BYTE $0x08       // mov    r14, qword [rsp + 8]
	LONG $0xc6af0f49                   // imul    rax, r14
	LONG $0x241c8b48                   // mov    rbx, qword [rsp]
	LONG $0x03448d48; BYTE $0x10       // lea    rax, [rbx + rax + 16]
	LONG $0x24448948; BYTE $0x10       // mov    qword [rsp + 16], rax
	LONG $0x24748948; BYTE $0x78       // mov    qword [rsp + 120], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x244c8948; BYTE $0x60       // mov    qword [rsp + 96], rcx
	WORD $0x2948; BYTE $0xc8           // sub    rax, rcx
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x894c; BYTE $0xce           // mov    rsi, r9
	LONG $0x24748948; BYTE $0x58       // mov    qword [rsp + 88], rsi
	LONG $0xf1af0f4d                   // imul    r14, r9
	LONG $0x33448d4a; BYTE $0x10       // lea    rax, [rbx + r14 + 16]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000090 // mov    rax, qword [rsp + 144]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0x3145; BYTE $0xc9           // xor    r9d, r9d
	LONG $0x24748b4c; BYTE $0x48       // mov    r14, qword [rsp + 72]

LBB1_206:
	LONG $0x245c8948; BYTE $0x18   // mov    qword [rsp + 24], rbx
	LONG $0x244c3b4c; BYTE $0x38   // cmp    r9, qword [rsp + 56]
	LONG $0x24748b48; BYTE $0x08   // mov    rsi, qword [rsp + 8]
	WORD $0x894c; BYTE $0xcb       // mov    rbx, r9
	JAE  LBB1_215
	WORD $0x894c; BYTE $0xd8       // mov    rax, r11
	WORD $0x8949; BYTE $0xdb       // mov    r11, rbx
	WORD $0x8948; BYTE $0xc1       // mov    rcx, rax
	LONG $0x030c8d4c               // lea    r9, [rbx + rax]
	LONG $0xceaf0f4c               // imul    r9, rsi
	LONG $0x240c034c               // add    r9, qword [rsp]
	WORD $0x854d; BYTE $0xe4       // test    r12, r12
	JE   LBB1_213
	LONG $0x247c8348; WORD $0x0060 // cmp    qword [rsp + 96], 0
	LONG $0x000000bb; BYTE $0x00   // mov    ebx, 0
	JE   LBB1_211
	LONG $0x24448b48; BYTE $0x50   // mov    rax, qword [rsp + 80]
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	WORD $0xdb31                   // xor    ebx, ebx

LBB1_210:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xd8   // pandn    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x7cfc0f66; WORD $0xd05a // paddb    xmm7, oword [rdx + 2*rbx - 48]
	LONG $0x7c7f0f66; WORD $0xd05a // movdqa    oword [rdx + 2*rbx - 48], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x5cfc0f66; WORD $0xe05a // paddb    xmm3, oword [rdx + 2*rbx - 32]
	LONG $0x5c7f0f66; WORD $0xe05a // movdqa    oword [rdx + 2*rbx - 32], xmm3
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xd8   // pandn    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x7cfc0f66; WORD $0xf05a // paddb    xmm7, oword [rdx + 2*rbx - 16]
	LONG $0x7c7f0f66; WORD $0xf05a // movdqa    oword [rdx + 2*rbx - 16], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x1cfc0f66; BYTE $0x5a   // paddb    xmm3, oword [rdx + 2*rbx]
	LONG $0x1c7f0f66; BYTE $0x5a   // movdqa    oword [rdx + 2*rbx], xmm3
	LONG $0x20c38348               // add    rbx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB1_210

LBB1_211:
	LONG $0x247c8348; WORD $0x0078 // cmp    qword [rsp + 120], 0
	LONG $0x24748b48; BYTE $0x08   // mov    rsi, qword [rsp + 8]
	JE   LBB1_213
	LONG $0x6f0f4166; WORD $0x191c // movdqa    xmm3, oword [r9 + rbx]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xd8   // pandn    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x24448b48; BYTE $0x28   // mov    rax, qword [rsp + 40]
	LONG $0x3cfc0f66; BYTE $0x58   // paddb    xmm7, oword [rax + 2*rbx]
	LONG $0x3c7f0f66; BYTE $0x58   // movdqa    oword [rax + 2*rbx], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x5cfc0f66; WORD $0x1058 // paddb    xmm3, oword [rax + 2*rbx + 16]
	LONG $0x5c7f0f66; WORD $0x1058 // movdqa    oword [rax + 2*rbx + 16], xmm3

LBB1_213:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	WORD $0x8949; BYTE $0xcb                   // mov    r11, rcx
	JE   LBB1_215
	LONG $0x6f0f43f3; WORD $0x317c; BYTE $0xf0 // movdqu    xmm7, oword [r9 + r14 - 16]
	LONG $0x740f4166; BYTE $0xff               // pcmpeqb    xmm7, xmm15
	LONG $0xdf0f4166; BYTE $0xfe               // pandn    xmm7, xmm14
	LONG $0x24448b48; BYTE $0x28               // mov    rax, qword [rsp + 40]
	LONG $0x6f0f46f3; WORD $0x704c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*r14 - 32]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xde               // punpcklbw    xmm3, xmm14
	LONG $0xfc0f4166; BYTE $0xd9               // paddb    xmm3, xmm9
	LONG $0x7f0f42f3; WORD $0x705c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm3
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xfe               // punpckhbw    xmm7, xmm14
	LONG $0xfbfc0f66                           // paddb    xmm7, xmm3
	LONG $0x7f0f42f3; WORD $0x707c; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm7

LBB1_215:
	WORD $0x394c; BYTE $0xdb       // cmp    rbx, r11
	WORD $0x8949; BYTE $0xd9       // mov    r9, rbx
	JBE  LBB1_224
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x01048d49               // lea    rax, [r9 + rax]
	LONG $0xc6af0f48               // imul    rax, rsi
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4       // test    r12, r12
	JE   LBB1_222
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0x247c8348; WORD $0x0060 // cmp    qword [rsp + 96], 0
	LONG $0x0000bb41; WORD $0x0000 // mov    r11d, 0
	JE   LBB1_220
	LONG $0x245c8b48; BYTE $0x50   // mov    rbx, qword [rsp + 80]
	LONG $0x244c8b4c; BYTE $0x68   // mov    r9, qword [rsp + 104]
	WORD $0x3145; BYTE $0xdb       // xor    r11d, r11d

LBB1_219:
	LONG $0x6f0f4166; WORD $0xf059             // movdqa    xmm3, oword [r9 - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xd8               // pandn    xmm3, xmm8
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0xd0 // movdqa    xmm4, oword [rdx + 2*r11 - 48]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0xd0 // movdqa    oword [rdx + 2*r11 - 48], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0xe0 // movdqa    xmm4, oword [rdx + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0xe0 // movdqa    oword [rdx + 2*r11 - 32], xmm4
	LONG $0x6f0f4166; BYTE $0x19               // movdqa    xmm3, oword [r9]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xd8               // pandn    xmm3, xmm8
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0xf0 // movdqa    xmm4, oword [rdx + 2*r11 - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0xf0 // movdqa    oword [rdx + 2*r11 - 16], xmm4
	LONG $0x6f0f4266; WORD $0x5a24             // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a24             // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c18349                           // add    r9, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_219

LBB1_220:
	LONG $0x247c8348; WORD $0x0078             // cmp    qword [rsp + 120], 0
	WORD $0x8949; BYTE $0xf1                   // mov    r9, rsi
	JE   LBB1_222
	LONG $0x6f0f4266; WORD $0x1824             // movdqa    xmm4, oword [rax + r11]
	LONG $0x740f4166; BYTE $0xe7               // pcmpeqb    xmm4, xmm15
	LONG $0xdf0f4166; BYTE $0xe0               // pandn    xmm4, xmm8
	LONG $0x24748b48; BYTE $0x28               // mov    rsi, qword [rsp + 40]
	LONG $0x6f0f4266; WORD $0x5e3c             // movdqa    xmm7, oword [rsi + 2*r11]
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfbf80f66                           // psubb    xmm7, xmm3
	LONG $0x7f0f4266; WORD $0x5e3c             // movdqa    oword [rsi + 2*r11], xmm7
	LONG $0x6f0f4266; WORD $0x5e5c; BYTE $0x10 // movdqa    xmm3, oword [rsi + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4266; WORD $0x5e5c; BYTE $0x10 // movdqa    oword [rsi + 2*r11 + 16], xmm3

LBB1_222:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	LONG $0x245c8b4c; BYTE $0x20               // mov    r11, qword [rsp + 32]
	JE   LBB1_224
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x28               // mov    rax, qword [rsp + 40]
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xe0 // movdqu    xmm4, oword [rax + 2*r14 - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm4
	LONG $0x6f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    xmm4, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4

LBB1_224:
	WORD $0x854d; BYTE $0xf6 // test    r14, r14
	JE   LBB1_227
	WORD $0xc031             // xor    eax, eax

LBB1_226:
	LONG $0x6f0f4166; WORD $0x454c; BYTE $0x00 // movdqa    xmm1, oword [r13 + 2*rax]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd6600f66                           // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087             // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66                           // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87               // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348                           // add    rax, 8
	WORD $0x394c; BYTE $0xf0                   // cmp    rax, r14
	JB   LBB1_226

LBB1_227:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xdb                       // test    r11, r11
	JE   LBB1_249
	WORD $0xf631                                   // xor    esi, esi
	LONG $0x07fb8349                               // cmp    r11, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_229
	WORD $0xf631                                   // xor    esi, esi
	LONG $0x24bc8348; LONG $0x00000098; BYTE $0x00 // cmp    qword [rsp + 152], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_229
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x18 // cmp    qword [rsp + 128], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_245
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24b48b48; LONG $0x000000b0             // mov    rsi, qword [rsp + 176]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_244:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c68348               // add    rsi, 4
	JNE  LBB1_244

LBB1_245:
	LONG $0x24bc8348; LONG $0x00000090; BYTE $0x00 // cmp    qword [rsp + 144], 0
	JE   LBB1_248
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24b48b48; LONG $0x000000b8             // mov    rsi, qword [rsp + 184]

LBB1_247:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	JNE  LBB1_247

LBB1_248:
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	WORD $0x394c; BYTE $0xde           // cmp    rsi, r11
	LONG $0xfbfe0f66                   // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e       // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66                   // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5       // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66                   // paddd    xmm2, xmm1
	LONG $0xd07e0f66                   // movd    eax, xmm2
	JE   LBB1_249

LBB1_229:
	WORD $0x894c; BYTE $0xdb           // mov    rbx, r11
	WORD $0x2948; BYTE $0xf3           // sub    rbx, rsi
	LONG $0x248c8b48; LONG $0x000000a8 // mov    rcx, qword [rsp + 168]
	LONG $0xb1348d48                   // lea    rsi, [rcx + 4*rsi]

LBB1_230:
	WORD $0x0603             // add    eax, dword [rsi]
	LONG $0x04c68348         // add    rsi, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_230

LBB1_249:
	WORD $0x854d; BYTE $0xf6     // test    r14, r14
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_253
	WORD $0xf631                 // xor    esi, esi
	LONG $0x01fe8349             // cmp    r14, 1
	JE   LBB1_251

LBB1_931:
	LONG $0xb2440341; BYTE $0xfc // add    eax, dword [r10 + 4*rsi - 4]
	LONG $0xb7442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rsi - 4]
	LONG $0xb0448941; BYTE $0xfc // mov    dword [r8 + 4*rsi - 4], eax
	LONG $0xb2040341             // add    eax, dword [r10 + 4*rsi]
	LONG $0xb7042b41             // sub    eax, dword [r15 + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x02c68348             // add    rsi, 2
	LONG $0x24743948; BYTE $0x30 // cmp    qword [rsp + 48], rsi
	JNE  LBB1_931

LBB1_251:
	LONG $0x247c8348; WORD $0x0070     // cmp    qword [rsp + 112], 0
	JE   LBB1_253
	LONG $0x1e1c8d4a                   // lea    rbx, [rsi + r11]
	LONG $0x248c8b48; LONG $0x00000088 // mov    rcx, qword [rsp + 136]
	WORD $0x0403; BYTE $0x99           // add    eax, dword [rcx + 4*rbx]
	LONG $0x245c8b48; BYTE $0x58       // mov    rbx, qword [rsp + 88]
	LONG $0x1e1c8d48                   // lea    rbx, [rsi + rbx]
	WORD $0x042b; BYTE $0x99           // sub    eax, dword [rcx + 4*rbx]
	WORD $0x894c; BYTE $0xc9           // mov    rcx, r9
	LONG $0x248c8b4c; LONG $0x000000a0 // mov    r9, qword [rsp + 160]
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0xb1048941                   // mov    dword [r9 + 4*rsi], eax
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx

LBB1_253:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_256
	WORD $0xc031             // xor    eax, eax

LBB1_255:
	LONG $0x6f0f4166; WORD $0x804c; BYTE $0xfc // movdqa    xmm1, oword [r8 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8054; BYTE $0x0c // movdqa    xmm2, oword [r8 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x805c; BYTE $0x1c // movdqa    xmm3, oword [r8 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8064; BYTE $0x2c // movdqa    xmm4, oword [r8 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0f66; BYTE $0x03               // movdqa    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_255

LBB1_256:
	WORD $0x394d; BYTE $0xf4                   // cmp    r12, r14
	LONG $0x24448b48; BYTE $0x08               // mov    rax, qword [rsp + 8]
	JE   LBB1_258
	LONG $0x248c8b48; LONG $0x000000a0         // mov    rcx, qword [rsp + 160]
	LONG $0x6f0f42f3; WORD $0xb14c; BYTE $0xc0 // movdqu    xmm1, oword [rcx + 4*r14 - 64]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f42f3; WORD $0xb154; BYTE $0xd0 // movdqu    xmm2, oword [rcx + 4*r14 - 48]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f42f3; WORD $0xb15c; BYTE $0xe0 // movdqu    xmm3, oword [rcx + 4*r14 - 32]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f42f3; WORD $0xb164; BYTE $0xf0 // movdqu    xmm4, oword [rcx + 4*r14 - 16]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x7f0f42f3; WORD $0x334c; BYTE $0xf0 // movdqu    oword [rbx + r14 - 16], xmm1

LBB1_258:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x24440148; BYTE $0x10 // add    qword [rsp + 16], rax
	LONG $0x24440148; BYTE $0x68 // add    qword [rsp + 104], rax
	LONG $0x244c3b4c; BYTE $0x40 // cmp    r9, qword [rsp + 64]
	JNE  LBB1_206
	JMP  LBB1_929

LBB1_495:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_496:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_499
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_498:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd057 // paddb    xmm3, oword [rdi + 2*rdx - 48]
	LONG $0x5c7f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe057 // paddb    xmm4, oword [rdi + 2*rdx - 32]
	LONG $0x647f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm4
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf057 // paddb    xmm3, oword [rdi + 2*rdx - 16]
	LONG $0x5c7f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x57   // paddb    xmm4, oword [rdi + 2*rdx]
	LONG $0x247f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm4
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_498

LBB1_499:
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2       // test    r10, r10
	JE   LBB1_501
	LONG $0x1c6f0f66; BYTE $0x10   // movdqa    xmm3, oword [rax + rdx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0db0f66               // pand    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x56   // paddb    xmm3, oword [rsi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x56   // movdqa    oword [rsi + 2*rdx], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1056 // paddb    xmm4, oword [rsi + 2*rdx + 16]
	LONG $0x647f0f66; WORD $0x1056 // movdqa    oword [rsi + 2*rdx + 16], xmm4

LBB1_501:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe6               // pand    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xe0 // movdqu    xmm3, oword [rax + 2*r14 - 32]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xebfc0f66                           // paddb    xmm5, xmm3
	LONG $0x7f0f42f3; WORD $0x706c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm5
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xe6               // punpckhbw    xmm4, xmm14
	LONG $0xe3fc0f66                           // paddb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_496

LBB1_502:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x24448b4c; BYTE $0x20       // mov    r8, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x10       // mov    rdi, qword [rsp + 16]
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000090 // mov    qword [rsp + 144], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	LONG $0xf8408d49                   // lea    rax, [r8 - 8]
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx
	LONG $0x248c894c; LONG $0x00000080 // mov    qword [rsp + 128], r9
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8948; BYTE $0xd9           // mov    rcx, rbx
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x24748b48; BYTE $0x30       // mov    rsi, qword [rsp + 48]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8949; BYTE $0xf7           // mov    r15, rsi
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x3a7c8d4a; BYTE $0x10       // lea    rdi, [rdx + r15 + 16]
	LONG $0xff498d49                   // lea    rcx, [r9 - 1]
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x248c8948; LONG $0x000000d0 // mov    qword [rsp + 208], rcx
	LONG $0x3a048d4a                   // lea    rax, [rdx + r15]
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	LONG $0x85048d4a; LONG $0x00000000 // lea    rax, [4*r8]
	WORD $0x894d; BYTE $0xc5           // mov    r13, r8
	LONG $0xaf048d4f                   // lea    r8, [r15 + 4*r13]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xde           // mov    r14, rbx
	LONG $0x05e6c149                   // shl    r14, 5
	LONG $0x5b048d48                   // lea    rax, [rbx + 2*rbx]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x761c8d48                   // lea    rbx, [rsi + 2*rsi]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x32548d4e; BYTE $0x30       // lea    r10, [rdx + r14 + 48]
	WORD $0x0149; BYTE $0xd6           // add    r14, rdx
	LONG $0x02448d4e; BYTE $0x04       // lea    r8, [rdx + r8 + 4]
	WORD $0x0149; BYTE $0xd7           // add    r15, rdx
	LONG $0x1a4c8d4c; BYTE $0x04       // lea    r9, [rdx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xe8           // sub    rax, r13
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	WORD $0x894d; BYTE $0xeb           // mov    r11, r13
	WORD $0xf749; BYTE $0xd3           // not    r11
	LONG $0x24548d49; BYTE $0xff       // lea    rdx, [r12 - 1]
	LONG $0x04eac148                   // shr    rdx, 4
	WORD $0x728d; BYTE $0x01           // lea    esi, [rdx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	WORD $0xc889                       // mov    eax, ecx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24848948; LONG $0x000000a8 // mov    qword [rsp + 168], rax
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x244c8948; BYTE $0x30       // mov    qword [rsp + 48], rcx
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0x245c8b48; BYTE $0x08       // mov    rbx, qword [rsp + 8]
	LONG $0xc3af0f48                   // imul    rax, rbx
	LONG $0x240c8b48                   // mov    rcx, qword [rsp]
	LONG $0x01448d48; BYTE $0x10       // lea    rax, [rcx + rax + 16]
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	LONG $0x24748948; BYTE $0x70       // mov    qword [rsp + 112], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x24548948; BYTE $0x78       // mov    qword [rsp + 120], rdx
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	WORD $0x894c; BYTE $0xda           // mov    rdx, r11
	LONG $0x24548948; BYTE $0x60       // mov    qword [rsp + 96], rdx
	LONG $0xdbaf0f49                   // imul    rbx, r11
	LONG $0x19448d48; BYTE $0x10       // lea    rax, [rcx + rbx + 16]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000080 // mov    rax, qword [rsp + 128]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b0 // mov    qword [rsp + 176], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0xd231                       // xor    edx, edx

LBB1_504:
	LONG $0x245c8948; BYTE $0x18       // mov    qword [rsp + 24], rbx
	LONG $0x24943b48; LONG $0x000000a0 // cmp    rdx, qword [rsp + 160]
	LONG $0x24548948; BYTE $0x28       // mov    qword [rsp + 40], rdx
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	JAE  LBB1_513
	LONG $0x24448b48; BYTE $0x20       // mov    rax, qword [rsp + 32]
	LONG $0x021c8d4c                   // lea    r11, [rdx + rax]
	LONG $0x5caf0f4c; WORD $0x0824     // imul    r11, qword [rsp + 8]
	LONG $0x241c034c                   // add    r11, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_511
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	JE   LBB1_509
	LONG $0x249c8b48; LONG $0x00000088 // mov    rbx, qword [rsp + 136]
	LONG $0x24448b48; BYTE $0x38       // mov    rax, qword [rsp + 56]
	WORD $0xd231                       // xor    edx, edx

LBB1_508:
	LONG $0x586f0f66; BYTE $0xf0               // movdqa    xmm3, oword [rax - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xd0 // paddb    xmm3, oword [r10 + 2*rdx - 48]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xd0 // movdqa    oword [r10 + 2*rdx - 48], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x527c; BYTE $0xe0 // paddb    xmm7, oword [r10 + 2*rdx - 32]
	LONG $0x7f0f4166; WORD $0x527c; BYTE $0xe0 // movdqa    oword [r10 + 2*rdx - 32], xmm7
	LONG $0x186f0f66                           // movdqa    xmm3, oword [rax]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8               // pand    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xf0 // paddb    xmm3, oword [r10 + 2*rdx - 16]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xf0 // movdqa    oword [r10 + 2*rdx - 16], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x523c             // paddb    xmm7, oword [r10 + 2*rdx]
	LONG $0x7f0f4166; WORD $0x523c             // movdqa    oword [r10 + 2*rdx], xmm7
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_508

LBB1_509:
	LONG $0x247c8348; WORD $0x0070 // cmp    qword [rsp + 112], 0
	JE   LBB1_511
	LONG $0x6f0f4166; WORD $0x131c // movdqa    xmm3, oword [r11 + rdx]
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff   // pmaxub    xmm7, xmm15
	LONG $0xfb740f66               // pcmpeqb    xmm7, xmm3
	LONG $0xdb0f4166; BYTE $0xf8   // pand    xmm7, xmm8
	LONG $0xdf6f0f66               // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda   // punpcklbw    xmm3, xmm10
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x50   // paddb    xmm3, oword [rax + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm3
	LONG $0x680f4166; BYTE $0xfb   // punpckhbw    xmm7, xmm11
	LONG $0x7cfc0f66; WORD $0x1050 // paddb    xmm7, oword [rax + 2*rdx + 16]
	LONG $0x7c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm7

LBB1_511:
	WORD $0x3949; BYTE $0xcc                   // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28               // mov    rdx, qword [rsp + 40]
	JE   LBB1_513
	LONG $0x6f0f41f3; WORD $0x0b7c; BYTE $0xf0 // movdqu    xmm7, oword [r11 + rcx - 16]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdb0f4166; BYTE $0xde               // pand    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f44f3; WORD $0x484c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*rcx - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xfc0f4166; BYTE $0xf9               // paddb    xmm7, xmm9
	LONG $0x7c7f0ff3; WORD $0xe048             // movdqu    oword [rax + 2*rcx - 32], xmm7
	LONG $0x7c6f0ff3; WORD $0xf048             // movdqu    xmm7, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdffc0f66                           // paddb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xf048             // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_513:
	LONG $0x246c8b4c; BYTE $0x20       // mov    r13, qword [rsp + 32]
	WORD $0x394c; BYTE $0xea           // cmp    rdx, r13
	JBE  LBB1_522
	LONG $0x24448b48; BYTE $0x60       // mov    rax, qword [rsp + 96]
	LONG $0x02048d48                   // lea    rax, [rdx + rax]
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x24040348                   // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_520
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	LONG $0x0000bb41; WORD $0x0000     // mov    r11d, 0
	JE   LBB1_518
	LONG $0x24948b48; LONG $0x00000088 // mov    rdx, qword [rsp + 136]
	LONG $0x245c8b48; BYTE $0x68       // mov    rbx, qword [rsp + 104]
	WORD $0x3145; BYTE $0xdb           // xor    r11d, r11d

LBB1_517:
	LONG $0x5b6f0f66; BYTE $0xf0               // movdqa    xmm3, oword [rbx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    xmm3, oword [r10 + 2*r11 - 48]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    oword [r10 + 2*r11 - 48], xmm3
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    xmm3, oword [r10 + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    oword [r10 + 2*r11 - 32], xmm3
	LONG $0x1b6f0f66                           // movdqa    xmm3, oword [rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    xmm3, oword [r10 + 2*r11 - 16]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    oword [r10 + 2*r11 - 16], xmm3
	LONG $0x6f0f4366; WORD $0x5a1c             // movdqa    xmm3, oword [r10 + 2*r11]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a1c             // movdqa    oword [r10 + 2*r11], xmm3
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB1_517

LBB1_518:
	LONG $0x247c8348; WORD $0x0070             // cmp    qword [rsp + 112], 0
	JE   LBB1_520
	LONG $0x6f0f4266; WORD $0x183c             // movdqa    xmm7, oword [rax + r11]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x6f0f4266; WORD $0x5a24             // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a24             // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0x10 // movdqa    xmm4, oword [rdx + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0x10 // movdqa    oword [rdx + 2*r11 + 16], xmm4

LBB1_520:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x246c8b4c; BYTE $0x20   // mov    r13, qword [rsp + 32]
	JE   LBB1_522
	LONG $0x5c6f0ff3; WORD $0xf008 // movdqu    xmm3, oword [rax + rcx - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xdb0f4166; BYTE $0xe6   // pand    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x5c6f0ff3; WORD $0xe048 // movdqu    xmm3, oword [rax + 2*rcx - 32]
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfe   // punpcklbw    xmm7, xmm14
	LONG $0xdff80f66               // psubb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xe048 // movdqu    oword [rax + 2*rcx - 32], xmm3
	LONG $0x5c6f0ff3; WORD $0xf048 // movdqu    xmm3, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xe6   // punpckhbw    xmm4, xmm14
	LONG $0xdcf80f66               // psubb    xmm3, xmm4
	LONG $0x5c7f0ff3; WORD $0xf048 // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_522:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB1_525
	WORD $0xc031             // xor    eax, eax

LBB1_524:
	LONG $0x6f0f4166; WORD $0x460c // movdqa    xmm1, oword [r14 + 2*rax]
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xd6600f66               // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087 // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66               // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87   // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348               // add    rax, 8
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JB   LBB1_524

LBB1_525:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xed                       // test    r13, r13
	JE   LBB1_547
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x07fd8349                               // cmp    r13, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_527
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x247c8348; WORD $0x0050                 // cmp    qword [rsp + 80], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_527
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x000000b8; BYTE $0x18 // cmp    qword [rsp + 184], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_543
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24948b48; LONG $0x000000d0             // mov    rdx, qword [rsp + 208]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_542:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c28348               // add    rdx, 4
	JNE  LBB1_542

LBB1_543:
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x00 // cmp    qword [rsp + 128], 0
	JE   LBB1_546
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24948b48; LONG $0x000000b0             // mov    rdx, qword [rsp + 176]

LBB1_545:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_545

LBB1_546:
	LONG $0x24548b48; BYTE $0x50 // mov    rdx, qword [rsp + 80]
	WORD $0x394c; BYTE $0xea     // cmp    rdx, r13
	LONG $0xfbfe0f66             // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66             // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5 // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66             // paddd    xmm2, xmm1
	LONG $0xd07e0f66             // movd    eax, xmm2
	JE   LBB1_547

LBB1_527:
	WORD $0x894c; BYTE $0xeb           // mov    rbx, r13
	WORD $0x2948; BYTE $0xd3           // sub    rbx, rdx
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	LONG $0x96148d48                   // lea    rdx, [rsi + 4*rdx]

LBB1_528:
	WORD $0x0203             // add    eax, dword [rdx]
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_528

LBB1_547:
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_551
	WORD $0xd231                 // xor    edx, edx
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB1_549

LBB1_935:
	LONG $0x90440341; BYTE $0xfc // add    eax, dword [r8 + 4*rdx - 4]
	LONG $0x97442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rdx - 4]
	LONG $0x91448941; BYTE $0xfc // mov    dword [r9 + 4*rdx - 4], eax
	LONG $0x90040341             // add    eax, dword [r8 + 4*rdx]
	LONG $0x97042b41             // sub    eax, dword [r15 + 4*rdx]
	LONG $0x91048941             // mov    dword [r9 + 4*rdx], eax
	LONG $0x02c28348             // add    rdx, 2
	LONG $0x24543948; BYTE $0x30 // cmp    qword [rsp + 48], rdx
	JNE  LBB1_935

LBB1_549:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_551
	LONG $0x2a1c8d4a                               // lea    rbx, [rdx + r13]
	LONG $0x24b48b48; LONG $0x00000090             // mov    rsi, qword [rsp + 144]
	WORD $0x0403; BYTE $0x9e                       // add    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b48; BYTE $0x60                   // mov    rbx, qword [rsp + 96]
	LONG $0x1a1c8d48                               // lea    rbx, [rdx + rbx]
	WORD $0x042b; BYTE $0x9e                       // sub    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b4c; BYTE $0x58                   // mov    r11, qword [rsp + 88]
	LONG $0x245c8b48; BYTE $0x18                   // mov    rbx, qword [rsp + 24]
	LONG $0x93048941                               // mov    dword [r11 + 4*rdx], eax

LBB1_551:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_554
	WORD $0xc031             // xor    eax, eax

LBB1_553:
	LONG $0x6f0f4166; WORD $0x814c; BYTE $0xfc // movdqa    xmm1, oword [r9 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8154; BYTE $0x0c // movdqa    xmm2, oword [r9 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x815c; BYTE $0x1c // movdqa    xmm3, oword [r9 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8164; BYTE $0x2c // movdqa    xmm4, oword [r9 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0f66; BYTE $0x03               // movdqa    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_553

LBB1_554:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	JE   LBB1_556
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x4c6f0ff3; WORD $0xc088 // movdqu    xmm1, oword [rax + 4*rcx - 64]
	LONG $0xc8f50f66               // pmaddwd    xmm1, xmm0
	LONG $0xce660f66               // pcmpgtd    xmm1, xmm6
	LONG $0x546f0ff3; WORD $0xd088 // movdqu    xmm2, oword [rax + 4*rcx - 48]
	LONG $0xd0f50f66               // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66               // pcmpgtd    xmm2, xmm6
	LONG $0x5c6f0ff3; WORD $0xe088 // movdqu    xmm3, oword [rax + 4*rcx - 32]
	LONG $0xd8f50f66               // pmaddwd    xmm3, xmm0
	LONG $0xde660f66               // pcmpgtd    xmm3, xmm6
	LONG $0x646f0ff3; WORD $0xf088 // movdqu    xmm4, oword [rax + 4*rcx - 16]
	LONG $0xe0f50f66               // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66               // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66               // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66               // packssdw    xmm3, xmm4
	LONG $0xcb630f66               // packsswb    xmm1, xmm3
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4   // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd   // pandn    xmm1, xmm13
	LONG $0xcaeb0f66               // por    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0xf00b // movdqu    oword [rbx + rcx - 16], xmm1

LBB1_556:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x24440148; BYTE $0x38 // add    qword [rsp + 56], rax
	LONG $0x24440148; BYTE $0x68 // add    qword [rsp + 104], rax
	LONG $0x24543b48; BYTE $0x40 // cmp    rdx, qword [rsp + 64]
	JNE  LBB1_504
	JMP  LBB1_929

LBB1_647:
	LONG $0x244c8d4d; BYTE $0xff                     // lea    r9, [r12 - 1]
	LONG $0x04e9c149                                 // shr    r9, 4
	LONG $0x01518d45                                 // lea    r10d, [r9 + 1]
	LONG $0x01e28341                                 // and    r10d, 1
	LONG $0x24048b48                                 // mov    rax, qword [rsp]
	LONG $0x10588d4c                                 // lea    r11, [rax + 16]
	LONG $0xfff0b848; LONG $0xffffffff; WORD $0x7fff // mov    rax, 9223372036854775792
	LONG $0x24442348; BYTE $0x18                     // and    rax, qword [rsp + 24]
	LONG $0x244c8b48; BYTE $0xd8                     // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x417c8d48; BYTE $0x30                     // lea    rdi, [rcx + 2*rax + 48]
	LONG $0xff428d4d                                 // lea    r8, [r10 - 1]
	WORD $0x294d; BYTE $0xc8                         // sub    r8, r9
	WORD $0xc931                                     // xor    ecx, ecx
	LONG $0x456f0f66; BYTE $0x00                     // movdqa    xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x4d6f0f66; BYTE $0x00                     // movdqa    xmm1, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x556f0f66; BYTE $0x10                     // movdqa    xmm2, oword 16[rbp] /* [rip + .LCPI1_2] */

LBB1_648:
	WORD $0x8948; BYTE $0xc8     // mov    rax, rcx
	LONG $0xc2af0f48             // imul    rax, rdx
	WORD $0x854d; BYTE $0xc9     // test    r9, r9
	LONG $0x000000ba; BYTE $0x00 // mov    edx, 0
	JE   LBB1_651
	WORD $0x894c; BYTE $0xc3     // mov    rbx, r8
	WORD $0x894c; BYTE $0xde     // mov    rsi, r11
	WORD $0xd231                 // xor    edx, edx

LBB1_650:
	LONG $0x5e6f0f66; BYTE $0xf0   // movdqa    xmm3, oword [rsi - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xd057 // paddb    xmm3, oword [rdi + 2*rdx - 48]
	LONG $0x5c7f0f66; WORD $0xd057 // movdqa    oword [rdi + 2*rdx - 48], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0xe057 // paddb    xmm4, oword [rdi + 2*rdx - 32]
	LONG $0x647f0f66; WORD $0xe057 // movdqa    oword [rdi + 2*rdx - 32], xmm4
	LONG $0x1e6f0f66               // movdqa    xmm3, oword [rsi]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x5cfc0f66; WORD $0xf057 // paddb    xmm3, oword [rdi + 2*rdx - 16]
	LONG $0x5c7f0f66; WORD $0xf057 // movdqa    oword [rdi + 2*rdx - 16], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x24fc0f66; BYTE $0x57   // paddb    xmm4, oword [rdi + 2*rdx]
	LONG $0x247f0f66; BYTE $0x57   // movdqa    oword [rdi + 2*rdx], xmm4
	LONG $0x20c28348               // add    rdx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c38348               // add    rbx, 2
	JNE  LBB1_650

LBB1_651:
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xd2       // test    r10, r10
	JE   LBB1_653
	LONG $0x1c6f0f66; BYTE $0x10   // movdqa    xmm3, oword [rax + rdx]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xe0df0f66               // pandn    xmm4, xmm0
	LONG $0xdc6f0f66               // movdqa    xmm3, xmm4
	LONG $0xd9600f66               // punpcklbw    xmm3, xmm1
	LONG $0x24748b48; BYTE $0x10   // mov    rsi, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x56   // paddb    xmm3, oword [rsi + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x56   // movdqa    oword [rsi + 2*rdx], xmm3
	LONG $0xe2680f66               // punpckhbw    xmm4, xmm2
	LONG $0x64fc0f66; WORD $0x1056 // paddb    xmm4, oword [rsi + 2*rdx + 16]
	LONG $0x647f0f66; WORD $0x1056 // movdqa    oword [rsi + 2*rdx + 16], xmm4

LBB1_653:
	LONG $0x6f0f42f3; WORD $0x305c; BYTE $0xf0 // movdqu    xmm3, oword [rax + r14 - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe6               // pandn    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xe0 // movdqu    xmm3, oword [rax + 2*r14 - 32]
	LONG $0xec6f0f66                           // movdqa    xmm5, xmm4
	LONG $0x600f4166; BYTE $0xee               // punpcklbw    xmm5, xmm14
	LONG $0xebfc0f66                           // paddb    xmm5, xmm3
	LONG $0x7f0f42f3; WORD $0x706c; BYTE $0xe0 // movdqu    oword [rax + 2*r14 - 32], xmm5
	LONG $0x6f0f42f3; WORD $0x705c; BYTE $0xf0 // movdqu    xmm3, oword [rax + 2*r14 - 16]
	LONG $0x680f4166; BYTE $0xe6               // punpckhbw    xmm4, xmm14
	LONG $0xe3fc0f66                           // paddb    xmm4, xmm3
	LONG $0x7f0f42f3; WORD $0x7064; BYTE $0xf0 // movdqu    oword [rax + 2*r14 - 16], xmm4
	WORD $0xff48; BYTE $0xc1                   // inc    rcx
	LONG $0x24548b48; BYTE $0x08               // mov    rdx, qword [rsp + 8]
	WORD $0x0149; BYTE $0xd3                   // add    r11, rdx
	LONG $0x244c3b48; BYTE $0x20               // cmp    rcx, qword [rsp + 32]
	JNE  LBB1_648

LBB1_654:
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x24448b4c; BYTE $0x20       // mov    r8, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x10       // mov    rdi, qword [rsp + 16]
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000090 // mov    qword [rsp + 144], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24448948; BYTE $0x58       // mov    qword [rsp + 88], rax
	LONG $0xf8408d49                   // lea    rax, [r8 - 8]
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx
	LONG $0x248c894c; LONG $0x00000080 // mov    qword [rsp + 128], r9
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8948; BYTE $0xd9           // mov    rcx, rbx
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x24748b48; BYTE $0x30       // mov    rsi, qword [rsp + 48]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8949; BYTE $0xf7           // mov    r15, rsi
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x3a7c8d4a; BYTE $0x10       // lea    rdi, [rdx + r15 + 16]
	LONG $0xff498d49                   // lea    rcx, [r9 - 1]
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x248c8948; LONG $0x000000d0 // mov    qword [rsp + 208], rcx
	LONG $0x3a048d4a                   // lea    rax, [rdx + r15]
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	LONG $0x85048d4a; LONG $0x00000000 // lea    rax, [4*r8]
	WORD $0x894d; BYTE $0xc5           // mov    r13, r8
	LONG $0xaf048d4f                   // lea    r8, [r15 + 4*r13]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xde           // mov    r14, rbx
	LONG $0x05e6c149                   // shl    r14, 5
	LONG $0x5b048d48                   // lea    rax, [rbx + 2*rbx]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x761c8d48                   // lea    rbx, [rsi + 2*rsi]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x32548d4e; BYTE $0x30       // lea    r10, [rdx + r14 + 48]
	WORD $0x0149; BYTE $0xd6           // add    r14, rdx
	LONG $0x02448d4e; BYTE $0x04       // lea    r8, [rdx + r8 + 4]
	WORD $0x0149; BYTE $0xd7           // add    r15, rdx
	LONG $0x1a4c8d4c; BYTE $0x04       // lea    r9, [rdx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xe8           // sub    rax, r13
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	WORD $0x894d; BYTE $0xeb           // mov    r11, r13
	WORD $0xf749; BYTE $0xd3           // not    r11
	LONG $0x24548d49; BYTE $0xff       // lea    rdx, [r12 - 1]
	LONG $0x04eac148                   // shr    rdx, 4
	WORD $0x728d; BYTE $0x01           // lea    esi, [rdx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	WORD $0xc889                       // mov    eax, ecx
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24848948; LONG $0x000000a8 // mov    qword [rsp + 168], rax
	WORD $0x2948; BYTE $0xc1           // sub    rcx, rax
	LONG $0x244c8948; BYTE $0x30       // mov    qword [rsp + 48], rcx
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	WORD $0x894c; BYTE $0xe8           // mov    rax, r13
	LONG $0x245c8b48; BYTE $0x08       // mov    rbx, qword [rsp + 8]
	LONG $0xc3af0f48                   // imul    rax, rbx
	LONG $0x240c8b48                   // mov    rcx, qword [rsp]
	LONG $0x01448d48; BYTE $0x10       // lea    rax, [rcx + rax + 16]
	LONG $0x24448948; BYTE $0x38       // mov    qword [rsp + 56], rax
	LONG $0x24748948; BYTE $0x70       // mov    qword [rsp + 112], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x24548948; BYTE $0x78       // mov    qword [rsp + 120], rdx
	WORD $0x2948; BYTE $0xd0           // sub    rax, rdx
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	WORD $0x894c; BYTE $0xda           // mov    rdx, r11
	LONG $0x24548948; BYTE $0x60       // mov    qword [rsp + 96], rdx
	LONG $0xdbaf0f49                   // imul    rbx, r11
	LONG $0x19448d48; BYTE $0x10       // lea    rax, [rcx + rbx + 16]
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000080 // mov    rax, qword [rsp + 128]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b0 // mov    qword [rsp + 176], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0xd231                       // xor    edx, edx

LBB1_656:
	LONG $0x245c8948; BYTE $0x18       // mov    qword [rsp + 24], rbx
	LONG $0x24943b48; LONG $0x000000a0 // cmp    rdx, qword [rsp + 160]
	LONG $0x24548948; BYTE $0x28       // mov    qword [rsp + 40], rdx
	LONG $0x244c8b48; BYTE $0x48       // mov    rcx, qword [rsp + 72]
	JAE  LBB1_665
	LONG $0x24448b48; BYTE $0x20       // mov    rax, qword [rsp + 32]
	LONG $0x021c8d4c                   // lea    r11, [rdx + rax]
	LONG $0x5caf0f4c; WORD $0x0824     // imul    r11, qword [rsp + 8]
	LONG $0x241c034c                   // add    r11, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_663
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	LONG $0x000000ba; BYTE $0x00       // mov    edx, 0
	JE   LBB1_661
	LONG $0x249c8b48; LONG $0x00000088 // mov    rbx, qword [rsp + 136]
	LONG $0x24448b48; BYTE $0x38       // mov    rax, qword [rsp + 56]
	WORD $0xd231                       // xor    edx, edx

LBB1_660:
	LONG $0x586f0f66; BYTE $0xf0               // movdqa    xmm3, oword [rax - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8               // pandn    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xd0 // paddb    xmm3, oword [r10 + 2*rdx - 48]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xd0 // movdqa    oword [r10 + 2*rdx - 48], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x527c; BYTE $0xe0 // paddb    xmm7, oword [r10 + 2*rdx - 32]
	LONG $0x7f0f4166; WORD $0x527c; BYTE $0xe0 // movdqa    oword [r10 + 2*rdx - 32], xmm7
	LONG $0x186f0f66                           // movdqa    xmm3, oword [rax]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff               // pmaxub    xmm7, xmm15
	LONG $0xfb740f66                           // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8               // pandn    xmm7, xmm8
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfc0f4166; WORD $0x525c; BYTE $0xf0 // paddb    xmm3, oword [r10 + 2*rdx - 16]
	LONG $0x7f0f4166; WORD $0x525c; BYTE $0xf0 // movdqa    oword [r10 + 2*rdx - 16], xmm3
	LONG $0x680f4166; BYTE $0xfb               // punpckhbw    xmm7, xmm11
	LONG $0xfc0f4166; WORD $0x523c             // paddb    xmm7, oword [r10 + 2*rdx]
	LONG $0x7f0f4166; WORD $0x523c             // movdqa    oword [r10 + 2*rdx], xmm7
	LONG $0x20c28348                           // add    rdx, 32
	LONG $0x20c08348                           // add    rax, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_660

LBB1_661:
	LONG $0x247c8348; WORD $0x0070 // cmp    qword [rsp + 112], 0
	JE   LBB1_663
	LONG $0x6f0f4166; WORD $0x131c // movdqa    xmm3, oword [r11 + rdx]
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0xde0f4166; BYTE $0xff   // pmaxub    xmm7, xmm15
	LONG $0xfb740f66               // pcmpeqb    xmm7, xmm3
	LONG $0xdf0f4166; BYTE $0xf8   // pandn    xmm7, xmm8
	LONG $0xdf6f0f66               // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xda   // punpcklbw    xmm3, xmm10
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x1cfc0f66; BYTE $0x50   // paddb    xmm3, oword [rax + 2*rdx]
	LONG $0x1c7f0f66; BYTE $0x50   // movdqa    oword [rax + 2*rdx], xmm3
	LONG $0x680f4166; BYTE $0xfb   // punpckhbw    xmm7, xmm11
	LONG $0x7cfc0f66; WORD $0x1050 // paddb    xmm7, oword [rax + 2*rdx + 16]
	LONG $0x7c7f0f66; WORD $0x1050 // movdqa    oword [rax + 2*rdx + 16], xmm7

LBB1_663:
	WORD $0x3949; BYTE $0xcc                   // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28               // mov    rdx, qword [rsp + 40]
	JE   LBB1_665
	LONG $0x6f0f41f3; WORD $0x0b7c; BYTE $0xf0 // movdqu    xmm7, oword [r11 + rcx - 16]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdf0f4166; BYTE $0xde               // pandn    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x10               // mov    rax, qword [rsp + 16]
	LONG $0x6f0f44f3; WORD $0x484c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*rcx - 32]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe               // punpcklbw    xmm7, xmm14
	LONG $0xfc0f4166; BYTE $0xf9               // paddb    xmm7, xmm9
	LONG $0x7c7f0ff3; WORD $0xe048             // movdqu    oword [rax + 2*rcx - 32], xmm7
	LONG $0x7c6f0ff3; WORD $0xf048             // movdqu    xmm7, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xde               // punpckhbw    xmm3, xmm14
	LONG $0xdffc0f66                           // paddb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xf048             // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_665:
	LONG $0x246c8b4c; BYTE $0x20       // mov    r13, qword [rsp + 32]
	WORD $0x394c; BYTE $0xea           // cmp    rdx, r13
	JBE  LBB1_674
	LONG $0x24448b48; BYTE $0x60       // mov    rax, qword [rsp + 96]
	LONG $0x02048d48                   // lea    rax, [rdx + rax]
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x24040348                   // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4           // test    r12, r12
	JE   LBB1_672
	LONG $0x247c8348; WORD $0x0078     // cmp    qword [rsp + 120], 0
	LONG $0x0000bb41; WORD $0x0000     // mov    r11d, 0
	JE   LBB1_670
	LONG $0x24948b48; LONG $0x00000088 // mov    rdx, qword [rsp + 136]
	LONG $0x245c8b48; BYTE $0x68       // mov    rbx, qword [rsp + 104]
	WORD $0x3145; BYTE $0xdb           // xor    r11d, r11d

LBB1_669:
	LONG $0x5b6f0f66; BYTE $0xf0               // movdqa    xmm3, oword [rbx - 16]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe0               // pandn    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    xmm3, oword [r10 + 2*r11 - 48]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xd0 // movdqa    oword [r10 + 2*r11 - 48], xmm3
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    xmm3, oword [r10 + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xe0 // movdqa    oword [r10 + 2*r11 - 32], xmm3
	LONG $0x1b6f0f66                           // movdqa    xmm3, oword [rbx]
	LONG $0xe36f0f66                           // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7               // pmaxub    xmm4, xmm15
	LONG $0xe3740f66                           // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe0               // pandn    xmm4, xmm8
	LONG $0x6f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    xmm3, oword [r10 + 2*r11 - 16]
	LONG $0xfc6f0f66                           // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xdff80f66                           // psubb    xmm3, xmm7
	LONG $0x7f0f4366; WORD $0x5a5c; BYTE $0xf0 // movdqa    oword [r10 + 2*r11 - 16], xmm3
	LONG $0x6f0f4366; WORD $0x5a1c             // movdqa    xmm3, oword [r10 + 2*r11]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4366; WORD $0x5a1c             // movdqa    oword [r10 + 2*r11], xmm3
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c38348                           // add    rbx, 32
	LONG $0x02c28348                           // add    rdx, 2
	JNE  LBB1_669

LBB1_670:
	LONG $0x247c8348; WORD $0x0070             // cmp    qword [rsp + 112], 0
	JE   LBB1_672
	LONG $0x6f0f4266; WORD $0x183c             // movdqa    xmm7, oword [rax + r11]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0xde0f4166; BYTE $0xdf               // pmaxub    xmm3, xmm15
	LONG $0xdf740f66                           // pcmpeqb    xmm3, xmm7
	LONG $0xdf0f4166; BYTE $0xd8               // pandn    xmm3, xmm8
	LONG $0x24548b48; BYTE $0x10               // mov    rdx, qword [rsp + 16]
	LONG $0x6f0f4266; WORD $0x5a24             // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a24             // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0x10 // movdqa    xmm4, oword [rdx + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0x10 // movdqa    oword [rdx + 2*r11 + 16], xmm4

LBB1_672:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x246c8b4c; BYTE $0x20   // mov    r13, qword [rsp + 32]
	JE   LBB1_674
	LONG $0x5c6f0ff3; WORD $0xf008 // movdqu    xmm3, oword [rax + rcx - 16]
	LONG $0xe36f0f66               // movdqa    xmm4, xmm3
	LONG $0xde0f4166; BYTE $0xe7   // pmaxub    xmm4, xmm15
	LONG $0xe3740f66               // pcmpeqb    xmm4, xmm3
	LONG $0xdf0f4166; BYTE $0xe6   // pandn    xmm4, xmm14
	LONG $0x24448b48; BYTE $0x10   // mov    rax, qword [rsp + 16]
	LONG $0x5c6f0ff3; WORD $0xe048 // movdqu    xmm3, oword [rax + 2*rcx - 32]
	LONG $0xfc6f0f66               // movdqa    xmm7, xmm4
	LONG $0x600f4166; BYTE $0xfe   // punpcklbw    xmm7, xmm14
	LONG $0xdff80f66               // psubb    xmm3, xmm7
	LONG $0x5c7f0ff3; WORD $0xe048 // movdqu    oword [rax + 2*rcx - 32], xmm3
	LONG $0x5c6f0ff3; WORD $0xf048 // movdqu    xmm3, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xe6   // punpckhbw    xmm4, xmm14
	LONG $0xdcf80f66               // psubb    xmm3, xmm4
	LONG $0x5c7f0ff3; WORD $0xf048 // movdqu    oword [rax + 2*rcx - 16], xmm3

LBB1_674:
	WORD $0x8548; BYTE $0xc9 // test    rcx, rcx
	JE   LBB1_677
	WORD $0xc031             // xor    eax, eax

LBB1_676:
	LONG $0x6f0f4166; WORD $0x460c // movdqa    xmm1, oword [r14 + 2*rax]
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xd6600f66               // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087 // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66               // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87   // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348               // add    rax, 8
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JB   LBB1_676

LBB1_677:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xed                       // test    r13, r13
	JE   LBB1_699
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x07fd8349                               // cmp    r13, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_679
	WORD $0xd231                                   // xor    edx, edx
	LONG $0x247c8348; WORD $0x0050                 // cmp    qword [rsp + 80], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_679
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x000000b8; BYTE $0x18 // cmp    qword [rsp + 184], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_695
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24948b48; LONG $0x000000d0             // mov    rdx, qword [rsp + 208]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_694:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c28348               // add    rdx, 4
	JNE  LBB1_694

LBB1_695:
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x00 // cmp    qword [rsp + 128], 0
	JE   LBB1_698
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24948b48; LONG $0x000000b0             // mov    rdx, qword [rsp + 176]

LBB1_697:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	JNE  LBB1_697

LBB1_698:
	LONG $0x24548b48; BYTE $0x50 // mov    rdx, qword [rsp + 80]
	WORD $0x394c; BYTE $0xea     // cmp    rdx, r13
	LONG $0xfbfe0f66             // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66             // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5 // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66             // paddd    xmm2, xmm1
	LONG $0xd07e0f66             // movd    eax, xmm2
	JE   LBB1_699

LBB1_679:
	WORD $0x894c; BYTE $0xeb           // mov    rbx, r13
	WORD $0x2948; BYTE $0xd3           // sub    rbx, rdx
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	LONG $0x96148d48                   // lea    rdx, [rsi + 4*rdx]

LBB1_680:
	WORD $0x0203             // add    eax, dword [rdx]
	LONG $0x04c28348         // add    rdx, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_680

LBB1_699:
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	LONG $0x245c8b48; BYTE $0x18 // mov    rbx, qword [rsp + 24]
	JE   LBB1_703
	WORD $0xd231                 // xor    edx, edx
	LONG $0x01f98348             // cmp    rcx, 1
	JE   LBB1_701

LBB1_937:
	LONG $0x90440341; BYTE $0xfc // add    eax, dword [r8 + 4*rdx - 4]
	LONG $0x97442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rdx - 4]
	LONG $0x91448941; BYTE $0xfc // mov    dword [r9 + 4*rdx - 4], eax
	LONG $0x90040341             // add    eax, dword [r8 + 4*rdx]
	LONG $0x97042b41             // sub    eax, dword [r15 + 4*rdx]
	LONG $0x91048941             // mov    dword [r9 + 4*rdx], eax
	LONG $0x02c28348             // add    rdx, 2
	LONG $0x24543948; BYTE $0x30 // cmp    qword [rsp + 48], rdx
	JNE  LBB1_937

LBB1_701:
	LONG $0x24bc8348; LONG $0x000000a8; BYTE $0x00 // cmp    qword [rsp + 168], 0
	JE   LBB1_703
	LONG $0x2a1c8d4a                               // lea    rbx, [rdx + r13]
	LONG $0x24b48b48; LONG $0x00000090             // mov    rsi, qword [rsp + 144]
	WORD $0x0403; BYTE $0x9e                       // add    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b48; BYTE $0x60                   // mov    rbx, qword [rsp + 96]
	LONG $0x1a1c8d48                               // lea    rbx, [rdx + rbx]
	WORD $0x042b; BYTE $0x9e                       // sub    eax, dword [rsi + 4*rbx]
	LONG $0x245c8b4c; BYTE $0x58                   // mov    r11, qword [rsp + 88]
	LONG $0x245c8b48; BYTE $0x18                   // mov    rbx, qword [rsp + 24]
	LONG $0x93048941                               // mov    dword [r11 + 4*rdx], eax

LBB1_703:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_706
	WORD $0xc031             // xor    eax, eax

LBB1_705:
	LONG $0x6f0f4166; WORD $0x814c; BYTE $0xfc // movdqa    xmm1, oword [r9 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8154; BYTE $0x0c // movdqa    xmm2, oword [r9 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x815c; BYTE $0x1c // movdqa    xmm3, oword [r9 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8164; BYTE $0x2c // movdqa    xmm4, oword [r9 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0f66; BYTE $0x03               // movdqa    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_705

LBB1_706:
	WORD $0x3949; BYTE $0xcc       // cmp    r12, rcx
	LONG $0x24548b48; BYTE $0x28   // mov    rdx, qword [rsp + 40]
	JE   LBB1_708
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x4c6f0ff3; WORD $0xc088 // movdqu    xmm1, oword [rax + 4*rcx - 64]
	LONG $0xc8f50f66               // pmaddwd    xmm1, xmm0
	LONG $0xce660f66               // pcmpgtd    xmm1, xmm6
	LONG $0x546f0ff3; WORD $0xd088 // movdqu    xmm2, oword [rax + 4*rcx - 48]
	LONG $0xd0f50f66               // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66               // pcmpgtd    xmm2, xmm6
	LONG $0x5c6f0ff3; WORD $0xe088 // movdqu    xmm3, oword [rax + 4*rcx - 32]
	LONG $0xd8f50f66               // pmaddwd    xmm3, xmm0
	LONG $0xde660f66               // pcmpgtd    xmm3, xmm6
	LONG $0x646f0ff3; WORD $0xf088 // movdqu    xmm4, oword [rax + 4*rcx - 16]
	LONG $0xe0f50f66               // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66               // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66               // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66               // packssdw    xmm3, xmm4
	LONG $0xcb630f66               // packsswb    xmm1, xmm3
	LONG $0xd16f0f66               // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4   // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd   // pandn    xmm1, xmm13
	LONG $0xcaeb0f66               // por    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0xf00b // movdqu    oword [rbx + rcx - 16], xmm1

LBB1_708:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff48; BYTE $0xc2     // inc    rdx
	LONG $0x24448b48; BYTE $0x08 // mov    rax, qword [rsp + 8]
	LONG $0x24440148; BYTE $0x38 // add    qword [rsp + 56], rax
	LONG $0x24440148; BYTE $0x68 // add    qword [rsp + 104], rax
	LONG $0x24543b48; BYTE $0x40 // cmp    rdx, qword [rsp + 64]
	JNE  LBB1_656
	JMP  LBB1_929

LBB1_158:
	WORD $0x2948; BYTE $0xc2     // sub    rdx, rax
	LONG $0x240c8b48             // mov    rcx, qword [rsp]
	LONG $0x31748d4a; BYTE $0xf0 // lea    rsi, [rcx + r14 - 16]
	LONG $0x245c8b48; BYTE $0x08 // mov    rbx, qword [rsp + 8]
	LONG $0x1b3c8d48             // lea    rdi, [rbx + rbx]
	WORD $0xc931                 // xor    ecx, ecx

LBB1_159:
	LONG $0x166f0ff3                           // movdqu    xmm2, oword [rsi]
	LONG $0x740f4166; BYTE $0xd7               // pcmpeqb    xmm2, xmm15
	LONG $0xdb0f4166; BYTE $0xd6               // pand    xmm2, xmm14
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0x600f4166; BYTE $0xde               // punpcklbw    xmm3, xmm14
	LONG $0xd9fc0f66                           // paddb    xmm3, xmm1
	LONG $0x7f0f43f3; WORD $0x775c; BYTE $0xe0 // movdqu    oword [r15 + 2*r14 - 32], xmm3
	LONG $0x680f4166; BYTE $0xd6               // punpckhbw    xmm2, xmm14
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f43f3; WORD $0x7754; BYTE $0xf0 // movdqu    oword [r15 + 2*r14 - 16], xmm2
	LONG $0x046f0ff3; BYTE $0x33               // movdqu    xmm0, oword [rbx + rsi]
	LONG $0x740f4166; BYTE $0xc7               // pcmpeqb    xmm0, xmm15
	LONG $0xdb0f4166; BYTE $0xc6               // pand    xmm0, xmm14
	LONG $0xc86f0f66                           // movdqa    xmm1, xmm0
	LONG $0x600f4166; BYTE $0xce               // punpcklbw    xmm1, xmm14
	LONG $0xcbfc0f66                           // paddb    xmm1, xmm3
	LONG $0x7f0f43f3; WORD $0x774c; BYTE $0xe0 // movdqu    oword [r15 + 2*r14 - 32], xmm1
	LONG $0x680f4166; BYTE $0xc6               // punpckhbw    xmm0, xmm14
	LONG $0xc2fc0f66                           // paddb    xmm0, xmm2
	LONG $0x7f0f43f3; WORD $0x7744; BYTE $0xf0 // movdqu    oword [r15 + 2*r14 - 16], xmm0
	LONG $0x02c18348                           // add    rcx, 2
	WORD $0x0148; BYTE $0xfe                   // add    rsi, rdi
	WORD $0x3948; BYTE $0xca                   // cmp    rdx, rcx
	JNE  LBB1_159

LBB1_129:
	WORD $0x8548; BYTE $0xc0                   // test    rax, rax
	JE   LBB1_131
	LONG $0xcbaf0f48                           // imul    rcx, rbx
	LONG $0x240c0348                           // add    rcx, qword [rsp]
	LONG $0x6f0f41f3; WORD $0x0e54; BYTE $0xf0 // movdqu    xmm2, oword [r14 + rcx - 16]
	LONG $0x740f4166; BYTE $0xd7               // pcmpeqb    xmm2, xmm15
	LONG $0xdb0f4166; BYTE $0xd6               // pand    xmm2, xmm14
	LONG $0xda6f0f66                           // movdqa    xmm3, xmm2
	LONG $0x600f4166; BYTE $0xde               // punpcklbw    xmm3, xmm14
	LONG $0xd9fc0f66                           // paddb    xmm3, xmm1
	LONG $0x7f0f43f3; WORD $0x775c; BYTE $0xe0 // movdqu    oword [r15 + 2*r14 - 32], xmm3
	LONG $0x680f4166; BYTE $0xd6               // punpckhbw    xmm2, xmm14
	LONG $0xd0fc0f66                           // paddb    xmm2, xmm0
	LONG $0x7f0f43f3; WORD $0x7754; BYTE $0xf0 // movdqu    oword [r15 + 2*r14 - 16], xmm2

LBB1_131:
	LONG $0x247c894c; BYTE $0x38       // mov    qword [rsp + 56], r15
	LONG $0x247c8348; WORD $0x0040     // cmp    qword [rsp + 64], 0
	LONG $0x245c8b4c; BYTE $0x20       // mov    r11, qword [rsp + 32]
	JE   LBB1_929
	LONG $0x2444b60f; BYTE $0xa8       // movzx    eax, byte -88[rsp] /* [rbp + 16] */
	WORD $0xd8f7                       // neg    eax
	LONG $0x0000ffb9; BYTE $0x00       // mov    ecx, 255
	LONG $0x2454b60f; BYTE $0xb0       // movzx    edx, byte -80[rsp] /* [rbp + 24] */
	LONG $0x2474b60f; BYTE $0xb8       // movzx    esi, byte -72[rsp] /* [rbp + 32] */
	LONG $0x247c8b48; BYTE $0x38       // mov    rdi, qword [rsp + 56]
	LONG $0x245c8b48; BYTE $0x28       // mov    rbx, qword [rsp + 40]
	LONG $0x5f3c8d48                   // lea    rdi, [rdi + 2*rbx]
	LONG $0xc16e0f66                   // movd    xmm0, ecx
	LONG $0xc86e0f66                   // movd    xmm1, eax
	LONG $0xd26e0f66                   // movd    xmm2, edx
	LONG $0xde6e0f66                   // movd    xmm3, esi
	LONG $0x6f048d4a                   // lea    rax, [rdi + 2*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2600f66                   // punpcklbw    xmm2, xmm2
	LONG $0xdb600f66                   // punpcklbw    xmm3, xmm3
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0xc0610f66                   // punpcklwd    xmm0, xmm0
	LONG $0xc9610f66                   // punpcklwd    xmm1, xmm1
	LONG $0xd2700ff2; BYTE $0x00       // pshuflw    xmm2, xmm2, 0
	LONG $0xdb700ff2; BYTE $0x00       // pshuflw    xmm3, xmm3, 0
	LONG $0x24848948; LONG $0x00000088 // mov    qword [rsp + 136], rax
	LONG $0x98048d48                   // lea    rax, [rax + 4*rbx]
	LONG $0xc1610f66                   // punpcklwd    xmm0, xmm1
	LONG $0x700f4466; WORD $0x50e2     // pshufd    xmm12, xmm2, 80
	LONG $0x700f4466; WORD $0x50eb     // pshufd    xmm13, xmm3, 80
	LONG $0xa8048d4a                   // lea    rax, [rax + 4*r13]
	LONG $0x24848948; LONG $0x000000a0 // mov    qword [rsp + 160], rax
	LONG $0xf8438d49                   // lea    rax, [r11 - 8]
	LONG $0x24848948; LONG $0x00000080 // mov    qword [rsp + 128], rax
	LONG $0x03e8c148                   // shr    rax, 3
	WORD $0x488d; BYTE $0x01           // lea    ecx, [rax + 1]
	WORD $0xe183; BYTE $0x03           // and    ecx, 3
	WORD $0x8948; BYTE $0xca           // mov    rdx, rcx
	LONG $0x24948948; LONG $0x00000090 // mov    qword [rsp + 144], rdx
	LONG $0x24748b48; BYTE $0x18       // mov    rsi, qword [rsp + 24]
	LONG $0x04eec148                   // shr    rsi, 4
	WORD $0x8948; BYTE $0xf1           // mov    rcx, rsi
	LONG $0x07e1c148                   // shl    rcx, 7
	LONG $0x245c8b48; BYTE $0x30       // mov    rbx, qword [rsp + 48]
	LONG $0x04ebc148                   // shr    rbx, 4
	WORD $0x8949; BYTE $0xdf           // mov    r15, rbx
	LONG $0x05e7c149                   // shl    r15, 5
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x244c8b48; BYTE $0xd8       // mov    rcx, qword -40[rsp] /* [rbp + 64] */
	LONG $0x397c8d4a; BYTE $0x10       // lea    rdi, [rcx + r15 + 16]
	WORD $0xff48; BYTE $0xca           // dec    rdx
	WORD $0x2948; BYTE $0xc2           // sub    rdx, rax
	LONG $0x24948948; LONG $0x000000b0 // mov    qword [rsp + 176], rdx
	LONG $0x39048d4a                   // lea    rax, [rcx + r15]
	LONG $0x24848948; LONG $0x000000a8 // mov    qword [rsp + 168], rax
	LONG $0x9d048d4a; LONG $0x00000000 // lea    rax, [4*r11]
	LONG $0x9f048d4f                   // lea    r8, [r15 + 4*r11]
	WORD $0x2949; BYTE $0xc7           // sub    r15, rax
	WORD $0x8949; BYTE $0xf5           // mov    r13, rsi
	LONG $0x05e5c149                   // shl    r13, 5
	LONG $0x76048d48                   // lea    rax, [rsi + 2*rsi]
	LONG $0x06e0c148                   // shl    rax, 6
	LONG $0x5b1c8d48                   // lea    rbx, [rbx + 2*rbx]
	LONG $0x05e3c148                   // shl    rbx, 5
	WORD $0x0148; BYTE $0xc3           // add    rbx, rax
	LONG $0x29548d4a; BYTE $0x30       // lea    rdx, [rcx + r13 + 48]
	WORD $0x0149; BYTE $0xcd           // add    r13, rcx
	LONG $0x01548d4e; BYTE $0x04       // lea    r10, [rcx + r8 + 4]
	WORD $0x0149; BYTE $0xcf           // add    r15, rcx
	LONG $0x19448d4c; BYTE $0x04       // lea    r8, [rcx + rbx + 4]
	LONG $0x24448b48; BYTE $0x40       // mov    rax, qword [rsp + 64]
	WORD $0x294c; BYTE $0xd8           // sub    rax, r11
	LONG $0x24448948; BYTE $0x68       // mov    qword [rsp + 104], rax
	WORD $0x894d; BYTE $0xd9           // mov    r9, r11
	WORD $0xf749; BYTE $0xd1           // not    r9
	LONG $0x244c8d49; BYTE $0xff       // lea    rcx, [r12 - 1]
	LONG $0x04e9c148                   // shr    rcx, 4
	WORD $0x718d; BYTE $0x01           // lea    esi, [rcx + 1]
	WORD $0xe683; BYTE $0x01           // and    esi, 1
	LONG $0x24748b4c; BYTE $0x48       // mov    r14, qword [rsp + 72]
	WORD $0x8944; BYTE $0xf0           // mov    eax, r14d
	WORD $0xe083; BYTE $0x01           // and    eax, 1
	LONG $0x24448948; BYTE $0x70       // mov    qword [rsp + 112], rax
	WORD $0x2949; BYTE $0xc6           // sub    r14, rax
	WORD $0x894c; BYTE $0xd8           // mov    rax, r11
	LONG $0xf8e08348                   // and    rax, -8
	LONG $0x24848948; LONG $0x00000098 // mov    qword [rsp + 152], rax
	WORD $0x894c; BYTE $0xd8           // mov    rax, r11
	LONG $0x44af0f48; WORD $0x0824     // imul    rax, qword [rsp + 8]
	LONG $0x241c8b48                   // mov    rbx, qword [rsp]
	LONG $0x03448d48; BYTE $0x10       // lea    rax, [rbx + rax + 16]
	LONG $0x24448948; BYTE $0x28       // mov    qword [rsp + 40], rax
	LONG $0x24748948; BYTE $0x78       // mov    qword [rsp + 120], rsi
	LONG $0xff468d48                   // lea    rax, [rsi - 1]
	LONG $0x244c8948; BYTE $0x60       // mov    qword [rsp + 96], rcx
	WORD $0x2948; BYTE $0xc8           // sub    rax, rcx
	LONG $0x24448948; BYTE $0x50       // mov    qword [rsp + 80], rax
	LONG $0x24448b48; BYTE $0x08       // mov    rax, qword [rsp + 8]
	WORD $0x894c; BYTE $0xce           // mov    rsi, r9
	LONG $0x24748948; BYTE $0x58       // mov    qword [rsp + 88], rsi
	LONG $0xc1af0f49                   // imul    rax, r9
	LONG $0x240c8b48                   // mov    rcx, qword [rsp]
	LONG $0x01448d48; BYTE $0x10       // lea    rax, [rcx + rax + 16]
	LONG $0x24448948; BYTE $0x10       // mov    qword [rsp + 16], rax
	LONG $0x245c8b48; BYTE $0xc0       // mov    rbx, qword -64[rsp] /* [rbp + 40] */
	LONG $0x24848b48; LONG $0x00000090 // mov    rax, qword [rsp + 144]
	WORD $0xf748; BYTE $0xd8           // neg    rax
	LONG $0x24848948; LONG $0x000000b8 // mov    qword [rsp + 184], rax
	LONG $0x6f0f4466; WORD $0x0045     // movdqa    xmm8, oword 0[rbp] /* [rip + .LCPI1_0] */
	LONG $0x6f0f4466; WORD $0x0055     // movdqa    xmm10, oword 0[rbp] /* [rip + .LCPI1_1] */
	LONG $0x6f0f4466; WORD $0x105d     // movdqa    xmm11, oword 16[rbp] /* [rip + .LCPI1_2] */
	LONG $0xf6ef0f66                   // pxor    xmm6, xmm6
	WORD $0x3145; BYTE $0xc9           // xor    r9d, r9d
	LONG $0x2474894c; BYTE $0x30       // mov    qword [rsp + 48], r14

LBB1_133:
	LONG $0x245c8948; BYTE $0x18   // mov    qword [rsp + 24], rbx
	LONG $0x244c3b4c; BYTE $0x68   // cmp    r9, qword [rsp + 104]
	LONG $0x24748b48; BYTE $0x08   // mov    rsi, qword [rsp + 8]
	WORD $0x894c; BYTE $0xcb       // mov    rbx, r9
	JAE  LBB1_142
	WORD $0x894c; BYTE $0xd8       // mov    rax, r11
	WORD $0x8949; BYTE $0xdb       // mov    r11, rbx
	WORD $0x8948; BYTE $0xc1       // mov    rcx, rax
	LONG $0x030c8d4c               // lea    r9, [rbx + rax]
	LONG $0xceaf0f4c               // imul    r9, rsi
	LONG $0x240c034c               // add    r9, qword [rsp]
	WORD $0x854d; BYTE $0xe4       // test    r12, r12
	JE   LBB1_140
	LONG $0x247c8348; WORD $0x0060 // cmp    qword [rsp + 96], 0
	LONG $0x000000bb; BYTE $0x00   // mov    ebx, 0
	JE   LBB1_138
	LONG $0x24448b48; BYTE $0x50   // mov    rax, qword [rsp + 80]
	LONG $0x24748b48; BYTE $0x28   // mov    rsi, qword [rsp + 40]
	WORD $0xdb31                   // xor    ebx, ebx

LBB1_137:
	LONG $0x5e6f0ff3; BYTE $0xf0   // movdqu    xmm3, oword [rsi - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xd8   // pand    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x7cfc0f66; WORD $0xd05a // paddb    xmm7, oword [rdx + 2*rbx - 48]
	LONG $0x7c7f0f66; WORD $0xd05a // movdqa    oword [rdx + 2*rbx - 48], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x5cfc0f66; WORD $0xe05a // paddb    xmm3, oword [rdx + 2*rbx - 32]
	LONG $0x5c7f0f66; WORD $0xe05a // movdqa    oword [rdx + 2*rbx - 32], xmm3
	LONG $0x1e6f0ff3               // movdqu    xmm3, oword [rsi]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xd8   // pand    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x7cfc0f66; WORD $0xf05a // paddb    xmm7, oword [rdx + 2*rbx - 16]
	LONG $0x7c7f0f66; WORD $0xf05a // movdqa    oword [rdx + 2*rbx - 16], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x1cfc0f66; BYTE $0x5a   // paddb    xmm3, oword [rdx + 2*rbx]
	LONG $0x1c7f0f66; BYTE $0x5a   // movdqa    oword [rdx + 2*rbx], xmm3
	LONG $0x20c38348               // add    rbx, 32
	LONG $0x20c68348               // add    rsi, 32
	LONG $0x02c08348               // add    rax, 2
	JNE  LBB1_137

LBB1_138:
	LONG $0x247c8348; WORD $0x0078 // cmp    qword [rsp + 120], 0
	LONG $0x24748b48; BYTE $0x08   // mov    rsi, qword [rsp + 8]
	JE   LBB1_140
	LONG $0x6f0f41f3; WORD $0x191c // movdqu    xmm3, oword [r9 + rbx]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xd8   // pand    xmm3, xmm8
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa   // punpcklbw    xmm7, xmm10
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword [rsp + 56]
	LONG $0x3cfc0f66; BYTE $0x58   // paddb    xmm7, oword [rax + 2*rbx]
	LONG $0x3c7f0f66; BYTE $0x58   // movdqa    oword [rax + 2*rbx], xmm7
	LONG $0x680f4166; BYTE $0xdb   // punpckhbw    xmm3, xmm11
	LONG $0x5cfc0f66; WORD $0x1058 // paddb    xmm3, oword [rax + 2*rbx + 16]
	LONG $0x5c7f0f66; WORD $0x1058 // movdqa    oword [rax + 2*rbx + 16], xmm3

LBB1_140:
	LONG $0x24643b4c; BYTE $0x48               // cmp    r12, qword [rsp + 72]
	WORD $0x894c; BYTE $0xdb                   // mov    rbx, r11
	WORD $0x8949; BYTE $0xcb                   // mov    r11, rcx
	JE   LBB1_142
	LONG $0x244c8b48; BYTE $0x48               // mov    rcx, qword [rsp + 72]
	LONG $0x6f0f41f3; WORD $0x097c; BYTE $0xf0 // movdqu    xmm7, oword [r9 + rcx - 16]
	LONG $0x740f4166; BYTE $0xff               // pcmpeqb    xmm7, xmm15
	LONG $0xdb0f4166; BYTE $0xfe               // pand    xmm7, xmm14
	LONG $0x24448b48; BYTE $0x38               // mov    rax, qword [rsp + 56]
	LONG $0x6f0f44f3; WORD $0x484c; BYTE $0xe0 // movdqu    xmm9, oword [rax + 2*rcx - 32]
	LONG $0xdf6f0f66                           // movdqa    xmm3, xmm7
	LONG $0x600f4166; BYTE $0xde               // punpcklbw    xmm3, xmm14
	LONG $0xfc0f4166; BYTE $0xd9               // paddb    xmm3, xmm9
	LONG $0x5c7f0ff3; WORD $0xe048             // movdqu    oword [rax + 2*rcx - 32], xmm3
	LONG $0x5c6f0ff3; WORD $0xf048             // movdqu    xmm3, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xfe               // punpckhbw    xmm7, xmm14
	LONG $0xfbfc0f66                           // paddb    xmm7, xmm3
	LONG $0x7c7f0ff3; WORD $0xf048             // movdqu    oword [rax + 2*rcx - 16], xmm7

LBB1_142:
	WORD $0x394c; BYTE $0xdb       // cmp    rbx, r11
	WORD $0x8949; BYTE $0xd9       // mov    r9, rbx
	JBE  LBB1_151
	LONG $0x24448b48; BYTE $0x58   // mov    rax, qword [rsp + 88]
	LONG $0x01048d49               // lea    rax, [r9 + rax]
	LONG $0xc6af0f48               // imul    rax, rsi
	LONG $0x24040348               // add    rax, qword [rsp]
	WORD $0x854d; BYTE $0xe4       // test    r12, r12
	JE   LBB1_149
	WORD $0x894c; BYTE $0xce       // mov    rsi, r9
	LONG $0x247c8348; WORD $0x0060 // cmp    qword [rsp + 96], 0
	LONG $0x0000bb41; WORD $0x0000 // mov    r11d, 0
	JE   LBB1_147
	LONG $0x245c8b48; BYTE $0x50   // mov    rbx, qword [rsp + 80]
	LONG $0x244c8b4c; BYTE $0x10   // mov    r9, qword [rsp + 16]
	WORD $0x3145; BYTE $0xdb       // xor    r11d, r11d

LBB1_146:
	LONG $0x6f0f41f3; WORD $0xf059             // movdqu    xmm3, oword [r9 - 16]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0xd0 // movdqa    xmm4, oword [rdx + 2*r11 - 48]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0xd0 // movdqa    oword [rdx + 2*r11 - 48], xmm4
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0xe0 // movdqa    xmm4, oword [rdx + 2*r11 - 32]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0xe0 // movdqa    oword [rdx + 2*r11 - 32], xmm4
	LONG $0x6f0f41f3; BYTE $0x19               // movdqu    xmm3, oword [r9]
	LONG $0x740f4166; BYTE $0xdf               // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xd8               // pand    xmm3, xmm8
	LONG $0x6f0f4266; WORD $0x5a64; BYTE $0xf0 // movdqa    xmm4, oword [rdx + 2*r11 - 16]
	LONG $0xfb6f0f66                           // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfa               // punpcklbw    xmm7, xmm10
	LONG $0xe7f80f66                           // psubb    xmm4, xmm7
	LONG $0x7f0f4266; WORD $0x5a64; BYTE $0xf0 // movdqa    oword [rdx + 2*r11 - 16], xmm4
	LONG $0x6f0f4266; WORD $0x5a24             // movdqa    xmm4, oword [rdx + 2*r11]
	LONG $0x680f4166; BYTE $0xdb               // punpckhbw    xmm3, xmm11
	LONG $0xe3f80f66                           // psubb    xmm4, xmm3
	LONG $0x7f0f4266; WORD $0x5a24             // movdqa    oword [rdx + 2*r11], xmm4
	LONG $0x20c38349                           // add    r11, 32
	LONG $0x20c18349                           // add    r9, 32
	LONG $0x02c38348                           // add    rbx, 2
	JNE  LBB1_146

LBB1_147:
	LONG $0x247c8348; WORD $0x0078             // cmp    qword [rsp + 120], 0
	WORD $0x8949; BYTE $0xf1                   // mov    r9, rsi
	JE   LBB1_149
	LONG $0x6f0f42f3; WORD $0x1824             // movdqu    xmm4, oword [rax + r11]
	LONG $0x740f4166; BYTE $0xe7               // pcmpeqb    xmm4, xmm15
	LONG $0xdb0f4166; BYTE $0xe0               // pand    xmm4, xmm8
	LONG $0x24748b48; BYTE $0x38               // mov    rsi, qword [rsp + 56]
	LONG $0x6f0f4266; WORD $0x5e3c             // movdqa    xmm7, oword [rsi + 2*r11]
	LONG $0xdc6f0f66                           // movdqa    xmm3, xmm4
	LONG $0x600f4166; BYTE $0xda               // punpcklbw    xmm3, xmm10
	LONG $0xfbf80f66                           // psubb    xmm7, xmm3
	LONG $0x7f0f4266; WORD $0x5e3c             // movdqa    oword [rsi + 2*r11], xmm7
	LONG $0x6f0f4266; WORD $0x5e5c; BYTE $0x10 // movdqa    xmm3, oword [rsi + 2*r11 + 16]
	LONG $0x680f4166; BYTE $0xe3               // punpckhbw    xmm4, xmm11
	LONG $0xdcf80f66                           // psubb    xmm3, xmm4
	LONG $0x7f0f4266; WORD $0x5e5c; BYTE $0x10 // movdqa    oword [rsi + 2*r11 + 16], xmm3

LBB1_149:
	LONG $0x24643b4c; BYTE $0x48   // cmp    r12, qword [rsp + 72]
	LONG $0x245c8b4c; BYTE $0x20   // mov    r11, qword [rsp + 32]
	JE   LBB1_151
	LONG $0x244c8b48; BYTE $0x48   // mov    rcx, qword [rsp + 72]
	LONG $0x5c6f0ff3; WORD $0xf008 // movdqu    xmm3, oword [rax + rcx - 16]
	LONG $0x740f4166; BYTE $0xdf   // pcmpeqb    xmm3, xmm15
	LONG $0xdb0f4166; BYTE $0xde   // pand    xmm3, xmm14
	LONG $0x24448b48; BYTE $0x38   // mov    rax, qword [rsp + 56]
	LONG $0x646f0ff3; WORD $0xe048 // movdqu    xmm4, oword [rax + 2*rcx - 32]
	LONG $0xfb6f0f66               // movdqa    xmm7, xmm3
	LONG $0x600f4166; BYTE $0xfe   // punpcklbw    xmm7, xmm14
	LONG $0xe7f80f66               // psubb    xmm4, xmm7
	LONG $0x647f0ff3; WORD $0xe048 // movdqu    oword [rax + 2*rcx - 32], xmm4
	LONG $0x646f0ff3; WORD $0xf048 // movdqu    xmm4, oword [rax + 2*rcx - 16]
	LONG $0x680f4166; BYTE $0xde   // punpckhbw    xmm3, xmm14
	LONG $0xe3f80f66               // psubb    xmm4, xmm3
	LONG $0x647f0ff3; WORD $0xf048 // movdqu    oword [rax + 2*rcx - 16], xmm4

LBB1_151:
	LONG $0x244c8b48; BYTE $0x48 // mov    rcx, qword [rsp + 72]
	WORD $0x8548; BYTE $0xc9     // test    rcx, rcx
	JE   LBB1_154
	WORD $0xc031                 // xor    eax, eax

LBB1_153:
	LONG $0x6f0f4166; WORD $0x454c; BYTE $0x00 // movdqa    xmm1, oword [r13 + 2*rax]
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xd6600f66                           // punpcklbw    xmm2, xmm6
	LONG $0x547f0f66; WORD $0xf087             // movdqa    oword [rdi + 4*rax - 16], xmm2
	LONG $0xce680f66                           // punpckhbw    xmm1, xmm6
	LONG $0x0c7f0f66; BYTE $0x87               // movdqa    oword [rdi + 4*rax], xmm1
	LONG $0x08c08348                           // add    rax, 8
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JB   LBB1_153

LBB1_154:
	WORD $0xc031                                   // xor    eax, eax
	WORD $0x854d; BYTE $0xdb                       // test    r11, r11
	JE   LBB1_168
	WORD $0xf631                                   // xor    esi, esi
	LONG $0x07fb8349                               // cmp    r11, 7
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JBE  LBB1_156
	WORD $0xf631                                   // xor    esi, esi
	LONG $0x24bc8348; LONG $0x00000098; BYTE $0x00 // cmp    qword [rsp + 152], 0
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	JE   LBB1_156
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24bc8348; LONG $0x00000080; BYTE $0x18 // cmp    qword [rsp + 128], 24
	LONG $0x000000b8; BYTE $0x00                   // mov    eax, 0
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3
	JB   LBB1_164
	LONG $0xffef0f66                               // pxor    xmm7, xmm7
	LONG $0x24b48b48; LONG $0x000000b0             // mov    rsi, qword [rsp + 176]
	WORD $0xc031                                   // xor    eax, eax
	LONG $0xdbef0f66                               // pxor    xmm3, xmm3

LBB1_163:
	LONG $0x646f0ff3; WORD $0xf087 // movdqu    xmm4, oword [rdi + 4*rax - 16]
	LONG $0x2c6f0ff3; BYTE $0x87   // movdqu    xmm5, oword [rdi + 4*rax]
	LONG $0xe7fe0f66               // paddd    xmm4, xmm7
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0x5c6f0ff3; WORD $0x1087 // movdqu    xmm3, oword [rdi + 4*rax + 16]
	LONG $0x7c6f0ff3; WORD $0x2087 // movdqu    xmm7, oword [rdi + 4*rax + 32]
	LONG $0x4c6f0ff3; WORD $0x3087 // movdqu    xmm1, oword [rdi + 4*rax + 48]
	LONG $0x546f0ff3; WORD $0x4087 // movdqu    xmm2, oword [rdi + 4*rax + 64]
	LONG $0xcbfe0f66               // paddd    xmm1, xmm3
	LONG $0xccfe0f66               // paddd    xmm1, xmm4
	LONG $0xd7fe0f66               // paddd    xmm2, xmm7
	LONG $0xd5fe0f66               // paddd    xmm2, xmm5
	LONG $0x7c6f0ff3; WORD $0x5087 // movdqu    xmm7, oword [rdi + 4*rax + 80]
	LONG $0x5c6f0ff3; WORD $0x6087 // movdqu    xmm3, oword [rdi + 4*rax + 96]
	LONG $0xf9fe0f66               // paddd    xmm7, xmm1
	LONG $0xdafe0f66               // paddd    xmm3, xmm2
	LONG $0x20c08348               // add    rax, 32
	LONG $0x04c68348               // add    rsi, 4
	JNE  LBB1_163

LBB1_164:
	LONG $0x24bc8348; LONG $0x00000090; BYTE $0x00 // cmp    qword [rsp + 144], 0
	JE   LBB1_167
	LONG $0x87048d48                               // lea    rax, [rdi + 4*rax]
	LONG $0x24b48b48; LONG $0x000000b8             // mov    rsi, qword [rsp + 184]

LBB1_166:
	LONG $0x486f0ff3; BYTE $0xf0 // movdqu    xmm1, oword [rax - 16]
	LONG $0x106f0ff3             // movdqu    xmm2, oword [rax]
	LONG $0xf9fe0f66             // paddd    xmm7, xmm1
	LONG $0xdafe0f66             // paddd    xmm3, xmm2
	LONG $0x20c08348             // add    rax, 32
	WORD $0xff48; BYTE $0xc6     // inc    rsi
	JNE  LBB1_166

LBB1_167:
	LONG $0x24b48b48; LONG $0x00000098 // mov    rsi, qword [rsp + 152]
	WORD $0x394c; BYTE $0xde           // cmp    rsi, r11
	LONG $0xfbfe0f66                   // paddd    xmm7, xmm3
	LONG $0xcf700f66; BYTE $0x4e       // pshufd    xmm1, xmm7, 78
	LONG $0xcffe0f66                   // paddd    xmm1, xmm7
	LONG $0xd1700f66; BYTE $0xe5       // pshufd    xmm2, xmm1, 229
	LONG $0xd1fe0f66                   // paddd    xmm2, xmm1
	LONG $0xd07e0f66                   // movd    eax, xmm2
	JE   LBB1_168

LBB1_156:
	WORD $0x894c; BYTE $0xdb           // mov    rbx, r11
	WORD $0x2948; BYTE $0xf3           // sub    rbx, rsi
	LONG $0x248c8b48; LONG $0x000000a8 // mov    rcx, qword [rsp + 168]
	LONG $0xb1348d48                   // lea    rsi, [rcx + 4*rsi]
	LONG $0x24748b4c; BYTE $0x30       // mov    r14, qword [rsp + 48]

LBB1_157:
	WORD $0x0603             // add    eax, dword [rsi]
	LONG $0x04c68348         // add    rsi, 4
	WORD $0xff48; BYTE $0xcb // dec    rbx
	JNE  LBB1_157

LBB1_168:
	LONG $0x247c8348; WORD $0x0048 // cmp    qword [rsp + 72], 0
	LONG $0x245c8b48; BYTE $0x18   // mov    rbx, qword [rsp + 24]
	JE   LBB1_173
	LONG $0x247c8348; WORD $0x0148 // cmp    qword [rsp + 72], 1
	JNE  LBB1_179
	WORD $0xf631                   // xor    esi, esi
	JMP  LBB1_171

LBB1_179:
	WORD $0xf631 // xor    esi, esi

LBB1_180:
	LONG $0xb2440341; BYTE $0xfc // add    eax, dword [r10 + 4*rsi - 4]
	LONG $0xb7442b41; BYTE $0xfc // sub    eax, dword [r15 + 4*rsi - 4]
	LONG $0xb0448941; BYTE $0xfc // mov    dword [r8 + 4*rsi - 4], eax
	LONG $0xb2040341             // add    eax, dword [r10 + 4*rsi]
	LONG $0xb7042b41             // sub    eax, dword [r15 + 4*rsi]
	LONG $0xb0048941             // mov    dword [r8 + 4*rsi], eax
	LONG $0x02c68348             // add    rsi, 2
	WORD $0x3949; BYTE $0xf6     // cmp    r14, rsi
	JNE  LBB1_180

LBB1_171:
	LONG $0x247c8348; WORD $0x0070     // cmp    qword [rsp + 112], 0
	JE   LBB1_173
	LONG $0x1e1c8d4a                   // lea    rbx, [rsi + r11]
	LONG $0x248c8b48; LONG $0x00000088 // mov    rcx, qword [rsp + 136]
	WORD $0x0403; BYTE $0x99           // add    eax, dword [rcx + 4*rbx]
	LONG $0x245c8b48; BYTE $0x58       // mov    rbx, qword [rsp + 88]
	LONG $0x1e1c8d48                   // lea    rbx, [rsi + rbx]
	WORD $0x042b; BYTE $0x99           // sub    eax, dword [rcx + 4*rbx]
	LONG $0x24748b4c; BYTE $0x30       // mov    r14, qword [rsp + 48]
	WORD $0x894c; BYTE $0xc9           // mov    rcx, r9
	LONG $0x248c8b4c; LONG $0x000000a0 // mov    r9, qword [rsp + 160]
	LONG $0x245c8b48; BYTE $0x18       // mov    rbx, qword [rsp + 24]
	LONG $0xb1048941                   // mov    dword [r9 + 4*rsi], eax
	WORD $0x8949; BYTE $0xc9           // mov    r9, rcx

LBB1_173:
	WORD $0x854d; BYTE $0xe4 // test    r12, r12
	JE   LBB1_176
	WORD $0xc031             // xor    eax, eax

LBB1_175:
	LONG $0x6f0f4166; WORD $0x804c; BYTE $0xfc // movdqa    xmm1, oword [r8 + 4*rax - 4]
	LONG $0xc8f50f66                           // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                           // pcmpgtd    xmm1, xmm6
	LONG $0x6f0f4166; WORD $0x8054; BYTE $0x0c // movdqa    xmm2, oword [r8 + 4*rax + 12]
	LONG $0xd0f50f66                           // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                           // pcmpgtd    xmm2, xmm6
	LONG $0x6f0f4166; WORD $0x805c; BYTE $0x1c // movdqa    xmm3, oword [r8 + 4*rax + 28]
	LONG $0xd8f50f66                           // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                           // pcmpgtd    xmm3, xmm6
	LONG $0x6f0f4166; WORD $0x8064; BYTE $0x2c // movdqa    xmm4, oword [r8 + 4*rax + 44]
	LONG $0xe0f50f66                           // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                           // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                           // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                           // packssdw    xmm3, xmm4
	LONG $0xcb630f66                           // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                           // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4               // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd               // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                           // por    xmm1, xmm2
	LONG $0x0c7f0ff3; BYTE $0x03               // movdqu    oword [rbx + rax], xmm1
	LONG $0x10c08348                           // add    rax, 16
	WORD $0x394c; BYTE $0xe0                   // cmp    rax, r12
	JB   LBB1_175

LBB1_176:
	LONG $0x24643b4c; BYTE $0x48       // cmp    r12, qword [rsp + 72]
	LONG $0x24448b48; BYTE $0x08       // mov    rax, qword [rsp + 8]
	JE   LBB1_178
	LONG $0x248c8b48; LONG $0x000000a0 // mov    rcx, qword [rsp + 160]
	LONG $0x24748b48; BYTE $0x48       // mov    rsi, qword [rsp + 72]
	LONG $0x4c6f0ff3; WORD $0xc0b1     // movdqu    xmm1, oword [rcx + 4*rsi - 64]
	LONG $0xc8f50f66                   // pmaddwd    xmm1, xmm0
	LONG $0xce660f66                   // pcmpgtd    xmm1, xmm6
	LONG $0x546f0ff3; WORD $0xd0b1     // movdqu    xmm2, oword [rcx + 4*rsi - 48]
	LONG $0xd0f50f66                   // pmaddwd    xmm2, xmm0
	LONG $0xd6660f66                   // pcmpgtd    xmm2, xmm6
	LONG $0x5c6f0ff3; WORD $0xe0b1     // movdqu    xmm3, oword [rcx + 4*rsi - 32]
	LONG $0xd8f50f66                   // pmaddwd    xmm3, xmm0
	LONG $0xde660f66                   // pcmpgtd    xmm3, xmm6
	LONG $0x646f0ff3; WORD $0xf0b1     // movdqu    xmm4, oword [rcx + 4*rsi - 16]
	LONG $0x24748b4c; BYTE $0x30       // mov    r14, qword [rsp + 48]
	LONG $0xe0f50f66                   // pmaddwd    xmm4, xmm0
	LONG $0xe6660f66                   // pcmpgtd    xmm4, xmm6
	LONG $0xca6b0f66                   // packssdw    xmm1, xmm2
	LONG $0xdc6b0f66                   // packssdw    xmm3, xmm4
	LONG $0xcb630f66                   // packsswb    xmm1, xmm3
	LONG $0xd16f0f66                   // movdqa    xmm2, xmm1
	LONG $0xdb0f4166; BYTE $0xd4       // pand    xmm2, xmm12
	LONG $0xdf0f4166; BYTE $0xcd       // pandn    xmm1, xmm13
	LONG $0xcaeb0f66                   // por    xmm1, xmm2
	LONG $0x4c7f0ff3; WORD $0xf033     // movdqu    oword [rbx + rsi - 16], xmm1

LBB1_178:
	LONG $0x245c0348; BYTE $0xc8 // add    rbx, qword -56[rsp] /* [rbp + 48] */
	WORD $0xff49; BYTE $0xc1     // inc    r9
	LONG $0x24440148; BYTE $0x28 // add    qword [rsp + 40], rax
	LONG $0x24440148; BYTE $0x10 // add    qword [rsp + 16], rax
	LONG $0x244c3b4c; BYTE $0x40 // cmp    r9, qword [rsp + 64]
	JNE  LBB1_133

LBB1_929:
	MOVQ -32(SP), SP
	RET

TEXT Â·_SimdSse2AveragingBinarizationBufAllocSize(SB), 7, $0-24

	MOVQ arg1+0(FP), DI
	MOVQ arg2+8(FP), SI

	LONG $0x0fc78348             // add    rdi, 15
	LONG $0xf0e78348             // and    rdi, -16
	LONG $0x36448d48; BYTE $0x20 // lea    rax, [rsi + rsi + 32]
	LONG $0xe0e08348             // and    rax, -32
	LONG $0x380c8d48             // lea    rcx, [rax + rdi]
	LONG $0x78048d48             // lea    rax, [rax + 2*rdi]
	LONG $0x02e0c148             // shl    rax, 2
	LONG $0x48048d48             // lea    rax, [rax + 2*rcx]

	MOVQ AX, ret+16(FP)
	RET
